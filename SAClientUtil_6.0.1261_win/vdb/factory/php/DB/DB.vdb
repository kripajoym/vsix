<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<LanguageDependentDB>
  <Header language="php" version="3.0.0">
    <description># # Ounce Labs Confidential # # Copyright (c) 2003, 2004 Ounce Labs, Inc. All-Rights Reserved. # # &lt;a href="http://www.ouncelabs.com"&gt;Ounce Labs&lt;/a&gt; # # This software and documentation constitute an unpublished work and contains # valuable trade secrets and proprietary information belonging to Ounce Labs. # None of the foregoing material may be copied, duplicated or disclosed # without the express written permission of Ounce Labs. #</description>
  </Header>
  <api_info>
    <class name="DB">
      <method vuln_id="1090466">
        <simple_name>DB.apiVersion</simple_name>
        <signature>DB.apiVersion():string</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="-1">
        <simple_name>DB.assertExtension</simple_name>
        <signature>DB.assertExtension($name):mixed</signature>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1107779">
        <simple_name>DB.connect</simple_name>
        <signature>DB.connect($dsn;$options):object</signature>
        <rule>
          <ActionObject id="450969">
            <signature>OptionBasedTester</signature>
            <option max_confidence="Low" operator="compile_time_constant" option_name="argument_value" parameter_position="1" value=""/>
          </ActionObject>
          <severity>Medium</severity>
          <vulnerability_type>Vulnerability.Authentication.Entity</vulnerability_type>
        </rule>
        <sink_rule id="450970">
          <severity>Low</severity>
          <vulnerability_type>Vulnerability.PrivilegeEscalation.ClassLoader</vulnerability_type>
          <taint_susceptible_input param="1"/>
        </sink_rule>
        <propagates_taint dst_param="none" return="true" source_param="1,2"/>
        <property>Attribute.Modifier.Public</property>
        <comment>It would be nice to parse the dsn string to determine if their really is a hard coded password</comment>
      </method>
      <method vuln_id="1090479">
        <simple_name>DB.errorMessage</simple_name>
        <signature>DB.errorMessage($value):string</signature>
        <rule>
          <ActionObject id="450973">
            <signature>AnyLow</signature>
          </ActionObject>
          <severity>Low</severity>
          <vulnerability_type>Vulnerability.ErrorHandling.RevealDetails.Message</vulnerability_type>
        </rule>
        <propagates_taint dst_param="this" return="true" source_param="this,1"/>
        <property>Mechanism.ErrorHandling</property>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1107780">
        <simple_name>DB.factory</simple_name>
        <signature>DB.factory($type;$options):object</signature>
        <rule>
          <ActionObject id="450966">
            <signature>OptionBasedTester</signature>
            <option max_confidence="Low" operator="compile_time_constant" option_name="argument_value" parameter_position="1" value=""/>
          </ActionObject>
          <severity>Medium</severity>
          <vulnerability_type>Vulnerability.Authentication.Entity</vulnerability_type>
        </rule>
        <sink_rule id="450967">
          <severity>Low</severity>
          <vulnerability_type>Vulnerability.PrivilegeEscalation.ClassLoader</vulnerability_type>
          <taint_susceptible_input param="1"/>
        </sink_rule>
        <propagates_taint dst_param="none" return="true" source_param="1,2"/>
        <property>Attribute.Modifier.Public</property>
        <comment>calls classload internal but the dsn param is not just the class name so we don't mark as a class factory</comment>
      </method>
      <method vuln_id="1090477">
        <simple_name>DB.getDSNString</simple_name>
        <signature>DB.getDSNString($dsn;$hidePassword):string</signature>
        <propagates_taint dst_param="none" return="true" source_param="1"/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1090476">
        <simple_name>DB.isConnection</simple_name>
        <signature>DB.isConnection($value):bool</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1090475">
        <simple_name>DB.isError</simple_name>
        <signature>DB.isError($value):bool</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1107781">
        <simple_name>DB.isManip</simple_name>
        <signature>DB.isManip($query):bool</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1090478">
        <simple_name>DB.parseDSN</simple_name>
        <signature>DB.parseDSN($dsn):array</signature>
        <propagates_taint dst_param="none" return="true" source_param="1"/>
        <property>Attribute.Modifier.Public</property>
      </method>
    </class>
    <class name="DB">
      <method vuln_id="1090466">
        <simple_name>DB.apiVersion</simple_name>
        <signature>DB.apiVersion():string</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="-1">
        <simple_name>DB.assertExtension</simple_name>
        <signature>DB.assertExtension($name):mixed</signature>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1107779">
        <simple_name>DB.connect</simple_name>
        <signature>DB.connect($dsn;$options):object</signature>
        <rule>
          <ActionObject id="450969">
            <signature>OptionBasedTester</signature>
            <option max_confidence="Low" operator="compile_time_constant" option_name="argument_value" parameter_position="1" value=""/>
          </ActionObject>
          <severity>Medium</severity>
          <vulnerability_type>Vulnerability.Authentication.Entity</vulnerability_type>
        </rule>
        <sink_rule id="450970">
          <severity>Low</severity>
          <vulnerability_type>Vulnerability.PrivilegeEscalation.ClassLoader</vulnerability_type>
          <taint_susceptible_input param="1"/>
        </sink_rule>
        <propagates_taint dst_param="none" return="true" source_param="1,2"/>
        <property>Attribute.Modifier.Public</property>
        <comment>It would be nice to parse the dsn string to determine if their really is a hard coded password</comment>
      </method>
      <method vuln_id="1090479">
        <simple_name>DB.errorMessage</simple_name>
        <signature>DB.errorMessage($value):string</signature>
        <rule>
          <ActionObject id="450973">
            <signature>AnyLow</signature>
          </ActionObject>
          <severity>Low</severity>
          <vulnerability_type>Vulnerability.ErrorHandling.RevealDetails.Message</vulnerability_type>
        </rule>
        <propagates_taint dst_param="this" return="true" source_param="this,1"/>
        <property>Mechanism.ErrorHandling</property>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1107780">
        <simple_name>DB.factory</simple_name>
        <signature>DB.factory($type;$options):object</signature>
        <rule>
          <ActionObject id="450966">
            <signature>OptionBasedTester</signature>
            <option max_confidence="Low" operator="compile_time_constant" option_name="argument_value" parameter_position="1" value=""/>
          </ActionObject>
          <severity>Medium</severity>
          <vulnerability_type>Vulnerability.Authentication.Entity</vulnerability_type>
        </rule>
        <sink_rule id="450967">
          <severity>Low</severity>
          <vulnerability_type>Vulnerability.PrivilegeEscalation.ClassLoader</vulnerability_type>
          <taint_susceptible_input param="1"/>
        </sink_rule>
        <propagates_taint dst_param="none" return="true" source_param="1,2"/>
        <property>Attribute.Modifier.Public</property>
        <comment>calls classload internal but the dsn param is not just the class name so we don't mark as a class factory</comment>
      </method>
      <method vuln_id="1090477">
        <simple_name>DB.getDSNString</simple_name>
        <signature>DB.getDSNString($dsn;$hidePassword):string</signature>
        <propagates_taint dst_param="none" return="true" source_param="1"/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1090476">
        <simple_name>DB.isConnection</simple_name>
        <signature>DB.isConnection($value):bool</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1090475">
        <simple_name>DB.isError</simple_name>
        <signature>DB.isError($value):bool</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1107781">
        <simple_name>DB.isManip</simple_name>
        <signature>DB.isManip($query):bool</signature>
        <does_not_propagate_taint/>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="1090478">
        <simple_name>DB.parseDSN</simple_name>
        <signature>DB.parseDSN($dsn):array</signature>
        <propagates_taint dst_param="none" return="true" source_param="1"/>
        <property>Attribute.Modifier.Public</property>
      </method>
    </class>
  </api_info>
</LanguageDependentDB>
