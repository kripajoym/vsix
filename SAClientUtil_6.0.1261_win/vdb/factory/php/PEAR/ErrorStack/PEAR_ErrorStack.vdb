<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<LanguageDependentDB>
  <Header language="php" version="3.0.0">
    <description># # Ounce Labs Confidential # # Copyright (c) 2003, 2004 Ounce Labs, Inc. All-Rights Reserved. # # &lt;a href="http://www.ouncelabs.com"&gt;Ounce Labs&lt;/a&gt; # # This software and documentation constitute an unpublished work and contains # valuable trade secrets and proprietary information belonging to Ounce Labs. # None of the foregoing material may be copied, duplicated or disclosed # without the express written permission of Ounce Labs. #</description>
  </Header>
  <api_info>
    <class name="PEAR_ErrorStack">
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.PEAR_ErrorStack</simple_name>
        <signature>PEAR_ErrorStack.PEAR_ErrorStack($package;$msgCallback;$contextCallback;$throwPEAR_Error):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack._handleError</simple_name>
        <signature>PEAR_ErrorStack._handleError($err):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack._log</simple_name>
        <signature>PEAR_ErrorStack._log($err):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack._sortErrors</simple_name>
        <signature>PEAR_ErrorStack._sortErrors($a;$b):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getErrorMessage</simple_name>
        <signature>PEAR_ErrorStack.getErrorMessage($stack;$err;$template):string</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getErrorMessageTemplate</simple_name>
        <signature>PEAR_ErrorStack.getErrorMessageTemplate($code):string</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getErrors</simple_name>
        <signature>PEAR_ErrorStack.getErrors($purge;$level):array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getFileLine</simple_name>
        <signature>PEAR_ErrorStack.getFileLine($code;$params;$backtrace):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getMessageCallback</simple_name>
        <signature>PEAR_ErrorStack.getMessageCallback():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.hasErrors</simple_name>
        <signature>PEAR_ErrorStack.hasErrors($level):boolean</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.pop</simple_name>
        <signature>PEAR_ErrorStack.pop():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.popCallback</simple_name>
        <signature>PEAR_ErrorStack.popCallback():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.push</simple_name>
        <signature>PEAR_ErrorStack.push($code;$level;$params;$msg;$repackage;$backtrace):PEAR_Error|array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.pushCallback</simple_name>
        <signature>PEAR_ErrorStack.pushCallback($cb):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.raiseError</simple_name>
        <signature>PEAR_ErrorStack.raiseError():PEAR_Error</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setContextCallback</simple_name>
        <signature>PEAR_ErrorStack.setContextCallback($contextCallback):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setDefaultCallback</simple_name>
        <signature>PEAR_ErrorStack.setDefaultCallback($callback;$package):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setDefaultLogger</simple_name>
        <signature>PEAR_ErrorStack.setDefaultLogger($log):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setErrorMessageTemplate</simple_name>
        <signature>PEAR_ErrorStack.setErrorMessageTemplate($template):string</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setLogger</simple_name>
        <signature>PEAR_ErrorStack.setLogger($log):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setMessageCallback</simple_name>
        <signature>PEAR_ErrorStack.setMessageCallback($msgCallback):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.singleton</simple_name>
        <signature>PEAR_ErrorStack.singleton($package;$msgCallback;$contextCallback;$throwPEAR_Error;$stackClass):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticGetErrors</simple_name>
        <signature>PEAR_ErrorStack.staticGetErrors($purge;$level;$merge;$sortfunc):array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticHasErrors</simple_name>
        <signature>PEAR_ErrorStack.staticHasErrors($package;$level):boolean</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPop</simple_name>
        <signature>PEAR_ErrorStack.staticPop($package):boolean</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPopCallback</simple_name>
        <signature>PEAR_ErrorStack.staticPopCallback():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPush</simple_name>
        <signature>PEAR_ErrorStack.staticPush($package;$code;$level;$params;$msg;$repackage;$backtrace):PEAR_Error|array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPush</simple_name>
        <signature>PEAR_ErrorStack.staticPush():Variant</signature>
        <property>Attribute.Modifier.Static</property>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPushCallback</simple_name>
        <signature>PEAR_ErrorStack.staticPushCallback($cb):void</signature>
      </method>
    </class>
    <class name="PEAR_ErrorStack">
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.PEAR_ErrorStack</simple_name>
        <signature>PEAR_ErrorStack.PEAR_ErrorStack($package;$msgCallback;$contextCallback;$throwPEAR_Error):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack._handleError</simple_name>
        <signature>PEAR_ErrorStack._handleError($err):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack._log</simple_name>
        <signature>PEAR_ErrorStack._log($err):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack._sortErrors</simple_name>
        <signature>PEAR_ErrorStack._sortErrors($a;$b):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getErrorMessage</simple_name>
        <signature>PEAR_ErrorStack.getErrorMessage($stack;$err;$template):string</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getErrorMessageTemplate</simple_name>
        <signature>PEAR_ErrorStack.getErrorMessageTemplate($code):string</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getErrors</simple_name>
        <signature>PEAR_ErrorStack.getErrors($purge;$level):array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getFileLine</simple_name>
        <signature>PEAR_ErrorStack.getFileLine($code;$params;$backtrace):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.getMessageCallback</simple_name>
        <signature>PEAR_ErrorStack.getMessageCallback():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.hasErrors</simple_name>
        <signature>PEAR_ErrorStack.hasErrors($level):boolean</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.pop</simple_name>
        <signature>PEAR_ErrorStack.pop():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.popCallback</simple_name>
        <signature>PEAR_ErrorStack.popCallback():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.push</simple_name>
        <signature>PEAR_ErrorStack.push($code;$level;$params;$msg;$repackage;$backtrace):PEAR_Error|array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.pushCallback</simple_name>
        <signature>PEAR_ErrorStack.pushCallback($cb):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.raiseError</simple_name>
        <signature>PEAR_ErrorStack.raiseError():PEAR_Error</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setContextCallback</simple_name>
        <signature>PEAR_ErrorStack.setContextCallback($contextCallback):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setDefaultCallback</simple_name>
        <signature>PEAR_ErrorStack.setDefaultCallback($callback;$package):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setDefaultLogger</simple_name>
        <signature>PEAR_ErrorStack.setDefaultLogger($log):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setErrorMessageTemplate</simple_name>
        <signature>PEAR_ErrorStack.setErrorMessageTemplate($template):string</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setLogger</simple_name>
        <signature>PEAR_ErrorStack.setLogger($log):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.setMessageCallback</simple_name>
        <signature>PEAR_ErrorStack.setMessageCallback($msgCallback):void</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.singleton</simple_name>
        <signature>PEAR_ErrorStack.singleton($package;$msgCallback;$contextCallback;$throwPEAR_Error;$stackClass):mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticGetErrors</simple_name>
        <signature>PEAR_ErrorStack.staticGetErrors($purge;$level;$merge;$sortfunc):array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticHasErrors</simple_name>
        <signature>PEAR_ErrorStack.staticHasErrors($package;$level):boolean</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPop</simple_name>
        <signature>PEAR_ErrorStack.staticPop($package):boolean</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPopCallback</simple_name>
        <signature>PEAR_ErrorStack.staticPopCallback():mixed</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPush</simple_name>
        <signature>PEAR_ErrorStack.staticPush($package;$code;$level;$params;$msg;$repackage;$backtrace):PEAR_Error|array</signature>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPush</simple_name>
        <signature>PEAR_ErrorStack.staticPush():Variant</signature>
        <property>Attribute.Modifier.Static</property>
        <property>Attribute.Modifier.Public</property>
      </method>
      <method vuln_id="-1">
        <simple_name>PEAR_ErrorStack.staticPushCallback</simple_name>
        <signature>PEAR_ErrorStack.staticPushCallback($cb):void</signature>
      </method>
    </class>
  </api_info>
</LanguageDependentDB>
