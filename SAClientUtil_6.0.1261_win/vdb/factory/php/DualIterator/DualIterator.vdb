<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<LanguageDependentDB>
  <Header language="php" version="3.0.0">
    <description># # Ounce Labs Confidential # # Copyright (c) 2003, 2004 Ounce Labs, Inc. All-Rights Reserved. # # &lt;a href="http://www.ouncelabs.com"&gt;Ounce Labs&lt;/a&gt; # # This software and documentation constitute an unpublished work and contains # valuable trade secrets and proprietary information belonging to Ounce Labs. # None of the foregoing material may be copied, duplicated or disclosed # without the express written permission of Ounce Labs. #</description>
  </Header>
  <api_info>
    <class name="DualIterator">
      <method vuln_id="1088997">
        <simple_name>___Php.DualIterator.</simple_name>
        <signature>___Php.DualIterator.():void</signature>
      </method>
      <method vuln_id="1089029">
        <simple_name>___Php.DualIterator.__construct</simple_name>
        <signature>___Php.DualIterator.__construct(___Php.Iterator;___Php.Iterator;int):void</signature>
      </method>
      <method vuln_id="1088716">
        <simple_name>___Php.DualIterator.areEqual</simple_name>
        <signature>___Php.DualIterator.areEqual():bool</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088878">
        <simple_name>___Php.DualIterator.areIdentical</simple_name>
        <signature>___Php.DualIterator.areIdentical():bool</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1089038">
        <simple_name>___Php.DualIterator.compareIterators</simple_name>
        <signature>___Php.DualIterator.compareIterators(___Php.Iterator;___Php.Iterator;bool):bool</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088762">
        <simple_name>___Php.DualIterator.current</simple_name>
        <signature>___Php.DualIterator.current():mixed</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088688">
        <simple_name>___Php.DualIterator.getFlags</simple_name>
        <signature>___Php.DualIterator.getFlags():mixed</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088705">
        <simple_name>___Php.DualIterator.getLHS</simple_name>
        <signature>___Php.DualIterator.getLHS():___Php.Iterator</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088943">
        <simple_name>___Php.DualIterator.getRHS</simple_name>
        <signature>___Php.DualIterator.getRHS():___Php.Iterator</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088901">
        <simple_name>___Php.DualIterator.key</simple_name>
        <signature>___Php.DualIterator.key():mixed</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088861">
        <simple_name>___Php.DualIterator.next</simple_name>
        <signature>___Php.DualIterator.next():void</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088876">
        <simple_name>___Php.DualIterator.rewind</simple_name>
        <signature>___Php.DualIterator.rewind():void</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088904">
        <simple_name>___Php.DualIterator.setFlags</simple_name>
        <signature>___Php.DualIterator.setFlags(mixed):void</signature>
        <propagates_taint dst_param="this" return="false" source_param="1"/>
      </method>
      <method vuln_id="1088897">
        <simple_name>___Php.DualIterator.valid</simple_name>
        <signature>___Php.DualIterator.valid():bool</signature>
        <does_not_propagate_taint/>
      </method>
    </class>
    <class name="DualIterator">
      <method vuln_id="1088997">
        <simple_name>___Php.DualIterator.</simple_name>
        <signature>___Php.DualIterator.():void</signature>
      </method>
      <method vuln_id="1089029">
        <simple_name>___Php.DualIterator.__construct</simple_name>
        <signature>___Php.DualIterator.__construct(___Php.Iterator;___Php.Iterator;int):void</signature>
      </method>
      <method vuln_id="1088716">
        <simple_name>___Php.DualIterator.areEqual</simple_name>
        <signature>___Php.DualIterator.areEqual():bool</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088878">
        <simple_name>___Php.DualIterator.areIdentical</simple_name>
        <signature>___Php.DualIterator.areIdentical():bool</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1089038">
        <simple_name>___Php.DualIterator.compareIterators</simple_name>
        <signature>___Php.DualIterator.compareIterators(___Php.Iterator;___Php.Iterator;bool):bool</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088762">
        <simple_name>___Php.DualIterator.current</simple_name>
        <signature>___Php.DualIterator.current():mixed</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088688">
        <simple_name>___Php.DualIterator.getFlags</simple_name>
        <signature>___Php.DualIterator.getFlags():mixed</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088705">
        <simple_name>___Php.DualIterator.getLHS</simple_name>
        <signature>___Php.DualIterator.getLHS():___Php.Iterator</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088943">
        <simple_name>___Php.DualIterator.getRHS</simple_name>
        <signature>___Php.DualIterator.getRHS():___Php.Iterator</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088901">
        <simple_name>___Php.DualIterator.key</simple_name>
        <signature>___Php.DualIterator.key():mixed</signature>
        <propagates_taint dst_param="none" return="true" source_param="this"/>
      </method>
      <method vuln_id="1088861">
        <simple_name>___Php.DualIterator.next</simple_name>
        <signature>___Php.DualIterator.next():void</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088876">
        <simple_name>___Php.DualIterator.rewind</simple_name>
        <signature>___Php.DualIterator.rewind():void</signature>
        <does_not_propagate_taint/>
      </method>
      <method vuln_id="1088904">
        <simple_name>___Php.DualIterator.setFlags</simple_name>
        <signature>___Php.DualIterator.setFlags(mixed):void</signature>
        <propagates_taint dst_param="this" return="false" source_param="1"/>
      </method>
      <method vuln_id="1088897">
        <simple_name>___Php.DualIterator.valid</simple_name>
        <signature>___Php.DualIterator.valid():bool</signature>
        <does_not_propagate_taint/>
      </method>
    </class>
  </api_info>
</LanguageDependentDB>
