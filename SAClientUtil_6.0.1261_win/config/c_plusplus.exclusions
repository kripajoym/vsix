<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<Exclusions>
  <packages/>
  <classes/>
  <methods>
    <method name="&lt;automatic_callback_source&gt;(...):void"/>
    <method name="&lt;external_source&gt;(...):void"/>
    <method name="&lt;external_taint&gt;(...):LPCSTR"/>
    <method name="ABAddressBookAddRecord(ABAddressBookRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef;ABRecordRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef;ABRecordRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef;ABRecordRef;ABPersonSortOrdering):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllSources(ABAddressBookRef):CFArrayRef"/>
    <method name="ABAddressBookCopyDefaultSource(ABAddressBookRef):ABRecordRef"/>
    <method name="ABAddressBookCopyLocalizedLabel(CFStringRef):CFStringRef"/>
    <method name="ABAddressBookCopyPeopleWithName(ABAddressBookRef;CFStringRef):CFArrayRef"/>
    <method name="ABAddressBookCreate():ABAddressBookRef"/>
    <method name="ABAddressBookCreateWithOptions(CFDictionaryRef;CFErrorRef*):ABAddressBookRef"/>
    <method name="ABAddressBookGetAuthorizationStatus():ABAuthorizationStatus"/>
    <method name="ABAddressBookGetGroupCount(ABAddressBookRef):CFIndex"/>
    <method name="ABAddressBookGetGroupWithRecordID(ABAddressBookRef;ABRecordID):ABRecordRef"/>
    <method name="ABAddressBookGetPersonCount(ABAddressBookRef):CFIndex"/>
    <method name="ABAddressBookGetPersonWithRecordID(ABAddressBookRef;ABRecordID):ABRecordRef"/>
    <method name="ABAddressBookGetSourceWithRecordID(ABAddressBookRef;ABRecordID):ABRecordRef"/>
    <method name="ABAddressBookHasUnsavedChanges(ABAddressBookRef):_Bool"/>
    <method name="ABAddressBookRegisterExternalChangeCallback(ABAddressBookRef;ABExternalChangeCallback;void*):void"/>
    <method name="ABAddressBookRemoveRecord(ABAddressBookRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABAddressBookRequestAccessWithCompletion(ABAddressBookRef;(^)(_Bool;CFErrorRef):void):void"/>
    <method name="ABAddressBookRevert(ABAddressBookRef):void"/>
    <method name="ABAddressBookSave(ABAddressBookRef;CFErrorRef*):_Bool"/>
    <method name="ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef;ABExternalChangeCallback;void*):void"/>
    <method name="ABCreateStringWithAddressDictionary(NSDictionary*;BOOL):NSString*"/>
    <method name="ABGroupAddMember(ABRecordRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABGroupCopyArrayOfAllMembers(ABRecordRef):CFArrayRef"/>
    <method name="ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef;ABPersonSortOrdering):CFArrayRef"/>
    <method name="ABGroupCopySource(ABRecordRef):ABRecordRef"/>
    <method name="ABGroupCreate():ABRecordRef"/>
    <method name="ABGroupCreateInSource(ABRecordRef):ABRecordRef"/>
    <method name="ABGroupRemoveMember(ABRecordRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABMultiValueAddValueAndLabel(ABMutableMultiValueRef;CFTypeRef;CFStringRef;ABMultiValueIdentifier*):_Bool"/>
    <method name="ABMultiValueCopyArrayOfAllValues(ABMultiValueRef):CFArrayRef"/>
    <method name="ABMultiValueCopyLabelAtIndex(ABMultiValueRef;CFIndex):CFStringRef"/>
    <method name="ABMultiValueCopyValueAtIndex(ABMultiValueRef;CFIndex):CFTypeRef"/>
    <method name="ABMultiValueCreateMutable(ABPropertyType):ABMutableMultiValueRef"/>
    <method name="ABMultiValueCreateMutableCopy(ABMultiValueRef):ABMutableMultiValueRef"/>
    <method name="ABMultiValueGetCount(ABMultiValueRef):CFIndex"/>
    <method name="ABMultiValueGetFirstIndexOfValue(ABMultiValueRef;CFTypeRef):CFIndex"/>
    <method name="ABMultiValueGetIdentifierAtIndex(ABMultiValueRef;CFIndex):ABMultiValueIdentifier"/>
    <method name="ABMultiValueGetIndexForIdentifier(ABMultiValueRef;ABMultiValueIdentifier):CFIndex"/>
    <method name="ABMultiValueGetPropertyType(ABMultiValueRef):ABPropertyType"/>
    <method name="ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef;CFTypeRef;CFStringRef;CFIndex;ABMultiValueIdentifier*):_Bool"/>
    <method name="ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef;CFIndex):_Bool"/>
    <method name="ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef;CFStringRef;CFIndex):_Bool"/>
    <method name="ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef;CFTypeRef;CFIndex):_Bool"/>
    <method name="ABPersonComparePeopleByName(ABRecordRef;ABRecordRef;ABPersonSortOrdering):CFComparisonResult"/>
    <method name="ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef):CFArrayRef"/>
    <method name="ABPersonCopyImageData(ABRecordRef):CFDataRef"/>
    <method name="ABPersonCopyImageDataWithFormat(ABRecordRef;ABPersonImageFormat):CFDataRef"/>
    <method name="ABPersonCopyLocalizedPropertyName(ABPropertyID):CFStringRef"/>
    <method name="ABPersonCopySource(ABRecordRef):ABRecordRef"/>
    <method name="ABPersonCreate():ABRecordRef"/>
    <method name="ABPersonCreateInSource(ABRecordRef):ABRecordRef"/>
    <method name="ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef;CFDataRef):CFArrayRef"/>
    <method name="ABPersonCreateVCardRepresentationWithPeople(CFArrayRef):CFDataRef"/>
    <method name="ABPersonGetCompositeNameFormat():ABPersonCompositeNameFormat"/>
    <method name="ABPersonGetSortOrdering():ABPersonSortOrdering"/>
    <method name="ABPersonGetTypeOfProperty(ABPropertyID):ABPropertyType"/>
    <method name="ABPersonHasImageData(ABRecordRef):_Bool"/>
    <method name="ABPersonRemoveImageData(ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABPersonSetImageData(ABRecordRef;CFDataRef;CFErrorRef*):_Bool"/>
    <method name="ABRecordCopyCompositeName(ABRecordRef):CFStringRef"/>
    <method name="ABRecordCopyValue(ABRecordRef;ABPropertyID):CFTypeRef"/>
    <method name="ABRecordGetRecordID(ABRecordRef):ABRecordID"/>
    <method name="ABRecordGetRecordType(ABRecordRef):ABRecordType"/>
    <method name="ABRecordRemoveValue(ABRecordRef;ABPropertyID;CFErrorRef*):_Bool"/>
    <method name="ABRecordSetValue(ABRecordRef;ABPropertyID;CFTypeRef;CFErrorRef*):_Bool"/>
    <method name="ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION*):void"/>
    <method name="ACCESS_DESCRIPTION_new():ACCESS_DESCRIPTION*"/>
    <method name="AES_bi_ige_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;const AES_KEY*;const unsigned char*;int):void"/>
    <method name="AES_cbc_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int):void"/>
    <method name="AES_cfb128_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*;int):void"/>
    <method name="AES_cfb1_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*;int):void"/>
    <method name="AES_cfb8_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*;int):void"/>
    <method name="AES_cfbr_encrypt_block(const unsigned char*;unsigned char*;int;const AES_KEY*;unsigned char*;int):void"/>
    <method name="AES_ctr128_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;unsigned char*;unsigned int*):void"/>
    <method name="AES_decrypt(const unsigned char*;unsigned char*;const AES_KEY*):void"/>
    <method name="AES_ecb_encrypt(const unsigned char*;unsigned char*;const AES_KEY*;int):void"/>
    <method name="AES_encrypt(const unsigned char*;unsigned char*;const AES_KEY*):void"/>
    <method name="AES_ige_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int):void"/>
    <method name="AES_ofb128_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*):void"/>
    <method name="AES_options():const char*"/>
    <method name="AES_set_decrypt_key(const unsigned char*;int;AES_KEY*):int"/>
    <method name="AES_set_encrypt_key(const unsigned char*;int;AES_KEY*):int"/>
    <method name="AFBase64EncodedStringFromString(NSString*):NSString*"/>
    <method name="AFContentTypeForPathExtension(NSString*):NSString*"/>
    <method name="AFContentTypesFromHTTPHeader(NSString*):NSSet*"/>
    <method name="AFImageCacheKeyFromURLRequest(NSURLRequest*):NSString*"/>
    <method name="AFKeyPathFromOperationState(AFOperationState):NSString*"/>
    <method name="AFMultipartFormEncapsulationBoundary():NSString*"/>
    <method name="AFMultipartFormFinalBoundary():NSString*"/>
    <method name="AFMultipartFormInitialBoundary():NSString*"/>
    <method name="AFPercentEscapedQueryStringPairMemberFromStringWithEncoding(NSString*;NSStringEncoding):NSString*"/>
    <method name="AFQueryStringFromParametersWithEncoding(NSDictionary*;NSStringEncoding):NSString*"/>
    <method name="AFQueryStringPairsFromDictionary(NSDictionary*):NSArray*"/>
    <method name="AFQueryStringPairsFromKeyAndValue(NSString*;id):NSArray*"/>
    <method name="AFStateTransitionIsValid(AFOperationState;AFOperationState;BOOL):BOOL"/>
    <method name="AFStringFromIndexSet(NSIndexSet*):NSString*"/>
    <method name="AFSwizzleClassMethodWithClassAndSelectorUsingBlock(Class*;SEL;id):void"/>
    <method name="ASN1_BIT_STRING_asn1_meth():ASN1_METHOD*"/>
    <method name="ASN1_BIT_STRING_free(ASN1_BIT_STRING*):void"/>
    <method name="ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING*;int):int"/>
    <method name="ASN1_BIT_STRING_name_print(BIO*;ASN1_BIT_STRING*;BIT_STRING_BITNAME*;int):int"/>
    <method name="ASN1_BIT_STRING_new():ASN1_BIT_STRING*"/>
    <method name="ASN1_BIT_STRING_num_asc(char*;BIT_STRING_BITNAME*):int"/>
    <method name="ASN1_BIT_STRING_set(ASN1_BIT_STRING*;unsigned char*;int):int"/>
    <method name="ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING*;char*;int;BIT_STRING_BITNAME*):int"/>
    <method name="ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING*;int;int):int"/>
    <method name="ASN1_BMPSTRING_free(ASN1_BMPSTRING*):void"/>
    <method name="ASN1_BMPSTRING_new():ASN1_BMPSTRING*"/>
    <method name="ASN1_ENUMERATED_free(ASN1_ENUMERATED*):void"/>
    <method name="ASN1_ENUMERATED_get(ASN1_ENUMERATED*):long"/>
    <method name="ASN1_ENUMERATED_new():ASN1_ENUMERATED*"/>
    <method name="ASN1_ENUMERATED_set(ASN1_ENUMERATED*;long):int"/>
    <method name="ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED*;BIGNUM*):BIGNUM*"/>
    <method name="ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME*):int"/>
    <method name="ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME*):void"/>
    <method name="ASN1_GENERALIZEDTIME_new():ASN1_GENERALIZEDTIME*"/>
    <method name="ASN1_GENERALIZEDTIME_print(BIO*;ASN1_GENERALIZEDTIME*):int"/>
    <method name="ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME*;time_t):ASN1_GENERALIZEDTIME*"/>
    <method name="ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME*;const char*):int"/>
    <method name="ASN1_GENERALSTRING_free(ASN1_GENERALSTRING*):void"/>
    <method name="ASN1_GENERALSTRING_new():ASN1_GENERALSTRING*"/>
    <method name="ASN1_HEADER_free(ASN1_HEADER*):void"/>
    <method name="ASN1_HEADER_new():ASN1_HEADER*"/>
    <method name="ASN1_IA5STRING_asn1_meth():ASN1_METHOD*"/>
    <method name="ASN1_IA5STRING_free(ASN1_IA5STRING*):void"/>
    <method name="ASN1_IA5STRING_new():ASN1_IA5STRING*"/>
    <method name="ASN1_INTEGER_cmp(ASN1_INTEGER*;ASN1_INTEGER*):int"/>
    <method name="ASN1_INTEGER_dup(ASN1_INTEGER*):ASN1_INTEGER*"/>
    <method name="ASN1_INTEGER_free(ASN1_INTEGER*):void"/>
    <method name="ASN1_INTEGER_get(ASN1_INTEGER*):long"/>
    <method name="ASN1_INTEGER_new():ASN1_INTEGER*"/>
    <method name="ASN1_INTEGER_set(ASN1_INTEGER*;long):int"/>
    <method name="ASN1_INTEGER_to_BN(ASN1_INTEGER*;BIGNUM*):BIGNUM*"/>
    <method name="ASN1_NULL_free(ASN1_NULL*):void"/>
    <method name="ASN1_NULL_new():ASN1_NULL*"/>
    <method name="ASN1_OBJECT_create(int;unsigned char*;int;const char*;const char*):ASN1_OBJECT*"/>
    <method name="ASN1_OBJECT_free(ASN1_OBJECT*):void"/>
    <method name="ASN1_OBJECT_new():ASN1_OBJECT*"/>
    <method name="ASN1_OCTET_STRING_cmp(ASN1_OCTET_STRING*;ASN1_OCTET_STRING*):int"/>
    <method name="ASN1_OCTET_STRING_dup(ASN1_OCTET_STRING*):ASN1_OCTET_STRING*"/>
    <method name="ASN1_OCTET_STRING_free(ASN1_OCTET_STRING*):void"/>
    <method name="ASN1_OCTET_STRING_new():ASN1_OCTET_STRING*"/>
    <method name="ASN1_OCTET_STRING_set(ASN1_OCTET_STRING*;const unsigned char*;int):int"/>
    <method name="ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING*):void"/>
    <method name="ASN1_PRINTABLESTRING_new():ASN1_PRINTABLESTRING*"/>
    <method name="ASN1_PRINTABLE_free(ASN1_STRING*):void"/>
    <method name="ASN1_PRINTABLE_new():ASN1_STRING*"/>
    <method name="ASN1_PRINTABLE_type(const unsigned char*;int):int"/>
    <method name="ASN1_STRING_TABLE_add(int;long;long;unsigned long;unsigned long):int"/>
    <method name="ASN1_STRING_TABLE_cleanup():void"/>
    <method name="ASN1_STRING_TABLE_get(int):ASN1_STRING_TABLE*"/>
    <method name="ASN1_STRING_cmp(ASN1_STRING*;ASN1_STRING*):int"/>
    <method name="ASN1_STRING_data(ASN1_STRING*):unsigned char*"/>
    <method name="ASN1_STRING_dup(ASN1_STRING*):ASN1_STRING*"/>
    <method name="ASN1_STRING_encode(ASN1_STRING*;i2d_of_void*;void*;STACK*):ASN1_STRING*"/>
    <method name="ASN1_STRING_free(ASN1_STRING*):void"/>
    <method name="ASN1_STRING_get_default_mask():unsigned long"/>
    <method name="ASN1_STRING_length(ASN1_STRING*):int"/>
    <method name="ASN1_STRING_length_set(ASN1_STRING*;int):void"/>
    <method name="ASN1_STRING_new():ASN1_STRING*"/>
    <method name="ASN1_STRING_print(BIO*;ASN1_STRING*):int"/>
    <method name="ASN1_STRING_print_ex(BIO*;ASN1_STRING*;unsigned long):int"/>
    <method name="ASN1_STRING_print_ex_fp(FILE*;ASN1_STRING*;unsigned long):int"/>
    <method name="ASN1_STRING_set(ASN1_STRING*;const void*;int):int"/>
    <method name="ASN1_STRING_set_by_NID(ASN1_STRING**;const unsigned char*;int;int;int):ASN1_STRING*"/>
    <method name="ASN1_STRING_set_default_mask(unsigned long):void"/>
    <method name="ASN1_STRING_set_default_mask_asc(char*):int"/>
    <method name="ASN1_STRING_to_UTF8(unsigned char**;ASN1_STRING*):int"/>
    <method name="ASN1_STRING_type(ASN1_STRING*):int"/>
    <method name="ASN1_STRING_type_new(int):ASN1_STRING*"/>
    <method name="ASN1_T61STRING_free(ASN1_T61STRING*):void"/>
    <method name="ASN1_T61STRING_new():ASN1_T61STRING*"/>
    <method name="ASN1_TIME_check(ASN1_TIME*):int"/>
    <method name="ASN1_TIME_free(ASN1_TIME*):void"/>
    <method name="ASN1_TIME_new():ASN1_TIME*"/>
    <method name="ASN1_TIME_print(BIO*;ASN1_TIME*):int"/>
    <method name="ASN1_TIME_set(ASN1_TIME*;time_t):ASN1_TIME*"/>
    <method name="ASN1_TIME_to_generalizedtime(ASN1_TIME*;ASN1_GENERALIZEDTIME**):ASN1_GENERALIZEDTIME*"/>
    <method name="ASN1_TYPE_free(ASN1_TYPE*):void"/>
    <method name="ASN1_TYPE_get(ASN1_TYPE*):int"/>
    <method name="ASN1_TYPE_get_int_octetstring(ASN1_TYPE*;long*;unsigned char*;int):int"/>
    <method name="ASN1_TYPE_get_octetstring(ASN1_TYPE*;unsigned char*;int):int"/>
    <method name="ASN1_TYPE_new():ASN1_TYPE*"/>
    <method name="ASN1_TYPE_set(ASN1_TYPE*;int;void*):void"/>
    <method name="ASN1_TYPE_set_int_octetstring(ASN1_TYPE*;long;unsigned char*;int):int"/>
    <method name="ASN1_TYPE_set_octetstring(ASN1_TYPE*;unsigned char*;int):int"/>
    <method name="ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING*):void"/>
    <method name="ASN1_UNIVERSALSTRING_new():ASN1_UNIVERSALSTRING*"/>
    <method name="ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING*):int"/>
    <method name="ASN1_UTCTIME_check(ASN1_UTCTIME*):int"/>
    <method name="ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME*;time_t):int"/>
    <method name="ASN1_UTCTIME_free(ASN1_UTCTIME*):void"/>
    <method name="ASN1_UTCTIME_new():ASN1_UTCTIME*"/>
    <method name="ASN1_UTCTIME_print(BIO*;ASN1_UTCTIME*):int"/>
    <method name="ASN1_UTCTIME_set(ASN1_UTCTIME*;time_t):ASN1_UTCTIME*"/>
    <method name="ASN1_UTCTIME_set_string(ASN1_UTCTIME*;const char*):int"/>
    <method name="ASN1_UTF8STRING_free(ASN1_UTF8STRING*):void"/>
    <method name="ASN1_UTF8STRING_new():ASN1_UTF8STRING*"/>
    <method name="ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING*):void"/>
    <method name="ASN1_VISIBLESTRING_new():ASN1_VISIBLESTRING*"/>
    <method name="ASN1_add_oid_module():void"/>
    <method name="ASN1_check_infinite_end(unsigned char**;long):int"/>
    <method name="ASN1_const_check_infinite_end(const unsigned char**;long):int"/>
    <method name="ASN1_d2i_bio((*)():void**;d2i_of_void*;BIO*;void**):void*"/>
    <method name="ASN1_d2i_fp((*)():void**;d2i_of_void*;FILE*;void**):void*"/>
    <method name="ASN1_digest(i2d_of_void*;const EVP_MD*;char*;unsigned char*;unsigned int*):int"/>
    <method name="ASN1_dup(i2d_of_void*;d2i_of_void*;char*):void*"/>
    <method name="ASN1_generate_nconf(char*;CONF*):ASN1_TYPE*"/>
    <method name="ASN1_generate_v3(char*;X509V3_CTX*):ASN1_TYPE*"/>
    <method name="ASN1_get_object(const unsigned char**;long*;int*;int*;long):int"/>
    <method name="ASN1_i2d_bio(i2d_of_void*;BIO*;unsigned char*):int"/>
    <method name="ASN1_i2d_fp(i2d_of_void*;FILE*;void*):int"/>
    <method name="ASN1_item_d2i(ASN1_VALUE**;const unsigned char**;long;const ASN1_ITEM*):ASN1_VALUE*"/>
    <method name="ASN1_item_d2i_bio(const ASN1_ITEM*;BIO*;void*):void*"/>
    <method name="ASN1_item_d2i_fp(const ASN1_ITEM*;FILE*;void*):void*"/>
    <method name="ASN1_item_digest(const ASN1_ITEM*;const EVP_MD*;void*;unsigned char*;unsigned int*):int"/>
    <method name="ASN1_item_dup(const ASN1_ITEM*;void*):void*"/>
    <method name="ASN1_item_ex_d2i(ASN1_VALUE**;const unsigned char**;long;const ASN1_ITEM*;int;int;char;ASN1_TLC*):int"/>
    <method name="ASN1_item_ex_free(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="ASN1_item_ex_i2d(ASN1_VALUE**;unsigned char**;const ASN1_ITEM*;int;int):int"/>
    <method name="ASN1_item_ex_new(ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="ASN1_item_free(ASN1_VALUE*;const ASN1_ITEM*):void"/>
    <method name="ASN1_item_i2d(ASN1_VALUE*;unsigned char**;const ASN1_ITEM*):int"/>
    <method name="ASN1_item_i2d_bio(const ASN1_ITEM*;BIO*;void*):int"/>
    <method name="ASN1_item_i2d_fp(const ASN1_ITEM*;FILE*;void*):int"/>
    <method name="ASN1_item_ndef_i2d(ASN1_VALUE*;unsigned char**;const ASN1_ITEM*):int"/>
    <method name="ASN1_item_new(const ASN1_ITEM*):ASN1_VALUE*"/>
    <method name="ASN1_item_pack(void*;const ASN1_ITEM*;ASN1_OCTET_STRING**):ASN1_STRING*"/>
    <method name="ASN1_item_sign(const ASN1_ITEM*;X509_ALGOR*;X509_ALGOR*;ASN1_BIT_STRING*;void*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="ASN1_item_unpack(ASN1_STRING*;const ASN1_ITEM*):void*"/>
    <method name="ASN1_item_verify(const ASN1_ITEM*;X509_ALGOR*;ASN1_BIT_STRING*;void*;EVP_PKEY*):int"/>
    <method name="ASN1_mbstring_copy(ASN1_STRING**;const unsigned char*;int;int;unsigned long):int"/>
    <method name="ASN1_mbstring_ncopy(ASN1_STRING**;const unsigned char*;int;int;unsigned long;long;long):int"/>
    <method name="ASN1_object_size(int;int;int):int"/>
    <method name="ASN1_pack_string(void*;i2d_of_void*;ASN1_OCTET_STRING**):ASN1_STRING*"/>
    <method name="ASN1_parse(BIO*;const unsigned char*;long;int):int"/>
    <method name="ASN1_parse_dump(BIO*;const unsigned char*;long;int;int):int"/>
    <method name="ASN1_primitive_free(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="ASN1_primitive_new(ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="ASN1_put_eoc(unsigned char**):int"/>
    <method name="ASN1_put_object(unsigned char**;int;int;int;int):void"/>
    <method name="ASN1_seq_pack(STACK*;i2d_of_void*;unsigned char**;int*):unsigned char*"/>
    <method name="ASN1_seq_unpack(const unsigned char*;int;d2i_of_void*;(*)(void*):void*):STACK*"/>
    <method name="ASN1_sign(i2d_of_void*;X509_ALGOR*;X509_ALGOR*;ASN1_BIT_STRING*;char*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="ASN1_tag2bit(int):unsigned long"/>
    <method name="ASN1_tag2str(int):const char*"/>
    <method name="ASN1_template_d2i(ASN1_VALUE**;const unsigned char**;long;const ASN1_TEMPLATE*):int"/>
    <method name="ASN1_template_free(ASN1_VALUE**;const ASN1_TEMPLATE*):void"/>
    <method name="ASN1_template_i2d(ASN1_VALUE**;unsigned char**;const ASN1_TEMPLATE*):int"/>
    <method name="ASN1_template_new(ASN1_VALUE**;const ASN1_TEMPLATE*):int"/>
    <method name="ASN1_unpack_string(ASN1_STRING*;d2i_of_void*):void*"/>
    <method name="ASN1_verify(i2d_of_void*;X509_ALGOR*;ASN1_BIT_STRING*;char*;EVP_PKEY*):int"/>
    <method name="ATLU_DestroyThreadMemory():void"/>
    <method name="AUGraphAddNode(AUGraph;const AudioComponentDescription*;AUNode*):OSStatus"/>
    <method name="AUGraphAddRenderNotify(AUGraph;AURenderCallback;void*):OSStatus"/>
    <method name="AUGraphClearConnections(AUGraph):OSStatus"/>
    <method name="AUGraphClose(AUGraph):OSStatus"/>
    <method name="AUGraphConnectNodeInput(AUGraph;AUNode;UInt32;AUNode;UInt32):OSStatus"/>
    <method name="AUGraphCountNodeInteractions(AUGraph;AUNode;UInt32*):OSStatus"/>
    <method name="AUGraphDisconnectNodeInput(AUGraph;AUNode;UInt32):OSStatus"/>
    <method name="AUGraphGetCPULoad(AUGraph;Float32*):OSStatus"/>
    <method name="AUGraphGetIndNode(AUGraph;UInt32;AUNode*):OSStatus"/>
    <method name="AUGraphGetInteractionInfo(AUGraph;UInt32;AUNodeInteraction*):OSStatus"/>
    <method name="AUGraphGetMaxCPULoad(AUGraph;Float32*):OSStatus"/>
    <method name="AUGraphGetNodeCount(AUGraph;UInt32*):OSStatus"/>
    <method name="AUGraphGetNodeInteractions(AUGraph;AUNode;UInt32*;AUNodeInteraction*):OSStatus"/>
    <method name="AUGraphGetNumberOfInteractions(AUGraph;UInt32*):OSStatus"/>
    <method name="AUGraphInitialize(AUGraph):OSStatus"/>
    <method name="AUGraphIsInitialized(AUGraph;Boolean*):OSStatus"/>
    <method name="AUGraphIsOpen(AUGraph;Boolean*):OSStatus"/>
    <method name="AUGraphIsRunning(AUGraph;Boolean*):OSStatus"/>
    <method name="AUGraphNodeInfo(AUGraph;AUNode;AudioComponentDescription*;AudioUnit*):OSStatus"/>
    <method name="AUGraphOpen(AUGraph):OSStatus"/>
    <method name="AUGraphRemoveNode(AUGraph;AUNode):OSStatus"/>
    <method name="AUGraphRemoveRenderNotify(AUGraph;AURenderCallback;void*):OSStatus"/>
    <method name="AUGraphSetNodeInputCallback(AUGraph;AUNode;UInt32;const AURenderCallbackStruct*):OSStatus"/>
    <method name="AUGraphStart(AUGraph):OSStatus"/>
    <method name="AUGraphStop(AUGraph):OSStatus"/>
    <method name="AUGraphUninitialize(AUGraph):OSStatus"/>
    <method name="AUGraphUpdate(AUGraph;Boolean*):OSStatus"/>
    <method name="AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS*):void"/>
    <method name="AUTHORITY_INFO_ACCESS_new():AUTHORITY_INFO_ACCESS*"/>
    <method name="AUTHORITY_KEYID_free(AUTHORITY_KEYID*):void"/>
    <method name="AUTHORITY_KEYID_new():AUTHORITY_KEYID*"/>
    <method name="AVMakeRectWithAspectRatioInsideRect(CGSize;CGRect):CGRect"/>
    <method name="AcceptEx(SOCKET;SOCKET;PVOID;DWORD;DWORD;DWORD;LPDWORD;LPOVERLAPPED):BOOL"/>
    <method name="Any"/>
    <method name="ApplicationName1stCommand2ndContainsWhiteSpace"/>
    <method name="ApplicationName2ndCommand3rdContainsWhiteSpace"/>
    <method name="AudioComponentCopyName(AudioComponent;CFStringRef*):OSStatus"/>
    <method name="AudioComponentCount(const AudioComponentDescription*):UInt32"/>
    <method name="AudioComponentFindNext(AudioComponent;const AudioComponentDescription*):AudioComponent"/>
    <method name="AudioComponentGetDescription(AudioComponent;AudioComponentDescription*):OSStatus"/>
    <method name="AudioComponentGetVersion(AudioComponent;UInt32*):OSStatus"/>
    <method name="AudioComponentInstanceCanDo(AudioComponentInstance;SInt16):Boolean"/>
    <method name="AudioComponentInstanceDispose(AudioComponentInstance):OSStatus"/>
    <method name="AudioComponentInstanceGetComponent(AudioComponentInstance):AudioComponent"/>
    <method name="AudioComponentInstanceNew(AudioComponent;AudioComponentInstance*):OSStatus"/>
    <method name="AudioComponentRegister(const AudioComponentDescription*;CFStringRef;UInt32;AudioComponentFactoryFunction):AudioComponent"/>
    <method name="AudioConverterConvertBuffer(AudioConverterRef;UInt32;const void*;UInt32*;void*):OSStatus"/>
    <method name="AudioConverterConvertComplexBuffer(AudioConverterRef;UInt32;const AudioBufferList*;AudioBufferList*):OSStatus"/>
    <method name="AudioConverterDispose(AudioConverterRef):OSStatus"/>
    <method name="AudioConverterFillComplexBuffer(AudioConverterRef;AudioConverterComplexInputDataProc;void*;UInt32*;AudioBufferList*;AudioStreamPacketDescription*):OSStatus"/>
    <method name="AudioConverterGetProperty(AudioConverterRef;AudioConverterPropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioConverterGetPropertyInfo(AudioConverterRef;AudioConverterPropertyID;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioConverterNew(const AudioStreamBasicDescription*;const AudioStreamBasicDescription*;AudioConverterRef*):OSStatus"/>
    <method name="AudioConverterNewSpecific(const AudioStreamBasicDescription*;const AudioStreamBasicDescription*;UInt32;const AudioClassDescription*;AudioConverterRef*):OSStatus"/>
    <method name="AudioConverterReset(AudioConverterRef):OSStatus"/>
    <method name="AudioConverterSetProperty(AudioConverterRef;AudioConverterPropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioFileClose(AudioFileID):OSStatus"/>
    <method name="AudioFileCountUserData(AudioFileID;UInt32;UInt32*):OSStatus"/>
    <method name="AudioFileCreateWithURL(CFURLRef;AudioFileTypeID;const AudioStreamBasicDescription*;UInt32;AudioFileID*):OSStatus"/>
    <method name="AudioFileGetGlobalInfo(AudioFilePropertyID;UInt32;void*;UInt32*;void*):OSStatus"/>
    <method name="AudioFileGetGlobalInfoSize(AudioFilePropertyID;UInt32;void*;UInt32*):OSStatus"/>
    <method name="AudioFileGetProperty(AudioFileID;AudioFilePropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioFileGetPropertyInfo(AudioFileID;AudioFilePropertyID;UInt32*;UInt32*):OSStatus"/>
    <method name="AudioFileGetUserData(AudioFileID;UInt32;UInt32;UInt32*;void*):OSStatus"/>
    <method name="AudioFileGetUserDataSize(AudioFileID;UInt32;UInt32;UInt32*):OSStatus"/>
    <method name="AudioFileInitializeWithCallbacks(void*;AudioFile_ReadProc;AudioFile_WriteProc;AudioFile_GetSizeProc;AudioFile_SetSizeProc;AudioFileTypeID;const AudioStreamBasicDescription*;UInt32;AudioFileID*):OSStatus"/>
    <method name="AudioFileOpenURL(CFURLRef;SInt8;AudioFileTypeID;AudioFileID*):OSStatus"/>
    <method name="AudioFileOpenWithCallbacks(void*;AudioFile_ReadProc;AudioFile_WriteProc;AudioFile_GetSizeProc;AudioFile_SetSizeProc;AudioFileTypeID;AudioFileID*):OSStatus"/>
    <method name="AudioFileOptimize(AudioFileID):OSStatus"/>
    <method name="AudioFileReadBytes(AudioFileID;Boolean;SInt64;UInt32*;void*):OSStatus"/>
    <method name="AudioFileReadPacketData(AudioFileID;Boolean;UInt32*;AudioStreamPacketDescription*;SInt64;UInt32*;void*):OSStatus"/>
    <method name="AudioFileReadPackets(AudioFileID;Boolean;UInt32*;AudioStreamPacketDescription*;SInt64;UInt32*;void*):OSStatus"/>
    <method name="AudioFileRemoveUserData(AudioFileID;UInt32;UInt32):OSStatus"/>
    <method name="AudioFileSetProperty(AudioFileID;AudioFilePropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioFileSetUserData(AudioFileID;UInt32;UInt32;UInt32;const void*):OSStatus"/>
    <method name="AudioFileStreamClose(AudioFileStreamID):OSStatus"/>
    <method name="AudioFileStreamGetProperty(AudioFileStreamID;AudioFileStreamPropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioFileStreamGetPropertyInfo(AudioFileStreamID;AudioFileStreamPropertyID;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioFileStreamOpen(void*;AudioFileStream_PropertyListenerProc;AudioFileStream_PacketsProc;AudioFileTypeID;AudioFileStreamID*):OSStatus"/>
    <method name="AudioFileStreamParseBytes(AudioFileStreamID;UInt32;const void*;UInt32):OSStatus"/>
    <method name="AudioFileStreamSeek(AudioFileStreamID;SInt64;SInt64*;UInt32*):OSStatus"/>
    <method name="AudioFileStreamSetProperty(AudioFileStreamID;AudioFileStreamPropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioFileWriteBytes(AudioFileID;Boolean;SInt64;UInt32*;const void*):OSStatus"/>
    <method name="AudioFileWritePackets(AudioFileID;Boolean;UInt32;const AudioStreamPacketDescription*;SInt64;UInt32*;const void*):OSStatus"/>
    <method name="AudioFormatGetProperty(AudioFormatPropertyID;UInt32;const void*;UInt32*;void*):OSStatus"/>
    <method name="AudioFormatGetPropertyInfo(AudioFormatPropertyID;UInt32;const void*;UInt32*):OSStatus"/>
    <method name="AudioOutputUnitStart(AudioUnit):OSStatus"/>
    <method name="AudioOutputUnitStop(AudioUnit):OSStatus"/>
    <method name="AudioQueueAddPropertyListener(AudioQueueRef;AudioQueuePropertyID;AudioQueuePropertyListenerProc;void*):OSStatus"/>
    <method name="AudioQueueAllocateBuffer(AudioQueueRef;UInt32;AudioQueueBufferRef*):OSStatus"/>
    <method name="AudioQueueAllocateBufferWithPacketDescriptions(AudioQueueRef;UInt32;UInt32;AudioQueueBufferRef*):OSStatus"/>
    <method name="AudioQueueCreateTimeline(AudioQueueRef;AudioQueueTimelineRef*):OSStatus"/>
    <method name="AudioQueueDeviceGetCurrentTime(AudioQueueRef;AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueDeviceGetNearestStartTime(AudioQueueRef;AudioTimeStamp*;UInt32):OSStatus"/>
    <method name="AudioQueueDeviceTranslateTime(AudioQueueRef;const AudioTimeStamp*;AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueDispose(AudioQueueRef;Boolean):OSStatus"/>
    <method name="AudioQueueDisposeTimeline(AudioQueueRef;AudioQueueTimelineRef):OSStatus"/>
    <method name="AudioQueueEnqueueBuffer(AudioQueueRef;AudioQueueBufferRef;UInt32;const AudioStreamPacketDescription*):OSStatus"/>
    <method name="AudioQueueEnqueueBufferWithParameters(AudioQueueRef;AudioQueueBufferRef;UInt32;const AudioStreamPacketDescription*;UInt32;UInt32;UInt32;const AudioQueueParameterEvent*;const AudioTimeStamp*;AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueFlush(AudioQueueRef):OSStatus"/>
    <method name="AudioQueueFreeBuffer(AudioQueueRef;AudioQueueBufferRef):OSStatus"/>
    <method name="AudioQueueGetCurrentTime(AudioQueueRef;AudioQueueTimelineRef;AudioTimeStamp*;Boolean*):OSStatus"/>
    <method name="AudioQueueGetParameter(AudioQueueRef;AudioQueueParameterID;AudioQueueParameterValue*):OSStatus"/>
    <method name="AudioQueueGetProperty(AudioQueueRef;AudioQueuePropertyID;void*;UInt32*):OSStatus"/>
    <method name="AudioQueueGetPropertySize(AudioQueueRef;AudioQueuePropertyID;UInt32*):OSStatus"/>
    <method name="AudioQueueNewInput(const AudioStreamBasicDescription*;AudioQueueInputCallback;void*;CFRunLoopRef;CFStringRef;UInt32;AudioQueueRef*):OSStatus"/>
    <method name="AudioQueueNewOutput(const AudioStreamBasicDescription*;AudioQueueOutputCallback;void*;CFRunLoopRef;CFStringRef;UInt32;AudioQueueRef*):OSStatus"/>
    <method name="AudioQueueOfflineRender(AudioQueueRef;const AudioTimeStamp*;AudioQueueBufferRef;UInt32):OSStatus"/>
    <method name="AudioQueuePause(AudioQueueRef):OSStatus"/>
    <method name="AudioQueuePrime(AudioQueueRef;UInt32;UInt32*):OSStatus"/>
    <method name="AudioQueueProcessingTapDispose(AudioQueueProcessingTapRef):OSStatus"/>
    <method name="AudioQueueProcessingTapGetQueueTime(AudioQueueProcessingTapRef;Float64*;UInt32*):OSStatus"/>
    <method name="AudioQueueProcessingTapGetSourceAudio(AudioQueueProcessingTapRef;UInt32;AudioTimeStamp*;UInt32*;UInt32*;AudioBufferList*):OSStatus"/>
    <method name="AudioQueueProcessingTapNew(AudioQueueRef;AudioQueueProcessingTapCallback;void*;UInt32;UInt32*;AudioStreamBasicDescription*;AudioQueueProcessingTapRef*):OSStatus"/>
    <method name="AudioQueueRemovePropertyListener(AudioQueueRef;AudioQueuePropertyID;AudioQueuePropertyListenerProc;void*):OSStatus"/>
    <method name="AudioQueueReset(AudioQueueRef):OSStatus"/>
    <method name="AudioQueueSetOfflineRenderFormat(AudioQueueRef;const AudioStreamBasicDescription*;const AudioChannelLayout*):OSStatus"/>
    <method name="AudioQueueSetParameter(AudioQueueRef;AudioQueueParameterID;AudioQueueParameterValue):OSStatus"/>
    <method name="AudioQueueSetProperty(AudioQueueRef;AudioQueuePropertyID;const void*;UInt32):OSStatus"/>
    <method name="AudioQueueStart(AudioQueueRef;const AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueStop(AudioQueueRef;Boolean):OSStatus"/>
    <method name="AudioServicesAddSystemSoundCompletion(SystemSoundID;CFRunLoopRef;CFStringRef;AudioServicesSystemSoundCompletionProc;void*):OSStatus"/>
    <method name="AudioServicesCreateSystemSoundID(CFURLRef;SystemSoundID*):OSStatus"/>
    <method name="AudioServicesDisposeSystemSoundID(SystemSoundID):OSStatus"/>
    <method name="AudioServicesGetProperty(AudioServicesPropertyID;UInt32;const void*;UInt32*;void*):OSStatus"/>
    <method name="AudioServicesGetPropertyInfo(AudioServicesPropertyID;UInt32;const void*;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioServicesPlayAlertSound(SystemSoundID):void"/>
    <method name="AudioServicesPlaySystemSound(SystemSoundID):void"/>
    <method name="AudioServicesRemoveSystemSoundCompletion(SystemSoundID):void"/>
    <method name="AudioServicesSetProperty(AudioServicesPropertyID;UInt32;const void*;UInt32;const void*):OSStatus"/>
    <method name="AudioSessionAddPropertyListener(AudioSessionPropertyID;AudioSessionPropertyListener;void*):OSStatus"/>
    <method name="AudioSessionGetProperty(AudioSessionPropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioSessionGetPropertySize(AudioSessionPropertyID;UInt32*):OSStatus"/>
    <method name="AudioSessionInitialize(CFRunLoopRef;CFStringRef;AudioSessionInterruptionListener;void*):OSStatus"/>
    <method name="AudioSessionRemovePropertyListener(AudioSessionPropertyID):OSStatus"/>
    <method name="AudioSessionRemovePropertyListenerWithUserData(AudioSessionPropertyID;AudioSessionPropertyListener;void*):OSStatus"/>
    <method name="AudioSessionSetActive(Boolean):OSStatus"/>
    <method name="AudioSessionSetActiveWithFlags(Boolean;UInt32):OSStatus"/>
    <method name="AudioSessionSetProperty(AudioSessionPropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioUnitAddPropertyListener(AudioUnit;AudioUnitPropertyID;AudioUnitPropertyListenerProc;void*):OSStatus"/>
    <method name="AudioUnitAddRenderNotify(AudioUnit;AURenderCallback;void*):OSStatus"/>
    <method name="AudioUnitGetParameter(AudioUnit;AudioUnitParameterID;AudioUnitScope;AudioUnitElement;AudioUnitParameterValue*):OSStatus"/>
    <method name="AudioUnitGetProperty(AudioUnit;AudioUnitPropertyID;AudioUnitScope;AudioUnitElement;void*;UInt32*):OSStatus"/>
    <method name="AudioUnitGetPropertyInfo(AudioUnit;AudioUnitPropertyID;AudioUnitScope;AudioUnitElement;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioUnitInitialize(AudioUnit):OSStatus"/>
    <method name="AudioUnitProcess(AudioUnit;AudioUnitRenderActionFlags*;const AudioTimeStamp*;UInt32;AudioBufferList*):OSStatus"/>
    <method name="AudioUnitProcessMultiple(AudioUnit;AudioUnitRenderActionFlags*;const AudioTimeStamp*;UInt32;UInt32;const AudioBufferList**;UInt32;AudioBufferList**):OSStatus"/>
    <method name="AudioUnitRemovePropertyListenerWithUserData(AudioUnit;AudioUnitPropertyID;AudioUnitPropertyListenerProc;void*):OSStatus"/>
    <method name="AudioUnitRemoveRenderNotify(AudioUnit;AURenderCallback;void*):OSStatus"/>
    <method name="AudioUnitRender(AudioUnit;AudioUnitRenderActionFlags*;const AudioTimeStamp*;UInt32;UInt32;AudioBufferList*):OSStatus"/>
    <method name="AudioUnitReset(AudioUnit;AudioUnitScope;AudioUnitElement):OSStatus"/>
    <method name="AudioUnitScheduleParameters(AudioUnit;const AudioUnitParameterEvent*;UInt32):OSStatus"/>
    <method name="AudioUnitSetParameter(AudioUnit;AudioUnitParameterID;AudioUnitScope;AudioUnitElement;AudioUnitParameterValue;UInt32):OSStatus"/>
    <method name="AudioUnitSetProperty(AudioUnit;AudioUnitPropertyID;AudioUnitScope;AudioUnitElement;const void*;UInt32):OSStatus"/>
    <method name="AudioUnitUninitialize(AudioUnit):OSStatus"/>
    <method name="BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS*):void"/>
    <method name="BASIC_CONSTRAINTS_new():BASIC_CONSTRAINTS*"/>
    <method name="BF_cbc_encrypt(const unsigned char*;unsigned char*;long;const BF_KEY*;unsigned char*;int):void"/>
    <method name="BF_cfb64_encrypt(const unsigned char*;unsigned char*;long;const BF_KEY*;unsigned char*;int*;int):void"/>
    <method name="BF_decrypt(unsigned int*;const BF_KEY*):void"/>
    <method name="BF_ecb_encrypt(const unsigned char*;unsigned char*;const BF_KEY*;int):void"/>
    <method name="BF_encrypt(unsigned int*;const BF_KEY*):void"/>
    <method name="BF_ofb64_encrypt(const unsigned char*;unsigned char*;long;const BF_KEY*;unsigned char*;int*):void"/>
    <method name="BF_options():const char*"/>
    <method name="BF_set_key(BF_KEY*;int;const unsigned char*):void"/>
    <method name="BIO_accept(int;char**):int"/>
    <method name="BIO_callback_ctrl(BIO*;int;(*)(bio_st*;int;const char*;int;long;long):void*):long"/>
    <method name="BIO_copy_next_retry(BIO*):void"/>
    <method name="BIO_ctrl(BIO*;int;long;void*):long"/>
    <method name="BIO_ctrl_get_read_request(BIO*):size_t"/>
    <method name="BIO_ctrl_get_write_guarantee(BIO*):size_t"/>
    <method name="BIO_ctrl_pending(BIO*):size_t"/>
    <method name="BIO_ctrl_reset_read_request(BIO*):int"/>
    <method name="BIO_ctrl_wpending(BIO*):size_t"/>
    <method name="BIO_debug_callback(BIO*;int;const char*;int;long;long):long"/>
    <method name="BIO_dgram_non_fatal_error(int):int"/>
    <method name="BIO_dump(BIO*;const char*;int):int"/>
    <method name="BIO_dump_cb((*)(const void*;size_t;void*):int*;void*;const char*;int):int"/>
    <method name="BIO_dump_fp(FILE*;const char*;int):int"/>
    <method name="BIO_dump_indent(BIO*;const char*;int;int):int"/>
    <method name="BIO_dump_indent_cb((*)(const void*;size_t;void*):int*;void*;const char*;int;int):int"/>
    <method name="BIO_dump_indent_fp(FILE*;const char*;int;int):int"/>
    <method name="BIO_dup_chain(BIO*):BIO*"/>
    <method name="BIO_f_base64():BIO_METHOD*"/>
    <method name="BIO_f_buffer():BIO_METHOD*"/>
    <method name="BIO_f_cipher():BIO_METHOD*"/>
    <method name="BIO_f_md():BIO_METHOD*"/>
    <method name="BIO_f_nbio_test():BIO_METHOD*"/>
    <method name="BIO_f_null():BIO_METHOD*"/>
    <method name="BIO_f_reliable():BIO_METHOD*"/>
    <method name="BIO_f_ssl():BIO_METHOD*"/>
    <method name="BIO_fd_non_fatal_error(int):int"/>
    <method name="BIO_fd_should_retry(int):int"/>
    <method name="BIO_find_type(BIO*;int):BIO*"/>
    <method name="BIO_free(BIO*):int"/>
    <method name="BIO_free_all(BIO*):void"/>
    <method name="BIO_get_accept_socket(char*;int):int"/>
    <method name="BIO_get_ex_data(BIO*;int):void*"/>
    <method name="BIO_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="BIO_get_host_ip(const char*;unsigned char*):int"/>
    <method name="BIO_get_port(const char*;unsigned short*):int"/>
    <method name="BIO_get_retry_BIO(BIO*;int*):BIO*"/>
    <method name="BIO_get_retry_reason(BIO*):int"/>
    <method name="BIO_gethostbyname(const char*):hostent*"/>
    <method name="BIO_gets(BIO*;char*;int):int"/>
    <method name="BIO_indent(BIO*;int;int):int"/>
    <method name="BIO_int_ctrl(BIO*;int;long;int):long"/>
    <method name="BIO_new(BIO_METHOD*):BIO*"/>
    <method name="BIO_new_accept(char*):BIO*"/>
    <method name="BIO_new_bio_pair(BIO**;size_t;BIO**;size_t):int"/>
    <method name="BIO_new_buffer_ssl_connect(SSL_CTX*):BIO*"/>
    <method name="BIO_new_connect(char*):BIO*"/>
    <method name="BIO_new_dgram(int;int):BIO*"/>
    <method name="BIO_new_fd(int;int):BIO*"/>
    <method name="BIO_new_file(const char*;const char*):BIO*"/>
    <method name="BIO_new_fp(FILE*;int):BIO*"/>
    <method name="BIO_new_mem_buf(void*;int):BIO*"/>
    <method name="BIO_new_socket(int;int):BIO*"/>
    <method name="BIO_new_ssl(SSL_CTX*;int):BIO*"/>
    <method name="BIO_new_ssl_connect(SSL_CTX*):BIO*"/>
    <method name="BIO_next(BIO*):BIO*"/>
    <method name="BIO_nread(BIO*;char**;int):int"/>
    <method name="BIO_nread0(BIO*;char**):int"/>
    <method name="BIO_number_read(BIO*):unsigned long"/>
    <method name="BIO_number_written(BIO*):unsigned long"/>
    <method name="BIO_nwrite(BIO*;char**;int):int"/>
    <method name="BIO_nwrite0(BIO*;char**):int"/>
    <method name="BIO_pop(BIO*):BIO*"/>
    <method name="BIO_printf(BIO*;const char*, ...):int"/>
    <method name="BIO_ptr_ctrl(BIO*;int;long):char*"/>
    <method name="BIO_push(BIO*;BIO*):BIO*"/>
    <method name="BIO_puts(BIO*;const char*):int"/>
    <method name="BIO_read(BIO*;void*;int):int"/>
    <method name="BIO_s_accept():BIO_METHOD*"/>
    <method name="BIO_s_bio():BIO_METHOD*"/>
    <method name="BIO_s_connect():BIO_METHOD*"/>
    <method name="BIO_s_datagram():BIO_METHOD*"/>
    <method name="BIO_s_fd():BIO_METHOD*"/>
    <method name="BIO_s_file():BIO_METHOD*"/>
    <method name="BIO_s_log():BIO_METHOD*"/>
    <method name="BIO_s_mem():BIO_METHOD*"/>
    <method name="BIO_s_null():BIO_METHOD*"/>
    <method name="BIO_s_socket():BIO_METHOD*"/>
    <method name="BIO_set(BIO*;BIO_METHOD*):int"/>
    <method name="BIO_set_cipher(BIO*;const EVP_CIPHER*;const unsigned char*;const unsigned char*;int):void"/>
    <method name="BIO_set_ex_data(BIO*;int;void*):int"/>
    <method name="BIO_set_tcp_ndelay(int;int):int"/>
    <method name="BIO_snprintf(char*;size_t;const char*, ...):int"/>
    <method name="BIO_sock_cleanup():void"/>
    <method name="BIO_sock_error(int):int"/>
    <method name="BIO_sock_init():int"/>
    <method name="BIO_sock_non_fatal_error(int):int"/>
    <method name="BIO_sock_should_retry(int):int"/>
    <method name="BIO_socket_ioctl(int;long;void*):int"/>
    <method name="BIO_socket_nbio(int;int):int"/>
    <method name="BIO_ssl_copy_session_id(BIO*;BIO*):int"/>
    <method name="BIO_ssl_shutdown(BIO*):void"/>
    <method name="BIO_vfree(BIO*):void"/>
    <method name="BIO_vprintf(BIO*;const char*;va_list):int"/>
    <method name="BIO_vsnprintf(char*;size_t;const char*;va_list):int"/>
    <method name="BIO_write(BIO*;const void*;int):int"/>
    <method name="BITHockeyLocalizedString(NSString*):NSString*"/>
    <method name="BITHockeyMD5(NSString*):NSString*"/>
    <method name="BN_BLINDING_convert(BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_convert_ex(BIGNUM*;BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_create_param(BN_BLINDING*;const BIGNUM*;BIGNUM*;BN_CTX*;(*)(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int*;BN_MONT_CTX*):BN_BLINDING*"/>
    <method name="BN_BLINDING_free(BN_BLINDING*):void"/>
    <method name="BN_BLINDING_get_flags(const BN_BLINDING*):unsigned long"/>
    <method name="BN_BLINDING_get_thread_id(const BN_BLINDING*):unsigned long"/>
    <method name="BN_BLINDING_invert(BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_invert_ex(BIGNUM*;const BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_new(const BIGNUM*;const BIGNUM*;BIGNUM*):BN_BLINDING*"/>
    <method name="BN_BLINDING_set_flags(BN_BLINDING*;unsigned long):void"/>
    <method name="BN_BLINDING_set_thread_id(BN_BLINDING*;unsigned long):void"/>
    <method name="BN_BLINDING_update(BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_CTX_end(BN_CTX*):void"/>
    <method name="BN_CTX_free(BN_CTX*):void"/>
    <method name="BN_CTX_get(BN_CTX*):BIGNUM*"/>
    <method name="BN_CTX_init(BN_CTX*):void"/>
    <method name="BN_CTX_new():BN_CTX*"/>
    <method name="BN_CTX_start(BN_CTX*):void"/>
    <method name="BN_GENCB_call(BN_GENCB*;int;int):int"/>
    <method name="BN_GF2m_add(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_GF2m_arr2poly(const unsigned int*;BIGNUM*):int"/>
    <method name="BN_GF2m_mod(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_GF2m_mod_arr(BIGNUM*;const BIGNUM*;const unsigned int*):int"/>
    <method name="BN_GF2m_mod_div(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_div_arr(BIGNUM*;const BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_exp(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_exp_arr(BIGNUM*;const BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_inv(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_inv_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_mul(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_mul_arr(BIGNUM*;const BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_solve_quad(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_solve_quad_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqr(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqr_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqrt(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqrt_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_poly2arr(const BIGNUM*;unsigned int*;int):int"/>
    <method name="BN_MONT_CTX_copy(BN_MONT_CTX*;BN_MONT_CTX*):BN_MONT_CTX*"/>
    <method name="BN_MONT_CTX_free(BN_MONT_CTX*):void"/>
    <method name="BN_MONT_CTX_init(BN_MONT_CTX*):void"/>
    <method name="BN_MONT_CTX_new():BN_MONT_CTX*"/>
    <method name="BN_MONT_CTX_set(BN_MONT_CTX*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_MONT_CTX_set_locked(BN_MONT_CTX**;int;const BIGNUM*;BN_CTX*):BN_MONT_CTX*"/>
    <method name="BN_RECP_CTX_free(BN_RECP_CTX*):void"/>
    <method name="BN_RECP_CTX_init(BN_RECP_CTX*):void"/>
    <method name="BN_RECP_CTX_new():BN_RECP_CTX*"/>
    <method name="BN_RECP_CTX_set(BN_RECP_CTX*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_add(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_add_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_bin2bn(const unsigned char*;int;BIGNUM*):BIGNUM*"/>
    <method name="BN_bn2bin(const BIGNUM*;unsigned char*):int"/>
    <method name="BN_bn2dec(const BIGNUM*):char*"/>
    <method name="BN_bn2hex(const BIGNUM*):char*"/>
    <method name="BN_bn2mpi(const BIGNUM*;unsigned char*):int"/>
    <method name="BN_bntest_rand(BIGNUM*;int;int;int):int"/>
    <method name="BN_clear(BIGNUM*):void"/>
    <method name="BN_clear_bit(BIGNUM*;int):int"/>
    <method name="BN_clear_free(BIGNUM*):void"/>
    <method name="BN_cmp(const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_copy(BIGNUM*;const BIGNUM*):BIGNUM*"/>
    <method name="BN_dec2bn(BIGNUM**;const char*):int"/>
    <method name="BN_div(BIGNUM*;BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_div_recp(BIGNUM*;BIGNUM*;const BIGNUM*;BN_RECP_CTX*;BN_CTX*):int"/>
    <method name="BN_div_word(BIGNUM*;unsigned long):unsigned long"/>
    <method name="BN_dup(const BIGNUM*):BIGNUM*"/>
    <method name="BN_exp(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_free(BIGNUM*):void"/>
    <method name="BN_from_montgomery(BIGNUM*;const BIGNUM*;BN_MONT_CTX*;BN_CTX*):int"/>
    <method name="BN_gcd(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_generate_prime(BIGNUM*;int;int;const BIGNUM*;const BIGNUM*;(*)(int;int;void*):void*;void*):BIGNUM*"/>
    <method name="BN_generate_prime_ex(BIGNUM*;int;int;const BIGNUM*;const BIGNUM*;BN_GENCB*):int"/>
    <method name="BN_get0_nist_prime_192():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_224():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_256():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_384():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_521():const BIGNUM*"/>
    <method name="BN_get_params(int):int"/>
    <method name="BN_get_word(const BIGNUM*):unsigned long"/>
    <method name="BN_hex2bn(BIGNUM**;const char*):int"/>
    <method name="BN_init(BIGNUM*):void"/>
    <method name="BN_is_bit_set(const BIGNUM*;int):int"/>
    <method name="BN_is_prime(const BIGNUM*;int;(*)(int;int;void*):void*;BN_CTX*;void*):int"/>
    <method name="BN_is_prime_ex(const BIGNUM*;int;BN_CTX*;BN_GENCB*):int"/>
    <method name="BN_is_prime_fasttest(const BIGNUM*;int;(*)(int;int;void*):void*;BN_CTX*;void*;int):int"/>
    <method name="BN_is_prime_fasttest_ex(const BIGNUM*;int;BN_CTX*;int;BN_GENCB*):int"/>
    <method name="BN_kronecker(const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_lshift(BIGNUM*;const BIGNUM*;int):int"/>
    <method name="BN_lshift1(BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mask_bits(BIGNUM*;int):int"/>
    <method name="BN_mod_add(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_add_quick(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mod_exp(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_exp2_mont(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_mont(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_mont_consttime(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_mont_word(BIGNUM*;unsigned long;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_recp(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_exp_simple(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_inverse(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):BIGNUM*"/>
    <method name="BN_mod_lshift(BIGNUM*;const BIGNUM*;int;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_lshift1(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_lshift1_quick(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mod_lshift_quick(BIGNUM*;const BIGNUM*;int;const BIGNUM*):int"/>
    <method name="BN_mod_mul(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_mul_montgomery(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_MONT_CTX*;BN_CTX*):int"/>
    <method name="BN_mod_mul_reciprocal(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_RECP_CTX*;BN_CTX*):int"/>
    <method name="BN_mod_sqr(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_sqrt(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):BIGNUM*"/>
    <method name="BN_mod_sub(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_sub_quick(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mod_word(const BIGNUM*;unsigned long):unsigned long"/>
    <method name="BN_mpi2bn(const unsigned char*;int;BIGNUM*):BIGNUM*"/>
    <method name="BN_mul(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mul_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_new():BIGNUM*"/>
    <method name="BN_nist_mod_192(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_224(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_256(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_384(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_521(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nnmod(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_num_bits(const BIGNUM*):int"/>
    <method name="BN_num_bits_word(unsigned long):int"/>
    <method name="BN_options():char*"/>
    <method name="BN_print(BIO*;const BIGNUM*):int"/>
    <method name="BN_print(void*;const BIGNUM*):int"/>
    <method name="BN_print_fp(FILE*;const BIGNUM*):int"/>
    <method name="BN_pseudo_rand(BIGNUM*;int;int;int):int"/>
    <method name="BN_pseudo_rand_range(BIGNUM*;BIGNUM*):int"/>
    <method name="BN_rand(BIGNUM*;int;int;int):int"/>
    <method name="BN_rand_range(BIGNUM*;BIGNUM*):int"/>
    <method name="BN_reciprocal(BIGNUM*;const BIGNUM*;int;BN_CTX*):int"/>
    <method name="BN_rshift(BIGNUM*;const BIGNUM*;int):int"/>
    <method name="BN_rshift1(BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_set_bit(BIGNUM*;int):int"/>
    <method name="BN_set_negative(BIGNUM*;int):void"/>
    <method name="BN_set_params(int;int;int;int):void"/>
    <method name="BN_set_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_sqr(BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_sub(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_sub_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_swap(BIGNUM*;BIGNUM*):void"/>
    <method name="BN_to_ASN1_ENUMERATED(BIGNUM*;ASN1_ENUMERATED*):ASN1_ENUMERATED*"/>
    <method name="BN_to_ASN1_INTEGER(BIGNUM*;ASN1_INTEGER*):ASN1_INTEGER*"/>
    <method name="BN_uadd(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_ucmp(const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_usub(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_value_one():const BIGNUM*"/>
    <method name="BUF_MEM_free(BUF_MEM*):void"/>
    <method name="BUF_MEM_grow(BUF_MEM*;int):int"/>
    <method name="BUF_MEM_grow_clean(BUF_MEM*;int):int"/>
    <method name="BUF_MEM_new():BUF_MEM*"/>
    <method name="BUF_memdup(const void*;size_t):void*"/>
    <method name="BUF_strdup(const char*):char*"/>
    <method name="BUF_strlcat(char*;const char*;size_t):size_t"/>
    <method name="BUF_strlcpy(char*;const char*;size_t):size_t"/>
    <method name="BUF_strndup(const char*;size_t):char*"/>
    <method name="BZ2_bzBuffToBuffCompress(char*;unsigned int*;char*;unsigned int;int;int;int):int"/>
    <method name="BZ2_bzBuffToBuffDecompress(char*;unsigned int*;char*;unsigned int;int;int):int"/>
    <method name="BZ2_bzCompress(bz_stream*;int):int"/>
    <method name="BZ2_bzCompressEnd(bz_stream*):int"/>
    <method name="BZ2_bzCompressInit(bz_stream*;int;int;int):int"/>
    <method name="BZ2_bzDecompress(bz_stream*):int"/>
    <method name="BZ2_bzDecompressEnd(bz_stream*):int"/>
    <method name="BZ2_bzDecompressInit(bz_stream*;int;int):int"/>
    <method name="BZ2_bzRead(int*;BZFILE*;void*;int):int"/>
    <method name="BZ2_bzReadClose(int*;BZFILE*):void"/>
    <method name="BZ2_bzReadGetUnused(int*;BZFILE*;void**;int*):void"/>
    <method name="BZ2_bzReadOpen(int*;FILE*;int;int;void*;int):BZFILE*"/>
    <method name="BZ2_bzWrite(int*;BZFILE*;void*;int):void"/>
    <method name="BZ2_bzWriteClose(int*;BZFILE*;int;unsigned int*;unsigned int*):void"/>
    <method name="BZ2_bzWriteClose64(int*;BZFILE*;int;unsigned int*;unsigned int*;unsigned int*;unsigned int*):void"/>
    <method name="BZ2_bzWriteOpen(int*;FILE*;int;int;int):BZFILE*"/>
    <method name="BZ2_bzclose(BZFILE*):void"/>
    <method name="BZ2_bzdopen(int;const char*):BZFILE*"/>
    <method name="BZ2_bzerror(BZFILE*;int*):const char*"/>
    <method name="BZ2_bzflush(BZFILE*):int"/>
    <method name="BZ2_bzlibVersion():const char*"/>
    <method name="BZ2_bzopen(const char*;const char*):BZFILE*"/>
    <method name="BZ2_bzread(BZFILE*;void*;int):int"/>
    <method name="BZ2_bzwrite(BZFILE*;void*;int):int"/>
    <method name="CACurrentMediaTime():CFTimeInterval"/>
    <method name="CAST_cbc_encrypt(const unsigned char*;unsigned char*;long;CAST_KEY*;unsigned char*;int):void"/>
    <method name="CAST_cfb64_encrypt(const unsigned char*;unsigned char*;long;CAST_KEY*;unsigned char*;int*;int):void"/>
    <method name="CAST_decrypt(unsigned long*;CAST_KEY*):void"/>
    <method name="CAST_ecb_encrypt(const unsigned char*;unsigned char*;CAST_KEY*;int):void"/>
    <method name="CAST_encrypt(unsigned long*;CAST_KEY*):void"/>
    <method name="CAST_ofb64_encrypt(const unsigned char*;unsigned char*;long;CAST_KEY*;unsigned char*;int*):void"/>
    <method name="CAST_set_key(CAST_KEY*;int;const unsigned char*):void"/>
    <method name="CAShow(void*):void"/>
    <method name="CAShowFile(void*;FILE*):void"/>
    <method name="CATransform3DConcat(CATransform3D;CATransform3D):CATransform3D"/>
    <method name="CATransform3DEqualToTransform(CATransform3D;CATransform3D):_Bool"/>
    <method name="CATransform3DGetAffineTransform(CATransform3D):CGAffineTransform"/>
    <method name="CATransform3DInvert(CATransform3D):CATransform3D"/>
    <method name="CATransform3DIsAffine(CATransform3D):_Bool"/>
    <method name="CATransform3DIsIdentity(CATransform3D):_Bool"/>
    <method name="CATransform3DMakeAffineTransform(CGAffineTransform):CATransform3D"/>
    <method name="CATransform3DMakeRotation(CGFloat;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DMakeScale(CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DMakeTranslation(CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DRotate(CATransform3D;CGFloat;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DScale(CATransform3D;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DTranslate(CATransform3D;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CCCrypt(CCOperation;CCAlgorithm;CCOptions;const void*;size_t;const void*;const void*;size_t;void*;size_t;size_t*):CCCryptorStatus"/>
    <method name="CCCryptorCreate(CCOperation;CCAlgorithm;CCOptions;const void*;size_t;const void*;CCCryptorRef*):CCCryptorStatus"/>
    <method name="CCCryptorCreateFromData(CCOperation;CCAlgorithm;CCOptions;const void*;size_t;const void*;const void*;size_t;CCCryptorRef*;size_t*):CCCryptorStatus"/>
    <method name="CCCryptorCreateWithMode(CCOperation;CCMode;CCAlgorithm;CCPadding;const void*;const void*;size_t;const void*;size_t;int;CCModeOptions;CCCryptorRef*):CCCryptorStatus"/>
    <method name="CCCryptorFinal(CCCryptorRef;void*;size_t;size_t*):CCCryptorStatus"/>
    <method name="CCCryptorGetOutputLength(CCCryptorRef;size_t;_Bool):size_t"/>
    <method name="CCCryptorRelease(CCCryptorRef):CCCryptorStatus"/>
    <method name="CCCryptorReset(CCCryptorRef;const void*):CCCryptorStatus"/>
    <method name="CCCryptorUpdate(CCCryptorRef;const void*;size_t;void*;size_t;size_t*):CCCryptorStatus"/>
    <method name="CCHmac(CCHmacAlgorithm;const void*;size_t;const void*;size_t;void*):void"/>
    <method name="CCHmacFinal(CCHmacContext*;void*):void"/>
    <method name="CCHmacInit(CCHmacContext*;CCHmacAlgorithm;const void*;size_t):void"/>
    <method name="CCHmacUpdate(CCHmacContext*;const void*;size_t):void"/>
    <method name="CCKeyDerivationPBKDF(CCPBKDFAlgorithm;const char*;size_t;const uint8_t*;size_t;CCPseudoRandomAlgorithm;uint;uint8_t*;size_t):int"/>
    <method name="CCSymmetricKeyUnwrap(CCWrappingAlgorithm;const uint8_t*;const size_t;const uint8_t*;size_t;const uint8_t*;size_t;uint8_t*;size_t*):int"/>
    <method name="CCSymmetricKeyWrap(CCWrappingAlgorithm;const uint8_t*;const size_t;const uint8_t*;size_t;const uint8_t*;size_t;uint8_t*;size_t*):int"/>
    <method name="CCSymmetricUnwrappedSize(CCWrappingAlgorithm;size_t):size_t"/>
    <method name="CCSymmetricWrappedSize(CCWrappingAlgorithm;size_t):size_t"/>
    <method name="CC_MD2(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_MD2_Final(unsigned char*;CC_MD2_CTX*):int"/>
    <method name="CC_MD2_Init(CC_MD2_CTX*):int"/>
    <method name="CC_MD2_Update(CC_MD2_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_MD4(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_MD4_Final(unsigned char*;CC_MD4_CTX*):int"/>
    <method name="CC_MD4_Init(CC_MD4_CTX*):int"/>
    <method name="CC_MD4_Update(CC_MD4_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_MD5(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_MD5_Final(unsigned char*;CC_MD5_CTX*):int"/>
    <method name="CC_MD5_Init(CC_MD5_CTX*):int"/>
    <method name="CC_MD5_Update(CC_MD5_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA1(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA1_Final(unsigned char*;CC_SHA1_CTX*):int"/>
    <method name="CC_SHA1_Init(CC_SHA1_CTX*):int"/>
    <method name="CC_SHA1_Update(CC_SHA1_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA224(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA224_Final(unsigned char*;CC_SHA256_CTX*):int"/>
    <method name="CC_SHA224_Init(CC_SHA256_CTX*):int"/>
    <method name="CC_SHA224_Update(CC_SHA256_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA256(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA256_Final(unsigned char*;CC_SHA256_CTX*):int"/>
    <method name="CC_SHA256_Init(CC_SHA256_CTX*):int"/>
    <method name="CC_SHA256_Update(CC_SHA256_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA384(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA384_Final(unsigned char*;CC_SHA512_CTX*):int"/>
    <method name="CC_SHA384_Init(CC_SHA512_CTX*):int"/>
    <method name="CC_SHA384_Update(CC_SHA512_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA512(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA512_Final(unsigned char*;CC_SHA512_CTX*):int"/>
    <method name="CC_SHA512_Init(CC_SHA512_CTX*):int"/>
    <method name="CC_SHA512_Update(CC_SHA512_CTX*;const void*;CC_LONG):int"/>
    <method name="CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES*):void"/>
    <method name="CERTIFICATEPOLICIES_new():CERTIFICATEPOLICIES*"/>
    <method name="CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime;CFTimeZoneRef;CFGregorianUnits):CFAbsoluteTime"/>
    <method name="CFAbsoluteTimeGetCurrent():CFAbsoluteTime"/>
    <method name="CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime;CFTimeZoneRef):SInt32"/>
    <method name="CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime;CFTimeZoneRef):SInt32"/>
    <method name="CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFAbsoluteTime;CFAbsoluteTime;CFTimeZoneRef;CFOptionFlags):CFGregorianUnits"/>
    <method name="CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime;CFTimeZoneRef):CFGregorianDate"/>
    <method name="CFAbsoluteTimeGetWeekOfYear(CFAbsoluteTime;CFTimeZoneRef):SInt32"/>
    <method name="CFAllocatorAllocate(CFAllocatorRef;CFIndex;CFOptionFlags):void*"/>
    <method name="CFAllocatorCreate(CFAllocatorRef;CFAllocatorContext*):CFAllocatorRef"/>
    <method name="CFAllocatorDeallocate(CFAllocatorRef;void*):void"/>
    <method name="CFAllocatorGetContext(CFAllocatorRef;CFAllocatorContext*):void"/>
    <method name="CFAllocatorGetDefault():CFAllocatorRef"/>
    <method name="CFAllocatorGetPreferredSizeForSize(CFAllocatorRef;CFIndex;CFOptionFlags):CFIndex"/>
    <method name="CFAllocatorGetTypeID():CFTypeID"/>
    <method name="CFAllocatorReallocate(CFAllocatorRef;void*;CFIndex;CFOptionFlags):void*"/>
    <method name="CFAllocatorSetDefault(CFAllocatorRef):void"/>
    <method name="CFArrayAppendArray(CFMutableArrayRef;CFArrayRef;CFRange):void"/>
    <method name="CFArrayAppendValue(CFMutableArrayRef;const void*):void"/>
    <method name="CFArrayApplyFunction(CFArrayRef;CFRange;CFArrayApplierFunction;void*):void"/>
    <method name="CFArrayBSearchValues(CFArrayRef;CFRange;const void*;CFComparatorFunction;void*):CFIndex"/>
    <method name="CFArrayContainsValue(CFArrayRef;CFRange;const void*):Boolean"/>
    <method name="CFArrayCreate(CFAllocatorRef;const void**;CFIndex;const CFArrayCallBacks*):CFArrayRef"/>
    <method name="CFArrayCreateCopy(CFAllocatorRef;CFArrayRef):CFArrayRef"/>
    <method name="CFArrayCreateMutable(CFAllocatorRef;CFIndex;const CFArrayCallBacks*):CFMutableArrayRef"/>
    <method name="CFArrayCreateMutableCopy(CFAllocatorRef;CFIndex;CFArrayRef):CFMutableArrayRef"/>
    <method name="CFArrayExchangeValuesAtIndices(CFMutableArrayRef;CFIndex;CFIndex):void"/>
    <method name="CFArrayGetCount(CFArrayRef):CFIndex"/>
    <method name="CFArrayGetCountOfValue(CFArrayRef;CFRange;const void*):CFIndex"/>
    <method name="CFArrayGetFirstIndexOfValue(CFArrayRef;CFRange;const void*):CFIndex"/>
    <method name="CFArrayGetLastIndexOfValue(CFArrayRef;CFRange;const void*):CFIndex"/>
    <method name="CFArrayGetTypeID():CFTypeID"/>
    <method name="CFArrayGetValueAtIndex(CFArrayRef;CFIndex):const void*"/>
    <method name="CFArrayGetValues(CFArrayRef;CFRange;const void**):void"/>
    <method name="CFArrayInsertValueAtIndex(CFMutableArrayRef;CFIndex;const void*):void"/>
    <method name="CFArrayRemoveAllValues(CFMutableArrayRef):void"/>
    <method name="CFArrayRemoveValueAtIndex(CFMutableArrayRef;CFIndex):void"/>
    <method name="CFArrayReplaceValues(CFMutableArrayRef;CFRange;const void**;CFIndex):void"/>
    <method name="CFArraySetValueAtIndex(CFMutableArrayRef;CFIndex;const void*):void"/>
    <method name="CFArraySortValues(CFMutableArrayRef;CFRange;CFComparatorFunction;void*):void"/>
    <method name="CFAttributedStringBeginEditing(CFMutableAttributedStringRef):void"/>
    <method name="CFAttributedStringCreate(CFAllocatorRef;CFStringRef;CFDictionaryRef):CFAttributedStringRef"/>
    <method name="CFAttributedStringCreateCopy(CFAllocatorRef;CFAttributedStringRef):CFAttributedStringRef"/>
    <method name="CFAttributedStringCreateMutable(CFAllocatorRef;CFIndex):CFMutableAttributedStringRef"/>
    <method name="CFAttributedStringCreateMutableCopy(CFAllocatorRef;CFIndex;CFAttributedStringRef):CFMutableAttributedStringRef"/>
    <method name="CFAttributedStringCreateWithSubstring(CFAllocatorRef;CFAttributedStringRef;CFRange):CFAttributedStringRef"/>
    <method name="CFAttributedStringEndEditing(CFMutableAttributedStringRef):void"/>
    <method name="CFAttributedStringGetAttribute(CFAttributedStringRef;CFIndex;CFStringRef;CFRange*):CFTypeRef"/>
    <method name="CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef;CFIndex;CFStringRef;CFRange;CFRange*):CFTypeRef"/>
    <method name="CFAttributedStringGetAttributes(CFAttributedStringRef;CFIndex;CFRange*):CFDictionaryRef"/>
    <method name="CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef;CFIndex;CFRange;CFRange*):CFDictionaryRef"/>
    <method name="CFAttributedStringGetLength(CFAttributedStringRef):CFIndex"/>
    <method name="CFAttributedStringGetMutableString(CFMutableAttributedStringRef):CFMutableStringRef"/>
    <method name="CFAttributedStringGetString(CFAttributedStringRef):CFStringRef"/>
    <method name="CFAttributedStringGetTypeID():CFTypeID"/>
    <method name="CFAttributedStringRemoveAttribute(CFMutableAttributedStringRef;CFRange;CFStringRef):void"/>
    <method name="CFAttributedStringReplaceAttributedString(CFMutableAttributedStringRef;CFRange;CFAttributedStringRef):void"/>
    <method name="CFAttributedStringReplaceString(CFMutableAttributedStringRef;CFRange;CFStringRef):void"/>
    <method name="CFAttributedStringSetAttribute(CFMutableAttributedStringRef;CFRange;CFStringRef;CFTypeRef):void"/>
    <method name="CFAttributedStringSetAttributes(CFMutableAttributedStringRef;CFRange;CFDictionaryRef;Boolean):void"/>
    <method name="CFBagAddValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBagApplyFunction(CFBagRef;CFBagApplierFunction;void*):void"/>
    <method name="CFBagContainsValue(CFBagRef;const void*):Boolean"/>
    <method name="CFBagCreate(CFAllocatorRef;const void**;CFIndex;const CFBagCallBacks*):CFBagRef"/>
    <method name="CFBagCreateCopy(CFAllocatorRef;CFBagRef):CFBagRef"/>
    <method name="CFBagCreateMutable(CFAllocatorRef;CFIndex;const CFBagCallBacks*):CFMutableBagRef"/>
    <method name="CFBagCreateMutableCopy(CFAllocatorRef;CFIndex;CFBagRef):CFMutableBagRef"/>
    <method name="CFBagGetCount(CFBagRef):CFIndex"/>
    <method name="CFBagGetCountOfValue(CFBagRef;const void*):CFIndex"/>
    <method name="CFBagGetTypeID():CFTypeID"/>
    <method name="CFBagGetValue(CFBagRef;const void*):const void*"/>
    <method name="CFBagGetValueIfPresent(CFBagRef;const void*;const void**):Boolean"/>
    <method name="CFBagGetValues(CFBagRef;const void**):void"/>
    <method name="CFBagRemoveAllValues(CFMutableBagRef):void"/>
    <method name="CFBagRemoveValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBagReplaceValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBagSetValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBinaryHeapAddValue(CFBinaryHeapRef;const void*):void"/>
    <method name="CFBinaryHeapApplyFunction(CFBinaryHeapRef;CFBinaryHeapApplierFunction;void*):void"/>
    <method name="CFBinaryHeapContainsValue(CFBinaryHeapRef;const void*):Boolean"/>
    <method name="CFBinaryHeapCreate(CFAllocatorRef;CFIndex;const CFBinaryHeapCallBacks*;const CFBinaryHeapCompareContext*):CFBinaryHeapRef"/>
    <method name="CFBinaryHeapCreateCopy(CFAllocatorRef;CFIndex;CFBinaryHeapRef):CFBinaryHeapRef"/>
    <method name="CFBinaryHeapGetCount(CFBinaryHeapRef):CFIndex"/>
    <method name="CFBinaryHeapGetCountOfValue(CFBinaryHeapRef;const void*):CFIndex"/>
    <method name="CFBinaryHeapGetMinimum(CFBinaryHeapRef):const void*"/>
    <method name="CFBinaryHeapGetMinimumIfPresent(CFBinaryHeapRef;const void**):Boolean"/>
    <method name="CFBinaryHeapGetTypeID():CFTypeID"/>
    <method name="CFBinaryHeapGetValues(CFBinaryHeapRef;const void**):void"/>
    <method name="CFBinaryHeapRemoveAllValues(CFBinaryHeapRef):void"/>
    <method name="CFBinaryHeapRemoveMinimumValue(CFBinaryHeapRef):void"/>
    <method name="CFBitVectorContainsBit(CFBitVectorRef;CFRange;CFBit):Boolean"/>
    <method name="CFBitVectorCreate(CFAllocatorRef;const UInt8*;CFIndex):CFBitVectorRef"/>
    <method name="CFBitVectorCreateCopy(CFAllocatorRef;CFBitVectorRef):CFBitVectorRef"/>
    <method name="CFBitVectorCreateMutable(CFAllocatorRef;CFIndex):CFMutableBitVectorRef"/>
    <method name="CFBitVectorCreateMutableCopy(CFAllocatorRef;CFIndex;CFBitVectorRef):CFMutableBitVectorRef"/>
    <method name="CFBitVectorFlipBitAtIndex(CFMutableBitVectorRef;CFIndex):void"/>
    <method name="CFBitVectorFlipBits(CFMutableBitVectorRef;CFRange):void"/>
    <method name="CFBitVectorGetBitAtIndex(CFBitVectorRef;CFIndex):CFBit"/>
    <method name="CFBitVectorGetBits(CFBitVectorRef;CFRange;UInt8*):void"/>
    <method name="CFBitVectorGetCount(CFBitVectorRef):CFIndex"/>
    <method name="CFBitVectorGetCountOfBit(CFBitVectorRef;CFRange;CFBit):CFIndex"/>
    <method name="CFBitVectorGetFirstIndexOfBit(CFBitVectorRef;CFRange;CFBit):CFIndex"/>
    <method name="CFBitVectorGetLastIndexOfBit(CFBitVectorRef;CFRange;CFBit):CFIndex"/>
    <method name="CFBitVectorGetTypeID():CFTypeID"/>
    <method name="CFBitVectorSetAllBits(CFMutableBitVectorRef;CFBit):void"/>
    <method name="CFBitVectorSetBitAtIndex(CFMutableBitVectorRef;CFIndex;CFBit):void"/>
    <method name="CFBitVectorSetBits(CFMutableBitVectorRef;CFRange;CFBit):void"/>
    <method name="CFBitVectorSetCount(CFMutableBitVectorRef;CFIndex):void"/>
    <method name="CFBooleanGetTypeID():CFTypeID"/>
    <method name="CFBooleanGetValue(CFBooleanRef):Boolean"/>
    <method name="CFBridgingRelease(CFTypeRef):id"/>
    <method name="CFBridgingRetain(id):CFTypeRef"/>
    <method name="CFBundleCloseBundleResourceMap(CFBundleRef;CFBundleRefNum):void"/>
    <method name="CFBundleCopyAuxiliaryExecutableURL(CFBundleRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyBuiltInPlugInsURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyBundleLocalizations(CFBundleRef):CFArrayRef"/>
    <method name="CFBundleCopyBundleURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyExecutableArchitectures(CFBundleRef):CFArrayRef"/>
    <method name="CFBundleCopyExecutableArchitecturesForURL(CFURLRef):CFArrayRef"/>
    <method name="CFBundleCopyExecutableURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyInfoDictionaryForURL(CFURLRef):CFDictionaryRef"/>
    <method name="CFBundleCopyInfoDictionaryInDirectory(CFURLRef):CFDictionaryRef"/>
    <method name="CFBundleCopyLocalizationsForPreferences(CFArrayRef;CFArrayRef):CFArrayRef"/>
    <method name="CFBundleCopyLocalizationsForURL(CFURLRef):CFArrayRef"/>
    <method name="CFBundleCopyLocalizedString(CFBundleRef;CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef):CFArrayRef"/>
    <method name="CFBundleCopyPrivateFrameworksURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURL(CFBundleRef;CFStringRef;CFStringRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURLForLocalization(CFBundleRef;CFStringRef;CFStringRef;CFStringRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURLInDirectory(CFURLRef;CFStringRef;CFStringRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURLsOfType(CFBundleRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef;CFStringRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleCopyResourcesDirectoryURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopySharedFrameworksURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopySharedSupportURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopySupportFilesDirectoryURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCreate(CFAllocatorRef;CFURLRef):CFBundleRef"/>
    <method name="CFBundleCreateBundlesFromDirectory(CFAllocatorRef;CFURLRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleGetAllBundles():CFArrayRef"/>
    <method name="CFBundleGetBundleWithIdentifier(CFStringRef):CFBundleRef"/>
    <method name="CFBundleGetDataPointerForName(CFBundleRef;CFStringRef):void*"/>
    <method name="CFBundleGetDataPointersForNames(CFBundleRef;CFArrayRef;void**):void"/>
    <method name="CFBundleGetDevelopmentRegion(CFBundleRef):CFStringRef"/>
    <method name="CFBundleGetFunctionPointerForName(CFBundleRef;CFStringRef):void*"/>
    <method name="CFBundleGetFunctionPointersForNames(CFBundleRef;CFArrayRef;void**):void"/>
    <method name="CFBundleGetIdentifier(CFBundleRef):CFStringRef"/>
    <method name="CFBundleGetInfoDictionary(CFBundleRef):CFDictionaryRef"/>
    <method name="CFBundleGetLocalInfoDictionary(CFBundleRef):CFDictionaryRef"/>
    <method name="CFBundleGetMainBundle():CFBundleRef"/>
    <method name="CFBundleGetPackageInfo(CFBundleRef;UInt32*;UInt32*):void"/>
    <method name="CFBundleGetPackageInfoInDirectory(CFURLRef;UInt32*;UInt32*):Boolean"/>
    <method name="CFBundleGetPlugIn(CFBundleRef):CFPlugInRef"/>
    <method name="CFBundleGetTypeID():CFTypeID"/>
    <method name="CFBundleGetValueForInfoDictionaryKey(CFBundleRef;CFStringRef):CFTypeRef"/>
    <method name="CFBundleGetVersionNumber(CFBundleRef):UInt32"/>
    <method name="CFBundleIsExecutableLoaded(CFBundleRef):Boolean"/>
    <method name="CFBundleLoadExecutable(CFBundleRef):Boolean"/>
    <method name="CFBundleLoadExecutableAndReturnError(CFBundleRef;CFErrorRef*):Boolean"/>
    <method name="CFBundleOpenBundleResourceFiles(CFBundleRef;CFBundleRefNum*;CFBundleRefNum*):SInt32"/>
    <method name="CFBundleOpenBundleResourceMap(CFBundleRef):CFBundleRefNum"/>
    <method name="CFBundlePreflightExecutable(CFBundleRef;CFErrorRef*):Boolean"/>
    <method name="CFBundleUnloadExecutable(CFBundleRef):void"/>
    <method name="CFByteOrderGetCurrent():CFByteOrder"/>
    <method name="CFCalendarAddComponents(CFCalendarRef;CFAbsoluteTime*;CFOptionFlags;const char*, ...):Boolean"/>
    <method name="CFCalendarComposeAbsoluteTime(CFCalendarRef;CFAbsoluteTime*;const char*, ...):Boolean"/>
    <method name="CFCalendarCopyCurrent():CFCalendarRef"/>
    <method name="CFCalendarCopyLocale(CFCalendarRef):CFLocaleRef"/>
    <method name="CFCalendarCopyTimeZone(CFCalendarRef):CFTimeZoneRef"/>
    <method name="CFCalendarCreateWithIdentifier(CFAllocatorRef;CFStringRef):CFCalendarRef"/>
    <method name="CFCalendarDecomposeAbsoluteTime(CFCalendarRef;CFAbsoluteTime;const char*, ...):Boolean"/>
    <method name="CFCalendarGetComponentDifference(CFCalendarRef;CFAbsoluteTime;CFAbsoluteTime;CFOptionFlags;const char*, ...):Boolean"/>
    <method name="CFCalendarGetFirstWeekday(CFCalendarRef):CFIndex"/>
    <method name="CFCalendarGetIdentifier(CFCalendarRef):CFStringRef"/>
    <method name="CFCalendarGetMaximumRangeOfUnit(CFCalendarRef;CFCalendarUnit):CFRange"/>
    <method name="CFCalendarGetMinimumDaysInFirstWeek(CFCalendarRef):CFIndex"/>
    <method name="CFCalendarGetMinimumRangeOfUnit(CFCalendarRef;CFCalendarUnit):CFRange"/>
    <method name="CFCalendarGetOrdinalityOfUnit(CFCalendarRef;CFCalendarUnit;CFCalendarUnit;CFAbsoluteTime):CFIndex"/>
    <method name="CFCalendarGetRangeOfUnit(CFCalendarRef;CFCalendarUnit;CFCalendarUnit;CFAbsoluteTime):CFRange"/>
    <method name="CFCalendarGetTimeRangeOfUnit(CFCalendarRef;CFCalendarUnit;CFAbsoluteTime;CFAbsoluteTime*;CFTimeInterval*):Boolean"/>
    <method name="CFCalendarGetTypeID():CFTypeID"/>
    <method name="CFCalendarSetFirstWeekday(CFCalendarRef;CFIndex):void"/>
    <method name="CFCalendarSetLocale(CFCalendarRef;CFLocaleRef):void"/>
    <method name="CFCalendarSetMinimumDaysInFirstWeek(CFCalendarRef;CFIndex):void"/>
    <method name="CFCalendarSetTimeZone(CFCalendarRef;CFTimeZoneRef):void"/>
    <method name="CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef;CFRange):void"/>
    <method name="CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef;CFStringRef):void"/>
    <method name="CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef;CFCharacterSetRef):CFDataRef"/>
    <method name="CFCharacterSetCreateCopy(CFAllocatorRef;CFCharacterSetRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateInvertedSet(CFAllocatorRef;CFCharacterSetRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateMutable(CFAllocatorRef):CFMutableCharacterSetRef"/>
    <method name="CFCharacterSetCreateMutableCopy(CFAllocatorRef;CFCharacterSetRef):CFMutableCharacterSetRef"/>
    <method name="CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef;CFDataRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef;CFRange):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateWithCharactersInString(CFAllocatorRef;CFStringRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet):CFCharacterSetRef"/>
    <method name="CFCharacterSetGetTypeID():CFTypeID"/>
    <method name="CFCharacterSetHasMemberInPlane(CFCharacterSetRef;CFIndex):Boolean"/>
    <method name="CFCharacterSetIntersect(CFMutableCharacterSetRef;CFCharacterSetRef):void"/>
    <method name="CFCharacterSetInvert(CFMutableCharacterSetRef):void"/>
    <method name="CFCharacterSetIsCharacterMember(CFCharacterSetRef;UniChar):Boolean"/>
    <method name="CFCharacterSetIsLongCharacterMember(CFCharacterSetRef;UTF32Char):Boolean"/>
    <method name="CFCharacterSetIsSupersetOfSet(CFCharacterSetRef;CFCharacterSetRef):Boolean"/>
    <method name="CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef;CFRange):void"/>
    <method name="CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef;CFStringRef):void"/>
    <method name="CFCharacterSetUnion(CFMutableCharacterSetRef;CFCharacterSetRef):void"/>
    <method name="CFConvertDoubleHostToSwapped(double):CFSwappedFloat64"/>
    <method name="CFConvertDoubleSwappedToHost(CFSwappedFloat64):double"/>
    <method name="CFConvertFloat32HostToSwapped(Float32):CFSwappedFloat32"/>
    <method name="CFConvertFloat32SwappedToHost(CFSwappedFloat32):Float32"/>
    <method name="CFConvertFloat64HostToSwapped(Float64):CFSwappedFloat64"/>
    <method name="CFConvertFloat64SwappedToHost(CFSwappedFloat64):Float64"/>
    <method name="CFConvertFloatHostToSwapped(float):CFSwappedFloat32"/>
    <method name="CFConvertFloatSwappedToHost(CFSwappedFloat32):float"/>
    <method name="CFCopyDescription(CFTypeRef):CFStringRef"/>
    <method name="CFCopyHomeDirectoryURL():CFURLRef"/>
    <method name="CFCopyTypeIDDescription(CFTypeID):CFStringRef"/>
    <method name="CFDataAppendBytes(CFMutableDataRef;const UInt8*;CFIndex):void"/>
    <method name="CFDataCreate(CFAllocatorRef;const UInt8*;CFIndex):CFDataRef"/>
    <method name="CFDataCreateCopy(CFAllocatorRef;CFDataRef):CFDataRef"/>
    <method name="CFDataCreateMutable(CFAllocatorRef;CFIndex):CFMutableDataRef"/>
    <method name="CFDataCreateMutableCopy(CFAllocatorRef;CFIndex;CFDataRef):CFMutableDataRef"/>
    <method name="CFDataCreateWithBytesNoCopy(CFAllocatorRef;const UInt8*;CFIndex;CFAllocatorRef):CFDataRef"/>
    <method name="CFDataDeleteBytes(CFMutableDataRef;CFRange):void"/>
    <method name="CFDataFind(CFDataRef;CFDataRef;CFRange;CFDataSearchFlags):CFRange"/>
    <method name="CFDataGetBytePtr(CFDataRef):const UInt8*"/>
    <method name="CFDataGetBytes(CFDataRef;CFRange;UInt8*):void"/>
    <method name="CFDataGetLength(CFDataRef):CFIndex"/>
    <method name="CFDataGetMutableBytePtr(CFMutableDataRef):UInt8*"/>
    <method name="CFDataGetTypeID():CFTypeID"/>
    <method name="CFDataIncreaseLength(CFMutableDataRef;CFIndex):void"/>
    <method name="CFDataReplaceBytes(CFMutableDataRef;CFRange;const UInt8*;CFIndex):void"/>
    <method name="CFDataSetLength(CFMutableDataRef;CFIndex):void"/>
    <method name="CFDateCompare(CFDateRef;CFDateRef;void*):CFComparisonResult"/>
    <method name="CFDateCreate(CFAllocatorRef;CFAbsoluteTime):CFDateRef"/>
    <method name="CFDateFormatterCopyProperty(CFDateFormatterRef;CFStringRef):CFTypeRef"/>
    <method name="CFDateFormatterCreate(CFAllocatorRef;CFLocaleRef;CFDateFormatterStyle;CFDateFormatterStyle):CFDateFormatterRef"/>
    <method name="CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef;CFStringRef;CFOptionFlags;CFLocaleRef):CFStringRef"/>
    <method name="CFDateFormatterCreateDateFromString(CFAllocatorRef;CFDateFormatterRef;CFStringRef;CFRange*):CFDateRef"/>
    <method name="CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef;CFDateFormatterRef;CFAbsoluteTime):CFStringRef"/>
    <method name="CFDateFormatterCreateStringWithDate(CFAllocatorRef;CFDateFormatterRef;CFDateRef):CFStringRef"/>
    <method name="CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef;CFStringRef;CFRange*;CFAbsoluteTime*):Boolean"/>
    <method name="CFDateFormatterGetDateStyle(CFDateFormatterRef):CFDateFormatterStyle"/>
    <method name="CFDateFormatterGetFormat(CFDateFormatterRef):CFStringRef"/>
    <method name="CFDateFormatterGetLocale(CFDateFormatterRef):CFLocaleRef"/>
    <method name="CFDateFormatterGetTimeStyle(CFDateFormatterRef):CFDateFormatterStyle"/>
    <method name="CFDateFormatterGetTypeID():CFTypeID"/>
    <method name="CFDateFormatterSetFormat(CFDateFormatterRef;CFStringRef):void"/>
    <method name="CFDateFormatterSetProperty(CFDateFormatterRef;CFStringRef;CFTypeRef):void"/>
    <method name="CFDateGetAbsoluteTime(CFDateRef):CFAbsoluteTime"/>
    <method name="CFDateGetTimeIntervalSinceDate(CFDateRef;CFDateRef):CFTimeInterval"/>
    <method name="CFDateGetTypeID():CFTypeID"/>
    <method name="CFDictionaryAddValue(CFMutableDictionaryRef;const void*;const void*):void"/>
    <method name="CFDictionaryApplyFunction(CFDictionaryRef;CFDictionaryApplierFunction;void*):void"/>
    <method name="CFDictionaryContainsKey(CFDictionaryRef;const void*):Boolean"/>
    <method name="CFDictionaryContainsValue(CFDictionaryRef;const void*):Boolean"/>
    <method name="CFDictionaryCreate(CFAllocatorRef;const void**;const void**;CFIndex;const CFDictionaryKeyCallBacks*;const CFDictionaryValueCallBacks*):CFDictionaryRef"/>
    <method name="CFDictionaryCreateCopy(CFAllocatorRef;CFDictionaryRef):CFDictionaryRef"/>
    <method name="CFDictionaryCreateMutable(CFAllocatorRef;CFIndex;const CFDictionaryKeyCallBacks*;const CFDictionaryValueCallBacks*):CFMutableDictionaryRef"/>
    <method name="CFDictionaryCreateMutableCopy(CFAllocatorRef;CFIndex;CFDictionaryRef):CFMutableDictionaryRef"/>
    <method name="CFDictionaryGetCount(CFDictionaryRef):CFIndex"/>
    <method name="CFDictionaryGetCountOfKey(CFDictionaryRef;const void*):CFIndex"/>
    <method name="CFDictionaryGetCountOfValue(CFDictionaryRef;const void*):CFIndex"/>
    <method name="CFDictionaryGetKeysAndValues(CFDictionaryRef;const void**;const void**):void"/>
    <method name="CFDictionaryGetTypeID():CFTypeID"/>
    <method name="CFDictionaryGetValue(CFDictionaryRef;const void*):const void*"/>
    <method name="CFDictionaryGetValueIfPresent(CFDictionaryRef;const void*;const void**):Boolean"/>
    <method name="CFDictionaryRemoveAllValues(CFMutableDictionaryRef):void"/>
    <method name="CFDictionaryRemoveValue(CFMutableDictionaryRef;const void*):void"/>
    <method name="CFDictionaryReplaceValue(CFMutableDictionaryRef;const void*;const void*):void"/>
    <method name="CFDictionarySetValue(CFMutableDictionaryRef;const void*;const void*):void"/>
    <method name="CFEqual(CFTypeRef;CFTypeRef):Boolean"/>
    <method name="CFErrorCopyDescription(CFErrorRef):CFStringRef"/>
    <method name="CFErrorCopyFailureReason(CFErrorRef):CFStringRef"/>
    <method name="CFErrorCopyRecoverySuggestion(CFErrorRef):CFStringRef"/>
    <method name="CFErrorCopyUserInfo(CFErrorRef):CFDictionaryRef"/>
    <method name="CFErrorCreate(CFAllocatorRef;CFStringRef;CFIndex;CFDictionaryRef):CFErrorRef"/>
    <method name="CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef;CFStringRef;CFIndex;const const void**;const const void**;CFIndex):CFErrorRef"/>
    <method name="CFErrorGetCode(CFErrorRef):CFIndex"/>
    <method name="CFErrorGetDomain(CFErrorRef):CFStringRef"/>
    <method name="CFErrorGetTypeID():CFTypeID"/>
    <method name="CFFTPCreateParsedResourceListing(CFAllocatorRef;const UInt8*;CFIndex;CFDictionaryRef*):CFIndex"/>
    <method name="CFFileDescriptorCreate(CFAllocatorRef;CFFileDescriptorNativeDescriptor;Boolean;CFFileDescriptorCallBack;const CFFileDescriptorContext*):CFFileDescriptorRef"/>
    <method name="CFFileDescriptorCreateRunLoopSource(CFAllocatorRef;CFFileDescriptorRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFFileDescriptorDisableCallBacks(CFFileDescriptorRef;CFOptionFlags):void"/>
    <method name="CFFileDescriptorEnableCallBacks(CFFileDescriptorRef;CFOptionFlags):void"/>
    <method name="CFFileDescriptorGetContext(CFFileDescriptorRef;CFFileDescriptorContext*):void"/>
    <method name="CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef):CFFileDescriptorNativeDescriptor"/>
    <method name="CFFileDescriptorGetTypeID():CFTypeID"/>
    <method name="CFFileDescriptorInvalidate(CFFileDescriptorRef):void"/>
    <method name="CFFileDescriptorIsValid(CFFileDescriptorRef):Boolean"/>
    <method name="CFGetAllocator(CFTypeRef):CFAllocatorRef"/>
    <method name="CFGetRetainCount(CFTypeRef):CFIndex"/>
    <method name="CFGetTypeID(CFTypeRef):CFTypeID"/>
    <method name="CFGregorianDateGetAbsoluteTime(CFGregorianDate;CFTimeZoneRef):CFAbsoluteTime"/>
    <method name="CFGregorianDateIsValid(CFGregorianDate;CFOptionFlags):Boolean"/>
    <method name="CFHTTPAuthenticationAppliesToRequest(CFHTTPAuthenticationRef;CFHTTPMessageRef):Boolean"/>
    <method name="CFHTTPAuthenticationCopyDomains(CFHTTPAuthenticationRef):CFArrayRef"/>
    <method name="CFHTTPAuthenticationCopyMethod(CFHTTPAuthenticationRef):CFStringRef"/>
    <method name="CFHTTPAuthenticationCopyRealm(CFHTTPAuthenticationRef):CFStringRef"/>
    <method name="CFHTTPAuthenticationCreateFromResponse(CFAllocatorRef;CFHTTPMessageRef):CFHTTPAuthenticationRef"/>
    <method name="CFHTTPAuthenticationGetTypeID():CFTypeID"/>
    <method name="CFHTTPAuthenticationIsValid(CFHTTPAuthenticationRef;CFStreamError*):Boolean"/>
    <method name="CFHTTPAuthenticationRequiresAccountDomain(CFHTTPAuthenticationRef):Boolean"/>
    <method name="CFHTTPAuthenticationRequiresOrderedRequests(CFHTTPAuthenticationRef):Boolean"/>
    <method name="CFHTTPAuthenticationRequiresUserNameAndPassword(CFHTTPAuthenticationRef):Boolean"/>
    <method name="CFHTTPMessageAddAuthentication(CFHTTPMessageRef;CFHTTPMessageRef;CFStringRef;CFStringRef;CFStringRef;Boolean):Boolean"/>
    <method name="CFHTTPMessageAppendBytes(CFHTTPMessageRef;const UInt8*;CFIndex):Boolean"/>
    <method name="CFHTTPMessageApplyCredentialDictionary(CFHTTPMessageRef;CFHTTPAuthenticationRef;CFDictionaryRef;CFStreamError*):Boolean"/>
    <method name="CFHTTPMessageApplyCredentials(CFHTTPMessageRef;CFHTTPAuthenticationRef;CFStringRef;CFStringRef;CFStreamError*):Boolean"/>
    <method name="CFHTTPMessageCopyAllHeaderFields(CFHTTPMessageRef):CFDictionaryRef"/>
    <method name="CFHTTPMessageCopyBody(CFHTTPMessageRef):CFDataRef"/>
    <method name="CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef;CFStringRef):CFStringRef"/>
    <method name="CFHTTPMessageCopyRequestMethod(CFHTTPMessageRef):CFStringRef"/>
    <method name="CFHTTPMessageCopyRequestURL(CFHTTPMessageRef):CFURLRef"/>
    <method name="CFHTTPMessageCopyResponseStatusLine(CFHTTPMessageRef):CFStringRef"/>
    <method name="CFHTTPMessageCopySerializedMessage(CFHTTPMessageRef):CFDataRef"/>
    <method name="CFHTTPMessageCopyVersion(CFHTTPMessageRef):CFStringRef"/>
    <method name="CFHTTPMessageCreateCopy(CFAllocatorRef;CFHTTPMessageRef):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageCreateEmpty(CFAllocatorRef;Boolean):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageCreateRequest(CFAllocatorRef;CFStringRef;CFURLRef;CFStringRef):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageCreateResponse(CFAllocatorRef;CFIndex;CFStringRef;CFStringRef):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef):CFIndex"/>
    <method name="CFHTTPMessageGetTypeID():CFTypeID"/>
    <method name="CFHTTPMessageIsHeaderComplete(CFHTTPMessageRef):Boolean"/>
    <method name="CFHTTPMessageIsRequest(CFHTTPMessageRef):Boolean"/>
    <method name="CFHTTPMessageSetBody(CFHTTPMessageRef;CFDataRef):void"/>
    <method name="CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef;CFStringRef;CFStringRef):void"/>
    <method name="CFHTTPReadStreamSetProxy(CFReadStreamRef;CFStringRef;CFIndex):void"/>
    <method name="CFHTTPReadStreamSetRedirectsAutomatically(CFReadStreamRef;Boolean):void"/>
    <method name="CFHash(CFTypeRef):CFHashCode"/>
    <method name="CFHostCancelInfoResolution(CFHostRef;CFHostInfoType):void"/>
    <method name="CFHostCreateCopy(CFAllocatorRef;CFHostRef):CFHostRef"/>
    <method name="CFHostCreateWithAddress(CFAllocatorRef;CFDataRef):CFHostRef"/>
    <method name="CFHostCreateWithName(CFAllocatorRef;CFStringRef):CFHostRef"/>
    <method name="CFHostGetAddressing(CFHostRef;Boolean*):CFArrayRef"/>
    <method name="CFHostGetNames(CFHostRef;Boolean*):CFArrayRef"/>
    <method name="CFHostGetReachability(CFHostRef;Boolean*):CFDataRef"/>
    <method name="CFHostGetTypeID():CFTypeID"/>
    <method name="CFHostScheduleWithRunLoop(CFHostRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFHostSetClient(CFHostRef;CFHostClientCallBack;CFHostClientContext*):Boolean"/>
    <method name="CFHostStartInfoResolution(CFHostRef;CFHostInfoType;CFStreamError*):Boolean"/>
    <method name="CFHostUnscheduleFromRunLoop(CFHostRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFLocaleCopyAvailableLocaleIdentifiers():CFArrayRef"/>
    <method name="CFLocaleCopyCommonISOCurrencyCodes():CFArrayRef"/>
    <method name="CFLocaleCopyCurrent():CFLocaleRef"/>
    <method name="CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="CFLocaleCopyISOCountryCodes():CFArrayRef"/>
    <method name="CFLocaleCopyISOCurrencyCodes():CFArrayRef"/>
    <method name="CFLocaleCopyISOLanguageCodes():CFArrayRef"/>
    <method name="CFLocaleCopyPreferredLanguages():CFArrayRef"/>
    <method name="CFLocaleCreate(CFAllocatorRef;CFStringRef):CFLocaleRef"/>
    <method name="CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef;LangCode;RegionCode):CFStringRef"/>
    <method name="CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef;CFStringRef):CFDictionaryRef"/>
    <method name="CFLocaleCreateCopy(CFAllocatorRef;CFLocaleRef):CFLocaleRef"/>
    <method name="CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef;CFDictionaryRef):CFStringRef"/>
    <method name="CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(CFAllocatorRef;uint32_t):CFStringRef"/>
    <method name="CFLocaleGetIdentifier(CFLocaleRef):CFStringRef"/>
    <method name="CFLocaleGetLanguageCharacterDirection(CFStringRef):CFLocaleLanguageDirection"/>
    <method name="CFLocaleGetLanguageLineDirection(CFStringRef):CFLocaleLanguageDirection"/>
    <method name="CFLocaleGetSystem():CFLocaleRef"/>
    <method name="CFLocaleGetTypeID():CFTypeID"/>
    <method name="CFLocaleGetValue(CFLocaleRef;CFStringRef):CFTypeRef"/>
    <method name="CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(CFStringRef):uint32_t"/>
    <method name="CFMachPortCreate(CFAllocatorRef;CFMachPortCallBack;CFMachPortContext*;Boolean*):CFMachPortRef"/>
    <method name="CFMachPortCreateRunLoopSource(CFAllocatorRef;CFMachPortRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFMachPortCreateWithPort(CFAllocatorRef;mach_port_t;CFMachPortCallBack;CFMachPortContext*;Boolean*):CFMachPortRef"/>
    <method name="CFMachPortGetContext(CFMachPortRef;CFMachPortContext*):void"/>
    <method name="CFMachPortGetInvalidationCallBack(CFMachPortRef):CFMachPortInvalidationCallBack"/>
    <method name="CFMachPortGetPort(CFMachPortRef):mach_port_t"/>
    <method name="CFMachPortGetTypeID():CFTypeID"/>
    <method name="CFMachPortInvalidate(CFMachPortRef):void"/>
    <method name="CFMachPortIsValid(CFMachPortRef):Boolean"/>
    <method name="CFMachPortSetInvalidationCallBack(CFMachPortRef;CFMachPortInvalidationCallBack):void"/>
    <method name="CFMakeCollectable(CFTypeRef):CFTypeRef"/>
    <method name="CFMessagePortCreateLocal(CFAllocatorRef;CFStringRef;CFMessagePortCallBack;CFMessagePortContext*;Boolean*):CFMessagePortRef"/>
    <method name="CFMessagePortCreateRemote(CFAllocatorRef;CFStringRef):CFMessagePortRef"/>
    <method name="CFMessagePortCreateRunLoopSource(CFAllocatorRef;CFMessagePortRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFMessagePortGetContext(CFMessagePortRef;CFMessagePortContext*):void"/>
    <method name="CFMessagePortGetInvalidationCallBack(CFMessagePortRef):CFMessagePortInvalidationCallBack"/>
    <method name="CFMessagePortGetName(CFMessagePortRef):CFStringRef"/>
    <method name="CFMessagePortGetTypeID():CFTypeID"/>
    <method name="CFMessagePortInvalidate(CFMessagePortRef):void"/>
    <method name="CFMessagePortIsRemote(CFMessagePortRef):Boolean"/>
    <method name="CFMessagePortIsValid(CFMessagePortRef):Boolean"/>
    <method name="CFMessagePortSendRequest(CFMessagePortRef;SInt32;CFDataRef;CFTimeInterval;CFTimeInterval;CFStringRef;CFDataRef*):SInt32"/>
    <method name="CFMessagePortSetDispatchQueue(CFMessagePortRef;dispatch_queue_t):void"/>
    <method name="CFMessagePortSetInvalidationCallBack(CFMessagePortRef;CFMessagePortInvalidationCallBack):void"/>
    <method name="CFMessagePortSetName(CFMessagePortRef;CFStringRef):Boolean"/>
    <method name="CFNetDiagnosticCopyNetworkStatusPassively(CFNetDiagnosticRef;CFStringRef*):CFNetDiagnosticStatus"/>
    <method name="CFNetDiagnosticCreateWithStreams(CFAllocatorRef;CFReadStreamRef;CFWriteStreamRef):CFNetDiagnosticRef"/>
    <method name="CFNetDiagnosticCreateWithURL(CFAllocatorRef;CFURLRef):CFNetDiagnosticRef"/>
    <method name="CFNetDiagnosticDiagnoseProblemInteractively(CFNetDiagnosticRef):CFNetDiagnosticStatus"/>
    <method name="CFNetDiagnosticSetName(CFNetDiagnosticRef;CFStringRef):void"/>
    <method name="CFNetServiceBrowserCreate(CFAllocatorRef;CFNetServiceBrowserClientCallBack;CFNetServiceClientContext*):CFNetServiceBrowserRef"/>
    <method name="CFNetServiceBrowserGetTypeID():CFTypeID"/>
    <method name="CFNetServiceBrowserInvalidate(CFNetServiceBrowserRef):void"/>
    <method name="CFNetServiceBrowserScheduleWithRunLoop(CFNetServiceBrowserRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceBrowserSearchForDomains(CFNetServiceBrowserRef;Boolean;CFStreamError*):Boolean"/>
    <method name="CFNetServiceBrowserSearchForServices(CFNetServiceBrowserRef;CFStringRef;CFStringRef;CFStreamError*):Boolean"/>
    <method name="CFNetServiceBrowserStopSearch(CFNetServiceBrowserRef;CFStreamError*):void"/>
    <method name="CFNetServiceBrowserUnscheduleFromRunLoop(CFNetServiceBrowserRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceCancel(CFNetServiceRef):void"/>
    <method name="CFNetServiceCreate(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef;SInt32):CFNetServiceRef"/>
    <method name="CFNetServiceCreateCopy(CFAllocatorRef;CFNetServiceRef):CFNetServiceRef"/>
    <method name="CFNetServiceCreateDictionaryWithTXTData(CFAllocatorRef;CFDataRef):CFDictionaryRef"/>
    <method name="CFNetServiceCreateTXTDataWithDictionary(CFAllocatorRef;CFDictionaryRef):CFDataRef"/>
    <method name="CFNetServiceGetAddressing(CFNetServiceRef):CFArrayRef"/>
    <method name="CFNetServiceGetDomain(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetName(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetPortNumber(CFNetServiceRef):SInt32"/>
    <method name="CFNetServiceGetProtocolSpecificInformation(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetTXTData(CFNetServiceRef):CFDataRef"/>
    <method name="CFNetServiceGetTargetHost(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetType(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetTypeID():CFTypeID"/>
    <method name="CFNetServiceMonitorCreate(CFAllocatorRef;CFNetServiceRef;CFNetServiceMonitorClientCallBack;CFNetServiceClientContext*):CFNetServiceMonitorRef"/>
    <method name="CFNetServiceMonitorGetTypeID():CFTypeID"/>
    <method name="CFNetServiceMonitorInvalidate(CFNetServiceMonitorRef):void"/>
    <method name="CFNetServiceMonitorScheduleWithRunLoop(CFNetServiceMonitorRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceMonitorStart(CFNetServiceMonitorRef;CFNetServiceMonitorType;CFStreamError*):Boolean"/>
    <method name="CFNetServiceMonitorStop(CFNetServiceMonitorRef;CFStreamError*):void"/>
    <method name="CFNetServiceMonitorUnscheduleFromRunLoop(CFNetServiceMonitorRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceRegister(CFNetServiceRef;CFStreamError*):Boolean"/>
    <method name="CFNetServiceRegisterWithOptions(CFNetServiceRef;CFOptionFlags;CFStreamError*):Boolean"/>
    <method name="CFNetServiceResolve(CFNetServiceRef;CFStreamError*):Boolean"/>
    <method name="CFNetServiceResolveWithTimeout(CFNetServiceRef;CFTimeInterval;CFStreamError*):Boolean"/>
    <method name="CFNetServiceScheduleWithRunLoop(CFNetServiceRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceSetClient(CFNetServiceRef;CFNetServiceClientCallBack;CFNetServiceClientContext*):Boolean"/>
    <method name="CFNetServiceSetProtocolSpecificInformation(CFNetServiceRef;CFStringRef):void"/>
    <method name="CFNetServiceSetTXTData(CFNetServiceRef;CFDataRef):Boolean"/>
    <method name="CFNetServiceUnscheduleFromRunLoop(CFNetServiceRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetworkCopyProxiesForAutoConfigurationScript(CFStringRef;CFURLRef;CFErrorRef*):CFArrayRef"/>
    <method name="CFNetworkCopyProxiesForURL(CFURLRef;CFDictionaryRef):CFArrayRef"/>
    <method name="CFNetworkCopySystemProxySettings():CFDictionaryRef"/>
    <method name="CFNetworkExecuteProxyAutoConfigurationScript(CFStringRef;CFURLRef;CFProxyAutoConfigurationResultCallback;CFStreamClientContext*):CFRunLoopSourceRef"/>
    <method name="CFNetworkExecuteProxyAutoConfigurationURL(CFURLRef;CFURLRef;CFProxyAutoConfigurationResultCallback;CFStreamClientContext*):CFRunLoopSourceRef"/>
    <method name="CFNotificationCenterAddObserver(CFNotificationCenterRef;const void*;CFNotificationCallback;CFStringRef;const void*;CFNotificationSuspensionBehavior):void"/>
    <method name="CFNotificationCenterGetDarwinNotifyCenter():CFNotificationCenterRef"/>
    <method name="CFNotificationCenterGetLocalCenter():CFNotificationCenterRef"/>
    <method name="CFNotificationCenterGetTypeID():CFTypeID"/>
    <method name="CFNotificationCenterPostNotification(CFNotificationCenterRef;CFStringRef;const void*;CFDictionaryRef;Boolean):void"/>
    <method name="CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef;CFStringRef;const void*;CFDictionaryRef;CFOptionFlags):void"/>
    <method name="CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef;const void*):void"/>
    <method name="CFNotificationCenterRemoveObserver(CFNotificationCenterRef;const void*;CFStringRef;const void*):void"/>
    <method name="CFNullGetTypeID():CFTypeID"/>
    <method name="CFNumberCompare(CFNumberRef;CFNumberRef;void*):CFComparisonResult"/>
    <method name="CFNumberCreate(CFAllocatorRef;CFNumberType;const void*):CFNumberRef"/>
    <method name="CFNumberFormatterCopyProperty(CFNumberFormatterRef;CFStringRef):CFTypeRef"/>
    <method name="CFNumberFormatterCreate(CFAllocatorRef;CFLocaleRef;CFNumberFormatterStyle):CFNumberFormatterRef"/>
    <method name="CFNumberFormatterCreateNumberFromString(CFAllocatorRef;CFNumberFormatterRef;CFStringRef;CFRange*;CFOptionFlags):CFNumberRef"/>
    <method name="CFNumberFormatterCreateStringWithNumber(CFAllocatorRef;CFNumberFormatterRef;CFNumberRef):CFStringRef"/>
    <method name="CFNumberFormatterCreateStringWithValue(CFAllocatorRef;CFNumberFormatterRef;CFNumberType;const void*):CFStringRef"/>
    <method name="CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef;int32_t*;double*):Boolean"/>
    <method name="CFNumberFormatterGetFormat(CFNumberFormatterRef):CFStringRef"/>
    <method name="CFNumberFormatterGetLocale(CFNumberFormatterRef):CFLocaleRef"/>
    <method name="CFNumberFormatterGetStyle(CFNumberFormatterRef):CFNumberFormatterStyle"/>
    <method name="CFNumberFormatterGetTypeID():CFTypeID"/>
    <method name="CFNumberFormatterGetValueFromString(CFNumberFormatterRef;CFStringRef;CFRange*;CFNumberType;void*):Boolean"/>
    <method name="CFNumberFormatterSetFormat(CFNumberFormatterRef;CFStringRef):void"/>
    <method name="CFNumberFormatterSetProperty(CFNumberFormatterRef;CFStringRef;CFTypeRef):void"/>
    <method name="CFNumberGetByteSize(CFNumberRef):CFIndex"/>
    <method name="CFNumberGetType(CFNumberRef):CFNumberType"/>
    <method name="CFNumberGetTypeID():CFTypeID"/>
    <method name="CFNumberGetValue(CFNumberRef;CFNumberType;void*):Boolean"/>
    <method name="CFNumberIsFloatType(CFNumberRef):Boolean"/>
    <method name="CFPlugInAddInstanceForFactory(CFUUIDRef):void"/>
    <method name="CFPlugInCreate(CFAllocatorRef;CFURLRef):CFPlugInRef"/>
    <method name="CFPlugInFindFactoriesForPlugInType(CFUUIDRef):CFArrayRef"/>
    <method name="CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef;CFPlugInRef):CFArrayRef"/>
    <method name="CFPlugInGetBundle(CFPlugInRef):CFBundleRef"/>
    <method name="CFPlugInGetTypeID():CFTypeID"/>
    <method name="CFPlugInInstanceCreate(CFAllocatorRef;CFUUIDRef;CFUUIDRef):void*"/>
    <method name="CFPlugInInstanceCreateWithInstanceDataSize(CFAllocatorRef;CFIndex;CFPlugInInstanceDeallocateInstanceDataFunction;CFStringRef;CFPlugInInstanceGetInterfaceFunction):CFPlugInInstanceRef"/>
    <method name="CFPlugInInstanceGetFactoryName(CFPlugInInstanceRef):CFStringRef"/>
    <method name="CFPlugInInstanceGetInstanceData(CFPlugInInstanceRef):void*"/>
    <method name="CFPlugInInstanceGetInterfaceFunctionTable(CFPlugInInstanceRef;CFStringRef;void**):Boolean"/>
    <method name="CFPlugInInstanceGetTypeID():CFTypeID"/>
    <method name="CFPlugInIsLoadOnDemand(CFPlugInRef):Boolean"/>
    <method name="CFPlugInRegisterFactoryFunction(CFUUIDRef;CFPlugInFactoryFunction):Boolean"/>
    <method name="CFPlugInRegisterFactoryFunctionByName(CFUUIDRef;CFPlugInRef;CFStringRef):Boolean"/>
    <method name="CFPlugInRegisterPlugInType(CFUUIDRef;CFUUIDRef):Boolean"/>
    <method name="CFPlugInRemoveInstanceForFactory(CFUUIDRef):void"/>
    <method name="CFPlugInSetLoadOnDemand(CFPlugInRef;Boolean):void"/>
    <method name="CFPlugInUnregisterFactory(CFUUIDRef):Boolean"/>
    <method name="CFPlugInUnregisterPlugInType(CFUUIDRef;CFUUIDRef):Boolean"/>
    <method name="CFPreferencesAddSuitePreferencesToApp(CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesAppSynchronize(CFStringRef):Boolean"/>
    <method name="CFPreferencesAppValueIsForced(CFStringRef;CFStringRef):Boolean"/>
    <method name="CFPreferencesCopyAppValue(CFStringRef;CFStringRef):CFPropertyListRef"/>
    <method name="CFPreferencesCopyApplicationList(CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFPreferencesCopyKeyList(CFStringRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFPreferencesCopyMultiple(CFArrayRef;CFStringRef;CFStringRef;CFStringRef):CFDictionaryRef"/>
    <method name="CFPreferencesCopyValue(CFStringRef;CFStringRef;CFStringRef;CFStringRef):CFPropertyListRef"/>
    <method name="CFPreferencesGetAppBooleanValue(CFStringRef;CFStringRef;Boolean*):Boolean"/>
    <method name="CFPreferencesGetAppIntegerValue(CFStringRef;CFStringRef;Boolean*):CFIndex"/>
    <method name="CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesSetAppValue(CFStringRef;CFPropertyListRef;CFStringRef):void"/>
    <method name="CFPreferencesSetMultiple(CFDictionaryRef;CFArrayRef;CFStringRef;CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesSetValue(CFStringRef;CFPropertyListRef;CFStringRef;CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesSynchronize(CFStringRef;CFStringRef;CFStringRef):Boolean"/>
    <method name="CFPropertyListCreateData(CFAllocatorRef;CFPropertyListRef;CFPropertyListFormat;CFOptionFlags;CFErrorRef*):CFDataRef"/>
    <method name="CFPropertyListCreateDeepCopy(CFAllocatorRef;CFPropertyListRef;CFOptionFlags):CFPropertyListRef"/>
    <method name="CFPropertyListCreateFromStream(CFAllocatorRef;CFReadStreamRef;CFIndex;CFOptionFlags;CFPropertyListFormat*;CFStringRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateFromXMLData(CFAllocatorRef;CFDataRef;CFOptionFlags;CFStringRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateWithData(CFAllocatorRef;CFDataRef;CFOptionFlags;CFPropertyListFormat*;CFErrorRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateWithStream(CFAllocatorRef;CFReadStreamRef;CFIndex;CFOptionFlags;CFPropertyListFormat*;CFErrorRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateXMLData(CFAllocatorRef;CFPropertyListRef):CFDataRef"/>
    <method name="CFPropertyListIsValid(CFPropertyListRef;CFPropertyListFormat):Boolean"/>
    <method name="CFPropertyListWrite(CFPropertyListRef;CFWriteStreamRef;CFPropertyListFormat;CFOptionFlags;CFErrorRef*):CFIndex"/>
    <method name="CFPropertyListWriteToStream(CFPropertyListRef;CFWriteStreamRef;CFPropertyListFormat;CFStringRef*):CFIndex"/>
    <method name="CFRangeMake(CFIndex;CFIndex):CFRange"/>
    <method name="CFReadStreamClose(CFReadStreamRef):void"/>
    <method name="CFReadStreamCopyError(CFReadStreamRef):CFErrorRef"/>
    <method name="CFReadStreamCopyProperty(CFReadStreamRef;CFStringRef):CFTypeRef"/>
    <method name="CFReadStreamCreateForHTTPRequest(CFAllocatorRef;CFHTTPMessageRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateForStreamedHTTPRequest(CFAllocatorRef;CFHTTPMessageRef;CFReadStreamRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef;const UInt8*;CFIndex;CFAllocatorRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateWithFTPURL(CFAllocatorRef;CFURLRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateWithFile(CFAllocatorRef;CFURLRef):CFReadStreamRef"/>
    <method name="CFReadStreamGetBuffer(CFReadStreamRef;CFIndex;CFIndex*):const UInt8*"/>
    <method name="CFReadStreamGetError(CFReadStreamRef):CFStreamError"/>
    <method name="CFReadStreamGetStatus(CFReadStreamRef):CFStreamStatus"/>
    <method name="CFReadStreamGetTypeID():CFTypeID"/>
    <method name="CFReadStreamHasBytesAvailable(CFReadStreamRef):Boolean"/>
    <method name="CFReadStreamOpen(CFReadStreamRef):Boolean"/>
    <method name="CFReadStreamRead(CFReadStreamRef;UInt8*;CFIndex):CFIndex"/>
    <method name="CFReadStreamScheduleWithRunLoop(CFReadStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFReadStreamSetClient(CFReadStreamRef;CFOptionFlags;CFReadStreamClientCallBack;CFStreamClientContext*):Boolean"/>
    <method name="CFReadStreamSetProperty(CFReadStreamRef;CFStringRef;CFTypeRef):Boolean"/>
    <method name="CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFRelease(CFTypeRef):void"/>
    <method name="CFRetain(CFTypeRef):CFTypeRef"/>
    <method name="CFRunLoopAddCommonMode(CFRunLoopRef;CFStringRef):void"/>
    <method name="CFRunLoopAddObserver(CFRunLoopRef;CFRunLoopObserverRef;CFStringRef):void"/>
    <method name="CFRunLoopAddSource(CFRunLoopRef;CFRunLoopSourceRef;CFStringRef):void"/>
    <method name="CFRunLoopAddTimer(CFRunLoopRef;CFRunLoopTimerRef;CFStringRef):void"/>
    <method name="CFRunLoopContainsObserver(CFRunLoopRef;CFRunLoopObserverRef;CFStringRef):Boolean"/>
    <method name="CFRunLoopContainsSource(CFRunLoopRef;CFRunLoopSourceRef;CFStringRef):Boolean"/>
    <method name="CFRunLoopContainsTimer(CFRunLoopRef;CFRunLoopTimerRef;CFStringRef):Boolean"/>
    <method name="CFRunLoopCopyAllModes(CFRunLoopRef):CFArrayRef"/>
    <method name="CFRunLoopCopyCurrentMode(CFRunLoopRef):CFStringRef"/>
    <method name="CFRunLoopGetCurrent():CFRunLoopRef"/>
    <method name="CFRunLoopGetMain():CFRunLoopRef"/>
    <method name="CFRunLoopGetNextTimerFireDate(CFRunLoopRef;CFStringRef):CFAbsoluteTime"/>
    <method name="CFRunLoopGetTypeID():CFTypeID"/>
    <method name="CFRunLoopIsWaiting(CFRunLoopRef):Boolean"/>
    <method name="CFRunLoopObserverCreate(CFAllocatorRef;CFOptionFlags;Boolean;CFIndex;CFRunLoopObserverCallBack;CFRunLoopObserverContext*):CFRunLoopObserverRef"/>
    <method name="CFRunLoopObserverCreateWithHandler(CFAllocatorRef;CFOptionFlags;Boolean;CFIndex;(^)(CFRunLoopObserverRef;CFRunLoopActivity):void):CFRunLoopObserverRef"/>
    <method name="CFRunLoopObserverDoesRepeat(CFRunLoopObserverRef):Boolean"/>
    <method name="CFRunLoopObserverGetActivities(CFRunLoopObserverRef):CFOptionFlags"/>
    <method name="CFRunLoopObserverGetContext(CFRunLoopObserverRef;CFRunLoopObserverContext*):void"/>
    <method name="CFRunLoopObserverGetOrder(CFRunLoopObserverRef):CFIndex"/>
    <method name="CFRunLoopObserverGetTypeID():CFTypeID"/>
    <method name="CFRunLoopObserverInvalidate(CFRunLoopObserverRef):void"/>
    <method name="CFRunLoopObserverIsValid(CFRunLoopObserverRef):Boolean"/>
    <method name="CFRunLoopPerformBlock(CFRunLoopRef;CFTypeRef;(^)():void):void"/>
    <method name="CFRunLoopRemoveObserver(CFRunLoopRef;CFRunLoopObserverRef;CFStringRef):void"/>
    <method name="CFRunLoopRemoveSource(CFRunLoopRef;CFRunLoopSourceRef;CFStringRef):void"/>
    <method name="CFRunLoopRemoveTimer(CFRunLoopRef;CFRunLoopTimerRef;CFStringRef):void"/>
    <method name="CFRunLoopRun():void"/>
    <method name="CFRunLoopRunInMode(CFStringRef;CFTimeInterval;Boolean):SInt32"/>
    <method name="CFRunLoopSourceCreate(CFAllocatorRef;CFIndex;CFRunLoopSourceContext*):CFRunLoopSourceRef"/>
    <method name="CFRunLoopSourceGetContext(CFRunLoopSourceRef;CFRunLoopSourceContext*):void"/>
    <method name="CFRunLoopSourceGetOrder(CFRunLoopSourceRef):CFIndex"/>
    <method name="CFRunLoopSourceGetTypeID():CFTypeID"/>
    <method name="CFRunLoopSourceInvalidate(CFRunLoopSourceRef):void"/>
    <method name="CFRunLoopSourceIsValid(CFRunLoopSourceRef):Boolean"/>
    <method name="CFRunLoopSourceSignal(CFRunLoopSourceRef):void"/>
    <method name="CFRunLoopStop(CFRunLoopRef):void"/>
    <method name="CFRunLoopTimerCreate(CFAllocatorRef;CFAbsoluteTime;CFTimeInterval;CFOptionFlags;CFIndex;CFRunLoopTimerCallBack;CFRunLoopTimerContext*):CFRunLoopTimerRef"/>
    <method name="CFRunLoopTimerCreateWithHandler(CFAllocatorRef;CFAbsoluteTime;CFTimeInterval;CFOptionFlags;CFIndex;(^)(CFRunLoopTimerRef):void):CFRunLoopTimerRef"/>
    <method name="CFRunLoopTimerDoesRepeat(CFRunLoopTimerRef):Boolean"/>
    <method name="CFRunLoopTimerGetContext(CFRunLoopTimerRef;CFRunLoopTimerContext*):void"/>
    <method name="CFRunLoopTimerGetInterval(CFRunLoopTimerRef):CFTimeInterval"/>
    <method name="CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef):CFAbsoluteTime"/>
    <method name="CFRunLoopTimerGetOrder(CFRunLoopTimerRef):CFIndex"/>
    <method name="CFRunLoopTimerGetTypeID():CFTypeID"/>
    <method name="CFRunLoopTimerInvalidate(CFRunLoopTimerRef):void"/>
    <method name="CFRunLoopTimerIsValid(CFRunLoopTimerRef):Boolean"/>
    <method name="CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef;CFAbsoluteTime):void"/>
    <method name="CFRunLoopWakeUp(CFRunLoopRef):void"/>
    <method name="CFSetAddValue(CFMutableSetRef;const void*):void"/>
    <method name="CFSetApplyFunction(CFSetRef;CFSetApplierFunction;void*):void"/>
    <method name="CFSetContainsValue(CFSetRef;const void*):Boolean"/>
    <method name="CFSetCreate(CFAllocatorRef;const void**;CFIndex;const CFSetCallBacks*):CFSetRef"/>
    <method name="CFSetCreateCopy(CFAllocatorRef;CFSetRef):CFSetRef"/>
    <method name="CFSetCreateMutable(CFAllocatorRef;CFIndex;const CFSetCallBacks*):CFMutableSetRef"/>
    <method name="CFSetCreateMutableCopy(CFAllocatorRef;CFIndex;CFSetRef):CFMutableSetRef"/>
    <method name="CFSetGetCount(CFSetRef):CFIndex"/>
    <method name="CFSetGetCountOfValue(CFSetRef;const void*):CFIndex"/>
    <method name="CFSetGetTypeID():CFTypeID"/>
    <method name="CFSetGetValue(CFSetRef;const void*):const void*"/>
    <method name="CFSetGetValueIfPresent(CFSetRef;const void*;const void**):Boolean"/>
    <method name="CFSetGetValues(CFSetRef;const void**):void"/>
    <method name="CFSetRemoveAllValues(CFMutableSetRef):void"/>
    <method name="CFSetRemoveValue(CFMutableSetRef;const void*):void"/>
    <method name="CFSetReplaceValue(CFMutableSetRef;const void*):void"/>
    <method name="CFSetSetValue(CFMutableSetRef;const void*):void"/>
    <method name="CFShow(CFTypeRef):void"/>
    <method name="CFShowStr(CFStringRef):void"/>
    <method name="CFSocketConnectToAddress(CFSocketRef;CFDataRef;CFTimeInterval):CFSocketError"/>
    <method name="CFSocketCopyAddress(CFSocketRef):CFDataRef"/>
    <method name="CFSocketCopyPeerAddress(CFSocketRef):CFDataRef"/>
    <method name="CFSocketCopyRegisteredSocketSignature(const CFSocketSignature*;CFTimeInterval;CFStringRef;CFSocketSignature*;CFDataRef*):CFSocketError"/>
    <method name="CFSocketCopyRegisteredValue(const CFSocketSignature*;CFTimeInterval;CFStringRef;CFPropertyListRef*;CFDataRef*):CFSocketError"/>
    <method name="CFSocketCreate(CFAllocatorRef;SInt32;SInt32;SInt32;CFOptionFlags;CFSocketCallBack;const CFSocketContext*):CFSocketRef"/>
    <method name="CFSocketCreateConnectedToSocketSignature(CFAllocatorRef;const CFSocketSignature*;CFOptionFlags;CFSocketCallBack;const CFSocketContext*;CFTimeInterval):CFSocketRef"/>
    <method name="CFSocketCreateRunLoopSource(CFAllocatorRef;CFSocketRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFSocketCreateWithNative(CFAllocatorRef;CFSocketNativeHandle;CFOptionFlags;CFSocketCallBack;const CFSocketContext*):CFSocketRef"/>
    <method name="CFSocketCreateWithSocketSignature(CFAllocatorRef;const CFSocketSignature*;CFOptionFlags;CFSocketCallBack;const CFSocketContext*):CFSocketRef"/>
    <method name="CFSocketDisableCallBacks(CFSocketRef;CFOptionFlags):void"/>
    <method name="CFSocketEnableCallBacks(CFSocketRef;CFOptionFlags):void"/>
    <method name="CFSocketGetContext(CFSocketRef;CFSocketContext*):void"/>
    <method name="CFSocketGetDefaultNameRegistryPortNumber():UInt16"/>
    <method name="CFSocketGetNative(CFSocketRef):CFSocketNativeHandle"/>
    <method name="CFSocketGetSocketFlags(CFSocketRef):CFOptionFlags"/>
    <method name="CFSocketGetTypeID():CFTypeID"/>
    <method name="CFSocketInvalidate(CFSocketRef):void"/>
    <method name="CFSocketIsValid(CFSocketRef):Boolean"/>
    <method name="CFSocketRegisterSocketSignature(const CFSocketSignature*;CFTimeInterval;CFStringRef;const CFSocketSignature*):CFSocketError"/>
    <method name="CFSocketRegisterValue(const CFSocketSignature*;CFTimeInterval;CFStringRef;CFPropertyListRef):CFSocketError"/>
    <method name="CFSocketSendData(CFSocketRef;CFDataRef;CFDataRef;CFTimeInterval):CFSocketError"/>
    <method name="CFSocketSetAddress(CFSocketRef;CFDataRef):CFSocketError"/>
    <method name="CFSocketSetDefaultNameRegistryPortNumber(UInt16):void"/>
    <method name="CFSocketSetSocketFlags(CFSocketRef;CFOptionFlags):void"/>
    <method name="CFSocketStreamPairSetSecurityProtocol(CFReadStreamRef;CFWriteStreamRef;CFStreamSocketSecurityProtocol):Boolean"/>
    <method name="CFSocketStreamSOCKSGetError(const CFStreamError*):SInt32"/>
    <method name="CFSocketStreamSOCKSGetErrorSubdomain(const CFStreamError*):SInt32"/>
    <method name="CFSocketUnregister(const CFSocketSignature*;CFTimeInterval;CFStringRef):CFSocketError"/>
    <method name="CFStreamCreateBoundPair(CFAllocatorRef;CFReadStreamRef*;CFWriteStreamRef*;CFIndex):void"/>
    <method name="CFStreamCreatePairWithPeerSocketSignature(CFAllocatorRef;const CFSocketSignature*;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocket(CFAllocatorRef;CFSocketNativeHandle;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocketToCFHost(CFAllocatorRef;CFHostRef;SInt32;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocketToHost(CFAllocatorRef;CFStringRef;UInt32;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocketToNetService(CFAllocatorRef;CFNetServiceRef;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStringAppend(CFMutableStringRef;CFStringRef):void"/>
    <method name="CFStringAppendCString(CFMutableStringRef;const char*;CFStringEncoding):void"/>
    <method name="CFStringAppendCharacters(CFMutableStringRef;const UniChar*;CFIndex):void"/>
    <method name="CFStringAppendFormat(CFMutableStringRef;CFDictionaryRef;CFStringRef, ...):void"/>
    <method name="CFStringAppendFormatAndArguments(CFMutableStringRef;CFDictionaryRef;CFStringRef;va_list):void"/>
    <method name="CFStringAppendPascalString(CFMutableStringRef;ConstStr255Param;CFStringEncoding):void"/>
    <method name="CFStringCapitalize(CFMutableStringRef;CFLocaleRef):void"/>
    <method name="CFStringCompare(CFStringRef;CFStringRef;CFStringCompareFlags):CFComparisonResult"/>
    <method name="CFStringCompareWithOptions(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags):CFComparisonResult"/>
    <method name="CFStringCompareWithOptionsAndLocale(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags;CFLocaleRef):CFComparisonResult"/>
    <method name="CFStringConvertEncodingToIANACharSetName(CFStringEncoding):CFStringRef"/>
    <method name="CFStringConvertEncodingToNSStringEncoding(CFStringEncoding):unsigned long"/>
    <method name="CFStringConvertEncodingToWindowsCodepage(CFStringEncoding):UInt32"/>
    <method name="CFStringConvertIANACharSetNameToEncoding(CFStringRef):CFStringEncoding"/>
    <method name="CFStringConvertNSStringEncodingToEncoding(unsigned long):CFStringEncoding"/>
    <method name="CFStringConvertWindowsCodepageToEncoding(UInt32):CFStringEncoding"/>
    <method name="CFStringCreateArrayBySeparatingStrings(CFAllocatorRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFStringCreateArrayWithFindResults(CFAllocatorRef;CFStringRef;CFStringRef;CFRange;CFStringCompareFlags):CFArrayRef"/>
    <method name="CFStringCreateByCombiningStrings(CFAllocatorRef;CFArrayRef;CFStringRef):CFStringRef"/>
    <method name="CFStringCreateCopy(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="CFStringCreateExternalRepresentation(CFAllocatorRef;CFStringRef;CFStringEncoding;UInt8):CFDataRef"/>
    <method name="CFStringCreateFromExternalRepresentation(CFAllocatorRef;CFDataRef;CFStringEncoding):CFStringRef"/>
    <method name="CFStringCreateMutable(CFAllocatorRef;CFIndex):CFMutableStringRef"/>
    <method name="CFStringCreateMutableCopy(CFAllocatorRef;CFIndex;CFStringRef):CFMutableStringRef"/>
    <method name="CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef;UniChar*;CFIndex;CFIndex;CFAllocatorRef):CFMutableStringRef"/>
    <method name="CFStringCreateWithBytes(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;Boolean):CFStringRef"/>
    <method name="CFStringCreateWithBytesNoCopy(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;Boolean;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithCString(CFAllocatorRef;const char*;CFStringEncoding):CFStringRef"/>
    <method name="CFStringCreateWithCStringNoCopy(CFAllocatorRef;const char*;CFStringEncoding;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithCharacters(CFAllocatorRef;const UniChar*;CFIndex):CFStringRef"/>
    <method name="CFStringCreateWithCharactersNoCopy(CFAllocatorRef;const UniChar*;CFIndex;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithFileSystemRepresentation(CFAllocatorRef;const char*):CFStringRef"/>
    <method name="CFStringCreateWithFormat(CFAllocatorRef;CFDictionaryRef;CFStringRef, ...):CFStringRef"/>
    <method name="CFStringCreateWithFormatAndArguments(CFAllocatorRef;CFDictionaryRef;CFStringRef;va_list):CFStringRef"/>
    <method name="CFStringCreateWithPascalString(CFAllocatorRef;ConstStr255Param;CFStringEncoding):CFStringRef"/>
    <method name="CFStringCreateWithPascalStringNoCopy(CFAllocatorRef;ConstStr255Param;CFStringEncoding;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithSubstring(CFAllocatorRef;CFStringRef;CFRange):CFStringRef"/>
    <method name="CFStringDelete(CFMutableStringRef;CFRange):void"/>
    <method name="CFStringFind(CFStringRef;CFStringRef;CFStringCompareFlags):CFRange"/>
    <method name="CFStringFindAndReplace(CFMutableStringRef;CFStringRef;CFStringRef;CFRange;CFStringCompareFlags):CFIndex"/>
    <method name="CFStringFindCharacterFromSet(CFStringRef;CFCharacterSetRef;CFRange;CFStringCompareFlags;CFRange*):Boolean"/>
    <method name="CFStringFindWithOptions(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags;CFRange*):Boolean"/>
    <method name="CFStringFindWithOptionsAndLocale(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags;CFLocaleRef;CFRange*):Boolean"/>
    <method name="CFStringFold(CFMutableStringRef;CFOptionFlags;CFLocaleRef):void"/>
    <method name="CFStringGetBytes(CFStringRef;CFRange;CFStringEncoding;UInt8;Boolean;UInt8*;CFIndex;CFIndex*):CFIndex"/>
    <method name="CFStringGetCString(CFStringRef;char*;CFIndex;CFStringEncoding):Boolean"/>
    <method name="CFStringGetCStringPtr(CFStringRef;CFStringEncoding):const char*"/>
    <method name="CFStringGetCharacterAtIndex(CFStringRef;CFIndex):UniChar"/>
    <method name="CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer*;CFIndex):UniChar"/>
    <method name="CFStringGetCharacters(CFStringRef;CFRange;UniChar*):void"/>
    <method name="CFStringGetCharactersPtr(CFStringRef):const UniChar*"/>
    <method name="CFStringGetDoubleValue(CFStringRef):double"/>
    <method name="CFStringGetFastestEncoding(CFStringRef):CFStringEncoding"/>
    <method name="CFStringGetFileSystemRepresentation(CFStringRef;char*;CFIndex):Boolean"/>
    <method name="CFStringGetHyphenationLocationBeforeIndex(CFStringRef;CFIndex;CFRange;CFOptionFlags;CFLocaleRef;UTF32Char*):CFIndex"/>
    <method name="CFStringGetIntValue(CFStringRef):SInt32"/>
    <method name="CFStringGetLength(CFStringRef):CFIndex"/>
    <method name="CFStringGetLineBounds(CFStringRef;CFRange;CFIndex*;CFIndex*;CFIndex*):void"/>
    <method name="CFStringGetListOfAvailableEncodings():const CFStringEncoding*"/>
    <method name="CFStringGetLongCharacterForSurrogatePair(UniChar;UniChar):UTF32Char"/>
    <method name="CFStringGetMaximumSizeForEncoding(CFIndex;CFStringEncoding):CFIndex"/>
    <method name="CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef):CFIndex"/>
    <method name="CFStringGetMostCompatibleMacStringEncoding(CFStringEncoding):CFStringEncoding"/>
    <method name="CFStringGetNameOfEncoding(CFStringEncoding):CFStringRef"/>
    <method name="CFStringGetParagraphBounds(CFStringRef;CFRange;CFIndex*;CFIndex*;CFIndex*):void"/>
    <method name="CFStringGetPascalString(CFStringRef;StringPtr;CFIndex;CFStringEncoding):Boolean"/>
    <method name="CFStringGetPascalStringPtr(CFStringRef;CFStringEncoding):ConstStringPtr"/>
    <method name="CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef;CFIndex):CFRange"/>
    <method name="CFStringGetSmallestEncoding(CFStringRef):CFStringEncoding"/>
    <method name="CFStringGetSurrogatePairForLongCharacter(UTF32Char;UniChar*):Boolean"/>
    <method name="CFStringGetSystemEncoding():CFStringEncoding"/>
    <method name="CFStringGetTypeID():CFTypeID"/>
    <method name="CFStringHasPrefix(CFStringRef;CFStringRef):Boolean"/>
    <method name="CFStringHasSuffix(CFStringRef;CFStringRef):Boolean"/>
    <method name="CFStringInitInlineBuffer(CFStringRef;CFStringInlineBuffer*;CFRange):void"/>
    <method name="CFStringInsert(CFMutableStringRef;CFIndex;CFStringRef):void"/>
    <method name="CFStringIsEncodingAvailable(CFStringEncoding):Boolean"/>
    <method name="CFStringIsHyphenationAvailableForLocale(CFLocaleRef):Boolean"/>
    <method name="CFStringIsSurrogateHighCharacter(UniChar):Boolean"/>
    <method name="CFStringIsSurrogateLowCharacter(UniChar):Boolean"/>
    <method name="CFStringLowercase(CFMutableStringRef;CFLocaleRef):void"/>
    <method name="CFStringNormalize(CFMutableStringRef;CFStringNormalizationForm):void"/>
    <method name="CFStringPad(CFMutableStringRef;CFStringRef;CFIndex;CFIndex):void"/>
    <method name="CFStringReplace(CFMutableStringRef;CFRange;CFStringRef):void"/>
    <method name="CFStringReplaceAll(CFMutableStringRef;CFStringRef):void"/>
    <method name="CFStringSetExternalCharactersNoCopy(CFMutableStringRef;UniChar*;CFIndex;CFIndex):void"/>
    <method name="CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef):CFStringTokenizerTokenType"/>
    <method name="CFStringTokenizerCopyBestStringLanguage(CFStringRef;CFRange):CFStringRef"/>
    <method name="CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef;CFOptionFlags):CFTypeRef"/>
    <method name="CFStringTokenizerCreate(CFAllocatorRef;CFStringRef;CFRange;CFOptionFlags;CFLocaleRef):CFStringTokenizerRef"/>
    <method name="CFStringTokenizerGetCurrentSubTokens(CFStringTokenizerRef;CFRange*;CFIndex;CFMutableArrayRef):CFIndex"/>
    <method name="CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef):CFRange"/>
    <method name="CFStringTokenizerGetTypeID():CFTypeID"/>
    <method name="CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef;CFIndex):CFStringTokenizerTokenType"/>
    <method name="CFStringTokenizerSetString(CFStringTokenizerRef;CFStringRef;CFRange):void"/>
    <method name="CFStringTransform(CFMutableStringRef;CFRange*;CFStringRef;Boolean):Boolean"/>
    <method name="CFStringTrim(CFMutableStringRef;CFStringRef):void"/>
    <method name="CFStringTrimWhitespace(CFMutableStringRef):void"/>
    <method name="CFStringUppercase(CFMutableStringRef;CFLocaleRef):void"/>
    <method name="CFSwapInt16(uint16_t):uint16_t"/>
    <method name="CFSwapInt16BigToHost(uint16_t):uint16_t"/>
    <method name="CFSwapInt16HostToBig(uint16_t):uint16_t"/>
    <method name="CFSwapInt16HostToLittle(uint16_t):uint16_t"/>
    <method name="CFSwapInt16LittleToHost(uint16_t):uint16_t"/>
    <method name="CFSwapInt32(uint32_t):uint32_t"/>
    <method name="CFSwapInt32BigToHost(uint32_t):uint32_t"/>
    <method name="CFSwapInt32HostToBig(uint32_t):uint32_t"/>
    <method name="CFSwapInt32HostToLittle(uint32_t):uint32_t"/>
    <method name="CFSwapInt32LittleToHost(uint32_t):uint32_t"/>
    <method name="CFSwapInt64(uint64_t):uint64_t"/>
    <method name="CFSwapInt64BigToHost(uint64_t):uint64_t"/>
    <method name="CFSwapInt64HostToBig(uint64_t):uint64_t"/>
    <method name="CFSwapInt64HostToLittle(uint64_t):uint64_t"/>
    <method name="CFSwapInt64LittleToHost(uint64_t):uint64_t"/>
    <method name="CFTimeZoneCopyAbbreviation(CFTimeZoneRef;CFAbsoluteTime):CFStringRef"/>
    <method name="CFTimeZoneCopyAbbreviationDictionary():CFDictionaryRef"/>
    <method name="CFTimeZoneCopyDefault():CFTimeZoneRef"/>
    <method name="CFTimeZoneCopyKnownNames():CFArrayRef"/>
    <method name="CFTimeZoneCopyLocalizedName(CFTimeZoneRef;CFTimeZoneNameStyle;CFLocaleRef):CFStringRef"/>
    <method name="CFTimeZoneCopySystem():CFTimeZoneRef"/>
    <method name="CFTimeZoneCreate(CFAllocatorRef;CFStringRef;CFDataRef):CFTimeZoneRef"/>
    <method name="CFTimeZoneCreateWithName(CFAllocatorRef;CFStringRef;Boolean):CFTimeZoneRef"/>
    <method name="CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef;CFTimeInterval):CFTimeZoneRef"/>
    <method name="CFTimeZoneGetData(CFTimeZoneRef):CFDataRef"/>
    <method name="CFTimeZoneGetDaylightSavingTimeOffset(CFTimeZoneRef;CFAbsoluteTime):CFTimeInterval"/>
    <method name="CFTimeZoneGetName(CFTimeZoneRef):CFStringRef"/>
    <method name="CFTimeZoneGetNextDaylightSavingTimeTransition(CFTimeZoneRef;CFAbsoluteTime):CFAbsoluteTime"/>
    <method name="CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef;CFAbsoluteTime):CFTimeInterval"/>
    <method name="CFTimeZoneGetTypeID():CFTypeID"/>
    <method name="CFTimeZoneIsDaylightSavingTime(CFTimeZoneRef;CFAbsoluteTime):Boolean"/>
    <method name="CFTimeZoneResetSystem():void"/>
    <method name="CFTimeZoneSetAbbreviationDictionary(CFDictionaryRef):void"/>
    <method name="CFTimeZoneSetDefault(CFTimeZoneRef):void"/>
    <method name="CFTreeAppendChild(CFTreeRef;CFTreeRef):void"/>
    <method name="CFTreeApplyFunctionToChildren(CFTreeRef;CFTreeApplierFunction;void*):void"/>
    <method name="CFTreeCreate(CFAllocatorRef;const CFTreeContext*):CFTreeRef"/>
    <method name="CFTreeFindRoot(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetChildAtIndex(CFTreeRef;CFIndex):CFTreeRef"/>
    <method name="CFTreeGetChildCount(CFTreeRef):CFIndex"/>
    <method name="CFTreeGetChildren(CFTreeRef;CFTreeRef*):void"/>
    <method name="CFTreeGetContext(CFTreeRef;CFTreeContext*):void"/>
    <method name="CFTreeGetFirstChild(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetNextSibling(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetParent(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetTypeID():CFTypeID"/>
    <method name="CFTreeInsertSibling(CFTreeRef;CFTreeRef):void"/>
    <method name="CFTreePrependChild(CFTreeRef;CFTreeRef):void"/>
    <method name="CFTreeRemove(CFTreeRef):void"/>
    <method name="CFTreeRemoveAllChildren(CFTreeRef):void"/>
    <method name="CFTreeSetContext(CFTreeRef;const CFTreeContext*):void"/>
    <method name="CFTreeSortChildren(CFTreeRef;CFComparatorFunction;void*):void"/>
    <method name="CFURLCanBeDecomposed(CFURLRef):Boolean"/>
    <method name="CFURLClearResourcePropertyCache(CFURLRef):void"/>
    <method name="CFURLClearResourcePropertyCacheForKey(CFURLRef;CFStringRef):void"/>
    <method name="CFURLCopyAbsoluteURL(CFURLRef):CFURLRef"/>
    <method name="CFURLCopyFileSystemPath(CFURLRef;CFURLPathStyle):CFStringRef"/>
    <method name="CFURLCopyFragment(CFURLRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCopyHostName(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyLastPathComponent(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyNetLocation(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyParameterString(CFURLRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCopyPassword(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyPath(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyPathExtension(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyQueryString(CFURLRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCopyResourcePropertiesForKeys(CFURLRef;CFArrayRef;CFErrorRef*):CFDictionaryRef"/>
    <method name="CFURLCopyResourcePropertyForKey(CFURLRef;CFStringRef;void*;CFErrorRef*):Boolean"/>
    <method name="CFURLCopyResourceSpecifier(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyScheme(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyStrictPath(CFURLRef;Boolean*):CFStringRef"/>
    <method name="CFURLCopyUserName(CFURLRef):CFStringRef"/>
    <method name="CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;CFURLRef;Boolean):CFURLRef"/>
    <method name="CFURLCreateBookmarkData(CFAllocatorRef;CFURLRef;CFURLBookmarkCreationOptions;CFArrayRef;CFURLRef;CFErrorRef*):CFDataRef"/>
    <method name="CFURLCreateBookmarkDataFromAliasRecord(CFAllocatorRef;CFDataRef):CFDataRef"/>
    <method name="CFURLCreateBookmarkDataFromFile(CFAllocatorRef;CFURLRef;CFErrorRef*):CFDataRef"/>
    <method name="CFURLCreateByResolvingBookmarkData(CFAllocatorRef;CFDataRef;CFURLBookmarkResolutionOptions;CFURLRef;CFArrayRef;Boolean*;CFErrorRef*):CFURLRef"/>
    <method name="CFURLCreateCopyAppendingPathComponent(CFAllocatorRef;CFURLRef;CFStringRef;Boolean):CFURLRef"/>
    <method name="CFURLCreateCopyAppendingPathExtension(CFAllocatorRef;CFURLRef;CFStringRef):CFURLRef"/>
    <method name="CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateCopyDeletingPathExtension(CFAllocatorRef;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateData(CFAllocatorRef;CFURLRef;CFStringEncoding;Boolean):CFDataRef"/>
    <method name="CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef;CFURLRef;CFDataRef*;CFDictionaryRef*;CFArrayRef;SInt32*):Boolean"/>
    <method name="CFURLCreateFilePathURL(CFAllocatorRef;CFURLRef;CFErrorRef*):CFURLRef"/>
    <method name="CFURLCreateFileReferenceURL(CFAllocatorRef;CFURLRef;CFErrorRef*):CFURLRef"/>
    <method name="CFURLCreateFromFSRef(CFAllocatorRef;const struct FSRef*):CFURLRef"/>
    <method name="CFURLCreateFromFileSystemRepresentation(CFAllocatorRef;const UInt8*;CFIndex;Boolean):CFURLRef"/>
    <method name="CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef;const UInt8*;CFIndex;Boolean;CFURLRef):CFURLRef"/>
    <method name="CFURLCreatePropertyFromResource(CFAllocatorRef;CFURLRef;CFStringRef;SInt32*):CFTypeRef"/>
    <method name="CFURLCreateResourcePropertiesForKeysFromBookmarkData(CFAllocatorRef;CFArrayRef;CFDataRef):CFDictionaryRef"/>
    <method name="CFURLCreateResourcePropertyForKeyFromBookmarkData(CFAllocatorRef;CFStringRef;CFDataRef):CFTypeRef"/>
    <method name="CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef;CFStringEncoding):CFStringRef"/>
    <method name="CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef;CFStringRef;CFStringRef;CFStringEncoding):CFStringRef"/>
    <method name="CFURLCreateWithBytes(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateWithFileSystemPath(CFAllocatorRef;CFStringRef;CFURLPathStyle;Boolean):CFURLRef"/>
    <method name="CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef;CFStringRef;CFURLPathStyle;Boolean;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateWithString(CFAllocatorRef;CFStringRef;CFURLRef):CFURLRef"/>
    <method name="CFURLDestroyResource(CFURLRef;SInt32*):Boolean"/>
    <method name="CFURLGetBaseURL(CFURLRef):CFURLRef"/>
    <method name="CFURLGetByteRangeForComponent(CFURLRef;CFURLComponentType;CFRange*):CFRange"/>
    <method name="CFURLGetBytes(CFURLRef;UInt8*;CFIndex):CFIndex"/>
    <method name="CFURLGetFSRef(CFURLRef;struct FSRef*):Boolean"/>
    <method name="CFURLGetFileSystemRepresentation(CFURLRef;Boolean;UInt8*;CFIndex):Boolean"/>
    <method name="CFURLGetPortNumber(CFURLRef):SInt32"/>
    <method name="CFURLGetString(CFURLRef):CFStringRef"/>
    <method name="CFURLGetTypeID():CFTypeID"/>
    <method name="CFURLHasDirectoryPath(CFURLRef):Boolean"/>
    <method name="CFURLResourceIsReachable(CFURLRef;CFErrorRef*):Boolean"/>
    <method name="CFURLSetResourcePropertiesForKeys(CFURLRef;CFDictionaryRef;CFErrorRef*):Boolean"/>
    <method name="CFURLSetResourcePropertyForKey(CFURLRef;CFStringRef;CFTypeRef;CFErrorRef*):Boolean"/>
    <method name="CFURLSetTemporaryResourcePropertyForKey(CFURLRef;CFStringRef;CFTypeRef):void"/>
    <method name="CFURLStartAccessingSecurityScopedResource(CFURLRef):Boolean"/>
    <method name="CFURLStopAccessingSecurityScopedResource(CFURLRef):void"/>
    <method name="CFURLWriteBookmarkDataToFile(CFDataRef;CFURLRef;CFURLBookmarkFileCreationOptions;CFErrorRef*):Boolean"/>
    <method name="CFURLWriteDataAndPropertiesToResource(CFURLRef;CFDataRef;CFDictionaryRef;SInt32*):Boolean"/>
    <method name="CFUUIDCreate(CFAllocatorRef):CFUUIDRef"/>
    <method name="CFUUIDCreateFromString(CFAllocatorRef;CFStringRef):CFUUIDRef"/>
    <method name="CFUUIDCreateFromUUIDBytes(CFAllocatorRef;CFUUIDBytes):CFUUIDRef"/>
    <method name="CFUUIDCreateString(CFAllocatorRef;CFUUIDRef):CFStringRef"/>
    <method name="CFUUIDCreateWithBytes(CFAllocatorRef;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8):CFUUIDRef"/>
    <method name="CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8):CFUUIDRef"/>
    <method name="CFUUIDGetTypeID():CFTypeID"/>
    <method name="CFUUIDGetUUIDBytes(CFUUIDRef):CFUUIDBytes"/>
    <method name="CFWriteStreamCanAcceptBytes(CFWriteStreamRef):Boolean"/>
    <method name="CFWriteStreamClose(CFWriteStreamRef):void"/>
    <method name="CFWriteStreamCopyError(CFWriteStreamRef):CFErrorRef"/>
    <method name="CFWriteStreamCopyProperty(CFWriteStreamRef;CFStringRef):CFTypeRef"/>
    <method name="CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef;CFAllocatorRef):CFWriteStreamRef"/>
    <method name="CFWriteStreamCreateWithBuffer(CFAllocatorRef;UInt8*;CFIndex):CFWriteStreamRef"/>
    <method name="CFWriteStreamCreateWithFTPURL(CFAllocatorRef;CFURLRef):CFWriteStreamRef"/>
    <method name="CFWriteStreamCreateWithFile(CFAllocatorRef;CFURLRef):CFWriteStreamRef"/>
    <method name="CFWriteStreamGetError(CFWriteStreamRef):CFStreamError"/>
    <method name="CFWriteStreamGetStatus(CFWriteStreamRef):CFStreamStatus"/>
    <method name="CFWriteStreamGetTypeID():CFTypeID"/>
    <method name="CFWriteStreamOpen(CFWriteStreamRef):Boolean"/>
    <method name="CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFWriteStreamSetClient(CFWriteStreamRef;CFOptionFlags;CFWriteStreamClientCallBack;CFStreamClientContext*):Boolean"/>
    <method name="CFWriteStreamSetProperty(CFWriteStreamRef;CFStringRef;CFTypeRef):Boolean"/>
    <method name="CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFWriteStreamWrite(CFWriteStreamRef;const UInt8*;CFIndex):CFIndex"/>
    <method name="CGAffineTransformConcat(CGAffineTransform;CGAffineTransform):CGAffineTransform"/>
    <method name="CGAffineTransformEqualToTransform(CGAffineTransform;CGAffineTransform):_Bool"/>
    <method name="CGAffineTransformFromString(NSString*):CGAffineTransform"/>
    <method name="CGAffineTransformInvert(CGAffineTransform):CGAffineTransform"/>
    <method name="CGAffineTransformIsIdentity(CGAffineTransform):_Bool"/>
    <method name="CGAffineTransformMake(CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformMakeRotation(CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformMakeScale(CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformMakeTranslation(CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformRotate(CGAffineTransform;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformScale(CGAffineTransform;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformTranslate(CGAffineTransform;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGBitmapContextCreate(void*;size_t;size_t;size_t;size_t;CGColorSpaceRef;CGBitmapInfo):CGContextRef"/>
    <method name="CGBitmapContextCreateImage(CGContextRef):CGImageRef"/>
    <method name="CGBitmapContextCreateWithData(void*;size_t;size_t;size_t;size_t;CGColorSpaceRef;CGBitmapInfo;CGBitmapContextReleaseDataCallback;void*):CGContextRef"/>
    <method name="CGBitmapContextGetAlphaInfo(CGContextRef):CGImageAlphaInfo"/>
    <method name="CGBitmapContextGetBitmapInfo(CGContextRef):CGBitmapInfo"/>
    <method name="CGBitmapContextGetBitsPerComponent(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetBitsPerPixel(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetBytesPerRow(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetColorSpace(CGContextRef):CGColorSpaceRef"/>
    <method name="CGBitmapContextGetData(CGContextRef):void*"/>
    <method name="CGBitmapContextGetHeight(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetWidth(CGContextRef):size_t"/>
    <method name="CGColorCreate(CGColorSpaceRef;const CGFloat*):CGColorRef"/>
    <method name="CGColorCreateCopy(CGColorRef):CGColorRef"/>
    <method name="CGColorCreateCopyWithAlpha(CGColorRef;CGFloat):CGColorRef"/>
    <method name="CGColorCreateGenericCMYK(CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):CGColorRef"/>
    <method name="CGColorCreateGenericGray(CGFloat;CGFloat):CGColorRef"/>
    <method name="CGColorCreateGenericRGB(CGFloat;CGFloat;CGFloat;CGFloat):CGColorRef"/>
    <method name="CGColorCreateWithPattern(CGColorSpaceRef;CGPatternRef;const CGFloat*):CGColorRef"/>
    <method name="CGColorEqualToColor(CGColorRef;CGColorRef):_Bool"/>
    <method name="CGColorGetAlpha(CGColorRef):CGFloat"/>
    <method name="CGColorGetColorSpace(CGColorRef):CGColorSpaceRef"/>
    <method name="CGColorGetComponents(CGColorRef):const CGFloat*"/>
    <method name="CGColorGetConstantColor(CFStringRef):CGColorRef"/>
    <method name="CGColorGetNumberOfComponents(CGColorRef):size_t"/>
    <method name="CGColorGetPattern(CGColorRef):CGPatternRef"/>
    <method name="CGColorGetTypeID():CFTypeID"/>
    <method name="CGColorRelease(CGColorRef):void"/>
    <method name="CGColorRetain(CGColorRef):CGColorRef"/>
    <method name="CGColorSpaceCopyICCProfile(CGColorSpaceRef):CFDataRef"/>
    <method name="CGColorSpaceCopyName(CGColorSpaceRef):CFStringRef"/>
    <method name="CGColorSpaceCreateCalibratedGray(const CGFloat*;const CGFloat*;CGFloat):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateCalibratedRGB(const CGFloat*;const CGFloat*;const CGFloat*;const CGFloat*):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateDeviceCMYK():CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateDeviceGray():CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateDeviceRGB():CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateICCBased(size_t;const CGFloat*;CGDataProviderRef;CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateIndexed(CGColorSpaceRef;size_t;const unsigned char*):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateLab(const CGFloat*;const CGFloat*;const CGFloat*):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreatePattern(CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateWithICCProfile(CFDataRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateWithName(CFStringRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateWithPlatformColorSpace(const void*):CGColorSpaceRef"/>
    <method name="CGColorSpaceGetBaseColorSpace(CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceGetColorTable(CGColorSpaceRef;uint8_t*):void"/>
    <method name="CGColorSpaceGetColorTableCount(CGColorSpaceRef):size_t"/>
    <method name="CGColorSpaceGetModel(CGColorSpaceRef):CGColorSpaceModel"/>
    <method name="CGColorSpaceGetNumberOfComponents(CGColorSpaceRef):size_t"/>
    <method name="CGColorSpaceGetTypeID():CFTypeID"/>
    <method name="CGColorSpaceRelease(CGColorSpaceRef):void"/>
    <method name="CGColorSpaceRetain(CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGContextAddArc(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;int):void"/>
    <method name="CGContextAddArcToPoint(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextAddCurveToPoint(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextAddEllipseInRect(CGContextRef;CGRect):void"/>
    <method name="CGContextAddLineToPoint(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextAddLines(CGContextRef;const CGPoint*;size_t):void"/>
    <method name="CGContextAddPath(CGContextRef;CGPathRef):void"/>
    <method name="CGContextAddQuadCurveToPoint(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextAddRect(CGContextRef;CGRect):void"/>
    <method name="CGContextAddRects(CGContextRef;const CGRect*;size_t):void"/>
    <method name="CGContextBeginPage(CGContextRef;const CGRect*):void"/>
    <method name="CGContextBeginPath(CGContextRef):void"/>
    <method name="CGContextBeginTransparencyLayer(CGContextRef;CFDictionaryRef):void"/>
    <method name="CGContextBeginTransparencyLayerWithRect(CGContextRef;CGRect;CFDictionaryRef):void"/>
    <method name="CGContextClearRect(CGContextRef;CGRect):void"/>
    <method name="CGContextClip(CGContextRef):void"/>
    <method name="CGContextClipToMask(CGContextRef;CGRect;CGImageRef):void"/>
    <method name="CGContextClipToRect(CGContextRef;CGRect):void"/>
    <method name="CGContextClipToRects(CGContextRef;const CGRect*;size_t):void"/>
    <method name="CGContextClosePath(CGContextRef):void"/>
    <method name="CGContextConcatCTM(CGContextRef;CGAffineTransform):void"/>
    <method name="CGContextConvertPointToDeviceSpace(CGContextRef;CGPoint):CGPoint"/>
    <method name="CGContextConvertPointToUserSpace(CGContextRef;CGPoint):CGPoint"/>
    <method name="CGContextConvertRectToDeviceSpace(CGContextRef;CGRect):CGRect"/>
    <method name="CGContextConvertRectToUserSpace(CGContextRef;CGRect):CGRect"/>
    <method name="CGContextConvertSizeToDeviceSpace(CGContextRef;CGSize):CGSize"/>
    <method name="CGContextConvertSizeToUserSpace(CGContextRef;CGSize):CGSize"/>
    <method name="CGContextCopyPath(CGContextRef):CGPathRef"/>
    <method name="CGContextDrawImage(CGContextRef;CGRect;CGImageRef):void"/>
    <method name="CGContextDrawLayerAtPoint(CGContextRef;CGPoint;CGLayerRef):void"/>
    <method name="CGContextDrawLayerInRect(CGContextRef;CGRect;CGLayerRef):void"/>
    <method name="CGContextDrawLinearGradient(CGContextRef;CGGradientRef;CGPoint;CGPoint;CGGradientDrawingOptions):void"/>
    <method name="CGContextDrawPDFDocument(CGContextRef;CGRect;CGPDFDocumentRef;int):void"/>
    <method name="CGContextDrawPDFPage(CGContextRef;CGPDFPageRef):void"/>
    <method name="CGContextDrawPath(CGContextRef;CGPathDrawingMode):void"/>
    <method name="CGContextDrawRadialGradient(CGContextRef;CGGradientRef;CGPoint;CGFloat;CGPoint;CGFloat;CGGradientDrawingOptions):void"/>
    <method name="CGContextDrawShading(CGContextRef;CGShadingRef):void"/>
    <method name="CGContextDrawTiledImage(CGContextRef;CGRect;CGImageRef):void"/>
    <method name="CGContextEOClip(CGContextRef):void"/>
    <method name="CGContextEOFillPath(CGContextRef):void"/>
    <method name="CGContextEndPage(CGContextRef):void"/>
    <method name="CGContextEndTransparencyLayer(CGContextRef):void"/>
    <method name="CGContextFillEllipseInRect(CGContextRef;CGRect):void"/>
    <method name="CGContextFillPath(CGContextRef):void"/>
    <method name="CGContextFillRect(CGContextRef;CGRect):void"/>
    <method name="CGContextFillRects(CGContextRef;const CGRect*;size_t):void"/>
    <method name="CGContextFlush(CGContextRef):void"/>
    <method name="CGContextGetCTM(CGContextRef):CGAffineTransform"/>
    <method name="CGContextGetClipBoundingBox(CGContextRef):CGRect"/>
    <method name="CGContextGetInterpolationQuality(CGContextRef):CGInterpolationQuality"/>
    <method name="CGContextGetPathBoundingBox(CGContextRef):CGRect"/>
    <method name="CGContextGetPathCurrentPoint(CGContextRef):CGPoint"/>
    <method name="CGContextGetTextMatrix(CGContextRef):CGAffineTransform"/>
    <method name="CGContextGetTextPosition(CGContextRef):CGPoint"/>
    <method name="CGContextGetTypeID():CFTypeID"/>
    <method name="CGContextGetUserSpaceToDeviceSpaceTransform(CGContextRef):CGAffineTransform"/>
    <method name="CGContextIsPathEmpty(CGContextRef):_Bool"/>
    <method name="CGContextMoveToPoint(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextPathContainsPoint(CGContextRef;CGPoint;CGPathDrawingMode):_Bool"/>
    <method name="CGContextRelease(CGContextRef):void"/>
    <method name="CGContextReplacePathWithStrokedPath(CGContextRef):void"/>
    <method name="CGContextRestoreGState(CGContextRef):void"/>
    <method name="CGContextRetain(CGContextRef):CGContextRef"/>
    <method name="CGContextRotateCTM(CGContextRef;CGFloat):void"/>
    <method name="CGContextSaveGState(CGContextRef):void"/>
    <method name="CGContextScaleCTM(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextSelectFont(CGContextRef;const char*;CGFloat;CGTextEncoding):void"/>
    <method name="CGContextSetAllowsAntialiasing(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAllowsFontSmoothing(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAllowsFontSubpixelPositioning(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAllowsFontSubpixelQuantization(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAlpha(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetBlendMode(CGContextRef;CGBlendMode):void"/>
    <method name="CGContextSetCMYKFillColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetCMYKStrokeColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetCharacterSpacing(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetFillColor(CGContextRef;const CGFloat*):void"/>
    <method name="CGContextSetFillColorSpace(CGContextRef;CGColorSpaceRef):void"/>
    <method name="CGContextSetFillColorWithColor(CGContextRef;CGColorRef):void"/>
    <method name="CGContextSetFillPattern(CGContextRef;CGPatternRef;const CGFloat*):void"/>
    <method name="CGContextSetFlatness(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetFont(CGContextRef;CGFontRef):void"/>
    <method name="CGContextSetFontSize(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetGrayFillColor(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextSetGrayStrokeColor(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextSetInterpolationQuality(CGContextRef;CGInterpolationQuality):void"/>
    <method name="CGContextSetLineCap(CGContextRef;CGLineCap):void"/>
    <method name="CGContextSetLineDash(CGContextRef;CGFloat;const CGFloat*;size_t):void"/>
    <method name="CGContextSetLineJoin(CGContextRef;CGLineJoin):void"/>
    <method name="CGContextSetLineWidth(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetMiterLimit(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetPatternPhase(CGContextRef;CGSize):void"/>
    <method name="CGContextSetRGBFillColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetRGBStrokeColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetRenderingIntent(CGContextRef;CGColorRenderingIntent):void"/>
    <method name="CGContextSetShadow(CGContextRef;CGSize;CGFloat):void"/>
    <method name="CGContextSetShadowWithColor(CGContextRef;CGSize;CGFloat;CGColorRef):void"/>
    <method name="CGContextSetShouldAntialias(CGContextRef;_Bool):void"/>
    <method name="CGContextSetShouldSmoothFonts(CGContextRef;_Bool):void"/>
    <method name="CGContextSetShouldSubpixelPositionFonts(CGContextRef;_Bool):void"/>
    <method name="CGContextSetShouldSubpixelQuantizeFonts(CGContextRef;_Bool):void"/>
    <method name="CGContextSetStrokeColor(CGContextRef;const CGFloat*):void"/>
    <method name="CGContextSetStrokeColorSpace(CGContextRef;CGColorSpaceRef):void"/>
    <method name="CGContextSetStrokeColorWithColor(CGContextRef;CGColorRef):void"/>
    <method name="CGContextSetStrokePattern(CGContextRef;CGPatternRef;const CGFloat*):void"/>
    <method name="CGContextSetTextDrawingMode(CGContextRef;CGTextDrawingMode):void"/>
    <method name="CGContextSetTextMatrix(CGContextRef;CGAffineTransform):void"/>
    <method name="CGContextSetTextPosition(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextShowGlyphs(CGContextRef;const CGGlyph*;size_t):void"/>
    <method name="CGContextShowGlyphsAtPoint(CGContextRef;CGFloat;CGFloat;const CGGlyph*;size_t):void"/>
    <method name="CGContextShowGlyphsAtPositions(CGContextRef;const CGGlyph*;const CGPoint*;size_t):void"/>
    <method name="CGContextShowGlyphsWithAdvances(CGContextRef;const CGGlyph*;const CGSize*;size_t):void"/>
    <method name="CGContextShowText(CGContextRef;const char*;size_t):void"/>
    <method name="CGContextShowTextAtPoint(CGContextRef;CGFloat;CGFloat;const char*;size_t):void"/>
    <method name="CGContextStrokeEllipseInRect(CGContextRef;CGRect):void"/>
    <method name="CGContextStrokeLineSegments(CGContextRef;const CGPoint*;size_t):void"/>
    <method name="CGContextStrokePath(CGContextRef):void"/>
    <method name="CGContextStrokeRect(CGContextRef;CGRect):void"/>
    <method name="CGContextStrokeRectWithWidth(CGContextRef;CGRect;CGFloat):void"/>
    <method name="CGContextSynchronize(CGContextRef):void"/>
    <method name="CGContextTranslateCTM(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGDataConsumerCreate(void*;const CGDataConsumerCallbacks*):CGDataConsumerRef"/>
    <method name="CGDataConsumerCreateWithCFData(CFMutableDataRef):CGDataConsumerRef"/>
    <method name="CGDataConsumerCreateWithURL(CFURLRef):CGDataConsumerRef"/>
    <method name="CGDataConsumerGetTypeID():CFTypeID"/>
    <method name="CGDataConsumerRelease(CGDataConsumerRef):void"/>
    <method name="CGDataConsumerRetain(CGDataConsumerRef):CGDataConsumerRef"/>
    <method name="CGDataProviderCopyData(CGDataProviderRef):CFDataRef"/>
    <method name="CGDataProviderCreateDirect(void*;off_t;const CGDataProviderDirectCallbacks*):CGDataProviderRef"/>
    <method name="CGDataProviderCreateSequential(void*;const CGDataProviderSequentialCallbacks*):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithCFData(CFDataRef):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithData(void*;const void*;size_t;CGDataProviderReleaseDataCallback):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithFilename(const char*):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithURL(CFURLRef):CGDataProviderRef"/>
    <method name="CGDataProviderGetTypeID():CFTypeID"/>
    <method name="CGDataProviderRelease(CGDataProviderRef):void"/>
    <method name="CGDataProviderRetain(CGDataProviderRef):CGDataProviderRef"/>
    <method name="CGFontCanCreatePostScriptSubset(CGFontRef;CGFontPostScriptFormat):_Bool"/>
    <method name="CGFontCopyFullName(CGFontRef):CFStringRef"/>
    <method name="CGFontCopyGlyphNameForGlyph(CGFontRef;CGGlyph):CFStringRef"/>
    <method name="CGFontCopyPostScriptName(CGFontRef):CFStringRef"/>
    <method name="CGFontCopyTableForTag(CGFontRef;uint32_t):CFDataRef"/>
    <method name="CGFontCopyTableTags(CGFontRef):CFArrayRef"/>
    <method name="CGFontCopyVariationAxes(CGFontRef):CFArrayRef"/>
    <method name="CGFontCopyVariations(CGFontRef):CFDictionaryRef"/>
    <method name="CGFontCreateCopyWithVariations(CGFontRef;CFDictionaryRef):CGFontRef"/>
    <method name="CGFontCreatePostScriptEncoding(CGFontRef;const CGGlyph*):CFDataRef"/>
    <method name="CGFontCreatePostScriptSubset(CGFontRef;CFStringRef;CGFontPostScriptFormat;const CGGlyph*;size_t;const CGGlyph*):CFDataRef"/>
    <method name="CGFontCreateWithDataProvider(CGDataProviderRef):CGFontRef"/>
    <method name="CGFontCreateWithFontName(CFStringRef):CGFontRef"/>
    <method name="CGFontCreateWithPlatformFont(void*):CGFontRef"/>
    <method name="CGFontGetAscent(CGFontRef):int"/>
    <method name="CGFontGetCapHeight(CGFontRef):int"/>
    <method name="CGFontGetDescent(CGFontRef):int"/>
    <method name="CGFontGetFontBBox(CGFontRef):CGRect"/>
    <method name="CGFontGetGlyphAdvances(CGFontRef;const CGGlyph*;size_t;int*):_Bool"/>
    <method name="CGFontGetGlyphBBoxes(CGFontRef;const CGGlyph*;size_t;CGRect*):_Bool"/>
    <method name="CGFontGetGlyphWithGlyphName(CGFontRef;CFStringRef):CGGlyph"/>
    <method name="CGFontGetItalicAngle(CGFontRef):CGFloat"/>
    <method name="CGFontGetLeading(CGFontRef):int"/>
    <method name="CGFontGetNumberOfGlyphs(CGFontRef):size_t"/>
    <method name="CGFontGetStemV(CGFontRef):CGFloat"/>
    <method name="CGFontGetTypeID():CFTypeID"/>
    <method name="CGFontGetUnitsPerEm(CGFontRef):int"/>
    <method name="CGFontGetXHeight(CGFontRef):int"/>
    <method name="CGFontRelease(CGFontRef):void"/>
    <method name="CGFontRetain(CGFontRef):CGFontRef"/>
    <method name="CGFunctionCreate(void*;size_t;const CGFloat*;size_t;const CGFloat*;const CGFunctionCallbacks*):CGFunctionRef"/>
    <method name="CGFunctionGetTypeID():CFTypeID"/>
    <method name="CGFunctionRelease(CGFunctionRef):void"/>
    <method name="CGFunctionRetain(CGFunctionRef):CGFunctionRef"/>
    <method name="CGGradientCreateWithColorComponents(CGColorSpaceRef;const CGFloat*;const CGFloat*;size_t):CGGradientRef"/>
    <method name="CGGradientCreateWithColors(CGColorSpaceRef;CFArrayRef;const CGFloat*):CGGradientRef"/>
    <method name="CGGradientGetTypeID():CFTypeID"/>
    <method name="CGGradientRelease(CGGradientRef):void"/>
    <method name="CGGradientRetain(CGGradientRef):CGGradientRef"/>
    <method name="CGImageCreate(size_t;size_t;size_t;size_t;size_t;CGColorSpaceRef;CGBitmapInfo;CGDataProviderRef;const CGFloat*;_Bool;CGColorRenderingIntent):CGImageRef"/>
    <method name="CGImageCreateCopy(CGImageRef):CGImageRef"/>
    <method name="CGImageCreateCopyWithColorSpace(CGImageRef;CGColorSpaceRef):CGImageRef"/>
    <method name="CGImageCreateWithImageInRect(CGImageRef;CGRect):CGImageRef"/>
    <method name="CGImageCreateWithJPEGDataProvider(CGDataProviderRef;const CGFloat*;_Bool;CGColorRenderingIntent):CGImageRef"/>
    <method name="CGImageCreateWithMask(CGImageRef;CGImageRef):CGImageRef"/>
    <method name="CGImageCreateWithMaskingColors(CGImageRef;const CGFloat*):CGImageRef"/>
    <method name="CGImageCreateWithPNGDataProvider(CGDataProviderRef;const CGFloat*;_Bool;CGColorRenderingIntent):CGImageRef"/>
    <method name="CGImageDestinationAddImage(CGImageDestinationRef;CGImageRef;CFDictionaryRef):void"/>
    <method name="CGImageDestinationAddImageFromSource(CGImageDestinationRef;CGImageSourceRef;size_t;CFDictionaryRef):void"/>
    <method name="CGImageDestinationCopyTypeIdentifiers():CFArrayRef"/>
    <method name="CGImageDestinationCreateWithData(CFMutableDataRef;CFStringRef;size_t;CFDictionaryRef):CGImageDestinationRef"/>
    <method name="CGImageDestinationCreateWithDataConsumer(CGDataConsumerRef;CFStringRef;size_t;CFDictionaryRef):CGImageDestinationRef"/>
    <method name="CGImageDestinationCreateWithURL(CFURLRef;CFStringRef;size_t;CFDictionaryRef):CGImageDestinationRef"/>
    <method name="CGImageDestinationFinalize(CGImageDestinationRef):_Bool"/>
    <method name="CGImageDestinationGetTypeID():CFTypeID"/>
    <method name="CGImageDestinationSetProperties(CGImageDestinationRef;CFDictionaryRef):void"/>
    <method name="CGImageGetAlphaInfo(CGImageRef):CGImageAlphaInfo"/>
    <method name="CGImageGetBitmapInfo(CGImageRef):CGBitmapInfo"/>
    <method name="CGImageGetBitsPerComponent(CGImageRef):size_t"/>
    <method name="CGImageGetBitsPerPixel(CGImageRef):size_t"/>
    <method name="CGImageGetBytesPerRow(CGImageRef):size_t"/>
    <method name="CGImageGetColorSpace(CGImageRef):CGColorSpaceRef"/>
    <method name="CGImageGetDataProvider(CGImageRef):CGDataProviderRef"/>
    <method name="CGImageGetDecode(CGImageRef):const CGFloat*"/>
    <method name="CGImageGetHeight(CGImageRef):size_t"/>
    <method name="CGImageGetRenderingIntent(CGImageRef):CGColorRenderingIntent"/>
    <method name="CGImageGetShouldInterpolate(CGImageRef):_Bool"/>
    <method name="CGImageGetTypeID():CFTypeID"/>
    <method name="CGImageGetWidth(CGImageRef):size_t"/>
    <method name="CGImageIsMask(CGImageRef):_Bool"/>
    <method name="CGImageMaskCreate(size_t;size_t;size_t;size_t;size_t;CGDataProviderRef;const CGFloat*;_Bool):CGImageRef"/>
    <method name="CGImageRelease(CGImageRef):void"/>
    <method name="CGImageRetain(CGImageRef):CGImageRef"/>
    <method name="CGImageSourceCopyProperties(CGImageSourceRef;CFDictionaryRef):CFDictionaryRef"/>
    <method name="CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef;size_t;CFDictionaryRef):CFDictionaryRef"/>
    <method name="CGImageSourceCopyTypeIdentifiers():CFArrayRef"/>
    <method name="CGImageSourceCreateImageAtIndex(CGImageSourceRef;size_t;CFDictionaryRef):CGImageRef"/>
    <method name="CGImageSourceCreateIncremental(CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef;size_t;CFDictionaryRef):CGImageRef"/>
    <method name="CGImageSourceCreateWithData(CFDataRef;CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceCreateWithDataProvider(CGDataProviderRef;CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceCreateWithURL(CFURLRef;CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceGetCount(CGImageSourceRef):size_t"/>
    <method name="CGImageSourceGetStatus(CGImageSourceRef):CGImageSourceStatus"/>
    <method name="CGImageSourceGetStatusAtIndex(CGImageSourceRef;size_t):CGImageSourceStatus"/>
    <method name="CGImageSourceGetType(CGImageSourceRef):CFStringRef"/>
    <method name="CGImageSourceGetTypeID():CFTypeID"/>
    <method name="CGImageSourceUpdateData(CGImageSourceRef;CFDataRef;_Bool):void"/>
    <method name="CGImageSourceUpdateDataProvider(CGImageSourceRef;CGDataProviderRef;_Bool):void"/>
    <method name="CGLayerCreateWithContext(CGContextRef;CGSize;CFDictionaryRef):CGLayerRef"/>
    <method name="CGLayerGetContext(CGLayerRef):CGContextRef"/>
    <method name="CGLayerGetSize(CGLayerRef):CGSize"/>
    <method name="CGLayerGetTypeID():CFTypeID"/>
    <method name="CGLayerRelease(CGLayerRef):void"/>
    <method name="CGLayerRetain(CGLayerRef):CGLayerRef"/>
    <method name="CGPDFArrayGetArray(CGPDFArrayRef;size_t;CGPDFArrayRef*):_Bool"/>
    <method name="CGPDFArrayGetBoolean(CGPDFArrayRef;size_t;CGPDFBoolean*):_Bool"/>
    <method name="CGPDFArrayGetCount(CGPDFArrayRef):size_t"/>
    <method name="CGPDFArrayGetDictionary(CGPDFArrayRef;size_t;CGPDFDictionaryRef*):_Bool"/>
    <method name="CGPDFArrayGetInteger(CGPDFArrayRef;size_t;CGPDFInteger*):_Bool"/>
    <method name="CGPDFArrayGetName(CGPDFArrayRef;size_t;const char**):_Bool"/>
    <method name="CGPDFArrayGetNull(CGPDFArrayRef;size_t):_Bool"/>
    <method name="CGPDFArrayGetNumber(CGPDFArrayRef;size_t;CGPDFReal*):_Bool"/>
    <method name="CGPDFArrayGetObject(CGPDFArrayRef;size_t;CGPDFObjectRef*):_Bool"/>
    <method name="CGPDFArrayGetStream(CGPDFArrayRef;size_t;CGPDFStreamRef*):_Bool"/>
    <method name="CGPDFArrayGetString(CGPDFArrayRef;size_t;CGPDFStringRef*):_Bool"/>
    <method name="CGPDFContentStreamCreateWithPage(CGPDFPageRef):CGPDFContentStreamRef"/>
    <method name="CGPDFContentStreamCreateWithStream(CGPDFStreamRef;CGPDFDictionaryRef;CGPDFContentStreamRef):CGPDFContentStreamRef"/>
    <method name="CGPDFContentStreamGetResource(CGPDFContentStreamRef;const char*;const char*):CGPDFObjectRef"/>
    <method name="CGPDFContentStreamGetStreams(CGPDFContentStreamRef):CFArrayRef"/>
    <method name="CGPDFContentStreamRelease(CGPDFContentStreamRef):void"/>
    <method name="CGPDFContentStreamRetain(CGPDFContentStreamRef):CGPDFContentStreamRef"/>
    <method name="CGPDFContextAddDestinationAtPoint(CGContextRef;CFStringRef;CGPoint):void"/>
    <method name="CGPDFContextAddDocumentMetadata(CGContextRef;CFDataRef):void"/>
    <method name="CGPDFContextBeginPage(CGContextRef;CFDictionaryRef):void"/>
    <method name="CGPDFContextClose(CGContextRef):void"/>
    <method name="CGPDFContextCreate(CGDataConsumerRef;const CGRect*;CFDictionaryRef):CGContextRef"/>
    <method name="CGPDFContextCreateWithURL(CFURLRef;const CGRect*;CFDictionaryRef):CGContextRef"/>
    <method name="CGPDFContextEndPage(CGContextRef):void"/>
    <method name="CGPDFContextSetDestinationForRect(CGContextRef;CFStringRef;CGRect):void"/>
    <method name="CGPDFContextSetURLForRect(CGContextRef;CFURLRef;CGRect):void"/>
    <method name="CGPDFDictionaryApplyFunction(CGPDFDictionaryRef;CGPDFDictionaryApplierFunction;void*):void"/>
    <method name="CGPDFDictionaryGetArray(CGPDFDictionaryRef;const char*;CGPDFArrayRef*):_Bool"/>
    <method name="CGPDFDictionaryGetBoolean(CGPDFDictionaryRef;const char*;CGPDFBoolean*):_Bool"/>
    <method name="CGPDFDictionaryGetCount(CGPDFDictionaryRef):size_t"/>
    <method name="CGPDFDictionaryGetDictionary(CGPDFDictionaryRef;const char*;CGPDFDictionaryRef*):_Bool"/>
    <method name="CGPDFDictionaryGetInteger(CGPDFDictionaryRef;const char*;CGPDFInteger*):_Bool"/>
    <method name="CGPDFDictionaryGetName(CGPDFDictionaryRef;const char*;const char**):_Bool"/>
    <method name="CGPDFDictionaryGetNumber(CGPDFDictionaryRef;const char*;CGPDFReal*):_Bool"/>
    <method name="CGPDFDictionaryGetObject(CGPDFDictionaryRef;const char*;CGPDFObjectRef*):_Bool"/>
    <method name="CGPDFDictionaryGetStream(CGPDFDictionaryRef;const char*;CGPDFStreamRef*):_Bool"/>
    <method name="CGPDFDictionaryGetString(CGPDFDictionaryRef;const char*;CGPDFStringRef*):_Bool"/>
    <method name="CGPDFDocumentAllowsCopying(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentAllowsPrinting(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentCreateWithProvider(CGDataProviderRef):CGPDFDocumentRef"/>
    <method name="CGPDFDocumentCreateWithURL(CFURLRef):CGPDFDocumentRef"/>
    <method name="CGPDFDocumentGetArtBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetBleedBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetCatalog(CGPDFDocumentRef):CGPDFDictionaryRef"/>
    <method name="CGPDFDocumentGetCropBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetID(CGPDFDocumentRef):CGPDFArrayRef"/>
    <method name="CGPDFDocumentGetInfo(CGPDFDocumentRef):CGPDFDictionaryRef"/>
    <method name="CGPDFDocumentGetMediaBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef):size_t"/>
    <method name="CGPDFDocumentGetPage(CGPDFDocumentRef;size_t):CGPDFPageRef"/>
    <method name="CGPDFDocumentGetRotationAngle(CGPDFDocumentRef;int):int"/>
    <method name="CGPDFDocumentGetTrimBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetTypeID():CFTypeID"/>
    <method name="CGPDFDocumentGetVersion(CGPDFDocumentRef;int*;int*):void"/>
    <method name="CGPDFDocumentIsEncrypted(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentIsUnlocked(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentRelease(CGPDFDocumentRef):void"/>
    <method name="CGPDFDocumentRetain(CGPDFDocumentRef):CGPDFDocumentRef"/>
    <method name="CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef;const char*):_Bool"/>
    <method name="CGPDFObjectGetType(CGPDFObjectRef):CGPDFObjectType"/>
    <method name="CGPDFObjectGetValue(CGPDFObjectRef;CGPDFObjectType;void*):_Bool"/>
    <method name="CGPDFOperatorTableCreate():CGPDFOperatorTableRef"/>
    <method name="CGPDFOperatorTableRelease(CGPDFOperatorTableRef):void"/>
    <method name="CGPDFOperatorTableRetain(CGPDFOperatorTableRef):CGPDFOperatorTableRef"/>
    <method name="CGPDFOperatorTableSetCallback(CGPDFOperatorTableRef;const char*;CGPDFOperatorCallback):void"/>
    <method name="CGPDFPageGetBoxRect(CGPDFPageRef;CGPDFBox):CGRect"/>
    <method name="CGPDFPageGetDictionary(CGPDFPageRef):CGPDFDictionaryRef"/>
    <method name="CGPDFPageGetDocument(CGPDFPageRef):CGPDFDocumentRef"/>
    <method name="CGPDFPageGetDrawingTransform(CGPDFPageRef;CGPDFBox;CGRect;int;_Bool):CGAffineTransform"/>
    <method name="CGPDFPageGetPageNumber(CGPDFPageRef):size_t"/>
    <method name="CGPDFPageGetRotationAngle(CGPDFPageRef):int"/>
    <method name="CGPDFPageGetTypeID():CFTypeID"/>
    <method name="CGPDFPageRelease(CGPDFPageRef):void"/>
    <method name="CGPDFPageRetain(CGPDFPageRef):CGPDFPageRef"/>
    <method name="CGPDFScannerCreate(CGPDFContentStreamRef;CGPDFOperatorTableRef;void*):CGPDFScannerRef"/>
    <method name="CGPDFScannerGetContentStream(CGPDFScannerRef):CGPDFContentStreamRef"/>
    <method name="CGPDFScannerPopArray(CGPDFScannerRef;CGPDFArrayRef*):_Bool"/>
    <method name="CGPDFScannerPopBoolean(CGPDFScannerRef;CGPDFBoolean*):_Bool"/>
    <method name="CGPDFScannerPopDictionary(CGPDFScannerRef;CGPDFDictionaryRef*):_Bool"/>
    <method name="CGPDFScannerPopInteger(CGPDFScannerRef;CGPDFInteger*):_Bool"/>
    <method name="CGPDFScannerPopName(CGPDFScannerRef;const char**):_Bool"/>
    <method name="CGPDFScannerPopNumber(CGPDFScannerRef;CGPDFReal*):_Bool"/>
    <method name="CGPDFScannerPopObject(CGPDFScannerRef;CGPDFObjectRef*):_Bool"/>
    <method name="CGPDFScannerPopStream(CGPDFScannerRef;CGPDFStreamRef*):_Bool"/>
    <method name="CGPDFScannerPopString(CGPDFScannerRef;CGPDFStringRef*):_Bool"/>
    <method name="CGPDFScannerRelease(CGPDFScannerRef):void"/>
    <method name="CGPDFScannerRetain(CGPDFScannerRef):CGPDFScannerRef"/>
    <method name="CGPDFScannerScan(CGPDFScannerRef):_Bool"/>
    <method name="CGPDFStreamCopyData(CGPDFStreamRef;CGPDFDataFormat*):CFDataRef"/>
    <method name="CGPDFStreamGetDictionary(CGPDFStreamRef):CGPDFDictionaryRef"/>
    <method name="CGPDFStringCopyDate(CGPDFStringRef):CFDateRef"/>
    <method name="CGPDFStringCopyTextString(CGPDFStringRef):CFStringRef"/>
    <method name="CGPDFStringGetBytePtr(CGPDFStringRef):const unsigned char*"/>
    <method name="CGPDFStringGetLength(CGPDFStringRef):size_t"/>
    <method name="CGPathAddArc(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;_Bool):void"/>
    <method name="CGPathAddArcToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathAddCurveToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathAddEllipseInRect(CGMutablePathRef;const CGAffineTransform*;CGRect):void"/>
    <method name="CGPathAddLineToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat):void"/>
    <method name="CGPathAddLines(CGMutablePathRef;const CGAffineTransform*;const CGPoint*;size_t):void"/>
    <method name="CGPathAddPath(CGMutablePathRef;const CGAffineTransform*;CGPathRef):void"/>
    <method name="CGPathAddQuadCurveToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathAddRect(CGMutablePathRef;const CGAffineTransform*;CGRect):void"/>
    <method name="CGPathAddRects(CGMutablePathRef;const CGAffineTransform*;const CGRect*;size_t):void"/>
    <method name="CGPathAddRelativeArc(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathApply(CGPathRef;void*;CGPathApplierFunction):void"/>
    <method name="CGPathCloseSubpath(CGMutablePathRef):void"/>
    <method name="CGPathContainsPoint(CGPathRef;const CGAffineTransform*;CGPoint;_Bool):_Bool"/>
    <method name="CGPathCreateCopy(CGPathRef):CGPathRef"/>
    <method name="CGPathCreateCopyByDashingPath(CGPathRef;const CGAffineTransform*;CGFloat;const CGFloat*;size_t):CGPathRef"/>
    <method name="CGPathCreateCopyByStrokingPath(CGPathRef;const CGAffineTransform*;CGFloat;CGLineCap;CGLineJoin;CGFloat):CGPathRef"/>
    <method name="CGPathCreateCopyByTransformingPath(CGPathRef;const CGAffineTransform*):CGPathRef"/>
    <method name="CGPathCreateMutable():CGMutablePathRef"/>
    <method name="CGPathCreateMutableCopy(CGPathRef):CGMutablePathRef"/>
    <method name="CGPathCreateMutableCopyByTransformingPath(CGPathRef;const CGAffineTransform*):CGMutablePathRef"/>
    <method name="CGPathCreateWithEllipseInRect(CGRect;const CGAffineTransform*):CGPathRef"/>
    <method name="CGPathCreateWithRect(CGRect;const CGAffineTransform*):CGPathRef"/>
    <method name="CGPathEqualToPath(CGPathRef;CGPathRef):_Bool"/>
    <method name="CGPathGetBoundingBox(CGPathRef):CGRect"/>
    <method name="CGPathGetCurrentPoint(CGPathRef):CGPoint"/>
    <method name="CGPathGetPathBoundingBox(CGPathRef):CGRect"/>
    <method name="CGPathGetTypeID():CFTypeID"/>
    <method name="CGPathIsEmpty(CGPathRef):_Bool"/>
    <method name="CGPathIsRect(CGPathRef;CGRect*):_Bool"/>
    <method name="CGPathMoveToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat):void"/>
    <method name="CGPathRelease(CGPathRef):void"/>
    <method name="CGPathRetain(CGPathRef):CGPathRef"/>
    <method name="CGPatternCreate(void*;CGRect;CGAffineTransform;CGFloat;CGFloat;CGPatternTiling;_Bool;const CGPatternCallbacks*):CGPatternRef"/>
    <method name="CGPatternGetTypeID():CFTypeID"/>
    <method name="CGPatternRelease(CGPatternRef):void"/>
    <method name="CGPatternRetain(CGPatternRef):CGPatternRef"/>
    <method name="CGPointApplyAffineTransform(CGPoint;CGAffineTransform):CGPoint"/>
    <method name="CGPointCreateDictionaryRepresentation(CGPoint):CFDictionaryRef"/>
    <method name="CGPointEqualToPoint(CGPoint;CGPoint):_Bool"/>
    <method name="CGPointFromString(NSString*):CGPoint"/>
    <method name="CGPointMake(CGFloat;CGFloat):CGPoint"/>
    <method name="CGPointMakeWithDictionaryRepresentation(CFDictionaryRef;CGPoint*):_Bool"/>
    <method name="CGRectApplyAffineTransform(CGRect;CGAffineTransform):CGRect"/>
    <method name="CGRectContainsPoint(CGRect;CGPoint):_Bool"/>
    <method name="CGRectContainsRect(CGRect;CGRect):_Bool"/>
    <method name="CGRectCreateDictionaryRepresentation(CGRect):CFDictionaryRef"/>
    <method name="CGRectDivide(CGRect;CGRect*;CGRect*;CGFloat;CGRectEdge):void"/>
    <method name="CGRectEqualToRect(CGRect;CGRect):_Bool"/>
    <method name="CGRectFromString(NSString*):CGRect"/>
    <method name="CGRectGetHeight(CGRect):CGFloat"/>
    <method name="CGRectGetMaxX(CGRect):CGFloat"/>
    <method name="CGRectGetMaxY(CGRect):CGFloat"/>
    <method name="CGRectGetMidX(CGRect):CGFloat"/>
    <method name="CGRectGetMidY(CGRect):CGFloat"/>
    <method name="CGRectGetMinX(CGRect):CGFloat"/>
    <method name="CGRectGetMinY(CGRect):CGFloat"/>
    <method name="CGRectGetWidth(CGRect):CGFloat"/>
    <method name="CGRectInset(CGRect;CGFloat;CGFloat):CGRect"/>
    <method name="CGRectIntegral(CGRect):CGRect"/>
    <method name="CGRectIntersection(CGRect;CGRect):CGRect"/>
    <method name="CGRectIntersectsRect(CGRect;CGRect):_Bool"/>
    <method name="CGRectIsEmpty(CGRect):_Bool"/>
    <method name="CGRectIsInfinite(CGRect):_Bool"/>
    <method name="CGRectIsNull(CGRect):_Bool"/>
    <method name="CGRectMake(CGFloat;CGFloat;CGFloat;CGFloat):CGRect"/>
    <method name="CGRectMakeWithDictionaryRepresentation(CFDictionaryRef;CGRect*):_Bool"/>
    <method name="CGRectOffset(CGRect;CGFloat;CGFloat):CGRect"/>
    <method name="CGRectStandardize(CGRect):CGRect"/>
    <method name="CGRectUnion(CGRect;CGRect):CGRect"/>
    <method name="CGShadingCreateAxial(CGColorSpaceRef;CGPoint;CGPoint;CGFunctionRef;_Bool;_Bool):CGShadingRef"/>
    <method name="CGShadingCreateRadial(CGColorSpaceRef;CGPoint;CGFloat;CGPoint;CGFloat;CGFunctionRef;_Bool;_Bool):CGShadingRef"/>
    <method name="CGShadingGetTypeID():CFTypeID"/>
    <method name="CGShadingRelease(CGShadingRef):void"/>
    <method name="CGShadingRetain(CGShadingRef):CGShadingRef"/>
    <method name="CGSizeApplyAffineTransform(CGSize;CGAffineTransform):CGSize"/>
    <method name="CGSizeCreateDictionaryRepresentation(CGSize):CFDictionaryRef"/>
    <method name="CGSizeEqualToSize(CGSize;CGSize):_Bool"/>
    <method name="CGSizeFromString(NSString*):CGSize"/>
    <method name="CGSizeMake(CGFloat;CGFloat):CGSize"/>
    <method name="CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef;CGSize*):_Bool"/>
    <method name="CLLocationCoordinate2DIsValid(CLLocationCoordinate2D):BOOL"/>
    <method name="CLLocationCoordinate2DMake(CLLocationDegrees;CLLocationDegrees):CLLocationCoordinate2D"/>
    <method name="CMAudioClockCreate(CFAllocatorRef;CMClockRef*):OSStatus"/>
    <method name="CMAudioFormatDescriptionCreate(CFAllocatorRef;const AudioStreamBasicDescription*;size_t;const AudioChannelLayout*;size_t;const void*;CFDictionaryRef;CMAudioFormatDescriptionRef*):OSStatus"/>
    <method name="CMAudioFormatDescriptionCreateSummary(CFAllocatorRef;CFArrayRef;uint32_t;CMAudioFormatDescriptionRef*):OSStatus"/>
    <method name="CMAudioFormatDescriptionEqual(CMAudioFormatDescriptionRef;CMAudioFormatDescriptionRef;CMAudioFormatDescriptionMask;CMAudioFormatDescriptionMask*):Boolean"/>
    <method name="CMAudioFormatDescriptionGetChannelLayout(CMAudioFormatDescriptionRef;size_t*):const AudioChannelLayout*"/>
    <method name="CMAudioFormatDescriptionGetFormatList(CMAudioFormatDescriptionRef;size_t*):const AudioFormatListItem*"/>
    <method name="CMAudioFormatDescriptionGetMagicCookie(CMAudioFormatDescriptionRef;size_t*):const void*"/>
    <method name="CMAudioFormatDescriptionGetMostCompatibleFormat(CMAudioFormatDescriptionRef):const AudioFormatListItem*"/>
    <method name="CMAudioFormatDescriptionGetRichestDecodableFormat(CMAudioFormatDescriptionRef):const AudioFormatListItem*"/>
    <method name="CMAudioFormatDescriptionGetStreamBasicDescription(CMAudioFormatDescriptionRef):const AudioStreamBasicDescription*"/>
    <method name="CMAudioSampleBufferCreateWithPacketDescriptions(CFAllocatorRef;CMBlockBufferRef;Boolean;CMSampleBufferMakeDataReadyCallback;void*;CMFormatDescriptionRef;CMItemCount;CMTime;const AudioStreamPacketDescription*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMBlockBufferAccessDataBytes(CMBlockBufferRef;size_t;size_t;void*;char**):OSStatus"/>
    <method name="CMBlockBufferAppendBufferReference(CMBlockBufferRef;CMBlockBufferRef;size_t;size_t;CMBlockBufferFlags):OSStatus"/>
    <method name="CMBlockBufferAppendMemoryBlock(CMBlockBufferRef;void*;size_t;CFAllocatorRef;const CMBlockBufferCustomBlockSource*;size_t;size_t;CMBlockBufferFlags):OSStatus"/>
    <method name="CMBlockBufferAssureBlockMemory(CMBlockBufferRef):OSStatus"/>
    <method name="CMBlockBufferCopyDataBytes(CMBlockBufferRef;size_t;size_t;void*):OSStatus"/>
    <method name="CMBlockBufferCreateContiguous(CFAllocatorRef;CMBlockBufferRef;CFAllocatorRef;const CMBlockBufferCustomBlockSource*;size_t;size_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferCreateEmpty(CFAllocatorRef;uint32_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferCreateWithBufferReference(CFAllocatorRef;CMBlockBufferRef;size_t;size_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef;void*;size_t;CFAllocatorRef;const CMBlockBufferCustomBlockSource*;size_t;size_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferFillDataBytes(char;CMBlockBufferRef;size_t;size_t):OSStatus"/>
    <method name="CMBlockBufferGetDataLength(CMBlockBufferRef):size_t"/>
    <method name="CMBlockBufferGetDataPointer(CMBlockBufferRef;size_t;size_t*;size_t*;char**):OSStatus"/>
    <method name="CMBlockBufferGetTypeID():CFTypeID"/>
    <method name="CMBlockBufferIsEmpty(CMBlockBufferRef):Boolean"/>
    <method name="CMBlockBufferIsRangeContiguous(CMBlockBufferRef;size_t;size_t):Boolean"/>
    <method name="CMBlockBufferReplaceDataBytes(const void*;CMBlockBufferRef;size_t;size_t):OSStatus"/>
    <method name="CMBufferQueueCallForEachBuffer(CMBufferQueueRef;(*)(CMBufferRef;void*):OSStatus;void*):OSStatus"/>
    <method name="CMBufferQueueContainsEndOfData(CMBufferQueueRef):Boolean"/>
    <method name="CMBufferQueueCreate(CFAllocatorRef;CMItemCount;const CMBufferCallbacks*;CMBufferQueueRef*):OSStatus"/>
    <method name="CMBufferQueueDequeueAndRetain(CMBufferQueueRef):CMBufferRef"/>
    <method name="CMBufferQueueDequeueIfDataReadyAndRetain(CMBufferQueueRef):CMBufferRef"/>
    <method name="CMBufferQueueEnqueue(CMBufferQueueRef;CMBufferRef):OSStatus"/>
    <method name="CMBufferQueueGetBufferCount(CMBufferQueueRef):CMItemCount"/>
    <method name="CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS():const CMBufferCallbacks*"/>
    <method name="CMBufferQueueGetCallbacksForUnsortedSampleBuffers():const CMBufferCallbacks*"/>
    <method name="CMBufferQueueGetDuration(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetEndPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetFirstDecodeTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetFirstPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetHead(CMBufferQueueRef):CMBufferRef"/>
    <method name="CMBufferQueueGetMaxPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetMinDecodeTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetMinPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetTypeID():CFTypeID"/>
    <method name="CMBufferQueueInstallTrigger(CMBufferQueueRef;CMBufferQueueTriggerCallback;void*;CMBufferQueueTriggerCondition;CMTime;CMBufferQueueTriggerToken*):OSStatus"/>
    <method name="CMBufferQueueInstallTriggerWithIntegerThreshold(CMBufferQueueRef;CMBufferQueueTriggerCallback;void*;CMBufferQueueTriggerCondition;CMItemCount;CMBufferQueueTriggerToken*):OSStatus"/>
    <method name="CMBufferQueueIsAtEndOfData(CMBufferQueueRef):Boolean"/>
    <method name="CMBufferQueueIsEmpty(CMBufferQueueRef):Boolean"/>
    <method name="CMBufferQueueMarkEndOfData(CMBufferQueueRef):OSStatus"/>
    <method name="CMBufferQueueRemoveTrigger(CMBufferQueueRef;CMBufferQueueTriggerToken):OSStatus"/>
    <method name="CMBufferQueueReset(CMBufferQueueRef):OSStatus"/>
    <method name="CMBufferQueueResetWithCallback(CMBufferQueueRef;(*)(CMBufferRef;void*):void;void*):OSStatus"/>
    <method name="CMBufferQueueSetValidationCallback(CMBufferQueueRef;CMBufferValidationCallback;void*):OSStatus"/>
    <method name="CMBufferQueueTestTrigger(CMBufferQueueRef;CMBufferQueueTriggerToken):Boolean"/>
    <method name="CMClockConvertHostTimeToSystemUnits(CMTime):uint64_t"/>
    <method name="CMClockGetAnchorTime(CMClockRef;CMTime*;CMTime*):OSStatus"/>
    <method name="CMClockGetHostTimeClock():CMClockRef"/>
    <method name="CMClockGetTime(CMClockRef):CMTime"/>
    <method name="CMClockGetTypeID():CFTypeID"/>
    <method name="CMClockInvalidate(CMClockRef):void"/>
    <method name="CMClockMakeHostTimeFromSystemUnits(uint64_t):CMTime"/>
    <method name="CMClockMightDrift(CMClockRef;CMClockRef):Boolean"/>
    <method name="CMCopyDictionaryOfAttachments(CFAllocatorRef;CMAttachmentBearerRef;CMAttachmentMode):CFDictionaryRef"/>
    <method name="CMFormatDescriptionCreate(CFAllocatorRef;CMMediaType;FourCharCode;CFDictionaryRef;CMFormatDescriptionRef*):OSStatus"/>
    <method name="CMFormatDescriptionEqual(CMFormatDescriptionRef;CMFormatDescriptionRef):Boolean"/>
    <method name="CMFormatDescriptionEqualIgnoringExtensionKeys(CMFormatDescriptionRef;CMFormatDescriptionRef;CFTypeRef;CFTypeRef):Boolean"/>
    <method name="CMFormatDescriptionGetExtension(CMFormatDescriptionRef;CFStringRef):CFPropertyListRef"/>
    <method name="CMFormatDescriptionGetExtensions(CMFormatDescriptionRef):CFDictionaryRef"/>
    <method name="CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef):FourCharCode"/>
    <method name="CMFormatDescriptionGetMediaType(CMFormatDescriptionRef):CMMediaType"/>
    <method name="CMFormatDescriptionGetTypeID():CFTypeID"/>
    <method name="CMGetAttachment(CMAttachmentBearerRef;CFStringRef;CMAttachmentMode*):CFTypeRef"/>
    <method name="CMMemoryPoolCreate(CFDictionaryRef):CMMemoryPoolRef"/>
    <method name="CMMemoryPoolFlush(CMMemoryPoolRef):void"/>
    <method name="CMMemoryPoolGetAllocator(CMMemoryPoolRef):CFAllocatorRef"/>
    <method name="CMMemoryPoolGetTypeID():CFTypeID"/>
    <method name="CMMemoryPoolInvalidate(CMMemoryPoolRef):void"/>
    <method name="CMMetadataFormatDescriptionCreateWithKeys(CFAllocatorRef;CMMetadataFormatType;CFArrayRef;CMMetadataFormatDescriptionRef*):OSStatus"/>
    <method name="CMMetadataFormatDescriptionGetKeyWithLocalID(CMMetadataFormatDescriptionRef;OSType):CFDictionaryRef"/>
    <method name="CMMuxedFormatDescriptionCreate(CFAllocatorRef;CMMuxedStreamType;CFDictionaryRef;CMMuxedFormatDescriptionRef*):OSStatus"/>
    <method name="CMPropagateAttachments(CMAttachmentBearerRef;CMAttachmentBearerRef):void"/>
    <method name="CMRemoveAllAttachments(CMAttachmentBearerRef):void"/>
    <method name="CMRemoveAttachment(CMAttachmentBearerRef;CFStringRef):void"/>
    <method name="CMSampleBufferCallForEachSample(CMSampleBufferRef;(*)(CMSampleBufferRef;CMItemCount;void*):OSStatus;void*):OSStatus"/>
    <method name="CMSampleBufferCopySampleBufferForRange(CFAllocatorRef;CMSampleBufferRef;CFRange;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreate(CFAllocatorRef;CMBlockBufferRef;Boolean;CMSampleBufferMakeDataReadyCallback;void*;CMFormatDescriptionRef;CMItemCount;CMItemCount;const CMSampleTimingInfo*;CMItemCount;const size_t*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreateCopy(CFAllocatorRef;CMSampleBufferRef;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreateCopyWithNewTiming(CFAllocatorRef;CMSampleBufferRef;CMItemCount;const CMSampleTimingInfo*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreateForImageBuffer(CFAllocatorRef;CVImageBufferRef;Boolean;CMSampleBufferMakeDataReadyCallback;void*;CMVideoFormatDescriptionRef;const CMSampleTimingInfo*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferDataIsReady(CMSampleBufferRef):Boolean"/>
    <method name="CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(CMSampleBufferRef;size_t*;AudioBufferList*;size_t;CFAllocatorRef;CFAllocatorRef;uint32_t;CMBlockBufferRef*):OSStatus"/>
    <method name="CMSampleBufferGetAudioStreamPacketDescriptions(CMSampleBufferRef;size_t;AudioStreamPacketDescription*;size_t*):OSStatus"/>
    <method name="CMSampleBufferGetAudioStreamPacketDescriptionsPtr(CMSampleBufferRef;const AudioStreamPacketDescription**;size_t*):OSStatus"/>
    <method name="CMSampleBufferGetDataBuffer(CMSampleBufferRef):CMBlockBufferRef"/>
    <method name="CMSampleBufferGetDecodeTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetDuration(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetFormatDescription(CMSampleBufferRef):CMFormatDescriptionRef"/>
    <method name="CMSampleBufferGetImageBuffer(CMSampleBufferRef):CVImageBufferRef"/>
    <method name="CMSampleBufferGetNumSamples(CMSampleBufferRef):CMItemCount"/>
    <method name="CMSampleBufferGetOutputDecodeTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetOutputDuration(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetOutputPresentationTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetOutputSampleTimingInfoArray(CMSampleBufferRef;CMItemCount;CMSampleTimingInfo*;CMItemCount*):OSStatus"/>
    <method name="CMSampleBufferGetPresentationTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef;Boolean):CFArrayRef"/>
    <method name="CMSampleBufferGetSampleSize(CMSampleBufferRef;CMItemIndex):size_t"/>
    <method name="CMSampleBufferGetSampleSizeArray(CMSampleBufferRef;CMItemCount;size_t*;CMItemCount*):OSStatus"/>
    <method name="CMSampleBufferGetSampleTimingInfo(CMSampleBufferRef;CMItemIndex;CMSampleTimingInfo*):OSStatus"/>
    <method name="CMSampleBufferGetSampleTimingInfoArray(CMSampleBufferRef;CMItemCount;CMSampleTimingInfo*;CMItemCount*):OSStatus"/>
    <method name="CMSampleBufferGetTotalSampleSize(CMSampleBufferRef):size_t"/>
    <method name="CMSampleBufferGetTypeID():CFTypeID"/>
    <method name="CMSampleBufferInvalidate(CMSampleBufferRef):OSStatus"/>
    <method name="CMSampleBufferIsValid(CMSampleBufferRef):Boolean"/>
    <method name="CMSampleBufferMakeDataReady(CMSampleBufferRef):OSStatus"/>
    <method name="CMSampleBufferSetDataBuffer(CMSampleBufferRef;CMBlockBufferRef):OSStatus"/>
    <method name="CMSampleBufferSetDataBufferFromAudioBufferList(CMSampleBufferRef;CFAllocatorRef;CFAllocatorRef;uint32_t;const AudioBufferList*):OSStatus"/>
    <method name="CMSampleBufferSetDataReady(CMSampleBufferRef):OSStatus"/>
    <method name="CMSampleBufferSetInvalidateCallback(CMSampleBufferRef;CMSampleBufferInvalidateCallback;uint64_t):OSStatus"/>
    <method name="CMSampleBufferSetOutputPresentationTimeStamp(CMSampleBufferRef;CMTime):OSStatus"/>
    <method name="CMSampleBufferTrackDataReadiness(CMSampleBufferRef;CMSampleBufferRef):OSStatus"/>
    <method name="CMSetAttachment(CMAttachmentBearerRef;CFStringRef;CFTypeRef;CMAttachmentMode):void"/>
    <method name="CMSetAttachments(CMAttachmentBearerRef;CFDictionaryRef;CMAttachmentMode):void"/>
    <method name="CMSimpleQueueCreate(CFAllocatorRef;int32_t;CMSimpleQueueRef*):OSStatus"/>
    <method name="CMSimpleQueueDequeue(CMSimpleQueueRef):const void*"/>
    <method name="CMSimpleQueueEnqueue(CMSimpleQueueRef;const void*):OSStatus"/>
    <method name="CMSimpleQueueGetCapacity(CMSimpleQueueRef):int32_t"/>
    <method name="CMSimpleQueueGetCount(CMSimpleQueueRef):int32_t"/>
    <method name="CMSimpleQueueGetHead(CMSimpleQueueRef):const void*"/>
    <method name="CMSimpleQueueGetTypeID():CFTypeID"/>
    <method name="CMSimpleQueueReset(CMSimpleQueueRef):OSStatus"/>
    <method name="CMSyncConvertTime(CMTime;CMClockOrTimebaseRef;CMClockOrTimebaseRef):CMTime"/>
    <method name="CMSyncGetRelativeRate(CMClockOrTimebaseRef;CMClockOrTimebaseRef):Float64"/>
    <method name="CMSyncGetRelativeRateAndAnchorTime(CMClockOrTimebaseRef;CMClockOrTimebaseRef;Float64*;CMTime*;CMTime*):OSStatus"/>
    <method name="CMSyncGetTime(CMClockOrTimebaseRef):CMTime"/>
    <method name="CMSyncMightDrift(CMClockOrTimebaseRef;CMClockOrTimebaseRef):Boolean"/>
    <method name="CMTextFormatDescriptionGetDefaultStyle(CMFormatDescriptionRef;uint16_t*;Boolean*;Boolean*;Boolean*;CGFloat*;CGFloat*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetDefaultTextBox(CMFormatDescriptionRef;Boolean;CGFloat;CGRect*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetDisplayFlags(CMFormatDescriptionRef;CMTextDisplayFlags*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetFontName(CMFormatDescriptionRef;uint16_t;CFStringRef*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetJustification(CMFormatDescriptionRef;CMTextJustificationValue*;CMTextJustificationValue*):OSStatus"/>
    <method name="CMTimeAbsoluteValue(CMTime):CMTime"/>
    <method name="CMTimeAdd(CMTime;CMTime):CMTime"/>
    <method name="CMTimeClampToRange(CMTime;CMTimeRange):CMTime"/>
    <method name="CMTimeCodeFormatDescriptionCreate(CFAllocatorRef;CMTimeCodeFormatType;CMTime;uint32_t;uint32_t;CFDictionaryRef;CMTimeCodeFormatDescriptionRef*):OSStatus"/>
    <method name="CMTimeCodeFormatDescriptionGetFrameDuration(CMTimeCodeFormatDescriptionRef):CMTime"/>
    <method name="CMTimeCodeFormatDescriptionGetFrameQuanta(CMTimeCodeFormatDescriptionRef):uint32_t"/>
    <method name="CMTimeCodeFormatDescriptionGetTimeCodeFlags(CMTimeCodeFormatDescriptionRef):uint32_t"/>
    <method name="CMTimeCompare(CMTime;CMTime):int32_t"/>
    <method name="CMTimeConvertScale(CMTime;int32_t;CMTimeRoundingMethod):CMTime"/>
    <method name="CMTimeCopyAsDictionary(CMTime;CFAllocatorRef):CFDictionaryRef"/>
    <method name="CMTimeCopyDescription(CFAllocatorRef;CMTime):CFStringRef"/>
    <method name="CMTimeGetSeconds(CMTime):Float64"/>
    <method name="CMTimeMake(int64_t;int32_t):CMTime"/>
    <method name="CMTimeMakeFromDictionary(CFDictionaryRef):CMTime"/>
    <method name="CMTimeMakeWithEpoch(int64_t;int32_t;int64_t):CMTime"/>
    <method name="CMTimeMakeWithSeconds(Float64;int32_t):CMTime"/>
    <method name="CMTimeMapDurationFromRangeToRange(CMTime;CMTimeRange;CMTimeRange):CMTime"/>
    <method name="CMTimeMapTimeFromRangeToRange(CMTime;CMTimeRange;CMTimeRange):CMTime"/>
    <method name="CMTimeMaximum(CMTime;CMTime):CMTime"/>
    <method name="CMTimeMinimum(CMTime;CMTime):CMTime"/>
    <method name="CMTimeMultiply(CMTime;int32_t):CMTime"/>
    <method name="CMTimeMultiplyByFloat64(CMTime;Float64):CMTime"/>
    <method name="CMTimeRangeContainsTime(CMTimeRange;CMTime):Boolean"/>
    <method name="CMTimeRangeContainsTimeRange(CMTimeRange;CMTimeRange):Boolean"/>
    <method name="CMTimeRangeCopyAsDictionary(CMTimeRange;CFAllocatorRef):CFDictionaryRef"/>
    <method name="CMTimeRangeCopyDescription(CFAllocatorRef;CMTimeRange):CFStringRef"/>
    <method name="CMTimeRangeEqual(CMTimeRange;CMTimeRange):Boolean"/>
    <method name="CMTimeRangeFromTimeToTime(CMTime;CMTime):CMTimeRange"/>
    <method name="CMTimeRangeGetEnd(CMTimeRange):CMTime"/>
    <method name="CMTimeRangeGetIntersection(CMTimeRange;CMTimeRange):CMTimeRange"/>
    <method name="CMTimeRangeGetUnion(CMTimeRange;CMTimeRange):CMTimeRange"/>
    <method name="CMTimeRangeMake(CMTime;CMTime):CMTimeRange"/>
    <method name="CMTimeRangeMakeFromDictionary(CFDictionaryRef):CMTimeRange"/>
    <method name="CMTimeRangeShow(CMTimeRange):void"/>
    <method name="CMTimeShow(CMTime):void"/>
    <method name="CMTimeSubtract(CMTime;CMTime):CMTime"/>
    <method name="CMTimebaseAddTimer(CMTimebaseRef;CFRunLoopTimerRef;CFRunLoopRef):OSStatus"/>
    <method name="CMTimebaseAddTimerDispatchSource(CMTimebaseRef;dispatch_source_t):OSStatus"/>
    <method name="CMTimebaseCreateWithMasterClock(CFAllocatorRef;CMClockRef;CMTimebaseRef*):OSStatus"/>
    <method name="CMTimebaseCreateWithMasterTimebase(CFAllocatorRef;CMTimebaseRef;CMTimebaseRef*):OSStatus"/>
    <method name="CMTimebaseGetEffectiveRate(CMTimebaseRef):Float64"/>
    <method name="CMTimebaseGetMaster(CMTimebaseRef):CMClockOrTimebaseRef"/>
    <method name="CMTimebaseGetMasterClock(CMTimebaseRef):CMClockRef"/>
    <method name="CMTimebaseGetMasterTimebase(CMTimebaseRef):CMTimebaseRef"/>
    <method name="CMTimebaseGetRate(CMTimebaseRef):Float64"/>
    <method name="CMTimebaseGetTime(CMTimebaseRef):CMTime"/>
    <method name="CMTimebaseGetTimeAndRate(CMTimebaseRef;CMTime*;Float64*):OSStatus"/>
    <method name="CMTimebaseGetTimeWithTimeScale(CMTimebaseRef;CMTimeScale;CMTimeRoundingMethod):CMTime"/>
    <method name="CMTimebaseGetTypeID():CFTypeID"/>
    <method name="CMTimebaseGetUltimateMasterClock(CMTimebaseRef):CMClockRef"/>
    <method name="CMTimebaseNotificationBarrier(CMTimebaseRef):OSStatus"/>
    <method name="CMTimebaseRemoveTimer(CMTimebaseRef;CFRunLoopTimerRef):OSStatus"/>
    <method name="CMTimebaseRemoveTimerDispatchSource(CMTimebaseRef;dispatch_source_t):OSStatus"/>
    <method name="CMTimebaseSetAnchorTime(CMTimebaseRef;CMTime;CMTime):OSStatus"/>
    <method name="CMTimebaseSetRate(CMTimebaseRef;Float64):OSStatus"/>
    <method name="CMTimebaseSetRateAndAnchorTime(CMTimebaseRef;Float64;CMTime;CMTime):OSStatus"/>
    <method name="CMTimebaseSetTime(CMTimebaseRef;CMTime):OSStatus"/>
    <method name="CMTimebaseSetTimerDispatchSourceNextFireTime(CMTimebaseRef;dispatch_source_t;CMTime;uint32_t):OSStatus"/>
    <method name="CMTimebaseSetTimerDispatchSourceToFireImmediately(CMTimebaseRef;dispatch_source_t):OSStatus"/>
    <method name="CMTimebaseSetTimerNextFireTime(CMTimebaseRef;CFRunLoopTimerRef;CMTime;uint32_t):OSStatus"/>
    <method name="CMTimebaseSetTimerToFireImmediately(CMTimebaseRef;CFRunLoopTimerRef):OSStatus"/>
    <method name="CMVideoFormatDescriptionCreate(CFAllocatorRef;CMVideoCodecType;int32_t;int32_t;CFDictionaryRef;CMVideoFormatDescriptionRef*):OSStatus"/>
    <method name="CMVideoFormatDescriptionCreateForImageBuffer(CFAllocatorRef;CVImageBufferRef;CMVideoFormatDescriptionRef*):OSStatus"/>
    <method name="CMVideoFormatDescriptionGetCleanAperture(CMVideoFormatDescriptionRef;Boolean):CGRect"/>
    <method name="CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef):CMVideoDimensions"/>
    <method name="CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers():CFArrayRef"/>
    <method name="CMVideoFormatDescriptionGetPresentationDimensions(CMVideoFormatDescriptionRef;Boolean;Boolean):CGSize"/>
    <method name="CMVideoFormatDescriptionMatchesImageBuffer(CMVideoFormatDescriptionRef;CVImageBufferRef):Boolean"/>
    <method name="CNCopyCurrentNetworkInfo(CFStringRef):CFDictionaryRef"/>
    <method name="CNCopySupportedInterfaces():CFArrayRef"/>
    <method name="CNMarkPortalOffline(CFStringRef):Boolean"/>
    <method name="CNMarkPortalOnline(CFStringRef):Boolean"/>
    <method name="CNSetSupportedSSIDs(CFArrayRef):Boolean"/>
    <method name="COMP_CTX_free(COMP_CTX*):void"/>
    <method name="COMP_CTX_new(COMP_METHOD*):COMP_CTX*"/>
    <method name="COMP_compress_block(COMP_CTX*;unsigned char*;int;unsigned char*;int):int"/>
    <method name="COMP_expand_block(COMP_CTX*;unsigned char*;int;unsigned char*;int):int"/>
    <method name="COMP_rle():COMP_METHOD*"/>
    <method name="COMP_zlib():COMP_METHOD*"/>
    <method name="CONF_dump_bio(LHASH*;BIO*):int"/>
    <method name="CONF_dump_fp(LHASH*;FILE*):int"/>
    <method name="CONF_free(LHASH*):void"/>
    <method name="CONF_get1_default_config_file():char*"/>
    <method name="CONF_get_number(LHASH*;const char*;const char*):long"/>
    <method name="CONF_get_section(LHASH*;const char*):STACK*"/>
    <method name="CONF_get_string(LHASH*;const char*;const char*):char*"/>
    <method name="CONF_imodule_get_flags(const CONF_IMODULE*):unsigned long"/>
    <method name="CONF_imodule_get_module(const CONF_IMODULE*):CONF_MODULE*"/>
    <method name="CONF_imodule_get_name(const CONF_IMODULE*):const char*"/>
    <method name="CONF_imodule_get_usr_data(const CONF_IMODULE*):void*"/>
    <method name="CONF_imodule_get_value(const CONF_IMODULE*):const char*"/>
    <method name="CONF_imodule_set_flags(CONF_IMODULE*;unsigned long):void"/>
    <method name="CONF_imodule_set_usr_data(CONF_IMODULE*;void*):void"/>
    <method name="CONF_load(LHASH*;const char*;long*):LHASH*"/>
    <method name="CONF_load_bio(LHASH*;BIO*;long*):LHASH*"/>
    <method name="CONF_load_fp(LHASH*;FILE*;long*):LHASH*"/>
    <method name="CONF_module_add(const char*;conf_init_func*;conf_finish_func*):int"/>
    <method name="CONF_module_get_usr_data(CONF_MODULE*):void*"/>
    <method name="CONF_module_set_usr_data(CONF_MODULE*;void*):void"/>
    <method name="CONF_modules_finish():void"/>
    <method name="CONF_modules_free():void"/>
    <method name="CONF_modules_load(const CONF*;const char*;unsigned long):int"/>
    <method name="CONF_modules_load_file(const char*;const char*;unsigned long):int"/>
    <method name="CONF_modules_unload(int):void"/>
    <method name="CONF_parse_list(const char*;int;int;(*)(const char*;int;void*):int*;void*):int"/>
    <method name="CONF_set_default_method(CONF_METHOD*):int"/>
    <method name="CONF_set_nconf(CONF*;LHASH*):void"/>
    <method name="CRL_DIST_POINTS_free(CRL_DIST_POINTS*):void"/>
    <method name="CRL_DIST_POINTS_new():CRL_DIST_POINTS*"/>
    <method name="CRYPTO_add_lock(int*;int;int;const char*;int):int"/>
    <method name="CRYPTO_cleanup_all_ex_data():void"/>
    <method name="CRYPTO_dbg_free(void*;int):void"/>
    <method name="CRYPTO_dbg_get_options():long"/>
    <method name="CRYPTO_dbg_malloc(void*;int;const char*;int;int):void"/>
    <method name="CRYPTO_dbg_realloc(void*;void*;int;const char*;int;int):void"/>
    <method name="CRYPTO_dbg_set_options(long):void"/>
    <method name="CRYPTO_destroy_dynlockid(int):void"/>
    <method name="CRYPTO_dup_ex_data(int;CRYPTO_EX_DATA*;CRYPTO_EX_DATA*):int"/>
    <method name="CRYPTO_ex_data_new_class():int"/>
    <method name="CRYPTO_free(void*):void"/>
    <method name="CRYPTO_free_ex_data(int;void*;CRYPTO_EX_DATA*):void"/>
    <method name="CRYPTO_free_locked(void*):void"/>
    <method name="CRYPTO_get_add_lock_callback():(*)(int*;int;int;const char*;int):int*"/>
    <method name="CRYPTO_get_dynlock_create_callback():(*)(const char*;int):CRYPTO_dynlock_value**"/>
    <method name="CRYPTO_get_dynlock_destroy_callback():(*)(CRYPTO_dynlock_value*;const char*;int):void*"/>
    <method name="CRYPTO_get_dynlock_lock_callback():(*)(int;CRYPTO_dynlock_value*;const char*;int):void*"/>
    <method name="CRYPTO_get_dynlock_value(int):CRYPTO_dynlock_value*"/>
    <method name="CRYPTO_get_ex_data(const CRYPTO_EX_DATA*;int):void*"/>
    <method name="CRYPTO_get_ex_data_implementation():const CRYPTO_EX_DATA_IMPL*"/>
    <method name="CRYPTO_get_ex_new_index(int;long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="CRYPTO_get_id_callback():(*)():unsigned long*"/>
    <method name="CRYPTO_get_lock_name(int):const char*"/>
    <method name="CRYPTO_get_locked_mem_ex_functions((*)(size_t;const char*;int):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_locked_mem_functions((*)(size_t):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_locking_callback():(*)(int;int;const char*;int):void*"/>
    <method name="CRYPTO_get_mem_debug_functions((*)(void*;int;const char*;int;int):void**;(*)(void*;void*;int;const char*;int;int):void**;(*)(void*;int):void**;(*)(long):void**;(*)():long**):void"/>
    <method name="CRYPTO_get_mem_debug_options():long"/>
    <method name="CRYPTO_get_mem_ex_functions((*)(size_t;const char*;int):void***;(*)(void*;size_t;const char*;int):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_mem_functions((*)(size_t):void***;(*)(void*;size_t):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_new_dynlockid():int"/>
    <method name="CRYPTO_get_new_lockid(char*):int"/>
    <method name="CRYPTO_is_mem_check_on():int"/>
    <method name="CRYPTO_lock(int;int;const char*;int):void"/>
    <method name="CRYPTO_malloc(int;const char*;int):void*"/>
    <method name="CRYPTO_malloc_locked(int;const char*;int):void*"/>
    <method name="CRYPTO_mem_ctrl(int):int"/>
    <method name="CRYPTO_mem_leaks(bio_st*):void"/>
    <method name="CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB*):void"/>
    <method name="CRYPTO_mem_leaks_fp(FILE*):void"/>
    <method name="CRYPTO_new_ex_data(int;void*;CRYPTO_EX_DATA*):int"/>
    <method name="CRYPTO_num_locks():int"/>
    <method name="CRYPTO_pop_info():int"/>
    <method name="CRYPTO_push_info_(const char*;const char*;int):int"/>
    <method name="CRYPTO_realloc(void*;int;const char*;int):void*"/>
    <method name="CRYPTO_realloc_clean(void*;int;int;const char*;int):void*"/>
    <method name="CRYPTO_remalloc(void*;int;const char*;int):void*"/>
    <method name="CRYPTO_remove_all_info():int"/>
    <method name="CRYPTO_set_add_lock_callback((*)(int*;int;int;const char*;int):int*):void"/>
    <method name="CRYPTO_set_dynlock_create_callback((*)(const char*;int):CRYPTO_dynlock_value**):void"/>
    <method name="CRYPTO_set_dynlock_destroy_callback((*)(CRYPTO_dynlock_value*;const char*;int):void*):void"/>
    <method name="CRYPTO_set_dynlock_lock_callback((*)(int;CRYPTO_dynlock_value*;const char*;int):void*):void"/>
    <method name="CRYPTO_set_ex_data(CRYPTO_EX_DATA*;int;void*):int"/>
    <method name="CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL*):int"/>
    <method name="CRYPTO_set_id_callback((*)():unsigned long*):void"/>
    <method name="CRYPTO_set_locked_mem_ex_functions((*)(size_t;const char*;int):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_set_locked_mem_functions((*)(size_t):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_set_locking_callback((*)(int;int;const char*;int):void*):void"/>
    <method name="CRYPTO_set_mem_debug_functions((*)(void*;int;const char*;int;int):void*;(*)(void*;void*;int;const char*;int;int):void*;(*)(void*;int):void*;(*)(long):void*;(*)():long*):int"/>
    <method name="CRYPTO_set_mem_debug_options(long):void"/>
    <method name="CRYPTO_set_mem_ex_functions((*)(size_t;const char*;int):void**;(*)(void*;size_t;const char*;int):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_set_mem_functions((*)(size_t):void**;(*)(void*;size_t):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_thread_id():unsigned long"/>
    <method name="CTFontCollectionCopyExclusionDescriptors(CTFontCollectionRef):CFArrayRef"/>
    <method name="CTFontCollectionCopyFontAttribute(CTFontCollectionRef;CFStringRef;CTFontCollectionCopyOptions):CFArrayRef"/>
    <method name="CTFontCollectionCopyFontAttributes(CTFontCollectionRef;CFSetRef;CTFontCollectionCopyOptions):CFArrayRef"/>
    <method name="CTFontCollectionCopyQueryDescriptors(CTFontCollectionRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateCopyWithFontDescriptors(CTFontCollectionRef;CFArrayRef;CFDictionaryRef):CTFontCollectionRef"/>
    <method name="CTFontCollectionCreateFromAvailableFonts(CFDictionaryRef):CTFontCollectionRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptors(CTFontCollectionRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptorsForFamily(CTFontCollectionRef;CFStringRef;CFDictionaryRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(CTFontCollectionRef;CTFontCollectionSortDescriptorsCallback;void*):CFArrayRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptorsWithOptions(CTFontCollectionRef;CFDictionaryRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateMutableCopy(CTFontCollectionRef):CTMutableFontCollectionRef"/>
    <method name="CTFontCollectionCreateWithFontDescriptors(CFArrayRef;CFDictionaryRef):CTFontCollectionRef"/>
    <method name="CTFontCollectionGetTypeID():CFTypeID"/>
    <method name="CTFontCollectionSetExclusionDescriptors(CTMutableFontCollectionRef;CFArrayRef):void"/>
    <method name="CTFontCollectionSetQueryDescriptors(CTMutableFontCollectionRef;CFArrayRef):void"/>
    <method name="CTFontCopyAttribute(CTFontRef;CFStringRef):CFTypeRef"/>
    <method name="CTFontCopyAvailableTables(CTFontRef;CTFontTableOptions):CFArrayRef"/>
    <method name="CTFontCopyCharacterSet(CTFontRef):CFCharacterSetRef"/>
    <method name="CTFontCopyDefaultCascadeListForLanguages(CTFontRef;CFArrayRef):CFArrayRef"/>
    <method name="CTFontCopyDisplayName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopyFamilyName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopyFeatureSettings(CTFontRef):CFArrayRef"/>
    <method name="CTFontCopyFeatures(CTFontRef):CFArrayRef"/>
    <method name="CTFontCopyFontDescriptor(CTFontRef):CTFontDescriptorRef"/>
    <method name="CTFontCopyFullName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopyGraphicsFont(CTFontRef;CTFontDescriptorRef*):CGFontRef"/>
    <method name="CTFontCopyLocalizedName(CTFontRef;CFStringRef;CFStringRef*):CFStringRef"/>
    <method name="CTFontCopyName(CTFontRef;CFStringRef):CFStringRef"/>
    <method name="CTFontCopyPostScriptName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopySupportedLanguages(CTFontRef):CFArrayRef"/>
    <method name="CTFontCopyTable(CTFontRef;CTFontTableTag;CTFontTableOptions):CFDataRef"/>
    <method name="CTFontCopyTraits(CTFontRef):CFDictionaryRef"/>
    <method name="CTFontCopyVariation(CTFontRef):CFDictionaryRef"/>
    <method name="CTFontCopyVariationAxes(CTFontRef):CFArrayRef"/>
    <method name="CTFontCreateCopyWithAttributes(CTFontRef;CGFloat;const CGAffineTransform*;CTFontDescriptorRef):CTFontRef"/>
    <method name="CTFontCreateCopyWithFamily(CTFontRef;CGFloat;const CGAffineTransform*;CFStringRef):CTFontRef"/>
    <method name="CTFontCreateCopyWithSymbolicTraits(CTFontRef;CGFloat;const CGAffineTransform*;CTFontSymbolicTraits;CTFontSymbolicTraits):CTFontRef"/>
    <method name="CTFontCreateForString(CTFontRef;CFStringRef;CFRange):CTFontRef"/>
    <method name="CTFontCreatePathForGlyph(CTFontRef;CGGlyph;const CGAffineTransform*):CGPathRef"/>
    <method name="CTFontCreateUIFontForLanguage(CTFontUIFontType;CGFloat;CFStringRef):CTFontRef"/>
    <method name="CTFontCreateWithFontDescriptor(CTFontDescriptorRef;CGFloat;const CGAffineTransform*):CTFontRef"/>
    <method name="CTFontCreateWithFontDescriptorAndOptions(CTFontDescriptorRef;CGFloat;const CGAffineTransform*;CTFontOptions):CTFontRef"/>
    <method name="CTFontCreateWithGraphicsFont(CGFontRef;CGFloat;const CGAffineTransform*;CTFontDescriptorRef):CTFontRef"/>
    <method name="CTFontCreateWithName(CFStringRef;CGFloat;const CGAffineTransform*):CTFontRef"/>
    <method name="CTFontCreateWithNameAndOptions(CFStringRef;CGFloat;const CGAffineTransform*;CTFontOptions):CTFontRef"/>
    <method name="CTFontDescriptorCopyAttribute(CTFontDescriptorRef;CFStringRef):CFTypeRef"/>
    <method name="CTFontDescriptorCopyAttributes(CTFontDescriptorRef):CFDictionaryRef"/>
    <method name="CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef;CFStringRef;CFStringRef*):CFTypeRef"/>
    <method name="CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef;CFDictionaryRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateCopyWithFeature(CTFontDescriptorRef;CFNumberRef;CFNumberRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateCopyWithVariation(CTFontDescriptorRef;CFNumberRef;CGFloat):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef;CFSetRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateMatchingFontDescriptors(CTFontDescriptorRef;CFSetRef):CFArrayRef"/>
    <method name="CTFontDescriptorCreateWithAttributes(CFDictionaryRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateWithNameAndSize(CFStringRef;CGFloat):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorGetTypeID():CFTypeID"/>
    <method name="CTFontDescriptorMatchFontDescriptorsWithProgressHandler(CFArrayRef;CFSetRef;(^)(CTFontDescriptorMatchingState;CFDictionaryRef):_Bool):_Bool"/>
    <method name="CTFontDrawGlyphs(CTFontRef;const CGGlyph*;const CGPoint*;size_t;CGContextRef):void"/>
    <method name="CTFontGetAdvancesForGlyphs(CTFontRef;CTFontOrientation;const CGGlyph*;CGSize*;CFIndex):double"/>
    <method name="CTFontGetAscent(CTFontRef):CGFloat"/>
    <method name="CTFontGetBoundingBox(CTFontRef):CGRect"/>
    <method name="CTFontGetBoundingRectsForGlyphs(CTFontRef;CTFontOrientation;const CGGlyph*;CGRect*;CFIndex):CGRect"/>
    <method name="CTFontGetCapHeight(CTFontRef):CGFloat"/>
    <method name="CTFontGetDescent(CTFontRef):CGFloat"/>
    <method name="CTFontGetGlyphCount(CTFontRef):CFIndex"/>
    <method name="CTFontGetGlyphWithName(CTFontRef;CFStringRef):CGGlyph"/>
    <method name="CTFontGetGlyphsForCharacters(CTFontRef;const UniChar*;CGGlyph*;CFIndex):_Bool"/>
    <method name="CTFontGetLeading(CTFontRef):CGFloat"/>
    <method name="CTFontGetLigatureCaretPositions(CTFontRef;CGGlyph;CGFloat*;CFIndex):CFIndex"/>
    <method name="CTFontGetMatrix(CTFontRef):CGAffineTransform"/>
    <method name="CTFontGetOpticalBoundsForGlyphs(CTFontRef;const CGGlyph*;CGRect*;CFIndex;CFOptionFlags):CGRect"/>
    <method name="CTFontGetSize(CTFontRef):CGFloat"/>
    <method name="CTFontGetSlantAngle(CTFontRef):CGFloat"/>
    <method name="CTFontGetStringEncoding(CTFontRef):CFStringEncoding"/>
    <method name="CTFontGetSymbolicTraits(CTFontRef):CTFontSymbolicTraits"/>
    <method name="CTFontGetTypeID():CFTypeID"/>
    <method name="CTFontGetUnderlinePosition(CTFontRef):CGFloat"/>
    <method name="CTFontGetUnderlineThickness(CTFontRef):CGFloat"/>
    <method name="CTFontGetUnitsPerEm(CTFontRef):unsigned int"/>
    <method name="CTFontGetVerticalTranslationsForGlyphs(CTFontRef;const CGGlyph*;CGSize*;CFIndex):void"/>
    <method name="CTFontGetXHeight(CTFontRef):CGFloat"/>
    <method name="CTFontManagerCompareFontFamilyNames(const void*;const void*;void*):CFComparisonResult"/>
    <method name="CTFontManagerCopyAvailableFontFamilyNames():CFArrayRef"/>
    <method name="CTFontManagerCopyAvailableFontURLs():CFArrayRef"/>
    <method name="CTFontManagerCopyAvailablePostScriptNames():CFArrayRef"/>
    <method name="CTFontManagerCreateFontDescriptorFromData(CFDataRef):CTFontDescriptorRef"/>
    <method name="CTFontManagerCreateFontDescriptorsFromURL(CFURLRef):CFArrayRef"/>
    <method name="CTFontManagerCreateFontRequestRunLoopSource(CFIndex;(^)(CFDictionaryRef;pid_t):CFArrayRef):CFRunLoopSourceRef"/>
    <method name="CTFontManagerEnableFontDescriptors(CFArrayRef;_Bool):void"/>
    <method name="CTFontManagerGetAutoActivationSetting(CFStringRef):CTFontManagerAutoActivationSetting"/>
    <method name="CTFontManagerGetScopeForURL(CFURLRef):CTFontManagerScope"/>
    <method name="CTFontManagerIsSupportedFont(CFURLRef):_Bool"/>
    <method name="CTFontManagerRegisterFontsForURL(CFURLRef;CTFontManagerScope;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerRegisterFontsForURLs(CFArrayRef;CTFontManagerScope;CFArrayRef*):_Bool"/>
    <method name="CTFontManagerRegisterGraphicsFont(CFSetRef;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerRegisterGraphicsFont(CGFontRef;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerSetAutoActivationSetting(CFStringRef;CTFontManagerAutoActivationSetting):void"/>
    <method name="CTFontManagerUnregisterFontsForURL(CFURLRef;CTFontManagerScope;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerUnregisterFontsForURLs(CFArrayRef;CTFontManagerScope;CFArrayRef*):_Bool"/>
    <method name="CTFontManagerUnregisterGraphicsFont(CFSetRef;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerUnregisterGraphicsFont(CGFontRef;CFErrorRef*):_Bool"/>
    <method name="CTFrameDraw(CTFrameRef;CGContextRef):void"/>
    <method name="CTFrameGetFrameAttributes(CTFrameRef):CFDictionaryRef"/>
    <method name="CTFrameGetLineOrigins(CTFrameRef;CFRange;CGPoint*):void"/>
    <method name="CTFrameGetLines(CTFrameRef):CFArrayRef"/>
    <method name="CTFrameGetPath(CTFrameRef):CGPathRef"/>
    <method name="CTFrameGetStringRange(CTFrameRef):CFRange"/>
    <method name="CTFrameGetTypeID():CFTypeID"/>
    <method name="CTFrameGetVisibleStringRange(CTFrameRef):CFRange"/>
    <method name="CTFramesetterCreateFrame(CTFramesetterRef;CFRange;CGPathRef;CFDictionaryRef):CTFrameRef"/>
    <method name="CTFramesetterCreateWithAttributedString(CFAttributedStringRef):CTFramesetterRef"/>
    <method name="CTFramesetterGetTypeID():CFTypeID"/>
    <method name="CTFramesetterGetTypesetter(CTFramesetterRef):CTTypesetterRef"/>
    <method name="CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef;CFRange;CFDictionaryRef;CGSize;CFRange*):CGSize"/>
    <method name="CTGetCoreTextVersion():uint32_t"/>
    <method name="CTGlyphInfoCreateWithCharacterIdentifier(CGFontIndex;CTCharacterCollection;CFStringRef):CTGlyphInfoRef"/>
    <method name="CTGlyphInfoCreateWithGlyph(CGGlyph;CTFontRef;CFStringRef):CTGlyphInfoRef"/>
    <method name="CTGlyphInfoCreateWithGlyphName(CFStringRef;CTFontRef;CFStringRef):CTGlyphInfoRef"/>
    <method name="CTGlyphInfoGetCharacterCollection(CTGlyphInfoRef):CTCharacterCollection"/>
    <method name="CTGlyphInfoGetCharacterIdentifier(CTGlyphInfoRef):CGFontIndex"/>
    <method name="CTGlyphInfoGetGlyphName(CTGlyphInfoRef):CFStringRef"/>
    <method name="CTGlyphInfoGetTypeID():CFTypeID"/>
    <method name="CTLineCreateJustifiedLine(CTLineRef;CGFloat;double):CTLineRef"/>
    <method name="CTLineCreateTruncatedLine(CTLineRef;double;CTLineTruncationType;CTLineRef):CTLineRef"/>
    <method name="CTLineCreateWithAttributedString(CFAttributedStringRef):CTLineRef"/>
    <method name="CTLineDraw(CTLineRef;CGContextRef):void"/>
    <method name="CTLineGetBoundsWithOptions(CTLineRef;CTLineBoundsOptions):CGRect"/>
    <method name="CTLineGetGlyphCount(CTLineRef):CFIndex"/>
    <method name="CTLineGetGlyphRuns(CTLineRef):CFArrayRef"/>
    <method name="CTLineGetImageBounds(CTLineRef;CGContextRef):CGRect"/>
    <method name="CTLineGetOffsetForStringIndex(CTLineRef;CFIndex;CGFloat*):CGFloat"/>
    <method name="CTLineGetPenOffsetForFlush(CTLineRef;CGFloat;double):double"/>
    <method name="CTLineGetStringIndexForPosition(CTLineRef;CGPoint):CFIndex"/>
    <method name="CTLineGetStringRange(CTLineRef):CFRange"/>
    <method name="CTLineGetTrailingWhitespaceWidth(CTLineRef):double"/>
    <method name="CTLineGetTypeID():CFTypeID"/>
    <method name="CTLineGetTypographicBounds(CTLineRef;CGFloat*;CGFloat*;CGFloat*):double"/>
    <method name="CTParagraphStyleCreate(const CTParagraphStyleSetting*;size_t):CTParagraphStyleRef"/>
    <method name="CTParagraphStyleCreateCopy(CTParagraphStyleRef):CTParagraphStyleRef"/>
    <method name="CTParagraphStyleGetTypeID():CFTypeID"/>
    <method name="CTParagraphStyleGetValueForSpecifier(CTParagraphStyleRef;CTParagraphStyleSpecifier;size_t;void*):_Bool"/>
    <method name="CTRunDraw(CTRunRef;CGContextRef;CFRange):void"/>
    <method name="CTRunGetAdvances(CTRunRef;CFRange;CGSize*):void"/>
    <method name="CTRunGetAdvancesPtr(CTRunRef):const CGSize*"/>
    <method name="CTRunGetAttributes(CTRunRef):CFDictionaryRef"/>
    <method name="CTRunGetGlyphCount(CTRunRef):CFIndex"/>
    <method name="CTRunGetGlyphs(CTRunRef;CFRange;CGGlyph*):void"/>
    <method name="CTRunGetGlyphsPtr(CTRunRef):const CGGlyph*"/>
    <method name="CTRunGetImageBounds(CTRunRef;CGContextRef;CFRange):CGRect"/>
    <method name="CTRunGetPositions(CTRunRef;CFRange;CGPoint*):void"/>
    <method name="CTRunGetPositionsPtr(CTRunRef):const CGPoint*"/>
    <method name="CTRunGetStatus(CTRunRef):CTRunStatus"/>
    <method name="CTRunGetStringIndices(CTRunRef;CFRange;CFIndex*):void"/>
    <method name="CTRunGetStringIndicesPtr(CTRunRef):const CFIndex*"/>
    <method name="CTRunGetStringRange(CTRunRef):CFRange"/>
    <method name="CTRunGetTextMatrix(CTRunRef):CGAffineTransform"/>
    <method name="CTRunGetTypeID():CFTypeID"/>
    <method name="CTRunGetTypographicBounds(CTRunRef;CFRange;CGFloat*;CGFloat*;CGFloat*):double"/>
    <method name="CTTextTabCreate(CTTextAlignment;double;CFDictionaryRef):CTTextTabRef"/>
    <method name="CTTextTabGetAlignment(CTTextTabRef):CTTextAlignment"/>
    <method name="CTTextTabGetLocation(CTTextTabRef):double"/>
    <method name="CTTextTabGetOptions(CTTextTabRef):CFDictionaryRef"/>
    <method name="CTTextTabGetTypeID():CFTypeID"/>
    <method name="CTTypesetterCreateLine(CTTypesetterRef;CFRange):CTLineRef"/>
    <method name="CTTypesetterCreateLineWithOffset(CTTypesetterRef;CFRange;double):CTLineRef"/>
    <method name="CTTypesetterCreateWithAttributedString(CFAttributedStringRef):CTTypesetterRef"/>
    <method name="CTTypesetterCreateWithAttributedStringAndOptions(CFAttributedStringRef;CFDictionaryRef):CTTypesetterRef"/>
    <method name="CTTypesetterGetTypeID():CFTypeID"/>
    <method name="CTTypesetterSuggestClusterBreak(CTTypesetterRef;CFIndex;double):CFIndex"/>
    <method name="CTTypesetterSuggestClusterBreakWithOffset(CTTypesetterRef;CFIndex;double;double):CFIndex"/>
    <method name="CTTypesetterSuggestLineBreak(CTTypesetterRef;CFIndex;double):CFIndex"/>
    <method name="CTTypesetterSuggestLineBreakWithOffset(CTTypesetterRef;CFIndex;double;double):CFIndex"/>
    <method name="CVBufferGetAttachment(CVBufferRef;CFStringRef;CVAttachmentMode*):CFTypeRef"/>
    <method name="CVBufferGetAttachments(CVBufferRef;CVAttachmentMode):CFDictionaryRef"/>
    <method name="CVBufferPropagateAttachments(CVBufferRef;CVBufferRef):void"/>
    <method name="CVBufferRelease(CVBufferRef):void"/>
    <method name="CVBufferRemoveAllAttachments(CVBufferRef):void"/>
    <method name="CVBufferRemoveAttachment(CVBufferRef;CFStringRef):void"/>
    <method name="CVBufferRetain(CVBufferRef):CVBufferRef"/>
    <method name="CVBufferSetAttachment(CVBufferRef;CFStringRef;CFTypeRef;CVAttachmentMode):void"/>
    <method name="CVBufferSetAttachments(CVBufferRef;CFDictionaryRef;CVAttachmentMode):void"/>
    <method name="CVGetCurrentHostTime():uint64_t"/>
    <method name="CVGetHostClockFrequency():double"/>
    <method name="CVGetHostClockMinimumTimeDelta():uint32_t"/>
    <method name="CVImageBufferGetCleanRect(CVImageBufferRef):CGRect"/>
    <method name="CVImageBufferGetDisplaySize(CVImageBufferRef):CGSize"/>
    <method name="CVImageBufferGetEncodedSize(CVImageBufferRef):CGSize"/>
    <method name="CVImageBufferIsFlipped(CVImageBufferRef):Boolean"/>
    <method name="CVOpenGLESTextureCacheCreate(CFAllocatorRef;CFDictionaryRef;EAGLContext*;CFDictionaryRef;CVOpenGLESTextureCacheRef*):CVReturn"/>
    <method name="CVOpenGLESTextureCacheCreateTextureFromImage(CFAllocatorRef;CVOpenGLESTextureCacheRef;CVImageBufferRef;CFDictionaryRef;GLenum;GLint;GLsizei;GLsizei;GLenum;GLenum;size_t;CVOpenGLESTextureRef*):CVReturn"/>
    <method name="CVOpenGLESTextureCacheFlush(CVOpenGLESTextureCacheRef;CVOptionFlags):void"/>
    <method name="CVOpenGLESTextureCacheGetTypeID():CFTypeID"/>
    <method name="CVOpenGLESTextureGetCleanTexCoords(CVOpenGLESTextureRef;GLfloat*;GLfloat*;GLfloat*;GLfloat*):void"/>
    <method name="CVOpenGLESTextureGetName(CVOpenGLESTextureRef):GLuint"/>
    <method name="CVOpenGLESTextureGetTarget(CVOpenGLESTextureRef):GLenum"/>
    <method name="CVOpenGLESTextureGetTypeID():CFTypeID"/>
    <method name="CVOpenGLESTextureIsFlipped(CVOpenGLESTextureRef):Boolean"/>
    <method name="CVPixelBufferCreate(CFAllocatorRef;size_t;size_t;OSType;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferCreateResolvedAttributesDictionary(CFAllocatorRef;CFArrayRef;CFDictionaryRef*):CVReturn"/>
    <method name="CVPixelBufferCreateWithBytes(CFAllocatorRef;size_t;size_t;OSType;void*;size_t;CVPixelBufferReleaseBytesCallback;void*;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef;size_t;size_t;OSType;void*;size_t;size_t;void**;size_t*;size_t*;size_t*;CVPixelBufferReleasePlanarBytesCallback;void*;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferFillExtendedPixels(CVPixelBufferRef):CVReturn"/>
    <method name="CVPixelBufferGetBaseAddress(CVPixelBufferRef):void*"/>
    <method name="CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef;size_t):void*"/>
    <method name="CVPixelBufferGetBytesPerRow(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef;size_t):size_t"/>
    <method name="CVPixelBufferGetDataSize(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetExtendedPixels(CVPixelBufferRef;size_t*;size_t*;size_t*;size_t*):void"/>
    <method name="CVPixelBufferGetHeight(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetHeightOfPlane(CVPixelBufferRef;size_t):size_t"/>
    <method name="CVPixelBufferGetPixelFormatType(CVPixelBufferRef):OSType"/>
    <method name="CVPixelBufferGetPlaneCount(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetTypeID():CFTypeID"/>
    <method name="CVPixelBufferGetWidth(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetWidthOfPlane(CVPixelBufferRef;size_t):size_t"/>
    <method name="CVPixelBufferIsPlanar(CVPixelBufferRef):Boolean"/>
    <method name="CVPixelBufferLockBaseAddress(CVPixelBufferRef;CVOptionFlags):CVReturn"/>
    <method name="CVPixelBufferPoolCreate(CFAllocatorRef;CFDictionaryRef;CFDictionaryRef;CVPixelBufferPoolRef*):CVReturn"/>
    <method name="CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef;CVPixelBufferPoolRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(CFAllocatorRef;CVPixelBufferPoolRef;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferPoolGetAttributes(CVPixelBufferPoolRef):CFDictionaryRef"/>
    <method name="CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef):CFDictionaryRef"/>
    <method name="CVPixelBufferPoolGetTypeID():CFTypeID"/>
    <method name="CVPixelBufferPoolRelease(CVPixelBufferPoolRef):void"/>
    <method name="CVPixelBufferPoolRetain(CVPixelBufferPoolRef):CVPixelBufferPoolRef"/>
    <method name="CVPixelBufferRelease(CVPixelBufferRef):void"/>
    <method name="CVPixelBufferRetain(CVPixelBufferRef):CVPixelBufferRef"/>
    <method name="CVPixelBufferUnlockBaseAddress(CVPixelBufferRef;CVOptionFlags):CVReturn"/>
    <method name="CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(CFAllocatorRef):CFArrayRef"/>
    <method name="CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef;OSType):CFDictionaryRef"/>
    <method name="CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(CFDictionaryRef;OSType):void"/>
    <method name="CertAddCRLContextToStore(HCERTSTORE;PCCRL_CONTEXT;DWORD;PCCRL_CONTEXT*):BOOL"/>
    <method name="CertAddCTLContextToStore(HCERTSTORE;PCCTL_CONTEXT;DWORD;PCCTL_CONTEXT*):BOOL"/>
    <method name="CertAddCTLLinkToStore(HCERTSTORE;PCCTL_CONTEXT;DWORD;PCCTL_CONTEXT*):BOOL"/>
    <method name="CertAddCertificateContextToStore(HCERTSTORE;PCCERT_CONTEXT;DWORD;PCCERT_CONTEXT*):BOOL"/>
    <method name="CertAddCertificateLinkToStore(HCERTSTORE;PCCERT_CONTEXT;DWORD;PCCERT_CONTEXT*):BOOL"/>
    <method name="CertAddEncodedCertificateToStore(HCERTSTORE;DWORD;const BYTE*;DWORD;DWORD;PCCERT_CONTEXT*):BOOL"/>
    <method name="CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT;LPCSTR):BOOL"/>
    <method name="CertAddSerializedElementToStore(HCERTSTORE;const BYTE*;DWORD;DWORD;DWORD;DWORD;DWORD*;constvoid**):BOOL"/>
    <method name="CertAddStoreToCollection(HCERTSTORE;HCERTSTORE;DWORD;DWORD):BOOL"/>
    <method name="CertAlgIdToOID(DWORD):LPCSTR"/>
    <method name="CertCloseStore(HCERTSTORE;DWORD):BOOL"/>
    <method name="CertCompareCertificate(DWORD;PCERT_INFO;PCERT_INFO):BOOL"/>
    <method name="CertCompareCertificateName(DWORD;PCERT_NAME_BLOB;PCERT_NAME_BLOB):BOOL"/>
    <method name="CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB;PCRYPT_INTEGER_BLOB):BOOL"/>
    <method name="CertComparePublicKeyInfo(DWORD;PCERT_PUBLIC_KEY_INFO;PCERT_PUBLIC_KEY_INFO):BOOL"/>
    <method name="CertControlStore(HCERTSTORE;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertCreateCRLContext(DWORD;const BYTE*;DWORD):PCCRL_CONTEXT"/>
    <method name="CertCreateCTLContext(DWORD;const BYTE*;DWORD):PCCTL_CONTEXT"/>
    <method name="CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT;DWORD;PCRYPT_ATTRIBUTE;DWORD;void*;PCTL_ENTRY;DWORD*):BOOL"/>
    <method name="CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG;HCERTCHAINENGINE*):BOOL"/>
    <method name="CertCreateCertificateContext(DWORD;const BYTE*;DWORD):PCCERT_CONTEXT"/>
    <method name="CertCreateContext(DWORD;DWORD;const BYTE*;DWORD;DWORD;PCERT_CREATE_CONTEXT_PARA):constvoid*"/>
    <method name="CertCreateSelfSignCertificate(HCRYPTPROV;PCERT_NAME_BLOB;DWORD;PCRYPT_KEY_PROV_INFO;PCRYPT_ALGORITHM_IDENTIFIER;PSYSTEMTIME;PSYSTEMTIME;PCERT_EXTENSIONS):PCCERT_CONTEXT"/>
    <method name="CertDeleteCRLFromStore(PCCRL_CONTEXT):BOOL"/>
    <method name="CertDeleteCTLFromStore(PCCTL_CONTEXT):BOOL"/>
    <method name="CertDeleteCertificateFromStore(PCCERT_CONTEXT):BOOL"/>
    <method name="CertDuplicateCRLContext(PCCRL_CONTEXT):PCCRL_CONTEXT"/>
    <method name="CertDuplicateCTLContext(PCCTL_CONTEXT):PCCTL_CONTEXT"/>
    <method name="CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT):PCCERT_CHAIN_CONTEXT"/>
    <method name="CertDuplicateCertificateContext(PCCERT_CONTEXT):PCCERT_CONTEXT"/>
    <method name="CertDuplicateStore(HCERTSTORE):HCERTSTORE"/>
    <method name="CertEnumCRLContextProperties(PCCRL_CONTEXT;DWORD):DWORD"/>
    <method name="CertEnumCRLsInStore(HCERTSTORE;PCCRL_CONTEXT):PCCRL_CONTEXT"/>
    <method name="CertEnumCTLContextProperties(PCCTL_CONTEXT;DWORD):DWORD"/>
    <method name="CertEnumCTLsInStore(HCERTSTORE;PCCTL_CONTEXT):PCCTL_CONTEXT"/>
    <method name="CertEnumCertificateContextProperties(PCCERT_CONTEXT;DWORD):DWORD"/>
    <method name="CertEnumPhysicalStore(const void*;DWORD;void*;PFN_CERT_ENUM_PHYSICAL_STORE):BOOL"/>
    <method name="CertEnumSubjectInSortedCTL(PCCTL_CONTEXT;void**;PCRYPT_DER_BLOB;PCRYPT_DER_BLOB):BOOL"/>
    <method name="CertEnumSystemStore(DWORD;void*;void*;PFN_CERT_ENUM_SYSTEM_STORE):BOOL"/>
    <method name="CertEnumSystemStoreLocation(DWORD;void*;PFN_CERT_ENUM_SYSTEM_STORE_LOCATION):BOOL"/>
    <method name="CertFindAttribute(LPCSTR;DWORD;CRYPT_ATTRIBUTE*):PCRYPT_ATTRIBUTE"/>
    <method name="CertFindCRLInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCRL_CONTEXT):PCCRL_CONTEXT"/>
    <method name="CertFindCTLInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCTL_CONTEXT):PCCTL_CONTEXT"/>
    <method name="CertFindCertificateInCRL(PCCERT_CONTEXT;PCCRL_CONTEXT;DWORD;void*;PCRL_ENTRY*):BOOL"/>
    <method name="CertFindCertificateInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCERT_CONTEXT):PCCERT_CONTEXT"/>
    <method name="CertFindChainInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCERT_CHAIN_CONTEXT):PCCERT_CHAIN_CONTEXT"/>
    <method name="CertFindExtension(LPCSTR;DWORD;CERT_EXTENSION*):PCERT_EXTENSION"/>
    <method name="CertFindRDNAttr(LPCSTR;PCERT_NAME_INFO):PCERT_RDN_ATTR"/>
    <method name="CertFindSubjectInCTL(DWORD;DWORD;void*;PCCTL_CONTEXT;DWORD):PCTL_ENTRY"/>
    <method name="CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB;PCCTL_CONTEXT;DWORD;void*;PCRYPT_DER_BLOB):BOOL"/>
    <method name="CertFreeCRLContext(PCCRL_CONTEXT):BOOL"/>
    <method name="CertFreeCTLContext(PCCTL_CONTEXT):BOOL"/>
    <method name="CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT):void"/>
    <method name="CertFreeCertificateChainEngine(HCERTCHAINENGINE):void"/>
    <method name="CertFreeCertificateContext(PCCERT_CONTEXT):BOOL"/>
    <method name="CertGetCRLContextProperty(PCCRL_CONTEXT;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetCRLFromStore(HCERTSTORE;PCCERT_CONTEXT;PCCRL_CONTEXT;DWORD*):PCCRL_CONTEXT"/>
    <method name="CertGetCTLContextProperty(PCCTL_CONTEXT;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetCertificateChain(HCERTCHAINENGINE;PCCERT_CONTEXT;LPFILETIME;HCERTSTORE;PCERT_CHAIN_PARA;DWORD;LPVOID;PCCERT_CHAIN_CONTEXT*):BOOL"/>
    <method name="CertGetCertificateContextProperty(PCCERT_CONTEXT;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetEnhancedKeyUsage(PCCERT_CONTEXT;DWORD;PCERT_ENHKEY_USAGE;DWORD*):BOOL"/>
    <method name="CertGetIntendedKeyUsage(DWORD;PCERT_INFO;BYTE*;DWORD):BOOL"/>
    <method name="CertGetIssuerCertificateFromStore(HCERTSTORE;PCCERT_CONTEXT;PCCERT_CONTEXT;DWORD*):PCCERT_CONTEXT"/>
    <method name="CertGetNameStringA(PCCERT_CONTEXT;DWORD;DWORD;void*;LPSTR;DWORD):DWORD"/>
    <method name="CertGetNameStringW(PCCERT_CONTEXT;DWORD;DWORD;void*;LPWSTR;DWORD):DWORD"/>
    <method name="CertGetPublicKeyLength(DWORD;PCERT_PUBLIC_KEY_INFO):DWORD"/>
    <method name="CertGetStoreProperty(HCERTSTORE;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetSubjectCertificateFromStore(HCERTSTORE;DWORD;PCERT_INFO):PCCERT_CONTEXT"/>
    <method name="CertGetValidUsages(DWORD;PCCERT_CONTEXT*;int*;LPSTR*;DWORD*):BOOL"/>
    <method name="CertIsRDNAttrsInCertificateName(DWORD;DWORD;PCERT_NAME_BLOB;PCERT_RDN):BOOL"/>
    <method name="CertIsValidCRLForCertificate(PCCERT_CONTEXT;PCCRL_CONTEXT;DWORD;void*):BOOL"/>
    <method name="CertNameToStrA(DWORD;PCERT_NAME_BLOB;DWORD;LPSTR;DWORD):DWORD"/>
    <method name="CertNameToStrW(DWORD;PCERT_NAME_BLOB;DWORD;LPWSTR;DWORD):DWORD"/>
    <method name="CertOIDToAlgId(LPCSTR):DWORD"/>
    <method name="CertOpenStore(LPCSTR;DWORD;HCRYPTPROV;DWORD;const void*):HCERTSTORE"/>
    <method name="CertOpenSystemStoreA(HCRYPTPROV;LPCSTR):HCERTSTORE"/>
    <method name="CertOpenSystemStoreW(HCRYPTPROV;LPCWSTR):HCERTSTORE"/>
    <method name="CertRDNValueToStrA(DWORD;PCERT_RDN_VALUE_BLOB;LPSTR;DWORD):DWORD"/>
    <method name="CertRDNValueToStrW(DWORD;PCERT_RDN_VALUE_BLOB;LPWSTR;DWORD):DWORD"/>
    <method name="CertRegisterPhysicalStore(const void*;DWORD;LPCWSTR;PCERT_PHYSICAL_STORE_INFO;void*):BOOL"/>
    <method name="CertRegisterSystemStore(const void*;DWORD;PCERT_SYSTEM_STORE_INFO;void*):BOOL"/>
    <method name="CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT;LPCSTR):BOOL"/>
    <method name="CertRemoveStoreFromCollection(HCERTSTORE;HCERTSTORE):void"/>
    <method name="CertSaveStore(HCERTSTORE;DWORD;DWORD;DWORD;void*;DWORD):BOOL"/>
    <method name="CertSerializeCRLStoreElement(PCCRL_CONTEXT;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CertSerializeCTLStoreElement(PCCTL_CONTEXT;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CertSerializeCertificateStoreElement(PCCERT_CONTEXT;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CertSetCRLContextProperty(PCCRL_CONTEXT;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSetCTLContextProperty(PCCTL_CONTEXT;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT;PCTL_ENTRY;DWORD):BOOL"/>
    <method name="CertSetCertificateContextProperty(PCCERT_CONTEXT;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSetEnhancedKeyUsage(PCCERT_CONTEXT;PCERT_ENHKEY_USAGE):BOOL"/>
    <method name="CertSetStoreProperty(HCERTSTORE;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSrvBackupClose(HCSBC):HRESULT"/>
    <method name="CertSrvBackupEnd(HCSBC):HRESULT"/>
    <method name="CertSrvBackupRead(HCSBC;void*;DWORD;DWORD*):HRESULT"/>
    <method name="CertSrvBackupTruncateLogs(HCSBC):HRESULT"/>
    <method name="CertSrvRestoreEnd(HCSBC):HRESULT"/>
    <method name="CertSrvRestoreRegisterComplete(HCSBC;HRESULT):HRESULT"/>
    <method name="CertSrvRestoreRegisterThroughFile(HCSBC;const WCHAR*;const WCHAR*;CSEDB_RSTMAPW*;LONG;constWCHAR*;ULONG;ULONG):HRESULT"/>
    <method name="CertStrToNameA(DWORD;LPCSTR;DWORD;void*;BYTE*;DWORD*;LPCSTR*):BOOL"/>
    <method name="CertStrToNameW(DWORD;LPCWSTR;DWORD;void*;BYTE*;DWORD*;LPCWSTR*):BOOL"/>
    <method name="CertUnregisterPhysicalStore(const void*;DWORD;LPCWSTR):BOOL"/>
    <method name="CertUnregisterSystemStore(const void*;DWORD):BOOL"/>
    <method name="CertVerifyCRLRevocation(DWORD;PCERT_INFO;DWORD;PCRL_INFO*):BOOL"/>
    <method name="CertVerifyCRLTimeValidity(LPFILETIME;PCRL_INFO):LONG"/>
    <method name="CertVerifyCTLUsage(DWORD;DWORD;void*;PCTL_USAGE;DWORD;PCTL_VERIFY_USAGE_PARA;PCTL_VERIFY_USAGE_STATUS):BOOL"/>
    <method name="CertVerifyCertificateChainPolicy(LPCSTR;PCCERT_CHAIN_CONTEXT;PCERT_CHAIN_POLICY_PARA;PCERT_CHAIN_POLICY_STATUS):BOOL"/>
    <method name="CertVerifyRevocation(DWORD;DWORD;DWORD;PVOID*;DWORD;PCERT_REVOCATION_PARA;PCERT_REVOCATION_STATUS):BOOL"/>
    <method name="CertVerifySubjectCertificateContext(PCCERT_CONTEXT;PCCERT_CONTEXT;DWORD*):BOOL"/>
    <method name="CertVerifyTimeValidity(LPFILETIME;PCERT_INFO):LONG"/>
    <method name="CertVerifyValidityNesting(PCERT_INFO;PCERT_INFO):BOOL"/>
    <method name="ChecksGetLastErrorOrLpName2ndNull"/>
    <method name="ChecksGetLastErrorOrLpName3rdNull"/>
    <method name="ChecksGetLastErrorOrLpName4thNull"/>
    <method name="ChecksGetLastErrorOrLpName6thNull"/>
    <method name="CoImpersonateClient():HRESULT"/>
    <method name="CopyFile(LPCTSTR; LPCTSTR; BOOL): BOOL"/>
    <method name="CopyMemory(void *; const void *; size_t): void"/>
    <method name="CoreEndianFlipData(OSType;OSType;SInt16;void*;ByteCount;Boolean):OSStatus"/>
    <method name="CoreEndianGetFlipper(OSType;OSType;CoreEndianFlipProc*;void**):OSStatus"/>
    <method name="CoreEndianInstallFlipper(OSType;OSType;CoreEndianFlipProc;void*):OSStatus"/>
    <method name="CreateDirectory(LPCTSTR; LPSECURITY_ATTRIBUTES): BOOL"/>
    <method name="CreateDirectoryA(LPCSTR;LPSECURITY_ATTRIBUTES):BOOL"/>
    <method name="CreateDirectoryW(LPCWSTR;LPSECURITY_ATTRIBUTES):BOOL"/>
    <method name="CreateEvent(LPSECURITY_ATTRIBUTES; BOOL; BOOL; LPCSTR): HANDLE"/>
    <method name="CreateEventA(LPSECURITY_ATTRIBUTES;BOOL;BOOL;LPCSTR):HANDLE"/>
    <method name="CreateEventW(LPSECURITY_ATTRIBUTES;BOOL;BOOL;LPCWSTR):HANDLE"/>
    <method name="CreateFile(LPCTSTR; Double Word; Double Word; LPSECURITY_ATTRIBUTES; Double Word; Double Word; HANDLE): HANDLE"/>
    <method name="CreateFileA(LPCSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES;DWORD;DWORD;HANDLE):HANDLE"/>
    <method name="CreateFileMapping(HANDLE; LPSECURITY_ATTRIBUTES; Double Word; Double Word; Double Word; LPCTSTR): HANDLE"/>
    <method name="CreateFileMappingA(HANDLE;LPSECURITY_ATTRIBUTES;DWORD;DWORD;DWORD;LPCSTR):HANDLE"/>
    <method name="CreateFileMappingW(HANDLE;LPSECURITY_ATTRIBUTES;DWORD;DWORD;DWORD;LPCWSTR):HANDLE"/>
    <method name="CreateFileW(LPCWSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES;DWORD;DWORD;HANDLE):HANDLE"/>
    <method name="CreateHardLink(LPCTSTR; LPCTSTR; LPSECURITY_ATTRIBUTES): BOOL"/>
    <method name="CreateJobObject(LPSECURITY_ATTRIBUTES; LPCSTR): HANDLE"/>
    <method name="CreateJobObjectA(LPSECURITY_ATTRIBUTES;LPCSTR):HANDLE"/>
    <method name="CreateJobObjectW(LPSECURITY_ATTRIBUTES;LPCWSTR):HANDLE"/>
    <method name="CreateMailslot(LPCSTR; Double Word; Double Word; LPSECURITY_ATTRIBUTES): HANDLE"/>
    <method name="CreateMailslotA(LPCSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateMailslotW(LPCWSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateMutex(LPSECURITY_ATTRIBUTES; BOOL; LPCTSTR): HANDLE"/>
    <method name="CreateMutexA(LPSECURITY_ATTRIBUTES;BOOL;LPCSTR):HANDLE"/>
    <method name="CreateMutexW(LPSECURITY_ATTRIBUTES;BOOL;LPCWSTR):HANDLE"/>
    <method name="CreateNamedPipe(LPCTSTR; Double Word; Double Word; Double Word; Double Word; Double Word; Double Word; LPSECURITY_ATTRIBUTES): HANDLE"/>
    <method name="CreateNamedPipeA(LPCSTR;DWORD;DWORD;DWORD;DWORD;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateNamedPipeW(LPCWSTR;DWORD;DWORD;DWORD;DWORD;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateProcess(LPCTSTR; LPTSTR; LPSECURITY_ATTRIBUTES; LPSECURITY_ATTRIBUTES; BOOL; Double Word; LPVOID; LPCTSTR; LPSTARTUPINFO; LPPROCESS_INFORMATION): BOOL"/>
    <method name="CreateProcessA(LPCSTR;LPSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCSTR;LPSTARTUPINFOA;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessAsUser(HANDLE; LPCTSTR; LPTSTR; LPSECURITY_ATTRIBUTES; LPSECURITY_ATTRIBUTES; BOOL; Double Word; LPVOID; LPCTSTR; LPSTARTUPINFO; LPPROCESS_INFORMATION): BOOL"/>
    <method name="CreateProcessAsUserA(HANDLE;LPCSTR;LPSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCSTR;LPSTARTUPINFOA;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessAsUserW(HANDLE;LPCWSTR;LPWSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCWSTR;LPSTARTUPINFOW;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessW(LPCWSTR;LPWSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCWSTR;LPSTARTUPINFOW;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessWithLogonW(LPCWSTR;LPCWSTR;LPCWSTR;DWORD;LPCWSTR;LPWSTR;DWORD;LPVOID;LPCWSTR;LPSTARTUPINFOW;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateSemaphore(LPSECURITY_ATTRIBUTES; LONG; LONG; LPCTSTR): HANDLE"/>
    <method name="CreateSemaphoreA(LPSECURITY_ATTRIBUTES;LONG;LONG;LPCSTR):HANDLE"/>
    <method name="CreateSemaphoreW(LPSECURITY_ATTRIBUTES;LONG;LONG;LPCWSTR):HANDLE"/>
    <method name="CreateWaitableTimer(LPSECURITY_ATTRIBUTES; BOOL; LPCTSTR): HANDLE"/>
    <method name="CreateWaitableTimerA(LPSECURITY_ATTRIBUTES;BOOL;LPCSTR):HANDLE"/>
    <method name="CreateWaitableTimerW(LPSECURITY_ATTRIBUTES;BOOL;LPCWSTR):HANDLE"/>
    <method name="CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT;DWORD;void*;HCRYPTPROV*;DWORD*;BOOL*):BOOL"/>
    <method name="CryptAcquireContextA(HCRYPTPROV*;LPCSTR;LPCSTR;DWORD;DWORD):BOOL"/>
    <method name="CryptAcquireContextW(HCRYPTPROV*;LPCWSTR;LPCWSTR;DWORD;DWORD):BOOL"/>
    <method name="CryptBinaryToStringA(const BYTE*;DWORD;DWORD;LPSTR;DWORD*):BOOL"/>
    <method name="CryptBinaryToStringW(const BYTE*;DWORD;DWORD;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptContextAddRef(HCRYPTPROV;DWORD*;DWORD):BOOL"/>
    <method name="CryptCreateHash(HCRYPTPROV;ALG_ID;HCRYPTKEY;DWORD;HCRYPTHASH*):BOOL"/>
    <method name="CryptCreateKeyIdentifierFromCSP(DWORD;LPCSTR;const PUBLICKEYSTRUC*;DWORD;DWORD;void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptDecodeMessage(DWORD;PCRYPT_DECRYPT_MESSAGE_PARA;PCRYPT_VERIFY_MESSAGE_PARA;DWORD;constBYTE*;DWORD;DWORD;DWORD*;DWORD*;BYTE*;DWORD*;PCCERT_CONTEXT*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptDecodeObject(DWORD;LPCSTR;const BYTE*;DWORD;DWORD;void*;DWORD*):BOOL"/>
    <method name="CryptDecodeObjectEx(DWORD;LPCSTR;const BYTE*;DWORD;DWORD;PCRYPT_DECODE_PARA;void*;DWORD*):BOOL"/>
    <method name="CryptDecrypt(HCRYPTKEY;HCRYPTHASH;BOOL;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA;PCRYPT_VERIFY_MESSAGE_PARA;DWORD;constBYTE*;DWORD;BYTE*;DWORD*;PCCERT_CONTEXT*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA;const BYTE*;DWORD;BYTE*;DWORD*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptDeriveKey(HCRYPTPROV;ALG_ID;HCRYPTHASH;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptDestroyHash(HCRYPTHASH):BOOL"/>
    <method name="CryptDestroyKey(HCRYPTKEY):BOOL"/>
    <method name="CryptDuplicateHash(HCRYPTHASH;DWORD*;DWORD;HCRYPTHASH*):BOOL"/>
    <method name="CryptDuplicateKey(HCRYPTKEY;DWORD*;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptEncodeObject(DWORD;LPCSTR;const void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptEncodeObjectEx(DWORD;LPCSTR;const void*;DWORD;PCRYPT_ENCODE_PARA;void*;DWORD*):BOOL"/>
    <method name="CryptEncrypt(HCRYPTKEY;HCRYPTHASH;BOOL;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA;DWORD;PCCERT_CONTEXT*;constBYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptEnumKeyIdentifierProperties(const CRYPT_HASH_BLOB*;DWORD;DWORD;LPCWSTR;void*;void*;PFN_CRYPT_ENUM_KEYID_PROP):BOOL"/>
    <method name="CryptEnumOIDFunction(DWORD;LPCSTR;LPCSTR;DWORD;void*;PFN_CRYPT_ENUM_OID_FUNC):BOOL"/>
    <method name="CryptEnumOIDInfo(DWORD;DWORD;void*;PFN_CRYPT_ENUM_OID_INFO):BOOL"/>
    <method name="CryptEnumProviderTypesA(DWORD;DWORD*;DWORD;DWORD*;LPSTR;DWORD*):BOOL"/>
    <method name="CryptEnumProviderTypesW(DWORD;DWORD*;DWORD;DWORD*;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptEnumProvidersA(DWORD;DWORD*;DWORD;DWORD*;LPSTR;DWORD*):BOOL"/>
    <method name="CryptEnumProvidersW(DWORD;DWORD*;DWORD;DWORD*;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptExportKey(HCRYPTKEY;HCRYPTKEY;DWORD;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptExportPKCS8(HCRYPTPROV;DWORD;LPSTR;DWORD;void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS*;DWORD;void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptExportPublicKeyInfo(HCRYPTPROV;DWORD;DWORD;PCERT_PUBLIC_KEY_INFO;DWORD*):BOOL"/>
    <method name="CryptExportPublicKeyInfoEx(HCRYPTPROV;DWORD;DWORD;LPSTR;DWORD;void*;PCERT_PUBLIC_KEY_INFO;DWORD*):BOOL"/>
    <method name="CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT;DWORD;void*):BOOL"/>
    <method name="CryptFindLocalizedName(LPCWSTR):LPCWSTR"/>
    <method name="CryptFindOIDInfo(DWORD;void*;DWORD):PCCRYPT_OID_INFO"/>
    <method name="CryptFormatObject(DWORD;DWORD;DWORD;void*;LPCSTR;const BYTE*;DWORD;void*;DWORD*):BOOL"/>
    <method name="CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR;DWORD):BOOL"/>
    <method name="CryptGenKey(HCRYPTPROV;ALG_ID;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptGenRandom(HCRYPTPROV;DWORD;BYTE*):BOOL"/>
    <method name="CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET;DWORD;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET;DWORD;LPCWSTR;DWORD;void**;HCRYPTOIDFUNCADDR*):BOOL"/>
    <method name="CryptGetDefaultProviderA(DWORD;DWORD*;DWORD;LPSTR;DWORD*):BOOL"/>
    <method name="CryptGetDefaultProviderW(DWORD;DWORD*;DWORD;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptGetHashParam(HCRYPTHASH;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptGetKeyIdentifierProperty(const CRYPT_HASH_BLOB*;DWORD;DWORD;LPCWSTR;void*;void*;DWORD*):BOOL"/>
    <method name="CryptGetKeyParam(HCRYPTKEY;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptGetMessageCertificates(DWORD;HCRYPTPROV;DWORD;const BYTE*;DWORD):HCERTSTORE"/>
    <method name="CryptGetMessageSignerCount(DWORD;const BYTE*;DWORD):LONG"/>
    <method name="CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET;DWORD;LPCSTR;DWORD;void**;HCRYPTOIDFUNCADDR*):BOOL"/>
    <method name="CryptGetOIDFunctionValue(DWORD;LPCSTR;LPCSTR;LPCWSTR;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptGetObjectUrl(LPCSTR;LPVOID;DWORD;PCRYPT_URL_ARRAY;DWORD*;PCRYPT_URL_INFO;DWORD*;LPVOID):BOOL"/>
    <method name="CryptGetProvParam(HCRYPTPROV;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptGetUserKey(HCRYPTPROV;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptHashCertificate(HCRYPTPROV;ALG_ID;DWORD;const BYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptHashData(HCRYPTHASH;const BYTE*;DWORD;DWORD):BOOL"/>
    <method name="CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA;BOOL;DWORD;const BYTE**;DWORD*;BYTE*;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptHashPublicKeyInfo(HCRYPTPROV;ALG_ID;DWORD;DWORD;PCERT_PUBLIC_KEY_INFO;BYTE*;DWORD*):BOOL"/>
    <method name="CryptHashSessionKey(HCRYPTHASH;HCRYPTKEY;DWORD):BOOL"/>
    <method name="CryptHashToBeSigned(HCRYPTPROV;DWORD;const BYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptImportKey(HCRYPTPROV;const BYTE*;DWORD;HCRYPTKEY;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS;DWORD;HCRYPTPROV*;void*):BOOL"/>
    <method name="CryptImportPublicKeyInfo(HCRYPTPROV;DWORD;PCERT_PUBLIC_KEY_INFO;HCRYPTKEY*):BOOL"/>
    <method name="CryptImportPublicKeyInfoEx(HCRYPTPROV;DWORD;PCERT_PUBLIC_KEY_INFO;ALG_ID;DWORD;void*;HCRYPTKEY*):BOOL"/>
    <method name="CryptInitOIDFunctionSet(LPCSTR;DWORD):HCRYPTOIDFUNCSET"/>
    <method name="CryptInstallDefaultContext(HCRYPTPROV;DWORD;const void*;DWORD;void*;HCRYPTDEFAULTCONTEXT*):BOOL"/>
    <method name="CryptInstallOIDFunctionAddress(HMODULE;DWORD;LPCSTR;DWORD;const CRYPT_OID_FUNC_ENTRY*;DWORD):BOOL"/>
    <method name="CryptMemFree(LPVOID):void"/>
    <method name="CryptMsgCalculateEncodedLength(DWORD;DWORD;DWORD;const void*;LPSTR;DWORD):DWORD"/>
    <method name="CryptMsgClose(HCRYPTMSG):BOOL"/>
    <method name="CryptMsgControl(HCRYPTMSG;DWORD;DWORD;const void*):BOOL"/>
    <method name="CryptMsgCountersign(HCRYPTMSG;DWORD;DWORD;PCMSG_SIGNER_ENCODE_INFO):BOOL"/>
    <method name="CryptMsgCountersignEncoded(DWORD;PBYTE;DWORD;DWORD;PCMSG_SIGNER_ENCODE_INFO;PBYTE;PDWORD):BOOL"/>
    <method name="CryptMsgDuplicate(HCRYPTMSG):HCRYPTMSG"/>
    <method name="CryptMsgEncodeAndSignCTL(DWORD;PCTL_INFO;PCMSG_SIGNED_ENCODE_INFO;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptMsgGetAndVerifySigner(HCRYPTMSG;DWORD;HCERTSTORE*;DWORD;PCCERT_CONTEXT*;DWORD*):BOOL"/>
    <method name="CryptMsgGetParam(HCRYPTMSG;DWORD;DWORD;void*;DWORD*):BOOL"/>
    <method name="CryptMsgOpenToDecode(DWORD;DWORD;DWORD;HCRYPTPROV;PCERT_INFO;PCMSG_STREAM_INFO):HCRYPTMSG"/>
    <method name="CryptMsgOpenToEncode(DWORD;DWORD;DWORD;const void*;LPSTR;PCMSG_STREAM_INFO):HCRYPTMSG"/>
    <method name="CryptMsgSignCTL(DWORD;BYTE*;DWORD;PCMSG_SIGNED_ENCODE_INFO;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptMsgUpdate(HCRYPTMSG;const BYTE*;DWORD;BOOL):BOOL"/>
    <method name="CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV;DWORD;PBYTE;DWORD;PBYTE;DWORD;PCERT_INFO):BOOL"/>
    <method name="CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV;DWORD;PBYTE;DWORD;PBYTE;DWORD;DWORD;void*;DWORD;void*):BOOL"/>
    <method name="CryptProtectData(DATA_BLOB*;LPCWSTR;DATA_BLOB*;PVOID;CRYPTPROTECT_PROMPTSTRUCT*;DWORD;DATA_BLOB*):BOOL"/>
    <method name="CryptProtectMemory(LPVOID;DWORD;DWORD):BOOL"/>
    <method name="CryptQueryObject(DWORD;const void*;DWORD;DWORD;DWORD;DWORD*;DWORD*;DWORD*;HCERTSTORE*;HCRYPTMSG*;constvoid**):BOOL"/>
    <method name="CryptRegisterDefaultOIDFunction(DWORD;LPCSTR;DWORD;LPCWSTR):BOOL"/>
    <method name="CryptRegisterOIDFunction(DWORD;LPCSTR;LPCSTR;LPCWSTR;LPCSTR):BOOL"/>
    <method name="CryptRegisterOIDInfo(PCCRYPT_OID_INFO;DWORD):BOOL"/>
    <method name="CryptReleaseContext(HCRYPTPROV;DWORD):BOOL"/>
    <method name="CryptRetrieveObjectByUrlA(LPCSTR;LPCSTR;DWORD;DWORD;LPVOID*;HCRYPTASYNC;PCRYPT_CREDENTIALS;LPVOID;PCRYPT_RETRIEVE_AUX_INFO):BOOL"/>
    <method name="CryptRetrieveObjectByUrlW(LPCWSTR;LPCSTR;DWORD;DWORD;LPVOID*;HCRYPTASYNC;PCRYPT_CREDENTIALS;LPVOID;PCRYPT_RETRIEVE_AUX_INFO):BOOL"/>
    <method name="CryptSIPAddProvider(SIP_ADD_NEWPROVIDER*):BOOL"/>
    <method name="CryptSIPRemoveProvider(GUID*):BOOL"/>
    <method name="CryptSetHashParam(HCRYPTHASH;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetKeyIdentifierProperty(const CRYPT_HASH_BLOB*;DWORD;DWORD;LPCWSTR;void*;constvoid*):BOOL"/>
    <method name="CryptSetKeyParam(HCRYPTKEY;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetOIDFunctionValue(DWORD;LPCSTR;LPCSTR;LPCWSTR;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetProvParam(HCRYPTPROV;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetProviderA(LPCSTR;DWORD):BOOL"/>
    <method name="CryptSetProviderExA(LPCSTR;DWORD;DWORD*;DWORD):BOOL"/>
    <method name="CryptSetProviderExW(LPCWSTR;DWORD;DWORD*;DWORD):BOOL"/>
    <method name="CryptSetProviderW(LPCWSTR;DWORD):BOOL"/>
    <method name="CryptSignAndEncodeCertificate(HCRYPTPROV;DWORD;DWORD;LPCSTR;const void*;PCRYPT_ALGORITHM_IDENTIFIER;constvoid*;PBYTE;DWORD*):BOOL"/>
    <method name="CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA;PCRYPT_ENCRYPT_MESSAGE_PARA;DWORD;PCCERT_CONTEXT*;constBYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignCertificate(HCRYPTPROV;DWORD;DWORD;const BYTE*;DWORD;PCRYPT_ALGORITHM_IDENTIFIER;constvoid*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignHashA(HCRYPTHASH;DWORD;LPCSTR;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignHashW(HCRYPTHASH;DWORD;LPCWSTR;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA;BOOL;DWORD;const BYTE**;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA;const BYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptStringToBinaryA(LPCSTR;DWORD;DWORD;BYTE*;DWORD*;DWORD*;DWORD*):BOOL"/>
    <method name="CryptStringToBinaryW(LPCWSTR;DWORD;DWORD;BYTE*;DWORD*;DWORD*;DWORD*):BOOL"/>
    <method name="CryptUIDlgCertMgr(PCCRYPTUI_CERT_MGR_STRUCT):BOOL"/>
    <method name="CryptUIDlgSelectCertificateFromStore(HCERTSTORE;HWND;LPCWSTR;LPCWSTR;DWORD;DWORD;void*):PCCERT_CONTEXT"/>
    <method name="CryptUIDlgViewContext(DWORD;const void*;HWND;LPCWSTR;DWORD;void*):BOOL"/>
    <method name="CryptUIWizDigitalSign(DWORD;HWND;LPCWSTR;PCCRYPTUI_WIZ_DIGITAL_SIGN_INFO;PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT*):BOOL"/>
    <method name="CryptUIWizExport(DWORD;HWND;LPCWSTR;PCCRYPTUI_WIZ_EXPORT_INFO;void*):BOOL"/>
    <method name="CryptUIWizFreeDigitalSignContext(PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT):BOOL"/>
    <method name="CryptUIWizImport(DWORD;HWND;LPCWSTR;PCCRYPTUI_WIZ_IMPORT_SRC_INFO;HCERTSTORE):BOOL"/>
    <method name="CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT;DWORD;void*):BOOL"/>
    <method name="CryptUnprotectData(DATA_BLOB*;LPWSTR*;DATA_BLOB*;PVOID;CRYPTPROTECT_PROMPTSTRUCT*;DWORD;DATA_BLOB*):BOOL"/>
    <method name="CryptUnprotectMemory(LPVOID;DWORD;DWORD):BOOL"/>
    <method name="CryptUnregisterDefaultOIDFunction(DWORD;LPCSTR;LPCWSTR):BOOL"/>
    <method name="CryptUnregisterOIDFunction(DWORD;LPCSTR;LPCSTR):BOOL"/>
    <method name="CryptUnregisterOIDInfo(PCCRYPT_OID_INFO):BOOL"/>
    <method name="CryptVerifyCertificateSignature(HCRYPTPROV;DWORD;const BYTE*;DWORD;PCERT_PUBLIC_KEY_INFO):BOOL"/>
    <method name="CryptVerifyCertificateSignatureEx(HCRYPTPROV;DWORD;DWORD;void*;DWORD;void*;DWORD;void*):BOOL"/>
    <method name="CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA;BYTE*;DWORD;DWORD;constBYTE**;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA;DWORD;constBYTE*;DWORD;DWORD;const BYTE**;DWORD*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA;BYTE*;DWORD;BYTE*;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA;DWORD;const BYTE*;DWORD;BYTE*;DWORD*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA;PCERT_PUBLIC_KEY_INFO;constBYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptVerifySignatureA(HCRYPTHASH;const BYTE*;DWORD;HCRYPTKEY;LPCSTR;DWORD):BOOL"/>
    <method name="CryptVerifySignatureW(HCRYPTHASH;const BYTE*;DWORD;HCRYPTKEY;LPCWSTR;DWORD):BOOL"/>
    <method name="DES_cbc_cksum(const unsigned char*;DES_cblock*;long;DES_key_schedule*;const_DES_cblock*):unsigned long"/>
    <method name="DES_cbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_cfb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int*;int):void"/>
    <method name="DES_cfb_encrypt(const unsigned char*;unsigned char*;int;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_check_key_parity(const_DES_cblock*):int"/>
    <method name="DES_crypt(const char*;const char*):char*"/>
    <method name="DES_decrypt3(unsigned long*;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*):void"/>
    <method name="DES_ecb3_encrypt(const_DES_cblock*;DES_cblock*;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;int):void"/>
    <method name="DES_ecb_encrypt(const_DES_cblock*;DES_cblock*;DES_key_schedule*;int):void"/>
    <method name="DES_ede3_cbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_ede3_cbcm_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;DES_cblock*;int):void"/>
    <method name="DES_ede3_cfb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int*;int):void"/>
    <method name="DES_ede3_cfb_encrypt(const unsigned char*;unsigned char*;int;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_ede3_ofb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int*):void"/>
    <method name="DES_enc_read(int;void*;int;DES_key_schedule*;DES_cblock*):int"/>
    <method name="DES_enc_write(int;const void*;int;DES_key_schedule*;DES_cblock*):int"/>
    <method name="DES_encrypt1(unsigned long*;DES_key_schedule*;int):void"/>
    <method name="DES_encrypt2(unsigned long*;DES_key_schedule*;int):void"/>
    <method name="DES_encrypt3(unsigned long*;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*):void"/>
    <method name="DES_fcrypt(const char*;const char*;char*):char*"/>
    <method name="DES_is_weak_key(const_DES_cblock*):int"/>
    <method name="DES_key_sched(const_DES_cblock*;DES_key_schedule*):int"/>
    <method name="DES_ncbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_ofb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int*):void"/>
    <method name="DES_ofb_encrypt(const unsigned char*;unsigned char*;int;long;DES_key_schedule*;DES_cblock*):void"/>
    <method name="DES_options():const char*"/>
    <method name="DES_pcbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_quad_cksum(const unsigned char*;DES_cblock*;long;int;DES_cblock*):unsigned long"/>
    <method name="DES_random_key(DES_cblock*):int"/>
    <method name="DES_read_2passwords(DES_cblock*;DES_cblock*;const char*;int):int"/>
    <method name="DES_read_password(DES_cblock*;const char*;int):int"/>
    <method name="DES_set_key(const_DES_cblock*;DES_key_schedule*):int"/>
    <method name="DES_set_key_checked(const_DES_cblock*;DES_key_schedule*):int"/>
    <method name="DES_set_key_unchecked(const_DES_cblock*;DES_key_schedule*):void"/>
    <method name="DES_set_odd_parity(DES_cblock*):void"/>
    <method name="DES_string_to_2keys(const char*;DES_cblock*;DES_cblock*):void"/>
    <method name="DES_string_to_key(const char*;DES_cblock*):void"/>
    <method name="DES_xcbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;const_DES_cblock*;const_DES_cblock*;int):void"/>
    <method name="DES_xwhite_in2out(const_DES_cblock*;const_DES_cblock*;DES_cblock*):void"/>
    <method name="DHCPClientPreferencesCopyApplicationOptions(CFStringRef;CFIndex*):UInt8*"/>
    <method name="DHCPClientPreferencesSetApplicationOptions(CFStringRef;UInt8*;CFIndex):Boolean"/>
    <method name="DHCPInfoGetLeaseExpirationTime(CFDictionaryRef):CFDateRef"/>
    <method name="DHCPInfoGetLeaseStartTime(CFDictionaryRef):CFDateRef"/>
    <method name="DHCPInfoGetOptionData(CFDictionaryRef;UInt8):CFDataRef"/>
    <method name="DH_OpenSSL():const DH_METHOD*"/>
    <method name="DH_check(const DH*;int*):int"/>
    <method name="DH_check_pub_key(const DH*;const BIGNUM*;int*):int"/>
    <method name="DH_compute_key(unsigned char*;const BIGNUM*;DH*):int"/>
    <method name="DH_free(DH*):void"/>
    <method name="DH_generate_key(DH*):int"/>
    <method name="DH_generate_parameters(int;int;(*)(int;int;void*):void*;void*):DH*"/>
    <method name="DH_generate_parameters_ex(DH*;int;int;BN_GENCB*):int"/>
    <method name="DH_get_default_method():const DH_METHOD*"/>
    <method name="DH_get_ex_data(DH*;int):void*"/>
    <method name="DH_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="DH_new():DH*"/>
    <method name="DH_new_method(ENGINE*):DH*"/>
    <method name="DH_set_default_method(const DH_METHOD*):void"/>
    <method name="DH_set_ex_data(DH*;int;void*):int"/>
    <method name="DH_set_method(DH*;const DH_METHOD*):int"/>
    <method name="DH_size(const DH*):int"/>
    <method name="DH_up_ref(DH*):int"/>
    <method name="DHparams_print(BIO*;const DH*):int"/>
    <method name="DHparams_print_fp(FILE*;const DH*):int"/>
    <method name="DIRECTORYSTRING_free(ASN1_STRING*):void"/>
    <method name="DIRECTORYSTRING_new():ASN1_STRING*"/>
    <method name="DISPLAYTEXT_free(ASN1_STRING*):void"/>
    <method name="DISPLAYTEXT_new():ASN1_STRING*"/>
    <method name="DIST_POINT_NAME_free(DIST_POINT_NAME*):void"/>
    <method name="DIST_POINT_NAME_new():DIST_POINT_NAME*"/>
    <method name="DIST_POINT_free(DIST_POINT*):void"/>
    <method name="DIST_POINT_new():DIST_POINT*"/>
    <method name="DNSServiceAddRecord(DNSServiceRef;DNSRecordRef*;DNSServiceFlags;uint16_t;uint16_t;const void*;uint32_t):DNSServiceErrorType"/>
    <method name="DNSServiceBrowse(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;const char*;DNSServiceBrowseReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceConstructFullName(const char*;const const char*;const const char*;const const char*):DNSServiceErrorType"/>
    <method name="DNSServiceCreateConnection(DNSServiceRef*):DNSServiceErrorType"/>
    <method name="DNSServiceEnumerateDomains(DNSServiceRef*;DNSServiceFlags;uint32_t;DNSServiceDomainEnumReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceGetAddrInfo(DNSServiceRef*;DNSServiceFlags;uint32_t;DNSServiceProtocol;const char*;DNSServiceGetAddrInfoReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceGetPID(uint16_t;int32_t*):DNSServiceErrorType"/>
    <method name="DNSServiceGetProperty(const char*;void*;uint32_t*):DNSServiceErrorType"/>
    <method name="DNSServiceNATPortMappingCreate(DNSServiceRef*;DNSServiceFlags;uint32_t;DNSServiceProtocol;uint16_t;uint16_t;uint32_t;DNSServiceNATPortMappingReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceProcessResult(DNSServiceRef):DNSServiceErrorType"/>
    <method name="DNSServiceQueryRecord(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;uint16_t;uint16_t;DNSServiceQueryRecordReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceReconfirmRecord(DNSServiceFlags;uint32_t;const char*;uint16_t;uint16_t;uint16_t;const void*):DNSServiceErrorType"/>
    <method name="DNSServiceRefDeallocate(DNSServiceRef):void"/>
    <method name="DNSServiceRefSockFD(DNSServiceRef):int"/>
    <method name="DNSServiceRegister(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;const char*;const char*;const char*;uint16_t;uint16_t;const void*;DNSServiceRegisterReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceRegisterRecord(DNSServiceRef;DNSRecordRef*;DNSServiceFlags;uint32_t;const char*;uint16_t;uint16_t;uint16_t;const void*;uint32_t;DNSServiceRegisterRecordReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceRemoveRecord(DNSServiceRef;DNSRecordRef;DNSServiceFlags):DNSServiceErrorType"/>
    <method name="DNSServiceResolve(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;const char*;const char*;DNSServiceResolveReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceSetDispatchQueue(DNSServiceRef;dispatch_queue_t):DNSServiceErrorType"/>
    <method name="DNSServiceSleepKeepalive(DNSServiceRef*;DNSServiceFlags;int;unsigned int;DNSServiceSleepKeepaliveReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceUpdateRecord(DNSServiceRef;DNSRecordRef;DNSServiceFlags;uint16_t;const void*;uint32_t):DNSServiceErrorType"/>
    <method name="DSA_OpenSSL():const DSA_METHOD*"/>
    <method name="DSA_SIG_free(DSA_SIG*):void"/>
    <method name="DSA_SIG_new():DSA_SIG*"/>
    <method name="DSA_do_sign(const unsigned char*;int;DSA*):DSA_SIG*"/>
    <method name="DSA_do_verify(const unsigned char*;int;DSA_SIG*;DSA*):int"/>
    <method name="DSA_dup_DH(const DSA*):DH*"/>
    <method name="DSA_free(DSA*):void"/>
    <method name="DSA_generate_key(DSA*):int"/>
    <method name="DSA_generate_parameters(int;unsigned char*;int;int*;unsigned long*;(*)(int;int;void*):void*;void*):DSA*"/>
    <method name="DSA_generate_parameters_ex(DSA*;int;unsigned char*;int;int*;unsigned long*;BN_GENCB*):int"/>
    <method name="DSA_get_default_method():const DSA_METHOD*"/>
    <method name="DSA_get_ex_data(DSA*;int):void*"/>
    <method name="DSA_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="DSA_new():DSA*"/>
    <method name="DSA_new_method(ENGINE*):DSA*"/>
    <method name="DSA_print(BIO*;const DSA*;int):int"/>
    <method name="DSA_print_fp(FILE*;const DSA*;int):int"/>
    <method name="DSA_set_default_method(const DSA_METHOD*):void"/>
    <method name="DSA_set_ex_data(DSA*;int;void*):int"/>
    <method name="DSA_set_method(DSA*;const DSA_METHOD*):int"/>
    <method name="DSA_sign(int;const unsigned char*;int;unsigned char*;unsigned int*;DSA*):int"/>
    <method name="DSA_sign_setup(DSA*;BN_CTX*;BIGNUM**;BIGNUM**):int"/>
    <method name="DSA_size(const DSA*):int"/>
    <method name="DSA_up_ref(DSA*):int"/>
    <method name="DSA_verify(int;const unsigned char*;int;const unsigned char*;int;DSA*):int"/>
    <method name="DSAparams_print(BIO*;const DSA*):int"/>
    <method name="DSAparams_print_fp(FILE*;const DSA*):int"/>
    <method name="DSO_METHOD_dl():DSO_METHOD*"/>
    <method name="DSO_METHOD_dlfcn():DSO_METHOD*"/>
    <method name="DSO_METHOD_null():DSO_METHOD*"/>
    <method name="DSO_METHOD_openssl():DSO_METHOD*"/>
    <method name="DSO_METHOD_vms():DSO_METHOD*"/>
    <method name="DSO_METHOD_win32():DSO_METHOD*"/>
    <method name="DSO_bind_func(DSO*;const char*):DSO_FUNC_TYPE"/>
    <method name="DSO_bind_var(DSO*;const char*):void*"/>
    <method name="DSO_convert_filename(DSO*;const char*):char*"/>
    <method name="DSO_ctrl(DSO*;int;long;void*):long"/>
    <method name="DSO_flags(DSO*):int"/>
    <method name="DSO_free(DSO*):int"/>
    <method name="DSO_get_default_method():DSO_METHOD*"/>
    <method name="DSO_get_filename(DSO*):const char*"/>
    <method name="DSO_get_loaded_filename(DSO*):const char*"/>
    <method name="DSO_get_method(DSO*):DSO_METHOD*"/>
    <method name="DSO_load(DSO*;const char*;DSO_METHOD*;int):DSO*"/>
    <method name="DSO_merge(DSO*;const char*;const char*):char*"/>
    <method name="DSO_new():DSO*"/>
    <method name="DSO_new_method(DSO_METHOD*):DSO*"/>
    <method name="DSO_set_default_method(DSO_METHOD*):void"/>
    <method name="DSO_set_filename(DSO*;const char*):int"/>
    <method name="DSO_set_method(DSO*;DSO_METHOD*):DSO_METHOD*"/>
    <method name="DSO_set_name_converter(DSO*;DSO_NAME_CONVERTER_FUNC;DSO_NAME_CONVERTER_FUNC*):int"/>
    <method name="DSO_up_ref(DSO*):int"/>
    <method name="DTLSv1_client_method():SSL_METHOD*"/>
    <method name="DTLSv1_method():SSL_METHOD*"/>
    <method name="DTLSv1_server_method():SSL_METHOD*"/>
    <method name="Dacl3rdDaclFlag2ndNull"/>
    <method name="DaclFlag2ndFalse"/>
    <method name="DebugStr(ConstStr255Param):void"/>
    <method name="Debugger():void"/>
    <method name="DisposeAUGraph(AUGraph):OSStatus"/>
    <method name="DisposeMusicEventIterator(MusicEventIterator):OSStatus"/>
    <method name="DisposeMusicPlayer(MusicPlayer):OSStatus"/>
    <method name="DisposeMusicSequence(MusicSequence):OSStatus"/>
    <method name="Dst1stFormat2ndArgs3rdCPrintfFormat"/>
    <method name="Dst1stFormat2ndArgs3rdCPrintfFormatInternalSrc"/>
    <method name="Dst1stFormat2ndVa_list3rdCPrintfFormat"/>
    <method name="Dst1stFourTimesSrc2ndBufferOverflowString"/>
    <method name="Dst1stFourTimesSrc2ndBufferOverflowStringInternalSrc"/>
    <method name="Dst1stSize2ndFormat3rdArgs4thCPrintfFormat"/>
    <method name="Dst1stSize2ndFormat3rdArgs4thCPrintfFormatInternalSrc"/>
    <method name="Dst1stSize2ndFormat3rdVa_list4thCPrintfFormat"/>
    <method name="Dst1stSrc2ndBufferOverflowString"/>
    <method name="Dst1stSrc2ndBufferOverflowStringInternalSrc"/>
    <method name="Dst1stSrc2ndSize3rdBufferOverflow"/>
    <method name="Dst1stSrc2ndSize3rdBufferOverflowInternalSrc"/>
    <method name="Dst1stSrcExternalLength2ndCount3rdBufferOverflow"/>
    <method name="Dst1stSrcExternalSize2ndBufferOverflow"/>
    <method name="Dst2ndSrc1stSize3rdBufferOverflow"/>
    <method name="Dst2ndSrc1stSize3rdBufferOverflowInternalSrc"/>
    <method name="Dst2ndSrcExternalSize3rdBufferOverflow"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize4"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize4Unsigned"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize4Unsigned_copy"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize4_copy"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize8"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize8Unsigned"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize8Unsigned_copy"/>
    <method name="Dst2ndSrcInt1stRadixInt3rdSize8_copy"/>
    <method name="Dst3rdSrc1stSizeLessThan_CVTBUFSIZE"/>
    <method name="Dst3rdSrc1stSizeLessThan_CVTBUFSIZE_copy"/>
    <method name="Dst4thSrc1stBufferOverflowString"/>
    <method name="Dst4thSrc1stBufferOverflowStringInternalSrc"/>
    <method name="DstSrcExternalSizeBufferOverflowParameterized"/>
    <method name="EAGLGetVersion(unsigned int*;unsigned int*):void"/>
    <method name="ECDH_OpenSSL():const ECDH_METHOD*"/>
    <method name="ECDH_compute_key(void*;size_t;const EC_POINT*;EC_KEY*;(*)(const void*;size_t;void*;size_t*):void**):int"/>
    <method name="ECDH_get_default_method():const ECDH_METHOD*"/>
    <method name="ECDH_get_ex_data(EC_KEY*;int):void*"/>
    <method name="ECDH_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="ECDH_set_default_method(const ECDH_METHOD*):void"/>
    <method name="ECDH_set_ex_data(EC_KEY*;int;void*):int"/>
    <method name="ECDH_set_method(EC_KEY*;const ECDH_METHOD*):int"/>
    <method name="ECDSA_OpenSSL():const ECDSA_METHOD*"/>
    <method name="ECDSA_SIG_free(ECDSA_SIG*):void"/>
    <method name="ECDSA_SIG_new():ECDSA_SIG*"/>
    <method name="ECDSA_do_sign(const unsigned char*;int;EC_KEY*):ECDSA_SIG*"/>
    <method name="ECDSA_do_sign_ex(const unsigned char*;int;const BIGNUM*;const BIGNUM*;EC_KEY*):ECDSA_SIG*"/>
    <method name="ECDSA_do_verify(const unsigned char*;int;const ECDSA_SIG*;EC_KEY*):int"/>
    <method name="ECDSA_get_default_method():const ECDSA_METHOD*"/>
    <method name="ECDSA_get_ex_data(EC_KEY*;int):void*"/>
    <method name="ECDSA_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="ECDSA_set_default_method(const ECDSA_METHOD*):void"/>
    <method name="ECDSA_set_ex_data(EC_KEY*;int;void*):int"/>
    <method name="ECDSA_set_method(EC_KEY*;const ECDSA_METHOD*):int"/>
    <method name="ECDSA_sign(int;const unsigned char*;int;unsigned char*;unsigned int*;EC_KEY*):int"/>
    <method name="ECDSA_sign_ex(int;const unsigned char*;int;unsigned char*;unsigned int*;const BIGNUM*;const BIGNUM*;EC_KEY*):int"/>
    <method name="ECDSA_sign_setup(EC_KEY*;BN_CTX*;BIGNUM**;BIGNUM**):int"/>
    <method name="ECDSA_size(const EC_KEY*):int"/>
    <method name="ECDSA_verify(int;const unsigned char*;int;const unsigned char*;int;EC_KEY*):int"/>
    <method name="ECPKParameters_print(BIO*;const EC_GROUP*;int):int"/>
    <method name="ECPKParameters_print_fp(FILE*;const EC_GROUP*;int):int"/>
    <method name="ECParameters_print(BIO*;const EC_KEY*):int"/>
    <method name="ECParameters_print_fp(FILE*;const EC_KEY*):int"/>
    <method name="EC_GF2m_simple_method():const EC_METHOD*"/>
    <method name="EC_GFp_mont_method():const EC_METHOD*"/>
    <method name="EC_GFp_nist_method():const EC_METHOD*"/>
    <method name="EC_GFp_simple_method():const EC_METHOD*"/>
    <method name="EC_GROUP_check(const EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_check_discriminant(const EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_clear_free(EC_GROUP*):void"/>
    <method name="EC_GROUP_cmp(const EC_GROUP*;const EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_copy(EC_GROUP*;const EC_GROUP*):int"/>
    <method name="EC_GROUP_dup(const EC_GROUP*):EC_GROUP*"/>
    <method name="EC_GROUP_free(EC_GROUP*):void"/>
    <method name="EC_GROUP_get0_generator(const EC_GROUP*):const EC_POINT*"/>
    <method name="EC_GROUP_get0_seed(const EC_GROUP*):unsigned char*"/>
    <method name="EC_GROUP_get_asn1_flag(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_basis_type(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_cofactor(const EC_GROUP*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_curve_GF2m(const EC_GROUP*;BIGNUM*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_curve_GFp(const EC_GROUP*;BIGNUM*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_curve_name(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_degree(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_order(const EC_GROUP*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_pentanomial_basis(const EC_GROUP*;unsigned int*;unsigned int*;unsigned int*):int"/>
    <method name="EC_GROUP_get_point_conversion_form(const EC_GROUP*):point_conversion_form_t"/>
    <method name="EC_GROUP_get_seed_len(const EC_GROUP*):size_t"/>
    <method name="EC_GROUP_get_trinomial_basis(const EC_GROUP*;unsigned int*):int"/>
    <method name="EC_GROUP_have_precompute_mult(const EC_GROUP*):int"/>
    <method name="EC_GROUP_method_of(const EC_GROUP*):const EC_METHOD*"/>
    <method name="EC_GROUP_new(const EC_METHOD*):EC_GROUP*"/>
    <method name="EC_GROUP_new_by_curve_name(int):EC_GROUP*"/>
    <method name="EC_GROUP_new_curve_GF2m(const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):EC_GROUP*"/>
    <method name="EC_GROUP_new_curve_GFp(const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):EC_GROUP*"/>
    <method name="EC_GROUP_precompute_mult(EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_set_asn1_flag(EC_GROUP*;int):void"/>
    <method name="EC_GROUP_set_curve_GF2m(EC_GROUP*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_set_curve_GFp(EC_GROUP*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_set_curve_name(EC_GROUP*;int):void"/>
    <method name="EC_GROUP_set_generator(EC_GROUP*;const EC_POINT*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="EC_GROUP_set_point_conversion_form(EC_GROUP*;point_conversion_form_t):void"/>
    <method name="EC_GROUP_set_seed(EC_GROUP*;const unsigned char*;size_t):size_t"/>
    <method name="EC_KEY_check_key(const EC_KEY*):int"/>
    <method name="EC_KEY_copy(EC_KEY*;const EC_KEY*):EC_KEY*"/>
    <method name="EC_KEY_dup(const EC_KEY*):EC_KEY*"/>
    <method name="EC_KEY_free(EC_KEY*):void"/>
    <method name="EC_KEY_generate_key(EC_KEY*):int"/>
    <method name="EC_KEY_get0_group(const EC_KEY*):const EC_GROUP*"/>
    <method name="EC_KEY_get0_private_key(const EC_KEY*):const BIGNUM*"/>
    <method name="EC_KEY_get0_public_key(const EC_KEY*):const EC_POINT*"/>
    <method name="EC_KEY_get_conv_form(const EC_KEY*):point_conversion_form_t"/>
    <method name="EC_KEY_get_enc_flags(const EC_KEY*):unsigned int"/>
    <method name="EC_KEY_get_key_method_data(EC_KEY*;(*)(void*):void**;(*)(void*):void*;(*)(void*):void*):void*"/>
    <method name="EC_KEY_insert_key_method_data(EC_KEY*;void*;(*)(void*):void**;(*)(void*):void*;(*)(void*):void*):void"/>
    <method name="EC_KEY_new():EC_KEY*"/>
    <method name="EC_KEY_new_by_curve_name(int):EC_KEY*"/>
    <method name="EC_KEY_precompute_mult(EC_KEY*;BN_CTX*):int"/>
    <method name="EC_KEY_print(BIO*;const EC_KEY*;int):int"/>
    <method name="EC_KEY_print_fp(FILE*;const EC_KEY*;int):int"/>
    <method name="EC_KEY_set_asn1_flag(EC_KEY*;int):void"/>
    <method name="EC_KEY_set_conv_form(EC_KEY*;point_conversion_form_t):void"/>
    <method name="EC_KEY_set_enc_flags(EC_KEY*;unsigned int):void"/>
    <method name="EC_KEY_set_group(EC_KEY*;const EC_GROUP*):int"/>
    <method name="EC_KEY_set_private_key(EC_KEY*;const BIGNUM*):int"/>
    <method name="EC_KEY_set_public_key(EC_KEY*;const EC_POINT*):int"/>
    <method name="EC_KEY_up_ref(EC_KEY*):int"/>
    <method name="EC_METHOD_get_field_type(const EC_METHOD*):int"/>
    <method name="EC_POINT_add(const EC_GROUP*;EC_POINT*;const EC_POINT*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_bn2point(const EC_GROUP*;const BIGNUM*;EC_POINT*;BN_CTX*):EC_POINT*"/>
    <method name="EC_POINT_clear_free(EC_POINT*):void"/>
    <method name="EC_POINT_cmp(const EC_GROUP*;const EC_POINT*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_copy(EC_POINT*;const EC_POINT*):int"/>
    <method name="EC_POINT_dbl(const EC_GROUP*;EC_POINT*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_dup(const EC_POINT*;const EC_GROUP*):EC_POINT*"/>
    <method name="EC_POINT_free(EC_POINT*):void"/>
    <method name="EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP*;const EC_POINT*;BIGNUM*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP*;const EC_POINT*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_get_affine_coordinates_GFp(const EC_GROUP*;const EC_POINT*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_hex2point(const EC_GROUP*;const char*;EC_POINT*;BN_CTX*):EC_POINT*"/>
    <method name="EC_POINT_invert(const EC_GROUP*;EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_is_at_infinity(const EC_GROUP*;const EC_POINT*):int"/>
    <method name="EC_POINT_is_on_curve(const EC_GROUP*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_make_affine(const EC_GROUP*;EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_method_of(const EC_POINT*):const EC_METHOD*"/>
    <method name="EC_POINT_mul(const EC_GROUP*;EC_POINT*;const BIGNUM*;const EC_POINT*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_new(const EC_GROUP*):EC_POINT*"/>
    <method name="EC_POINT_oct2point(const EC_GROUP*;EC_POINT*;const unsigned char*;size_t;BN_CTX*):int"/>
    <method name="EC_POINT_point2bn(const EC_GROUP*;const EC_POINT*;point_conversion_form_t;BIGNUM*;BN_CTX*):BIGNUM*"/>
    <method name="EC_POINT_point2hex(const EC_GROUP*;const EC_POINT*;point_conversion_form_t;BN_CTX*):char*"/>
    <method name="EC_POINT_point2oct(const EC_GROUP*;const EC_POINT*;point_conversion_form_t;unsigned char*;size_t;BN_CTX*):size_t"/>
    <method name="EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP*;EC_POINT*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP*;EC_POINT*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_set_affine_coordinates_GFp(const EC_GROUP*;EC_POINT*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP*;EC_POINT*;const BIGNUM*;int;BN_CTX*):int"/>
    <method name="EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP*;EC_POINT*;const BIGNUM*;int;BN_CTX*):int"/>
    <method name="EC_POINT_set_to_infinity(const EC_GROUP*;EC_POINT*):int"/>
    <method name="EC_POINTs_make_affine(const EC_GROUP*;size_t;EC_POINT**;BN_CTX*):int"/>
    <method name="EC_POINTs_mul(const EC_GROUP*;EC_POINT*;const BIGNUM*;size_t;const EC_POINT**;const BIGNUM**;BN_CTX*):int"/>
    <method name="EC_get_builtin_curves(EC_builtin_curve*;size_t):size_t"/>
    <method name="EDIPARTYNAME_free(EDIPARTYNAME*):void"/>
    <method name="EDIPARTYNAME_new():EDIPARTYNAME*"/>
    <method name="ENGINE_add(ENGINE*):int"/>
    <method name="ENGINE_add_conf_module():void"/>
    <method name="ENGINE_by_id(const char*):ENGINE*"/>
    <method name="ENGINE_cleanup():void"/>
    <method name="ENGINE_cmd_is_executable(ENGINE*;int):int"/>
    <method name="ENGINE_ctrl(ENGINE*;int;long;void*;(*)():void*):int"/>
    <method name="ENGINE_ctrl_cmd(ENGINE*;const char*;long;void*;(*)():void*;int):int"/>
    <method name="ENGINE_ctrl_cmd_string(ENGINE*;const char*;const char*;int):int"/>
    <method name="ENGINE_finish(ENGINE*):int"/>
    <method name="ENGINE_free(ENGINE*):int"/>
    <method name="ENGINE_get_DH(const ENGINE*):const DH_METHOD*"/>
    <method name="ENGINE_get_DSA(const ENGINE*):const DSA_METHOD*"/>
    <method name="ENGINE_get_ECDH(const ENGINE*):const ECDH_METHOD*"/>
    <method name="ENGINE_get_ECDSA(const ENGINE*):const ECDSA_METHOD*"/>
    <method name="ENGINE_get_RAND(const ENGINE*):const RAND_METHOD*"/>
    <method name="ENGINE_get_RSA(const ENGINE*):const RSA_METHOD*"/>
    <method name="ENGINE_get_STORE(const ENGINE*):const STORE_METHOD*"/>
    <method name="ENGINE_get_cipher(ENGINE*;int):const EVP_CIPHER*"/>
    <method name="ENGINE_get_cipher_engine(int):ENGINE*"/>
    <method name="ENGINE_get_ciphers(const ENGINE*):ENGINE_CIPHERS_PTR"/>
    <method name="ENGINE_get_cmd_defns(const ENGINE*):const ENGINE_CMD_DEFN*"/>
    <method name="ENGINE_get_ctrl_function(const ENGINE*):ENGINE_CTRL_FUNC_PTR"/>
    <method name="ENGINE_get_default_DH():ENGINE*"/>
    <method name="ENGINE_get_default_DSA():ENGINE*"/>
    <method name="ENGINE_get_default_ECDH():ENGINE*"/>
    <method name="ENGINE_get_default_ECDSA():ENGINE*"/>
    <method name="ENGINE_get_default_RAND():ENGINE*"/>
    <method name="ENGINE_get_default_RSA():ENGINE*"/>
    <method name="ENGINE_get_destroy_function(const ENGINE*):ENGINE_GEN_INT_FUNC_PTR"/>
    <method name="ENGINE_get_digest(ENGINE*;int):const EVP_MD*"/>
    <method name="ENGINE_get_digest_engine(int):ENGINE*"/>
    <method name="ENGINE_get_digests(const ENGINE*):ENGINE_DIGESTS_PTR"/>
    <method name="ENGINE_get_ex_data(const ENGINE*;int):void*"/>
    <method name="ENGINE_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="ENGINE_get_finish_function(const ENGINE*):ENGINE_GEN_INT_FUNC_PTR"/>
    <method name="ENGINE_get_first():ENGINE*"/>
    <method name="ENGINE_get_flags(const ENGINE*):int"/>
    <method name="ENGINE_get_id(const ENGINE*):const char*"/>
    <method name="ENGINE_get_init_function(const ENGINE*):ENGINE_GEN_INT_FUNC_PTR"/>
    <method name="ENGINE_get_last():ENGINE*"/>
    <method name="ENGINE_get_load_privkey_function(const ENGINE*):ENGINE_LOAD_KEY_PTR"/>
    <method name="ENGINE_get_load_pubkey_function(const ENGINE*):ENGINE_LOAD_KEY_PTR"/>
    <method name="ENGINE_get_name(const ENGINE*):const char*"/>
    <method name="ENGINE_get_next(ENGINE*):ENGINE*"/>
    <method name="ENGINE_get_prev(ENGINE*):ENGINE*"/>
    <method name="ENGINE_get_static_state():void*"/>
    <method name="ENGINE_get_table_flags():unsigned int"/>
    <method name="ENGINE_init(ENGINE*):int"/>
    <method name="ENGINE_load_4758cca():void"/>
    <method name="ENGINE_load_aep():void"/>
    <method name="ENGINE_load_atalla():void"/>
    <method name="ENGINE_load_builtin_engines():void"/>
    <method name="ENGINE_load_chil():void"/>
    <method name="ENGINE_load_cryptodev():void"/>
    <method name="ENGINE_load_cswift():void"/>
    <method name="ENGINE_load_dynamic():void"/>
    <method name="ENGINE_load_nuron():void"/>
    <method name="ENGINE_load_openssl():void"/>
    <method name="ENGINE_load_padlock():void"/>
    <method name="ENGINE_load_private_key(ENGINE*;const char*;UI_METHOD*;void*):EVP_PKEY*"/>
    <method name="ENGINE_load_public_key(ENGINE*;const char*;UI_METHOD*;void*):EVP_PKEY*"/>
    <method name="ENGINE_load_sureware():void"/>
    <method name="ENGINE_load_ubsec():void"/>
    <method name="ENGINE_new():ENGINE*"/>
    <method name="ENGINE_register_DH(ENGINE*):int"/>
    <method name="ENGINE_register_DSA(ENGINE*):int"/>
    <method name="ENGINE_register_ECDH(ENGINE*):int"/>
    <method name="ENGINE_register_ECDSA(ENGINE*):int"/>
    <method name="ENGINE_register_RAND(ENGINE*):int"/>
    <method name="ENGINE_register_RSA(ENGINE*):int"/>
    <method name="ENGINE_register_STORE(ENGINE*):int"/>
    <method name="ENGINE_register_all_DH():void"/>
    <method name="ENGINE_register_all_DSA():void"/>
    <method name="ENGINE_register_all_ECDH():void"/>
    <method name="ENGINE_register_all_ECDSA():void"/>
    <method name="ENGINE_register_all_RAND():void"/>
    <method name="ENGINE_register_all_RSA():void"/>
    <method name="ENGINE_register_all_STORE():void"/>
    <method name="ENGINE_register_all_ciphers():void"/>
    <method name="ENGINE_register_all_complete():int"/>
    <method name="ENGINE_register_all_digests():void"/>
    <method name="ENGINE_register_ciphers(ENGINE*):int"/>
    <method name="ENGINE_register_complete(ENGINE*):int"/>
    <method name="ENGINE_register_digests(ENGINE*):int"/>
    <method name="ENGINE_remove(ENGINE*):int"/>
    <method name="ENGINE_set_DH(ENGINE*;const DH_METHOD*):int"/>
    <method name="ENGINE_set_DSA(ENGINE*;const DSA_METHOD*):int"/>
    <method name="ENGINE_set_ECDH(ENGINE*;const ECDH_METHOD*):int"/>
    <method name="ENGINE_set_ECDSA(ENGINE*;const ECDSA_METHOD*):int"/>
    <method name="ENGINE_set_RAND(ENGINE*;const RAND_METHOD*):int"/>
    <method name="ENGINE_set_RSA(ENGINE*;const RSA_METHOD*):int"/>
    <method name="ENGINE_set_STORE(ENGINE*;const STORE_METHOD*):int"/>
    <method name="ENGINE_set_ciphers(ENGINE*;ENGINE_CIPHERS_PTR):int"/>
    <method name="ENGINE_set_cmd_defns(ENGINE*;const ENGINE_CMD_DEFN*):int"/>
    <method name="ENGINE_set_ctrl_function(ENGINE*;ENGINE_CTRL_FUNC_PTR):int"/>
    <method name="ENGINE_set_default(ENGINE*;unsigned int):int"/>
    <method name="ENGINE_set_default_DH(ENGINE*):int"/>
    <method name="ENGINE_set_default_DSA(ENGINE*):int"/>
    <method name="ENGINE_set_default_ECDH(ENGINE*):int"/>
    <method name="ENGINE_set_default_ECDSA(ENGINE*):int"/>
    <method name="ENGINE_set_default_RAND(ENGINE*):int"/>
    <method name="ENGINE_set_default_RSA(ENGINE*):int"/>
    <method name="ENGINE_set_default_ciphers(ENGINE*):int"/>
    <method name="ENGINE_set_default_digests(ENGINE*):int"/>
    <method name="ENGINE_set_default_string(ENGINE*;const char*):int"/>
    <method name="ENGINE_set_destroy_function(ENGINE*;ENGINE_GEN_INT_FUNC_PTR):int"/>
    <method name="ENGINE_set_digests(ENGINE*;ENGINE_DIGESTS_PTR):int"/>
    <method name="ENGINE_set_ex_data(ENGINE*;int;void*):int"/>
    <method name="ENGINE_set_finish_function(ENGINE*;ENGINE_GEN_INT_FUNC_PTR):int"/>
    <method name="ENGINE_set_flags(ENGINE*;int):int"/>
    <method name="ENGINE_set_id(ENGINE*;const char*):int"/>
    <method name="ENGINE_set_init_function(ENGINE*;ENGINE_GEN_INT_FUNC_PTR):int"/>
    <method name="ENGINE_set_load_privkey_function(ENGINE*;ENGINE_LOAD_KEY_PTR):int"/>
    <method name="ENGINE_set_load_pubkey_function(ENGINE*;ENGINE_LOAD_KEY_PTR):int"/>
    <method name="ENGINE_set_name(ENGINE*;const char*):int"/>
    <method name="ENGINE_set_table_flags(unsigned int):void"/>
    <method name="ENGINE_unregister_DH(ENGINE*):void"/>
    <method name="ENGINE_unregister_DSA(ENGINE*):void"/>
    <method name="ENGINE_unregister_ECDH(ENGINE*):void"/>
    <method name="ENGINE_unregister_ECDSA(ENGINE*):void"/>
    <method name="ENGINE_unregister_RAND(ENGINE*):void"/>
    <method name="ENGINE_unregister_RSA(ENGINE*):void"/>
    <method name="ENGINE_unregister_STORE(ENGINE*):void"/>
    <method name="ENGINE_unregister_ciphers(ENGINE*):void"/>
    <method name="ENGINE_unregister_digests(ENGINE*):void"/>
    <method name="ENGINE_up_ref(ENGINE*):int"/>
    <method name="ERR_add_error_data(int, ...):void"/>
    <method name="ERR_clear_error():void"/>
    <method name="ERR_error_string(unsigned long;char*):char*"/>
    <method name="ERR_error_string_n(unsigned long;char*;size_t):void"/>
    <method name="ERR_free_strings():void"/>
    <method name="ERR_func_error_string(unsigned long):const char*"/>
    <method name="ERR_get_err_state_table():LHASH*"/>
    <method name="ERR_get_error():unsigned long"/>
    <method name="ERR_get_error_line(const char**;int*):unsigned long"/>
    <method name="ERR_get_error_line_data(const char**;int*;const char**;int*):unsigned long"/>
    <method name="ERR_get_implementation():const ERR_FNS*"/>
    <method name="ERR_get_next_error_library():int"/>
    <method name="ERR_get_state():ERR_STATE*"/>
    <method name="ERR_get_string_table():LHASH*"/>
    <method name="ERR_lib_error_string(unsigned long):const char*"/>
    <method name="ERR_load_ASN1_strings():void"/>
    <method name="ERR_load_BIO_strings():void"/>
    <method name="ERR_load_BN_strings():void"/>
    <method name="ERR_load_BUF_strings():void"/>
    <method name="ERR_load_COMP_strings():void"/>
    <method name="ERR_load_CONF_strings():void"/>
    <method name="ERR_load_CRYPTO_strings():void"/>
    <method name="ERR_load_DH_strings():void"/>
    <method name="ERR_load_DSA_strings():void"/>
    <method name="ERR_load_DSO_strings():void"/>
    <method name="ERR_load_ECDH_strings():void"/>
    <method name="ERR_load_ECDSA_strings():void"/>
    <method name="ERR_load_EC_strings():void"/>
    <method name="ERR_load_ENGINE_strings():void"/>
    <method name="ERR_load_ERR_strings():void"/>
    <method name="ERR_load_EVP_strings():void"/>
    <method name="ERR_load_OBJ_strings():void"/>
    <method name="ERR_load_OCSP_strings():void"/>
    <method name="ERR_load_PEM_strings():void"/>
    <method name="ERR_load_PKCS12_strings():void"/>
    <method name="ERR_load_PKCS7_strings():void"/>
    <method name="ERR_load_RAND_strings():void"/>
    <method name="ERR_load_RSA_strings():void"/>
    <method name="ERR_load_SSL_strings():void"/>
    <method name="ERR_load_STORE_strings():void"/>
    <method name="ERR_load_UI_strings():void"/>
    <method name="ERR_load_X509V3_strings():void"/>
    <method name="ERR_load_X509_strings():void"/>
    <method name="ERR_load_crypto_strings():void"/>
    <method name="ERR_load_strings(int;ERR_STRING_DATA*):void"/>
    <method name="ERR_peek_error():unsigned long"/>
    <method name="ERR_peek_error_line(const char**;int*):unsigned long"/>
    <method name="ERR_peek_error_line_data(const char**;int*;const char**;int*):unsigned long"/>
    <method name="ERR_peek_last_error():unsigned long"/>
    <method name="ERR_peek_last_error_line(const char**;int*):unsigned long"/>
    <method name="ERR_peek_last_error_line_data(const char**;int*;const char**;int*):unsigned long"/>
    <method name="ERR_pop_to_mark():int"/>
    <method name="ERR_print_errors(BIO*):void"/>
    <method name="ERR_print_errors_cb((*)(const char*;size_t;void*):int*;void*):void"/>
    <method name="ERR_print_errors_fp(FILE*):void"/>
    <method name="ERR_put_error(int;int;int;const char*;int):void"/>
    <method name="ERR_reason_error_string(unsigned long):const char*"/>
    <method name="ERR_release_err_state_table(LHASH**):void"/>
    <method name="ERR_remove_state(unsigned long):void"/>
    <method name="ERR_set_error_data(char*;int):void"/>
    <method name="ERR_set_implementation(const ERR_FNS*):int"/>
    <method name="ERR_set_mark():int"/>
    <method name="ERR_unload_strings(int;ERR_STRING_DATA*):void"/>
    <method name="EVP_BytesToKey(const EVP_CIPHER*;const EVP_MD*;const unsigned char*;const unsigned char*;int;int;unsigned char*;unsigned char*):int"/>
    <method name="EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX*):int"/>
    <method name="EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX*;int;int;void*):int"/>
    <method name="EVP_CIPHER_CTX_free(EVP_CIPHER_CTX*):void"/>
    <method name="EVP_CIPHER_CTX_init(EVP_CIPHER_CTX*):void"/>
    <method name="EVP_CIPHER_CTX_new():EVP_CIPHER_CTX*"/>
    <method name="EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX*;unsigned char*):int"/>
    <method name="EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX*;int):int"/>
    <method name="EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX*;int):int"/>
    <method name="EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_type(const EVP_CIPHER*):int"/>
    <method name="EVP_CipherFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_CipherFinal_ex(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_CipherInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_CipherInit_ex(EVP_CIPHER_CTX*;const EVP_CIPHER*;ENGINE*;const unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_CipherUpdate(EVP_CIPHER_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_DecodeBlock(unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_DecodeFinal(EVP_ENCODE_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_DecodeInit(EVP_ENCODE_CTX*):void"/>
    <method name="EVP_DecodeUpdate(EVP_ENCODE_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_DecryptFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_DecryptFinal_ex(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_DecryptInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_DecryptInit_ex(EVP_CIPHER_CTX*;const EVP_CIPHER*;ENGINE*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_DecryptUpdate(EVP_CIPHER_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_Digest(const void*;size_t;unsigned char*;unsigned int*;const EVP_MD*;ENGINE*):int"/>
    <method name="EVP_DigestFinal(EVP_MD_CTX*;unsigned char*;unsigned int*):int"/>
    <method name="EVP_DigestFinal_ex(EVP_MD_CTX*;unsigned char*;unsigned int*):int"/>
    <method name="EVP_DigestInit(EVP_MD_CTX*;const EVP_MD*):int"/>
    <method name="EVP_DigestInit_ex(EVP_MD_CTX*;const EVP_MD*;ENGINE*):int"/>
    <method name="EVP_DigestUpdate(EVP_MD_CTX*;const void*;size_t):int"/>
    <method name="EVP_EncodeBlock(unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_EncodeFinal(EVP_ENCODE_CTX*;unsigned char*;int*):void"/>
    <method name="EVP_EncodeInit(EVP_ENCODE_CTX*):void"/>
    <method name="EVP_EncodeUpdate(EVP_ENCODE_CTX*;unsigned char*;int*;const unsigned char*;int):void"/>
    <method name="EVP_EncryptFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_EncryptFinal_ex(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_EncryptInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_EncryptInit_ex(EVP_CIPHER_CTX*;const EVP_CIPHER*;ENGINE*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_EncryptUpdate(EVP_CIPHER_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_MD_CTX_cleanup(EVP_MD_CTX*):int"/>
    <method name="EVP_MD_CTX_copy(EVP_MD_CTX*;const EVP_MD_CTX*):int"/>
    <method name="EVP_MD_CTX_copy_ex(EVP_MD_CTX*;const EVP_MD_CTX*):int"/>
    <method name="EVP_MD_CTX_create():EVP_MD_CTX*"/>
    <method name="EVP_MD_CTX_destroy(EVP_MD_CTX*):void"/>
    <method name="EVP_MD_CTX_init(EVP_MD_CTX*):void"/>
    <method name="EVP_OpenFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_OpenInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;int;const unsigned char*;EVP_PKEY*):int"/>
    <method name="EVP_PBE_CipherInit(ASN1_OBJECT*;const char*;int;ASN1_TYPE*;EVP_CIPHER_CTX*;int):int"/>
    <method name="EVP_PBE_alg_add(int;const EVP_CIPHER*;const EVP_MD*;EVP_PBE_KEYGEN*):int"/>
    <method name="EVP_PBE_cleanup():void"/>
    <method name="EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO*):EVP_PKEY*"/>
    <method name="EVP_PKEY2PKCS8(EVP_PKEY*):PKCS8_PRIV_KEY_INFO*"/>
    <method name="EVP_PKEY2PKCS8_broken(EVP_PKEY*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="EVP_PKEY_add1_attr(EVP_PKEY*;X509_ATTRIBUTE*):int"/>
    <method name="EVP_PKEY_add1_attr_by_NID(EVP_PKEY*;int;int;const unsigned char*;int):int"/>
    <method name="EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY*;const ASN1_OBJECT*;int;const unsigned char*;int):int"/>
    <method name="EVP_PKEY_add1_attr_by_txt(EVP_PKEY*;const char*;int;const unsigned char*;int):int"/>
    <method name="EVP_PKEY_assign(EVP_PKEY*;int;char*):int"/>
    <method name="EVP_PKEY_bits(EVP_PKEY*):int"/>
    <method name="EVP_PKEY_cmp(const EVP_PKEY*;const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_cmp_parameters(const EVP_PKEY*;const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_copy_parameters(EVP_PKEY*;const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_decrypt(unsigned char*;const unsigned char*;int;EVP_PKEY*):int"/>
    <method name="EVP_PKEY_delete_attr(EVP_PKEY*;int):X509_ATTRIBUTE*"/>
    <method name="EVP_PKEY_encrypt(unsigned char*;const unsigned char*;int;EVP_PKEY*):int"/>
    <method name="EVP_PKEY_free(EVP_PKEY*):void"/>
    <method name="EVP_PKEY_get1_DH(EVP_PKEY*):dh_st*"/>
    <method name="EVP_PKEY_get1_DSA(EVP_PKEY*):dsa_st*"/>
    <method name="EVP_PKEY_get1_EC_KEY(EVP_PKEY*):ec_key_st*"/>
    <method name="EVP_PKEY_get1_RSA(EVP_PKEY*):rsa_st*"/>
    <method name="EVP_PKEY_get_attr(const EVP_PKEY*;int):X509_ATTRIBUTE*"/>
    <method name="EVP_PKEY_get_attr_by_NID(const EVP_PKEY*;int;int):int"/>
    <method name="EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY*;ASN1_OBJECT*;int):int"/>
    <method name="EVP_PKEY_get_attr_count(const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_missing_parameters(const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_new():EVP_PKEY*"/>
    <method name="EVP_PKEY_save_parameters(EVP_PKEY*;int):int"/>
    <method name="EVP_PKEY_set1_DH(EVP_PKEY*;dh_st*):int"/>
    <method name="EVP_PKEY_set1_DSA(EVP_PKEY*;dsa_st*):int"/>
    <method name="EVP_PKEY_set1_EC_KEY(EVP_PKEY*;ec_key_st*):int"/>
    <method name="EVP_PKEY_set1_RSA(EVP_PKEY*;rsa_st*):int"/>
    <method name="EVP_PKEY_size(EVP_PKEY*):int"/>
    <method name="EVP_PKEY_type(int):int"/>
    <method name="EVP_SealFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_SealInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;unsigned char**;int*;unsigned char*;EVP_PKEY**;int):int"/>
    <method name="EVP_SignFinal(EVP_MD_CTX*;unsigned char*;unsigned int*;EVP_PKEY*):int"/>
    <method name="EVP_VerifyFinal(EVP_MD_CTX*;const unsigned char*;unsigned int;EVP_PKEY*):int"/>
    <method name="EVP_add_cipher(const EVP_CIPHER*):int"/>
    <method name="EVP_add_digest(const EVP_MD*):int"/>
    <method name="EVP_aes_128_cbc():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_cfb128():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_ecb():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_ofb():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cbc():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cfb128():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_ecb():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_ofb():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cbc():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cfb128():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_ecb():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_ofb():const EVP_CIPHER*"/>
    <method name="EVP_bf_cbc():const EVP_CIPHER*"/>
    <method name="EVP_bf_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_bf_ecb():const EVP_CIPHER*"/>
    <method name="EVP_bf_ofb():const EVP_CIPHER*"/>
    <method name="EVP_cast5_cbc():const EVP_CIPHER*"/>
    <method name="EVP_cast5_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_cast5_ecb():const EVP_CIPHER*"/>
    <method name="EVP_cast5_ofb():const EVP_CIPHER*"/>
    <method name="EVP_cleanup():void"/>
    <method name="EVP_des_cbc():const EVP_CIPHER*"/>
    <method name="EVP_des_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_des_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_des_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_des_ecb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cbc():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_ecb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_ofb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_cbc():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_ecb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_ofb():const EVP_CIPHER*"/>
    <method name="EVP_des_ofb():const EVP_CIPHER*"/>
    <method name="EVP_desx_cbc():const EVP_CIPHER*"/>
    <method name="EVP_dss():const EVP_MD*"/>
    <method name="EVP_dss1():const EVP_MD*"/>
    <method name="EVP_ecdsa():const EVP_MD*"/>
    <method name="EVP_enc_null():const EVP_CIPHER*"/>
    <method name="EVP_get_cipherbyname(const char*):const EVP_CIPHER*"/>
    <method name="EVP_get_digestbyname(const char*):const EVP_MD*"/>
    <method name="EVP_get_pw_prompt():char*"/>
    <method name="EVP_idea_cbc():const EVP_CIPHER*"/>
    <method name="EVP_idea_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_idea_ecb():const EVP_CIPHER*"/>
    <method name="EVP_idea_ofb():const EVP_CIPHER*"/>
    <method name="EVP_md2():const EVP_MD*"/>
    <method name="EVP_md4():const EVP_MD*"/>
    <method name="EVP_md5():const EVP_MD*"/>
    <method name="EVP_md_null():const EVP_MD*"/>
    <method name="EVP_rc2_40_cbc():const EVP_CIPHER*"/>
    <method name="EVP_rc2_64_cbc():const EVP_CIPHER*"/>
    <method name="EVP_rc2_cbc():const EVP_CIPHER*"/>
    <method name="EVP_rc2_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_rc2_ecb():const EVP_CIPHER*"/>
    <method name="EVP_rc2_ofb():const EVP_CIPHER*"/>
    <method name="EVP_rc4():const EVP_CIPHER*"/>
    <method name="EVP_rc4_40():const EVP_CIPHER*"/>
    <method name="EVP_read_pw_string(char*;int;const char*;int):int"/>
    <method name="EVP_ripemd160():const EVP_MD*"/>
    <method name="EVP_set_pw_prompt(const char*):void"/>
    <method name="EVP_sha():const EVP_MD*"/>
    <method name="EVP_sha1():const EVP_MD*"/>
    <method name="EVP_sha224():const EVP_MD*"/>
    <method name="EVP_sha256():const EVP_MD*"/>
    <method name="EVP_sha384():const EVP_MD*"/>
    <method name="EVP_sha512():const EVP_MD*"/>
    <method name="EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE*):void"/>
    <method name="EXTENDED_KEY_USAGE_new():EXTENDED_KEY_USAGE*"/>
    <method name="EnumProtocolsA(LPINT;LPVOID;LPDWORD):INT"/>
    <method name="EnumProtocolsW(LPINT;LPVOID;LPDWORD):INT"/>
    <method name="ExecutionPath1stAbsolute"/>
    <method name="ExecutionPath1stContainsWhiteSpace"/>
    <method name="ExecutionPath1stRelative"/>
    <method name="ExecutionPath1stTainted"/>
    <method name="ExecutionPath2ndAbsolute"/>
    <method name="ExecutionPath2ndRelative"/>
    <method name="ExecutionPath2ndTainted"/>
    <method name="ExecutionPath3rdAbsolute"/>
    <method name="ExecutionPath3rdRelative"/>
    <method name="ExecutionPath3rdTainted"/>
    <method name="ExtAudioFileCreateWithURL(CFURLRef;AudioFileTypeID;const AudioStreamBasicDescription*;const AudioChannelLayout*;UInt32;ExtAudioFileRef*):OSStatus"/>
    <method name="ExtAudioFileDispose(ExtAudioFileRef):OSStatus"/>
    <method name="ExtAudioFileGetProperty(ExtAudioFileRef;ExtAudioFilePropertyID;UInt32*;void*):OSStatus"/>
    <method name="ExtAudioFileGetPropertyInfo(ExtAudioFileRef;ExtAudioFilePropertyID;UInt32*;Boolean*):OSStatus"/>
    <method name="ExtAudioFileOpenURL(CFURLRef;ExtAudioFileRef*):OSStatus"/>
    <method name="ExtAudioFileRead(ExtAudioFileRef;UInt32*;AudioBufferList*):OSStatus"/>
    <method name="ExtAudioFileSeek(ExtAudioFileRef;SInt64):OSStatus"/>
    <method name="ExtAudioFileSetProperty(ExtAudioFileRef;ExtAudioFilePropertyID;UInt32;const void*):OSStatus"/>
    <method name="ExtAudioFileTell(ExtAudioFileRef;SInt64*):OSStatus"/>
    <method name="ExtAudioFileWrapAudioFileID(AudioFileID;Boolean;ExtAudioFileRef*):OSStatus"/>
    <method name="ExtAudioFileWrite(ExtAudioFileRef;UInt32;const AudioBufferList*):OSStatus"/>
    <method name="ExtAudioFileWriteAsync(ExtAudioFileRef;UInt32;const AudioBufferList*):OSStatus"/>
    <method name="FBCreateNonRetainingArray():NSMutableArray*"/>
    <method name="FBIsDeviceIPad():BOOL"/>
    <method name="FILE_FLAG_BACKUP_SEMANTICS_6th"/>
    <method name="FILE_FLAG_FIRST_PIPE_INSTANCE_2nd"/>
    <method name="FMDBBlockSQLiteCallBackFunction(sqlite3_context*;int;sqlite3_value**):void"/>
    <method name="FileProtectionFlag3rd"/>
    <method name="Format1stArgs2ndCScanfFormat"/>
    <method name="Format1stCScanfStringUnboundedSpecifier"/>
    <method name="Format1stTainted"/>
    <method name="Format1stVa_list2ndCScanfFormat"/>
    <method name="Format2ndArgs3rdCScanfFormat"/>
    <method name="Format2ndCScanfStringUnboundedSpecifier"/>
    <method name="Format2ndTainted"/>
    <method name="Format2ndVa_list3rdCScanfFormat"/>
    <method name="Format3rdTainted"/>
    <method name="FunctionAddressComparison"/>
    <method name="GENERAL_NAMES_free(GENERAL_NAMES*):void"/>
    <method name="GENERAL_NAMES_new():GENERAL_NAMES*"/>
    <method name="GENERAL_NAME_free(GENERAL_NAME*):void"/>
    <method name="GENERAL_NAME_new():GENERAL_NAME*"/>
    <method name="GENERAL_NAME_print(BIO*;GENERAL_NAME*):int"/>
    <method name="GENERAL_SUBTREE_free(GENERAL_SUBTREE*):void"/>
    <method name="GENERAL_SUBTREE_new():GENERAL_SUBTREE*"/>
    <method name="GLKMathDegreesToRadians(float):float"/>
    <method name="GLKMathProject(GLKVector3;GLKMatrix4;GLKMatrix4;int*):GLKVector3"/>
    <method name="GLKMathRadiansToDegrees(float):float"/>
    <method name="GLKMathUnproject(GLKVector3;GLKMatrix4;GLKMatrix4;int*;_Bool*):GLKVector3"/>
    <method name="GLKMatrix3Add(GLKMatrix3;GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix3GetColumn(GLKMatrix3;int):GLKVector3"/>
    <method name="GLKMatrix3GetMatrix2(GLKMatrix3):GLKMatrix2"/>
    <method name="GLKMatrix3GetRow(GLKMatrix3;int):GLKVector3"/>
    <method name="GLKMatrix3Invert(GLKMatrix3;_Bool*):GLKMatrix3"/>
    <method name="GLKMatrix3InvertAndTranspose(GLKMatrix3;_Bool*):GLKMatrix3"/>
    <method name="GLKMatrix3Make(float;float;float;float;float;float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeAndTranspose(float;float;float;float;float;float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeRotation(float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeScale(float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithArray(float*):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithArrayAndTranspose(float*):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithColumns(GLKVector3;GLKVector3;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithQuaternion(GLKQuaternion):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithRows(GLKVector3;GLKVector3;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3MakeXRotation(float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeYRotation(float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeZRotation(float):GLKMatrix3"/>
    <method name="GLKMatrix3Multiply(GLKMatrix3;GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix3MultiplyVector3(GLKMatrix3;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix3MultiplyVector3Array(GLKMatrix3;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix3Rotate(GLKMatrix3;float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3RotateWithVector3(GLKMatrix3;float;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3RotateWithVector4(GLKMatrix3;float;GLKVector4):GLKMatrix3"/>
    <method name="GLKMatrix3RotateX(GLKMatrix3;float):GLKMatrix3"/>
    <method name="GLKMatrix3RotateY(GLKMatrix3;float):GLKMatrix3"/>
    <method name="GLKMatrix3RotateZ(GLKMatrix3;float):GLKMatrix3"/>
    <method name="GLKMatrix3Scale(GLKMatrix3;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3ScaleWithVector3(GLKMatrix3;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3ScaleWithVector4(GLKMatrix3;GLKVector4):GLKMatrix3"/>
    <method name="GLKMatrix3SetColumn(GLKMatrix3;int;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3SetRow(GLKMatrix3;int;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3Subtract(GLKMatrix3;GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix3Transpose(GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix4Add(GLKMatrix4;GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrix4GetColumn(GLKMatrix4;int):GLKVector4"/>
    <method name="GLKMatrix4GetMatrix2(GLKMatrix4):GLKMatrix2"/>
    <method name="GLKMatrix4GetMatrix3(GLKMatrix4):GLKMatrix3"/>
    <method name="GLKMatrix4GetRow(GLKMatrix4;int):GLKVector4"/>
    <method name="GLKMatrix4Invert(GLKMatrix4;_Bool*):GLKMatrix4"/>
    <method name="GLKMatrix4InvertAndTranspose(GLKMatrix4;_Bool*):GLKMatrix4"/>
    <method name="GLKMatrix4Make(float;float;float;float;float;float;float;float;float;float;float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeAndTranspose(float;float;float;float;float;float;float;float;float;float;float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeFrustum(float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeLookAt(float;float;float;float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeOrtho(float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakePerspective(float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeRotation(float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeScale(float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeTranslation(float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithArray(float*):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithArrayAndTranspose(float*):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithColumns(GLKVector4;GLKVector4;GLKVector4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithQuaternion(GLKQuaternion):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithRows(GLKVector4;GLKVector4;GLKVector4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4MakeXRotation(float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeYRotation(float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeZRotation(float):GLKMatrix4"/>
    <method name="GLKMatrix4Multiply(GLKMatrix4;GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrix4MultiplyAndProjectVector3(GLKMatrix4;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix4MultiplyAndProjectVector3Array(GLKMatrix4;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix4MultiplyVector3(GLKMatrix4;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix4MultiplyVector3Array(GLKMatrix4;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix4MultiplyVector3ArrayWithTranslation(GLKMatrix4;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix4MultiplyVector3WithTranslation(GLKMatrix4;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix4MultiplyVector4(GLKMatrix4;GLKVector4):GLKVector4"/>
    <method name="GLKMatrix4MultiplyVector4Array(GLKMatrix4;GLKVector4*;size_t):void"/>
    <method name="GLKMatrix4Rotate(GLKMatrix4;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4RotateWithVector3(GLKMatrix4;float;GLKVector3):GLKMatrix4"/>
    <method name="GLKMatrix4RotateWithVector4(GLKMatrix4;float;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4RotateX(GLKMatrix4;float):GLKMatrix4"/>
    <method name="GLKMatrix4RotateY(GLKMatrix4;float):GLKMatrix4"/>
    <method name="GLKMatrix4RotateZ(GLKMatrix4;float):GLKMatrix4"/>
    <method name="GLKMatrix4Scale(GLKMatrix4;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4ScaleWithVector3(GLKMatrix4;GLKVector3):GLKMatrix4"/>
    <method name="GLKMatrix4ScaleWithVector4(GLKMatrix4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4SetColumn(GLKMatrix4;int;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4SetRow(GLKMatrix4;int;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4Subtract(GLKMatrix4;GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrix4Translate(GLKMatrix4;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4TranslateWithVector3(GLKMatrix4;GLKVector3):GLKMatrix4"/>
    <method name="GLKMatrix4TranslateWithVector4(GLKMatrix4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4Transpose(GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrixStackCreate(CFAllocatorRef):GLKMatrixStackRef"/>
    <method name="GLKMatrixStackGetMatrix2(GLKMatrixStackRef):GLKMatrix2"/>
    <method name="GLKMatrixStackGetMatrix3(GLKMatrixStackRef):GLKMatrix3"/>
    <method name="GLKMatrixStackGetMatrix3Inverse(GLKMatrixStackRef):GLKMatrix3"/>
    <method name="GLKMatrixStackGetMatrix3InverseTranspose(GLKMatrixStackRef):GLKMatrix3"/>
    <method name="GLKMatrixStackGetMatrix4(GLKMatrixStackRef):GLKMatrix4"/>
    <method name="GLKMatrixStackGetMatrix4Inverse(GLKMatrixStackRef):GLKMatrix4"/>
    <method name="GLKMatrixStackGetMatrix4InverseTranspose(GLKMatrixStackRef):GLKMatrix4"/>
    <method name="GLKMatrixStackGetTypeID():CFTypeID"/>
    <method name="GLKMatrixStackLoadMatrix4(GLKMatrixStackRef;GLKMatrix4):void"/>
    <method name="GLKMatrixStackMultiplyMatrix4(GLKMatrixStackRef;GLKMatrix4):void"/>
    <method name="GLKMatrixStackMultiplyMatrixStack(GLKMatrixStackRef;GLKMatrixStackRef):void"/>
    <method name="GLKMatrixStackPop(GLKMatrixStackRef):void"/>
    <method name="GLKMatrixStackPush(GLKMatrixStackRef):void"/>
    <method name="GLKMatrixStackRotate(GLKMatrixStackRef;float;float;float;float):void"/>
    <method name="GLKMatrixStackRotateWithVector3(GLKMatrixStackRef;float;GLKVector3):void"/>
    <method name="GLKMatrixStackRotateWithVector4(GLKMatrixStackRef;float;GLKVector4):void"/>
    <method name="GLKMatrixStackRotateX(GLKMatrixStackRef;float):void"/>
    <method name="GLKMatrixStackRotateY(GLKMatrixStackRef;float):void"/>
    <method name="GLKMatrixStackRotateZ(GLKMatrixStackRef;float):void"/>
    <method name="GLKMatrixStackScale(GLKMatrixStackRef;float;float;float):void"/>
    <method name="GLKMatrixStackScaleWithVector3(GLKMatrixStackRef;GLKVector3):void"/>
    <method name="GLKMatrixStackScaleWithVector4(GLKMatrixStackRef;GLKVector4):void"/>
    <method name="GLKMatrixStackSize(GLKMatrixStackRef):int"/>
    <method name="GLKMatrixStackTranslate(GLKMatrixStackRef;float;float;float):void"/>
    <method name="GLKMatrixStackTranslateWithVector3(GLKMatrixStackRef;GLKVector3):void"/>
    <method name="GLKMatrixStackTranslateWithVector4(GLKMatrixStackRef;GLKVector4):void"/>
    <method name="GLKQuaternionAdd(GLKQuaternion;GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionAngle(GLKQuaternion):float"/>
    <method name="GLKQuaternionAxis(GLKQuaternion):GLKVector3"/>
    <method name="GLKQuaternionConjugate(GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionInvert(GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionLength(GLKQuaternion):float"/>
    <method name="GLKQuaternionMake(float;float;float;float):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithAngleAndAxis(float;float;float;float):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithAngleAndVector3Axis(float;GLKVector3):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithArray(float*):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithMatrix3(GLKMatrix3):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithMatrix4(GLKMatrix4):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithVector3(GLKVector3;float):GLKQuaternion"/>
    <method name="GLKQuaternionMultiply(GLKQuaternion;GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionNormalize(GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionRotateVector3(GLKQuaternion;GLKVector3):GLKVector3"/>
    <method name="GLKQuaternionRotateVector3Array(GLKQuaternion;GLKVector3*;size_t):void"/>
    <method name="GLKQuaternionRotateVector4(GLKQuaternion;GLKVector4):GLKVector4"/>
    <method name="GLKQuaternionRotateVector4Array(GLKQuaternion;GLKVector4*;size_t):void"/>
    <method name="GLKQuaternionSlerp(GLKQuaternion;GLKQuaternion;float):GLKQuaternion"/>
    <method name="GLKQuaternionSubtract(GLKQuaternion;GLKQuaternion):GLKQuaternion"/>
    <method name="GLKVector2Add(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2AddScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2AllEqualToScalar(GLKVector2;float):_Bool"/>
    <method name="GLKVector2AllEqualToVector2(GLKVector2;GLKVector2):_Bool"/>
    <method name="GLKVector2AllGreaterThanOrEqualToScalar(GLKVector2;float):_Bool"/>
    <method name="GLKVector2AllGreaterThanOrEqualToVector2(GLKVector2;GLKVector2):_Bool"/>
    <method name="GLKVector2AllGreaterThanScalar(GLKVector2;float):_Bool"/>
    <method name="GLKVector2AllGreaterThanVector2(GLKVector2;GLKVector2):_Bool"/>
    <method name="GLKVector2Distance(GLKVector2;GLKVector2):float"/>
    <method name="GLKVector2Divide(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2DivideScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2DotProduct(GLKVector2;GLKVector2):float"/>
    <method name="GLKVector2Length(GLKVector2):float"/>
    <method name="GLKVector2Lerp(GLKVector2;GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2Make(float;float):GLKVector2"/>
    <method name="GLKVector2MakeWithArray(float*):GLKVector2"/>
    <method name="GLKVector2Maximum(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2Minimum(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2Multiply(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2MultiplyScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2Negate(GLKVector2):GLKVector2"/>
    <method name="GLKVector2Normalize(GLKVector2):GLKVector2"/>
    <method name="GLKVector2Project(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2Subtract(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2SubtractScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector3Add(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3AddScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3AllEqualToScalar(GLKVector3;float):_Bool"/>
    <method name="GLKVector3AllEqualToVector3(GLKVector3;GLKVector3):_Bool"/>
    <method name="GLKVector3AllGreaterThanOrEqualToScalar(GLKVector3;float):_Bool"/>
    <method name="GLKVector3AllGreaterThanOrEqualToVector3(GLKVector3;GLKVector3):_Bool"/>
    <method name="GLKVector3AllGreaterThanScalar(GLKVector3;float):_Bool"/>
    <method name="GLKVector3AllGreaterThanVector3(GLKVector3;GLKVector3):_Bool"/>
    <method name="GLKVector3CrossProduct(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Distance(GLKVector3;GLKVector3):float"/>
    <method name="GLKVector3Divide(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3DivideScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3DotProduct(GLKVector3;GLKVector3):float"/>
    <method name="GLKVector3Length(GLKVector3):float"/>
    <method name="GLKVector3Lerp(GLKVector3;GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3Make(float;float;float):GLKVector3"/>
    <method name="GLKVector3MakeWithArray(float*):GLKVector3"/>
    <method name="GLKVector3Maximum(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Minimum(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Multiply(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3MultiplyScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3Negate(GLKVector3):GLKVector3"/>
    <method name="GLKVector3Normalize(GLKVector3):GLKVector3"/>
    <method name="GLKVector3Project(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Subtract(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3SubtractScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector4Add(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4AddScalar(GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4AllEqualToScalar(GLKVector4;float):_Bool"/>
    <method name="GLKVector4AllEqualToVector4(GLKVector4;GLKVector4):_Bool"/>
    <method name="GLKVector4AllGreaterThanOrEqualToScalar(GLKVector4;float):_Bool"/>
    <method name="GLKVector4AllGreaterThanOrEqualToVector4(GLKVector4;GLKVector4):_Bool"/>
    <method name="GLKVector4AllGreaterThanScalar(GLKVector4;float):_Bool"/>
    <method name="GLKVector4AllGreaterThanVector4(GLKVector4;GLKVector4):_Bool"/>
    <method name="GLKVector4CrossProduct(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Distance(GLKVector4;GLKVector4):float"/>
    <method name="GLKVector4Divide(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4DivideScalar(GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4DotProduct(GLKVector4;GLKVector4):float"/>
    <method name="GLKVector4Length(GLKVector4):float"/>
    <method name="GLKVector4Lerp(GLKVector4;GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4Make(float;float;float;float):GLKVector4"/>
    <method name="GLKVector4MakeWithArray(float*):GLKVector4"/>
    <method name="GLKVector4MakeWithVector3(GLKVector3;float):GLKVector4"/>
    <method name="GLKVector4Maximum(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Minimum(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Multiply(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4MultiplyScalar(GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4Negate(GLKVector4):GLKVector4"/>
    <method name="GLKVector4Normalize(GLKVector4):GLKVector4"/>
    <method name="GLKVector4Project(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Subtract(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4SubtractScalar(GLKVector4;float):GLKVector4"/>
    <method name="GetAcceptExSockaddrs(PVOID;DWORD;DWORD;DWORD;sockaddr**;LPINT;sockaddr**;LPINT):void"/>
    <method name="GetAddressByNameA(DWORD;LPGUID;LPSTR;LPINT;DWORD;LPSERVICE_ASYNC_INFO;LPVOID;LPDWORD;LPSTR;LPDWORD):INT"/>
    <method name="GetAddressByNameW(DWORD;LPGUID;LPWSTR;LPINT;DWORD;LPSERVICE_ASYNC_INFO;LPVOID;LPDWORD;LPWSTR;LPDWORD):INT"/>
    <method name="GetEncSChannel(BYTE**;DWORD*):BOOL"/>
    <method name="GetNameByTypeA(LPGUID;LPSTR;DWORD):INT"/>
    <method name="GetNameByTypeW(LPGUID;LPWSTR;DWORD):INT"/>
    <method name="GetServiceDisplayNameA(SC_HANDLE;LPCSTR;LPSTR;LPDWORD):BOOL"/>
    <method name="GetTypeByNameA(LPSTR;LPGUID):INT"/>
    <method name="GetTypeByNameW(LPWSTR;LPGUID):INT"/>
    <method name="HMAC(const EVP_MD*;const void*;int;const unsigned char*;size_t;unsigned char*;unsigned int*):unsigned char*"/>
    <method name="HMAC_CTX_cleanup(HMAC_CTX*):void"/>
    <method name="HMAC_CTX_init(HMAC_CTX*):void"/>
    <method name="HMAC_Final(HMAC_CTX*;unsigned char*;unsigned int*):void"/>
    <method name="HMAC_Init(HMAC_CTX*;const void*;int;const EVP_MD*):void"/>
    <method name="HMAC_Init_ex(HMAC_CTX*;const void*;int;const EVP_MD*;ENGINE*):void"/>
    <method name="HMAC_Update(HMAC_CTX*;const unsigned char*;size_t):void"/>
    <method name="ICEnroll.acceptFilePKCS7(BSTR):HRESULT"/>
    <method name="ICEnroll.acceptPKCS7(BSTR):HRESULT"/>
    <method name="ICEnroll.createFilePKCS10(BSTR;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll.createPKCS10(BSTR;BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll.enumContainers(LONG;BSTR*):HRESULT"/>
    <method name="ICEnroll.enumProviders(LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICEnroll.freeRequestInfo(BSTR):HRESULT"/>
    <method name="ICEnroll.getCertFromPKCS7(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll.get_CAStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_CAStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_CAStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_ContainerName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_DeleteRequestCert(BOOL*):HRESULT"/>
    <method name="ICEnroll.get_GenKeyFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_HashAlgorithm(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_KeySpec(LONG*):HRESULT"/>
    <method name="ICEnroll.get_MyStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_MyStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_MyStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_PVKFileName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_ProviderFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_ProviderName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_ProviderType(LONG*):HRESULT"/>
    <method name="ICEnroll.get_RequestStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_RequestStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_RequestStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_RootStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_RootStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_RootStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_SPCFileName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_UseExistingKeySet(BOOL*):HRESULT"/>
    <method name="ICEnroll.get_WriteCertToCSP(BOOL*):HRESULT"/>
    <method name="ICEnroll.put_CAStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_CAStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_CAStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_ContainerName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_DeleteRequestCert(BOOL):HRESULT"/>
    <method name="ICEnroll.put_GenKeyFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_HashAlgorithm(BSTR):HRESULT"/>
    <method name="ICEnroll.put_KeySpec(LONG):HRESULT"/>
    <method name="ICEnroll.put_MyStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_MyStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_MyStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_PVKFileName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_ProviderFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_ProviderName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_ProviderType(LONG):HRESULT"/>
    <method name="ICEnroll.put_RequestStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_RequestStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_RequestStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_RootStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_RootStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_RootStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_SPCFileName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_UseExistingKeySet(BOOL):HRESULT"/>
    <method name="ICEnroll.put_WriteCertToCSP(BOOL):HRESULT"/>
    <method name="ICEnroll2.addCertTypeToRequest(BSTR):HRESULT"/>
    <method name="ICEnroll2.addNameValuePairToSignature(BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll2.get_EnableT61DNEncoding(BOOL*):HRESULT"/>
    <method name="ICEnroll2.get_WriteCertToUserDS(BOOL*):HRESULT"/>
    <method name="ICEnroll2.put_EnableT61DNEncoding(BOOL):HRESULT"/>
    <method name="ICEnroll2.put_WriteCertToUserDS(BOOL):HRESULT"/>
    <method name="ICEnroll3.EnumAlgs(LONG;LONG;LONG*):HRESULT"/>
    <method name="ICEnroll3.GetAlgName(LONG;BSTR*):HRESULT"/>
    <method name="ICEnroll3.GetKeyLen(BOOL;BOOL;LONG*):HRESULT"/>
    <method name="ICEnroll3.GetSupportedKeySpec(LONG*):HRESULT"/>
    <method name="ICEnroll3.InstallPKCS7(BSTR):HRESULT"/>
    <method name="ICEnroll3.Reset():HRESULT"/>
    <method name="ICEnroll3.get_EnableSMIMECapabilities(BOOL*):HRESULT"/>
    <method name="ICEnroll3.get_HashAlgID(LONG*):HRESULT"/>
    <method name="ICEnroll3.get_LimitExchangeKeyToEncipherment(BOOL*):HRESULT"/>
    <method name="ICEnroll3.get_ReuseHardwareKeyIfUnableToGenNew(BOOL*):HRESULT"/>
    <method name="ICEnroll3.put_EnableSMIMECapabilities(BOOL):HRESULT"/>
    <method name="ICEnroll3.put_HashAlgID(LONG):HRESULT"/>
    <method name="ICEnroll3.put_LimitExchangeKeyToEncipherment(BOOL):HRESULT"/>
    <method name="ICEnroll3.put_ReuseHardwareKeyIfUnableToGenNew(BOOL):HRESULT"/>
    <method name="ICEnroll4.GetKeyLenEx(LONG;LONG;LONG*):HRESULT"/>
    <method name="ICEnroll4.InstallPKCS7Ex(BSTR;LONG*):HRESULT"/>
    <method name="ICEnroll4.acceptFileResponse(BSTR):HRESULT"/>
    <method name="ICEnroll4.acceptResponse(BSTR):HRESULT"/>
    <method name="ICEnroll4.addAttributeToRequest(LONG;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.addBlobPropertyToCertificate(LONG;LONG;BSTR):HRESULT"/>
    <method name="ICEnroll4.addCertTypeToRequestEx(LONG;BSTR;LONG;BOOL;LONG):HRESULT"/>
    <method name="ICEnroll4.addExtensionToRequest(LONG;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.addNameValuePairToRequest(LONG;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.binaryToString(LONG;BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.createFilePFX(BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.createFileRequest(LONG;BSTR;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.createPFX(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.createRequest(LONG;BSTR;BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.enumPendingRequest(LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICEnroll4.getCertFromFileResponse(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.getCertFromResponse(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.getProviderType(BSTR;LONG*):HRESULT"/>
    <method name="ICEnroll4.get_ClientId(LONG*):HRESULT"/>
    <method name="ICEnroll4.get_IncludeSubjectKeyID(BOOL*):HRESULT"/>
    <method name="ICEnroll4.get_PrivateKeyArchiveCertificate(BSTR*):HRESULT"/>
    <method name="ICEnroll4.get_ThumbPrint(BSTR*):HRESULT"/>
    <method name="ICEnroll4.put_ClientId(LONG):HRESULT"/>
    <method name="ICEnroll4.put_IncludeSubjectKeyID(BOOL):HRESULT"/>
    <method name="ICEnroll4.put_PrivateKeyArchiveCertificate(BSTR):HRESULT"/>
    <method name="ICEnroll4.put_SignerCertificate(BSTR):HRESULT"/>
    <method name="ICEnroll4.put_ThumbPrint(BSTR):HRESULT"/>
    <method name="ICEnroll4.removePendingRequest(BSTR):HRESULT"/>
    <method name="ICEnroll4.resetAttributes():HRESULT"/>
    <method name="ICEnroll4.resetBlobProperties():HRESULT"/>
    <method name="ICEnroll4.resetExtensions():HRESULT"/>
    <method name="ICEnroll4.setPendingRequestInfo(LONG;BSTR;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.stringToBinary(LONG;BSTR;BSTR*):HRESULT"/>
    <method name="ICertAdmin.DenyRequest(BSTR;LONG):HRESULT"/>
    <method name="ICertAdmin.GetCRL(BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertAdmin.GetRevocationReason(LONG*):HRESULT"/>
    <method name="ICertAdmin.ImportCertificate(BSTR;BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin.IsValidCertificate(BSTR;BSTR;LONG*):HRESULT"/>
    <method name="ICertAdmin.PublishCRL(BSTR;DATE):HRESULT"/>
    <method name="ICertAdmin.ResubmitRequest(BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin.RevokeCertificate(BSTR;BSTR;LONG;DATE):HRESULT"/>
    <method name="ICertAdmin.SetCertificateExtension(BSTR;LONG;BSTR;LONG;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertAdmin.SetRequestAttributes(BSTR;LONG;BSTR):HRESULT"/>
    <method name="ICertAdmin2.DeleteRow(BSTR;LONG;DATE;LONG;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin2.GetArchivedKey(BSTR;LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICertAdmin2.GetCAProperty(BSTR;LONG;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertAdmin2.GetCAPropertyDisplayName(BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertAdmin2.GetCAPropertyFlags(BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin2.GetConfigEntry(BSTR;BSTR;BSTR;VARIANT*):HRESULT"/>
    <method name="ICertAdmin2.GetMyRoles(BSTR;LONG*):HRESULT"/>
    <method name="ICertAdmin2.ImportKey(BSTR;LONG;BSTR;LONG;BSTR):HRESULT"/>
    <method name="ICertAdmin2.PublishCRLs(BSTR;DATE;LONG):HRESULT"/>
    <method name="ICertAdmin2.SetCAProperty(BSTR;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertAdmin2.SetConfigEntry(BSTR;BSTR;BSTR;VARIANT*):HRESULT"/>
    <method name="ICertConfig.GetConfig(LONG;BSTR*):HRESULT"/>
    <method name="ICertConfig.GetField(BSTR;BSTR*):HRESULT"/>
    <method name="ICertConfig.Next(LONG*):HRESULT"/>
    <method name="ICertConfig.Reset(LONG;LONG*):HRESULT"/>
    <method name="ICertConfig2.SetSharedFolder(BSTR):HRESULT"/>
    <method name="ICertEncodeAltName.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeAltName.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeAltName.GetName(LONG;BSTR*):HRESULT"/>
    <method name="ICertEncodeAltName.GetNameChoice(LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeAltName.GetNameCount(LONG*):HRESULT"/>
    <method name="ICertEncodeAltName.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeAltName.SetNameEntry(LONG;LONG;BSTR):HRESULT"/>
    <method name="ICertEncodeBitString.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeBitString.Encode(LONG;BSTR;BSTR*):HRESULT"/>
    <method name="ICertEncodeBitString.GetBitCount(LONG*):HRESULT"/>
    <method name="ICertEncodeBitString.GetBitString(BSTR*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetDistPointCount(LONG*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetName(LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetNameChoice(LONG;LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetNameCount(LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.SetNameCount(LONG;LONG):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.SetNameEntry(LONG;LONG;LONG;BSTR):HRESULT"/>
    <method name="ICertEncodeDateArray.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeDateArray.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeDateArray.GetCount(LONG*):HRESULT"/>
    <method name="ICertEncodeDateArray.GetValue(LONG;DATE*):HRESULT"/>
    <method name="ICertEncodeDateArray.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeDateArray.SetValue(LONG;DATE):HRESULT"/>
    <method name="ICertEncodeLongArray.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeLongArray.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeLongArray.GetCount(LONG*):HRESULT"/>
    <method name="ICertEncodeLongArray.GetValue(LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeLongArray.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeLongArray.SetValue(LONG;LONG):HRESULT"/>
    <method name="ICertEncodeStringArray.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeStringArray.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeStringArray.GetCount(LONG*):HRESULT"/>
    <method name="ICertEncodeStringArray.GetStringType(LONG*):HRESULT"/>
    <method name="ICertEncodeStringArray.GetValue(LONG;BSTR*):HRESULT"/>
    <method name="ICertEncodeStringArray.Reset(LONG;LONG):HRESULT"/>
    <method name="ICertEncodeStringArray.SetValue(LONG;BSTR):HRESULT"/>
    <method name="ICertExit.GetDescription(BSTR*):HRESULT"/>
    <method name="ICertExit.Initialize(BSTR;LONG*):HRESULT"/>
    <method name="ICertExit.Notify(LONG;LONG):HRESULT"/>
    <method name="ICertExit2.GetManageModule(ICertManageModule**):HRESULT"/>
    <method name="ICertGetConfig.GetConfig(LONG;BSTR*):HRESULT"/>
    <method name="ICertManageModule.Configure(BSTR;BSTR;LONG):HRESULT"/>
    <method name="ICertManageModule.GetProperty(BSTR;BSTR;BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertManageModule.SetProperty(BSTR;BSTR;BSTR;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertPolicy.GetDescription(BSTR*):HRESULT"/>
    <method name="ICertPolicy.Initialize(BSTR):HRESULT"/>
    <method name="ICertPolicy.ShutDown():HRESULT"/>
    <method name="ICertPolicy.VerifyRequest(BSTR;LONG;LONG;LONG;LONG*):HRESULT"/>
    <method name="ICertPolicy2.GetManageModule(ICertManageModule**):HRESULT"/>
    <method name="ICertRequest.GetCACertificate(LONG;BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest.GetCertificate(LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest.GetDispositionMessage(BSTR*):HRESULT"/>
    <method name="ICertRequest.GetLastStatus(LONG*):HRESULT"/>
    <method name="ICertRequest.GetRequestId(LONG*):HRESULT"/>
    <method name="ICertRequest.RetrievePending(LONG;BSTR;LONG*):HRESULT"/>
    <method name="ICertRequest.Submit(LONG;BSTR;BSTR;BSTR;LONG*):HRESULT"/>
    <method name="ICertRequest2.GetCAProperty(BSTR;LONG;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertRequest2.GetCAPropertyDisplayName(BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest2.GetCAPropertyFlags(BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertRequest2.GetErrorMessageText(LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest2.GetFullResponseProperty(LONG;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertRequest2.GetIssuedCertificate(BSTR;LONG;BSTR;LONG*):HRESULT"/>
    <method name="ICertServerExit.EnumerateAttributes(BSTR*):HRESULT"/>
    <method name="ICertServerExit.EnumerateAttributesClose():HRESULT"/>
    <method name="ICertServerExit.EnumerateAttributesSetup(LONG):HRESULT"/>
    <method name="ICertServerExit.EnumerateExtensions(BSTR*):HRESULT"/>
    <method name="ICertServerExit.EnumerateExtensionsClose():HRESULT"/>
    <method name="ICertServerExit.EnumerateExtensionsSetup(LONG):HRESULT"/>
    <method name="ICertServerExit.GetCertificateExtension(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerExit.GetCertificateExtensionFlags(LONG*):HRESULT"/>
    <method name="ICertServerExit.GetCertificateProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerExit.GetRequestAttribute(BSTR;BSTR*):HRESULT"/>
    <method name="ICertServerExit.GetRequestProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerExit.SetContext(LONG):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateAttributes(BSTR*):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateAttributesClose():HRESULT"/>
    <method name="ICertServerPolicy.EnumerateAttributesSetup(LONG):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateExtensions(BSTR*):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateExtensionsClose():HRESULT"/>
    <method name="ICertServerPolicy.EnumerateExtensionsSetup(LONG):HRESULT"/>
    <method name="ICertServerPolicy.GetCertificateExtension(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.GetCertificateExtensionFlags(LONG*):HRESULT"/>
    <method name="ICertServerPolicy.GetCertificateProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.GetRequestAttribute(BSTR;BSTR*):HRESULT"/>
    <method name="ICertServerPolicy.GetRequestProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.SetCertificateExtension(BSTR;LONG;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.SetCertificateProperty(BSTR;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.SetContext(LONG):HRESULT"/>
    <method name="ICertView.EnumCertViewColumn(LONG;IEnumCERTVIEWCOLUMN**):HRESULT"/>
    <method name="ICertView.GetColumnCount(LONG;LONG*):HRESULT"/>
    <method name="ICertView.GetColumnIndex(LONG;BSTR;LONG*):HRESULT"/>
    <method name="ICertView.OpenConnection(BSTR):HRESULT"/>
    <method name="ICertView.OpenView(IEnumCERTVIEWROW**):HRESULT"/>
    <method name="ICertView.SetRestriction(LONG;LONG;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertView.SetResultColumn(LONG):HRESULT"/>
    <method name="ICertView.SetResultColumnCount(LONG):HRESULT"/>
    <method name="ICertView2.SetTable(LONG):HRESULT"/>
    <method name="IEnroll.AddAuthenticatedAttributesToPKCS7Request(PCRYPT_ATTRIBUTES):HRESULT"/>
    <method name="IEnroll.AddCertTypeToRequestWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.AddExtensionsToRequest(PCERT_EXTENSIONS):HRESULT"/>
    <method name="IEnroll.AddNameValuePairToSignatureWStr(LPWSTR;LPWSTR):HRESULT"/>
    <method name="IEnroll.CreatePKCS7RequestFromRequest(PCRYPT_DATA_BLOB;PCCERT_CONTEXT;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.acceptFilePKCS7WStr(LPCWSTR):HRESULT"/>
    <method name="IEnroll.acceptPKCS7Blob(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.createFilePKCS10WStr(LPCWSTR;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll.createPKCS10WStr(LPCWSTR;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.enumContainersWStr(LONG;LPWSTR*):HRESULT"/>
    <method name="IEnroll.enumProvidersWStr(LONG;LONG;LPWSTR*):HRESULT"/>
    <method name="IEnroll.freeRequestInfoBlob(CRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.getCAStore():HCERTSTORE"/>
    <method name="IEnroll.getCertContextFromPKCS7(PCRYPT_DATA_BLOB):PCCERT_CONTEXT"/>
    <method name="IEnroll.getMyStore():HCERTSTORE"/>
    <method name="IEnroll.getROOTHStore():HCERTSTORE"/>
    <method name="IEnroll.get_CAStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_CAStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_CAStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_ContainerNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_DeleteRequestCert(BOOL*):HRESULT"/>
    <method name="IEnroll.get_EnableT61DNEncoding(BOOL*):HRESULT"/>
    <method name="IEnroll.get_GenKeyFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_HashAlgorithmWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_KeySpec(LONG*):HRESULT"/>
    <method name="IEnroll.get_MyStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_MyStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_MyStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_PVKFileNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_ProviderFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_ProviderNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_ProviderType(LONG*):HRESULT"/>
    <method name="IEnroll.get_RenewalCertificate(PCCERT_CONTEXT*):HRESULT"/>
    <method name="IEnroll.get_RequestStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_RequestStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_RequestStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_RootStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_RootStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_RootStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_SPCFileNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_UseExistingKeySet(BOOL*):HRESULT"/>
    <method name="IEnroll.get_WriteCertToCSP(BOOL*):HRESULT"/>
    <method name="IEnroll.get_WriteCertToUserDS(BOOL*):HRESULT"/>
    <method name="IEnroll.put_CAStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_CAStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_CAStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_ContainerNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_DeleteRequestCert(BOOL):HRESULT"/>
    <method name="IEnroll.put_EnableT61DNEncoding(BOOL):HRESULT"/>
    <method name="IEnroll.put_GenKeyFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_HashAlgorithmWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_KeySpec(LONG):HRESULT"/>
    <method name="IEnroll.put_MyStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_MyStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_MyStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_PVKFileNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_ProviderFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_ProviderNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_ProviderType(LONG):HRESULT"/>
    <method name="IEnroll.put_RenewalCertificate(PCCERT_CONTEXT):HRESULT"/>
    <method name="IEnroll.put_RequestStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_RequestStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_RequestStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_RootStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_RootStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_RootStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_SPCFileNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_UseExistingKeySet(BOOL):HRESULT"/>
    <method name="IEnroll.put_WriteCertToCSP(BOOL):HRESULT"/>
    <method name="IEnroll.put_WriteCertToUserDS(BOOL):HRESULT"/>
    <method name="IEnroll2.EnumAlgs(LONG;LONG;LONG*):HRESULT"/>
    <method name="IEnroll2.GetAlgNameWStr(LONG;LPWSTR*):HRESULT"/>
    <method name="IEnroll2.GetKeyLen(BOOL;BOOL;LONG*):HRESULT"/>
    <method name="IEnroll2.GetSupportedKeySpec(LONG*):HRESULT"/>
    <method name="IEnroll2.InstallPKCS7Blob(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll2.Reset():HRESULT"/>
    <method name="IEnroll2.SetHStoreCA(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.SetHStoreMy(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.SetHStoreROOT(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.SetHStoreRequest(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.get_EnableSMIMECapabilities(BOOL*):HRESULT"/>
    <method name="IEnroll2.get_HashAlgID(LONG*):HRESULT"/>
    <method name="IEnroll2.get_LimitExchangeKeyToEncipherment(BOOL*):HRESULT"/>
    <method name="IEnroll2.get_ReuseHardwareKeyIfUnableToGenNew(BOOL*):HRESULT"/>
    <method name="IEnroll2.put_EnableSMIMECapabilities(BOOL):HRESULT"/>
    <method name="IEnroll2.put_HashAlgID(LONG):HRESULT"/>
    <method name="IEnroll2.put_LimitExchangeKeyToEncipherment(BOOL):HRESULT"/>
    <method name="IEnroll2.put_ReuseHardwareKeyIfUnableToGenNew(BOOL):HRESULT"/>
    <method name="IEnroll4.AddCertTypeToRequestWStrEx(LONG;LPCWSTR;LONG;BOOL;LONG):HRESULT"/>
    <method name="IEnroll4.GetKeyLenEx(LONG;LONG;LONG*):HRESULT"/>
    <method name="IEnroll4.GetPrivateKeyArchiveCertificate():PCCERT_CONTEXT"/>
    <method name="IEnroll4.InstallPKCS7BlobEx(PCRYPT_DATA_BLOB;LONG*):HRESULT"/>
    <method name="IEnroll4.SetPrivateKeyArchiveCertificate(PCCERT_CONTEXT):HRESULT"/>
    <method name="IEnroll4.SetSignerCertificate(PCCERT_CONTEXT):HRESULT"/>
    <method name="IEnroll4.acceptFileResponseWStr(LPCWSTR):HRESULT"/>
    <method name="IEnroll4.acceptResponseBlob(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addAttributeToRequestWStr(LONG;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addBlobPropertyToCertificateWStr(LONG;LONG;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addExtensionToRequestWStr(LONG;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addNameValuePairToRequestWStr(LONG;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.binaryBlobToString(LONG;PCRYPT_DATA_BLOB;LPWSTR*):HRESULT"/>
    <method name="IEnroll4.createFilePFXWStr(LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.createFileRequestWStr(LONG;LPCWSTR;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.createPFXWStr(LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.createRequestWStr(LONG;LPCWSTR;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.enumPendingRequestWStr(LONG;LONG;LPVOID):HRESULT"/>
    <method name="IEnroll4.getCertContextFromFileResponseWStr(LPCWSTR;PCCERT_CONTEXT*):HRESULT"/>
    <method name="IEnroll4.getCertContextFromResponseBlob(PCRYPT_DATA_BLOB;PCCERT_CONTEXT*):HRESULT"/>
    <method name="IEnroll4.getProviderTypeWStr(LPCWSTR;LONG*):HRESULT"/>
    <method name="IEnroll4.get_ClientId(LONG*):HRESULT"/>
    <method name="IEnroll4.get_IncludeSubjectKeyID(BOOL*):HRESULT"/>
    <method name="IEnroll4.get_ThumbPrintWStr(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.put_ClientId(LONG):HRESULT"/>
    <method name="IEnroll4.put_IncludeSubjectKeyID(BOOL):HRESULT"/>
    <method name="IEnroll4.put_ThumbPrintWStr(CRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.removePendingRequestWStr(CRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.resetAttributes():HRESULT"/>
    <method name="IEnroll4.resetExtensions():HRESULT"/>
    <method name="IEnroll4.setPendingRequestInfoWStr(LONG;LPCWSTR;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.stringToBinaryBlob(LONG;LPCWSTR;PCRYPT_DATA_BLOB;LONG*;LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Clone(IEnumCERTVIEWATTRIBUTE**):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.GetName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.GetValue(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Skip(LONG):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Clone(IEnumCERTVIEWCOLUMN**):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetDisplayName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetMaxLength(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetType(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetValue(LONG;VARIANT*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.IsIndexed(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Skip(LONG):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Clone(IEnumCERTVIEWEXTENSION**):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.GetFlags(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.GetName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.GetValue(LONG;LONG;VARIANT*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Skip(LONG):HRESULT"/>
    <method name="IEnumCERTVIEWROW.Clone(IEnumCERTVIEWROW**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.EnumCertViewAttribute(LONG;IEnumCERTVIEWATTRIBUTE**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.EnumCertViewColumn(IEnumCERTVIEWCOLUMN**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.EnumCertViewExtension(LONG;IEnumCERTVIEWEXTENSION**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.GetMaxIndex(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWROW.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWROW.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWROW.Skip(LONG):HRESULT"/>
    <method name="ImpersonateAnonymousToken(HANDLE):BOOL"/>
    <method name="ImpersonateDdeClientWindow(HWND;HWND):BOOL"/>
    <method name="ImpersonateLoggedOnUser(HANDLE):BOOL"/>
    <method name="ImpersonateNamedPipeClient(HANDLE):BOOL"/>
    <method name="ImpersonateSecurityContext(PCtxtHandle):SECURITY_STATUS"/>
    <method name="ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL):BOOL"/>
    <method name="ImpersonationFlags6thFileName1stTainted"/>
    <method name="ImpersonationReturnChecked"/>
    <method name="IsBadCodePtr(FARPROC):BOOL"/>
    <method name="IsBadHugeReadPtr(const void*;UINT_PTR):BOOL"/>
    <method name="IsBadHugeWritePtr(LPVOID;UINT_PTR):BOOL"/>
    <method name="IsBadReadPtr(const void*;UINT_PTR):BOOL"/>
    <method name="IsBadStringPtr(LPCTSTR; UINT_PTR): BOOL"/>
    <method name="IsBadStringPtrA(LPCSTR;UINT_PTR):BOOL"/>
    <method name="IsBadStringPtrW(LPCWSTR;UINT_PTR):BOOL"/>
    <method name="IsBadWritePtr(LPVOID;UINT_PTR):BOOL"/>
    <method name="LibraryPath1stRelative"/>
    <method name="LoadCentralDirectoryRecord(zip64_internal*):int"/>
    <method name="LoadLibrary(LPCTSTR): HMODULE"/>
    <method name="LoadLibraryA(LPCSTR):HMODULE"/>
    <method name="LoadLibraryEx(LPCTSTR; HANDLE; Double Word): HMODULE"/>
    <method name="LoadLibraryEx32W(LPCSTR;DWORD;DWORD):DWORD"/>
    <method name="LoadLibraryExA(LPCSTR;HANDLE;DWORD):HMODULE"/>
    <method name="LoadLibraryExW(LPCWSTR;HANDLE;DWORD):HMODULE"/>
    <method name="LoadLibraryW(LPCWSTR):HMODULE"/>
    <method name="MD2(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="MD2_Final(unsigned char*;MD2_CTX*):int"/>
    <method name="MD2_Init(MD2_CTX*):int"/>
    <method name="MD2_Update(MD2_CTX*;const unsigned char*;size_t):int"/>
    <method name="MD2_options():const char*"/>
    <method name="MD4(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="MD4_Final(unsigned char*;MD4_CTX*):int"/>
    <method name="MD4_Init(MD4_CTX*):int"/>
    <method name="MD4_Transform(MD4_CTX*;const unsigned char*):void"/>
    <method name="MD4_Update(MD4_CTX*;const void*;size_t):int"/>
    <method name="MD5(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="MD5_Final(unsigned char*;MD5_CTX*):int"/>
    <method name="MD5_Init(MD5_CTX*):int"/>
    <method name="MD5_Transform(MD5_CTX*;const unsigned char*):void"/>
    <method name="MD5_Update(MD5_CTX*;const void*;size_t):int"/>
    <method name="MIDIClientCreate(CFStringRef;MIDINotifyProc;void*;MIDIClientRef*):OSStatus"/>
    <method name="MIDIClientDispose(MIDIClientRef):OSStatus"/>
    <method name="MIDIDestinationCreate(MIDIClientRef;CFStringRef;MIDIReadProc;void*;MIDIEndpointRef*):OSStatus"/>
    <method name="MIDIDeviceAddEntity(MIDIDeviceRef;CFStringRef;Boolean;ItemCount;ItemCount;MIDIEntityRef*):OSStatus"/>
    <method name="MIDIDeviceCreate(MIDIDriverRef;CFStringRef;CFStringRef;CFStringRef;MIDIDeviceRef*):OSStatus"/>
    <method name="MIDIDeviceDispose(MIDIDeviceRef):OSStatus"/>
    <method name="MIDIDeviceGetEntity(MIDIDeviceRef;ItemCount):MIDIEntityRef"/>
    <method name="MIDIDeviceGetNumberOfEntities(MIDIDeviceRef):ItemCount"/>
    <method name="MIDIDeviceListAddDevice(MIDIDeviceListRef;MIDIDeviceRef):OSStatus"/>
    <method name="MIDIDeviceListDispose(MIDIDeviceListRef):OSStatus"/>
    <method name="MIDIDeviceListGetDevice(MIDIDeviceListRef;ItemCount):MIDIDeviceRef"/>
    <method name="MIDIDeviceListGetNumberOfDevices(MIDIDeviceListRef):ItemCount"/>
    <method name="MIDIDeviceRemoveEntity(MIDIDeviceRef;MIDIEntityRef):OSStatus"/>
    <method name="MIDIDriverEnableMonitoring(MIDIDriverRef;Boolean):OSStatus"/>
    <method name="MIDIEndpointDispose(MIDIEndpointRef):OSStatus"/>
    <method name="MIDIEndpointGetEntity(MIDIEndpointRef;MIDIEntityRef*):OSStatus"/>
    <method name="MIDIEndpointGetRefCons(MIDIEndpointRef;void**;void**):OSStatus"/>
    <method name="MIDIEndpointSetRefCons(MIDIEndpointRef;void*;void*):OSStatus"/>
    <method name="MIDIEntityAddOrRemoveEndpoints(MIDIEntityRef;ItemCount;ItemCount):OSStatus"/>
    <method name="MIDIEntityGetDestination(MIDIEntityRef;ItemCount):MIDIEndpointRef"/>
    <method name="MIDIEntityGetDevice(MIDIEntityRef;MIDIDeviceRef*):OSStatus"/>
    <method name="MIDIEntityGetNumberOfDestinations(MIDIEntityRef):ItemCount"/>
    <method name="MIDIEntityGetNumberOfSources(MIDIEntityRef):ItemCount"/>
    <method name="MIDIEntityGetSource(MIDIEntityRef;ItemCount):MIDIEndpointRef"/>
    <method name="MIDIExternalDeviceCreate(CFStringRef;CFStringRef;CFStringRef;MIDIDeviceRef*):OSStatus"/>
    <method name="MIDIFlushOutput(MIDIEndpointRef):OSStatus"/>
    <method name="MIDIGetDestination(ItemCount):MIDIEndpointRef"/>
    <method name="MIDIGetDevice(ItemCount):MIDIDeviceRef"/>
    <method name="MIDIGetDriverDeviceList(MIDIDriverRef):MIDIDeviceListRef"/>
    <method name="MIDIGetDriverIORunLoop():CFRunLoopRef"/>
    <method name="MIDIGetExternalDevice(ItemCount):MIDIDeviceRef"/>
    <method name="MIDIGetNumberOfDestinations():ItemCount"/>
    <method name="MIDIGetNumberOfDevices():ItemCount"/>
    <method name="MIDIGetNumberOfExternalDevices():ItemCount"/>
    <method name="MIDIGetNumberOfSources():ItemCount"/>
    <method name="MIDIGetSerialPortDrivers(CFArrayRef*):OSStatus"/>
    <method name="MIDIGetSerialPortOwner(CFStringRef;CFStringRef*):OSStatus"/>
    <method name="MIDIGetSource(ItemCount):MIDIEndpointRef"/>
    <method name="MIDIInputPortCreate(MIDIClientRef;CFStringRef;MIDIReadProc;void*;MIDIPortRef*):OSStatus"/>
    <method name="MIDIObjectFindByUniqueID(MIDIUniqueID;MIDIObjectRef*;MIDIObjectType*):OSStatus"/>
    <method name="MIDIObjectGetDataProperty(MIDIObjectRef;CFStringRef;CFDataRef*):OSStatus"/>
    <method name="MIDIObjectGetDictionaryProperty(MIDIObjectRef;CFStringRef;CFDictionaryRef*):OSStatus"/>
    <method name="MIDIObjectGetIntegerProperty(MIDIObjectRef;CFStringRef;SInt32*):OSStatus"/>
    <method name="MIDIObjectGetProperties(MIDIObjectRef;CFPropertyListRef*;Boolean):OSStatus"/>
    <method name="MIDIObjectGetStringProperty(MIDIObjectRef;CFStringRef;CFStringRef*):OSStatus"/>
    <method name="MIDIObjectRemoveProperty(MIDIObjectRef;CFStringRef):OSStatus"/>
    <method name="MIDIObjectSetDataProperty(MIDIObjectRef;CFStringRef;CFDataRef):OSStatus"/>
    <method name="MIDIObjectSetDictionaryProperty(MIDIObjectRef;CFStringRef;CFDictionaryRef):OSStatus"/>
    <method name="MIDIObjectSetIntegerProperty(MIDIObjectRef;CFStringRef;SInt32):OSStatus"/>
    <method name="MIDIObjectSetStringProperty(MIDIObjectRef;CFStringRef;CFStringRef):OSStatus"/>
    <method name="MIDIOutputPortCreate(MIDIClientRef;CFStringRef;MIDIPortRef*):OSStatus"/>
    <method name="MIDIPacketListAdd(MIDIPacketList*;ByteCount;MIDIPacket*;MIDITimeStamp;ByteCount;const Byte*):MIDIPacket*"/>
    <method name="MIDIPacketListInit(MIDIPacketList*):MIDIPacket*"/>
    <method name="MIDIPortConnectSource(MIDIPortRef;MIDIEndpointRef;void*):OSStatus"/>
    <method name="MIDIPortDisconnectSource(MIDIPortRef;MIDIEndpointRef):OSStatus"/>
    <method name="MIDIPortDispose(MIDIPortRef):OSStatus"/>
    <method name="MIDIReceived(MIDIEndpointRef;const MIDIPacketList*):OSStatus"/>
    <method name="MIDIRestart():OSStatus"/>
    <method name="MIDISend(MIDIPortRef;MIDIEndpointRef;const MIDIPacketList*):OSStatus"/>
    <method name="MIDISendSysex(MIDISysexSendRequest*):OSStatus"/>
    <method name="MIDISetSerialPortOwner(CFStringRef;CFStringRef):OSStatus"/>
    <method name="MIDISetupAddDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupAddExternalDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupCreate(MIDISetupRef*):OSStatus"/>
    <method name="MIDISetupDispose(MIDISetupRef):OSStatus"/>
    <method name="MIDISetupFromData(CFDataRef;MIDISetupRef*):OSStatus"/>
    <method name="MIDISetupGetCurrent(MIDISetupRef*):OSStatus"/>
    <method name="MIDISetupInstall(MIDISetupRef):OSStatus"/>
    <method name="MIDISetupRemoveDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupRemoveExternalDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupToData(MIDISetupRef;CFDataRef*):OSStatus"/>
    <method name="MIDISourceCreate(MIDIClientRef;CFStringRef;MIDIEndpointRef*):OSStatus"/>
    <method name="MIDIThruConnectionCreate(CFStringRef;CFDataRef;MIDIThruConnectionRef*):OSStatus"/>
    <method name="MIDIThruConnectionDispose(MIDIThruConnectionRef):OSStatus"/>
    <method name="MIDIThruConnectionFind(CFStringRef;CFDataRef*):OSStatus"/>
    <method name="MIDIThruConnectionGetParams(MIDIThruConnectionRef;CFDataRef*):OSStatus"/>
    <method name="MIDIThruConnectionParamsInitialize(MIDIThruConnectionParams*):void"/>
    <method name="MIDIThruConnectionSetParams(MIDIThruConnectionRef;CFDataRef):OSStatus"/>
    <method name="MKCoordinateForMapPoint(MKMapPoint):CLLocationCoordinate2D"/>
    <method name="MKCoordinateRegionForMapRect(MKMapRect):MKCoordinateRegion"/>
    <method name="MKCoordinateRegionMake(CLLocationCoordinate2D;MKCoordinateSpan):MKCoordinateRegion"/>
    <method name="MKCoordinateRegionMakeWithDistance(CLLocationCoordinate2D;CLLocationDistance;CLLocationDistance):MKCoordinateRegion"/>
    <method name="MKCoordinateSpanMake(CLLocationDegrees;CLLocationDegrees):MKCoordinateSpan"/>
    <method name="MKMapPointEqualToPoint(MKMapPoint;MKMapPoint):BOOL"/>
    <method name="MKMapPointForCoordinate(CLLocationCoordinate2D):MKMapPoint"/>
    <method name="MKMapPointMake(double;double):MKMapPoint"/>
    <method name="MKMapPointsPerMeterAtLatitude(CLLocationDegrees):double"/>
    <method name="MKMapRectContainsPoint(MKMapRect;MKMapPoint):BOOL"/>
    <method name="MKMapRectContainsRect(MKMapRect;MKMapRect):BOOL"/>
    <method name="MKMapRectDivide(MKMapRect;MKMapRect*;MKMapRect*;double;CGRectEdge):void"/>
    <method name="MKMapRectEqualToRect(MKMapRect;MKMapRect):BOOL"/>
    <method name="MKMapRectGetHeight(MKMapRect):double"/>
    <method name="MKMapRectGetMaxX(MKMapRect):double"/>
    <method name="MKMapRectGetMaxY(MKMapRect):double"/>
    <method name="MKMapRectGetMidX(MKMapRect):double"/>
    <method name="MKMapRectGetMidY(MKMapRect):double"/>
    <method name="MKMapRectGetMinX(MKMapRect):double"/>
    <method name="MKMapRectGetMinY(MKMapRect):double"/>
    <method name="MKMapRectGetWidth(MKMapRect):double"/>
    <method name="MKMapRectInset(MKMapRect;double;double):MKMapRect"/>
    <method name="MKMapRectIntersection(MKMapRect;MKMapRect):MKMapRect"/>
    <method name="MKMapRectIntersectsRect(MKMapRect;MKMapRect):BOOL"/>
    <method name="MKMapRectIsEmpty(MKMapRect):BOOL"/>
    <method name="MKMapRectIsNull(MKMapRect):BOOL"/>
    <method name="MKMapRectMake(double;double;double;double):MKMapRect"/>
    <method name="MKMapRectOffset(MKMapRect;double;double):MKMapRect"/>
    <method name="MKMapRectRemainder(MKMapRect):MKMapRect"/>
    <method name="MKMapRectSpans180thMeridian(MKMapRect):BOOL"/>
    <method name="MKMapRectUnion(MKMapRect;MKMapRect):MKMapRect"/>
    <method name="MKMapSizeEqualToSize(MKMapSize;MKMapSize):BOOL"/>
    <method name="MKMapSizeMake(double;double):MKMapSize"/>
    <method name="MKMetersBetweenMapPoints(MKMapPoint;MKMapPoint):CLLocationDistance"/>
    <method name="MKMetersPerMapPointAtLatitude(CLLocationDegrees):CLLocationDistance"/>
    <method name="MKRoadWidthAtZoomScale(MKZoomScale):CGFloat"/>
    <method name="MKStringFromMapPoint(MKMapPoint):NSString*"/>
    <method name="MKStringFromMapRect(MKMapRect):NSString*"/>
    <method name="MKStringFromMapSize(MKMapSize):NSString*"/>
    <method name="MPVolumeSettingsAlertHide():void"/>
    <method name="MPVolumeSettingsAlertIsVisible():BOOL"/>
    <method name="MPVolumeSettingsAlertShow():void"/>
    <method name="MTAudioProcessingTapCreate(CFAllocatorRef;const MTAudioProcessingTapCallbacks*;MTAudioProcessingTapCreationFlags;MTAudioProcessingTapRef*):OSStatus"/>
    <method name="MTAudioProcessingTapGetSourceAudio(MTAudioProcessingTapRef;CMItemCount;AudioBufferList*;MTAudioProcessingTapFlags*;CMTimeRange*;CMItemCount*):OSStatus"/>
    <method name="MTAudioProcessingTapGetStorage(MTAudioProcessingTapRef):void*"/>
    <method name="MTAudioProcessingTapGetTypeID():CFTypeID"/>
    <method name="MoveFile(LPCTSTR; LPCTSTR): BOOL"/>
    <method name="MultiByteToWideChar(UINT;DWORD;LPCSTR;int;LPWSTR;int):int"/>
    <method name="MusicDeviceMIDIEvent(MusicDeviceComponent;UInt32;UInt32;UInt32;UInt32):OSStatus"/>
    <method name="MusicDevicePrepareInstrument(MusicDeviceComponent;MusicDeviceInstrumentID):OSStatus"/>
    <method name="MusicDeviceReleaseInstrument(MusicDeviceComponent;MusicDeviceInstrumentID):OSStatus"/>
    <method name="MusicDeviceStartNote(MusicDeviceComponent;MusicDeviceInstrumentID;MusicDeviceGroupID;NoteInstanceID*;UInt32;const MusicDeviceNoteParams*):OSStatus"/>
    <method name="MusicDeviceStopNote(MusicDeviceComponent;MusicDeviceGroupID;NoteInstanceID;UInt32):OSStatus"/>
    <method name="MusicDeviceSysEx(MusicDeviceComponent;const UInt8*;UInt32):OSStatus"/>
    <method name="MusicEventIteratorDeleteEvent(MusicEventIterator):OSStatus"/>
    <method name="MusicEventIteratorGetEventInfo(MusicEventIterator;MusicTimeStamp*;MusicEventType*;const void**;UInt32*):OSStatus"/>
    <method name="MusicEventIteratorHasCurrentEvent(MusicEventIterator;Boolean*):OSStatus"/>
    <method name="MusicEventIteratorHasNextEvent(MusicEventIterator;Boolean*):OSStatus"/>
    <method name="MusicEventIteratorHasPreviousEvent(MusicEventIterator;Boolean*):OSStatus"/>
    <method name="MusicEventIteratorNextEvent(MusicEventIterator):OSStatus"/>
    <method name="MusicEventIteratorPreviousEvent(MusicEventIterator):OSStatus"/>
    <method name="MusicEventIteratorSeek(MusicEventIterator;MusicTimeStamp):OSStatus"/>
    <method name="MusicEventIteratorSetEventInfo(MusicEventIterator;MusicEventType;const void*):OSStatus"/>
    <method name="MusicEventIteratorSetEventTime(MusicEventIterator;MusicTimeStamp):OSStatus"/>
    <method name="MusicPlayerGetBeatsForHostTime(MusicPlayer;UInt64;MusicTimeStamp*):OSStatus"/>
    <method name="MusicPlayerGetHostTimeForBeats(MusicPlayer;MusicTimeStamp;UInt64*):OSStatus"/>
    <method name="MusicPlayerGetPlayRateScalar(MusicPlayer;Float64*):OSStatus"/>
    <method name="MusicPlayerGetSequence(MusicPlayer;MusicSequence*):OSStatus"/>
    <method name="MusicPlayerGetTime(MusicPlayer;MusicTimeStamp*):OSStatus"/>
    <method name="MusicPlayerIsPlaying(MusicPlayer;Boolean*):OSStatus"/>
    <method name="MusicPlayerPreroll(MusicPlayer):OSStatus"/>
    <method name="MusicPlayerSetPlayRateScalar(MusicPlayer;Float64):OSStatus"/>
    <method name="MusicPlayerSetSequence(MusicPlayer;MusicSequence):OSStatus"/>
    <method name="MusicPlayerSetTime(MusicPlayer;MusicTimeStamp):OSStatus"/>
    <method name="MusicPlayerStart(MusicPlayer):OSStatus"/>
    <method name="MusicPlayerStop(MusicPlayer):OSStatus"/>
    <method name="MusicSequenceBarBeatTimeToBeats(MusicSequence;const CABarBeatTime*;MusicTimeStamp*):OSStatus"/>
    <method name="MusicSequenceBeatsToBarBeatTime(MusicSequence;MusicTimeStamp;UInt32;CABarBeatTime*):OSStatus"/>
    <method name="MusicSequenceDisposeTrack(MusicSequence;MusicTrack):OSStatus"/>
    <method name="MusicSequenceFileCreate(MusicSequence;CFURLRef;MusicSequenceFileTypeID;MusicSequenceFileFlags;SInt16):OSStatus"/>
    <method name="MusicSequenceFileCreateData(MusicSequence;MusicSequenceFileTypeID;MusicSequenceFileFlags;SInt16;CFDataRef*):OSStatus"/>
    <method name="MusicSequenceFileLoad(MusicSequence;CFURLRef;MusicSequenceFileTypeID;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceFileLoadData(MusicSequence;CFDataRef;MusicSequenceFileTypeID;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceGetAUGraph(MusicSequence;AUGraph*):OSStatus"/>
    <method name="MusicSequenceGetBeatsForSeconds(MusicSequence;Float64;MusicTimeStamp*):OSStatus"/>
    <method name="MusicSequenceGetIndTrack(MusicSequence;UInt32;MusicTrack*):OSStatus"/>
    <method name="MusicSequenceGetInfoDictionary(MusicSequence):CFDictionaryRef"/>
    <method name="MusicSequenceGetSMPTEResolution(SInt16;SignedByte*;Byte*):void"/>
    <method name="MusicSequenceGetSecondsForBeats(MusicSequence;MusicTimeStamp;Float64*):OSStatus"/>
    <method name="MusicSequenceGetSequenceType(MusicSequence;MusicSequenceType*):OSStatus"/>
    <method name="MusicSequenceGetTempoTrack(MusicSequence;MusicTrack*):OSStatus"/>
    <method name="MusicSequenceGetTrackCount(MusicSequence;UInt32*):OSStatus"/>
    <method name="MusicSequenceGetTrackIndex(MusicSequence;MusicTrack;UInt32*):OSStatus"/>
    <method name="MusicSequenceLoadSMFData(MusicSequence;CFDataRef):OSStatus"/>
    <method name="MusicSequenceLoadSMFDataWithFlags(MusicSequence;CFDataRef;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceLoadSMFWithFlags(MusicSequence;const struct FSRef*;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceNewTrack(MusicSequence;MusicTrack*):OSStatus"/>
    <method name="MusicSequenceReverse(MusicSequence):OSStatus"/>
    <method name="MusicSequenceSaveMIDIFile(MusicSequence;const struct FSRef*;CFStringRef;UInt16;UInt32):OSStatus"/>
    <method name="MusicSequenceSaveSMFData(MusicSequence;CFDataRef*;UInt16):OSStatus"/>
    <method name="MusicSequenceSetAUGraph(MusicSequence;AUGraph):OSStatus"/>
    <method name="MusicSequenceSetMIDIEndpoint(MusicSequence;MIDIEndpointRef):OSStatus"/>
    <method name="MusicSequenceSetSMPTEResolution(SignedByte;Byte):SInt16"/>
    <method name="MusicSequenceSetSequenceType(MusicSequence;MusicSequenceType):OSStatus"/>
    <method name="MusicSequenceSetUserCallback(MusicSequence;MusicSequenceUserCallback;void*):OSStatus"/>
    <method name="MusicTrackClear(MusicTrack;MusicTimeStamp;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackCopyInsert(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTrack;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackCut(MusicTrack;MusicTimeStamp;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackGetDestMIDIEndpoint(MusicTrack;MIDIEndpointRef*):OSStatus"/>
    <method name="MusicTrackGetDestNode(MusicTrack;AUNode*):OSStatus"/>
    <method name="MusicTrackGetProperty(MusicTrack;UInt32;void*;UInt32*):OSStatus"/>
    <method name="MusicTrackGetSequence(MusicTrack;MusicSequence*):OSStatus"/>
    <method name="MusicTrackMerge(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTrack;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackMoveEvents(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackNewAUPresetEvent(MusicTrack;MusicTimeStamp;const AUPresetEvent*):OSStatus"/>
    <method name="MusicTrackNewExtendedNoteEvent(MusicTrack;MusicTimeStamp;const ExtendedNoteOnEvent*):OSStatus"/>
    <method name="MusicTrackNewExtendedTempoEvent(MusicTrack;MusicTimeStamp;Float64):OSStatus"/>
    <method name="MusicTrackNewMIDIChannelEvent(MusicTrack;MusicTimeStamp;const MIDIChannelMessage*):OSStatus"/>
    <method name="MusicTrackNewMIDINoteEvent(MusicTrack;MusicTimeStamp;const MIDINoteMessage*):OSStatus"/>
    <method name="MusicTrackNewMIDIRawDataEvent(MusicTrack;MusicTimeStamp;const MIDIRawData*):OSStatus"/>
    <method name="MusicTrackNewMetaEvent(MusicTrack;MusicTimeStamp;const MIDIMetaEvent*):OSStatus"/>
    <method name="MusicTrackNewParameterEvent(MusicTrack;MusicTimeStamp;const ParameterEvent*):OSStatus"/>
    <method name="MusicTrackNewUserEvent(MusicTrack;MusicTimeStamp;const MusicEventUserData*):OSStatus"/>
    <method name="MusicTrackSetDestMIDIEndpoint(MusicTrack;MIDIEndpointRef):OSStatus"/>
    <method name="MusicTrackSetDestNode(MusicTrack;AUNode):OSStatus"/>
    <method name="MusicTrackSetProperty(MusicTrack;UInt32;void*;UInt32):OSStatus"/>
    <method name="NAME_CONSTRAINTS_free(NAME_CONSTRAINTS*):void"/>
    <method name="NAME_CONSTRAINTS_new():NAME_CONSTRAINTS*"/>
    <method name="NCONF_WIN32():CONF_METHOD*"/>
    <method name="NCONF_default():CONF_METHOD*"/>
    <method name="NCONF_dump_bio(const CONF*;BIO*):int"/>
    <method name="NCONF_dump_fp(const CONF*;FILE*):int"/>
    <method name="NCONF_free(CONF*):void"/>
    <method name="NCONF_free_data(CONF*):void"/>
    <method name="NCONF_get_number_e(const CONF*;const char*;const char*;long*):int"/>
    <method name="NCONF_get_section(const CONF*;const char*):STACK*"/>
    <method name="NCONF_get_string(const CONF*;const char*;const char*):char*"/>
    <method name="NCONF_load(CONF*;const char*;long*):int"/>
    <method name="NCONF_load_bio(CONF*;BIO*;long*):int"/>
    <method name="NCONF_load_fp(CONF*;FILE*;long*):int"/>
    <method name="NCONF_new(CONF_METHOD*):CONF*"/>
    <method name="NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE*):void"/>
    <method name="NETSCAPE_CERT_SEQUENCE_new():NETSCAPE_CERT_SEQUENCE*"/>
    <method name="NETSCAPE_SPKAC_free(NETSCAPE_SPKAC*):void"/>
    <method name="NETSCAPE_SPKAC_new():NETSCAPE_SPKAC*"/>
    <method name="NETSCAPE_SPKI_b64_decode(const char*;int):NETSCAPE_SPKI*"/>
    <method name="NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI*):char*"/>
    <method name="NETSCAPE_SPKI_free(NETSCAPE_SPKI*):void"/>
    <method name="NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI*):EVP_PKEY*"/>
    <method name="NETSCAPE_SPKI_new():NETSCAPE_SPKI*"/>
    <method name="NETSCAPE_SPKI_print(BIO*;NETSCAPE_SPKI*):int"/>
    <method name="NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI*;EVP_PKEY*):int"/>
    <method name="NETSCAPE_SPKI_sign(NETSCAPE_SPKI*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="NETSCAPE_SPKI_verify(NETSCAPE_SPKI*;EVP_PKEY*):int"/>
    <method name="NOTICEREF_free(NOTICEREF*):void"/>
    <method name="NOTICEREF_new():NOTICEREF*"/>
    <method name="NSAddLibrary(const char*):_Bool"/>
    <method name="NSAddLibraryWithSearching(const char*):_Bool"/>
    <method name="NSAddressOfSymbol(NSSymbol):void*"/>
    <method name="NSAllocateMemoryPages(NSUInteger):void*"/>
    <method name="NSAllocateObject(Class*;NSUInteger;NSZone*):id"/>
    <method name="NSClassFromString(NSString*):Class*"/>
    <method name="NSConvertHostDoubleToSwapped(double):NSSwappedDouble"/>
    <method name="NSConvertHostFloatToSwapped(float):NSSwappedFloat"/>
    <method name="NSConvertSwappedDoubleToHost(NSSwappedDouble):double"/>
    <method name="NSConvertSwappedFloatToHost(NSSwappedFloat):float"/>
    <method name="NSCopyMemoryPages(const void*;void*;NSUInteger):void"/>
    <method name="NSCopyObject(id;NSUInteger;NSZone*):id"/>
    <method name="NSCreateObjectFileImageFromFile(const char*;NSObjectFileImage*):NSObjectFileImageReturnCode"/>
    <method name="NSCreateObjectFileImageFromMemory(const void*;size_t;NSObjectFileImage*):NSObjectFileImageReturnCode"/>
    <method name="NSCreateZone(NSUInteger;NSUInteger;BOOL):NSZone*"/>
    <method name="NSDeallocateMemoryPages(void*;NSUInteger):void"/>
    <method name="NSDeallocateObject(id):void"/>
    <method name="NSDecimalAdd(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalCompact(NSDecimal*):void"/>
    <method name="NSDecimalCompare(const NSDecimal*;const NSDecimal*):NSComparisonResult"/>
    <method name="NSDecimalCopy(NSDecimal*;const NSDecimal*):void"/>
    <method name="NSDecimalDivide(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalIsNotANumber(const NSDecimal*):BOOL"/>
    <method name="NSDecimalMultiply(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalMultiplyByPowerOf10(NSDecimal*;const NSDecimal*;short;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalNormalize(NSDecimal*;NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalPower(NSDecimal*;const NSDecimal*;NSUInteger;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalRound(NSDecimal*;const NSDecimal*;NSInteger;NSRoundingMode):void"/>
    <method name="NSDecimalString(const NSDecimal*;id):NSString*"/>
    <method name="NSDecimalSubtract(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecrementExtraRefCountWasZero(id):BOOL"/>
    <method name="NSDefaultMallocZone():NSZone*"/>
    <method name="NSDestroyObjectFileImage(NSObjectFileImage):_Bool"/>
    <method name="NSEqualRanges(NSRange;NSRange):BOOL"/>
    <method name="NSExtraRefCount(id):NSUInteger"/>
    <method name="NSFullUserName():NSString*"/>
    <method name="NSGetSectionDataInObjectFileImage(NSObjectFileImage;const char*;const char*;size_t*):void*"/>
    <method name="NSGetSizeAndAlignment(const char*;NSUInteger*;NSUInteger*):const char*"/>
    <method name="NSGetUncaughtExceptionHandler():(*)(NSException*):void"/>
    <method name="NSHasModInitObjectFileImage(NSObjectFileImage):_Bool"/>
    <method name="NSHomeDirectory():NSString*"/>
    <method name="NSHomeDirectoryForUser(NSString*):NSString*"/>
    <method name="NSHostByteOrder():long"/>
    <method name="NSIncrementExtraRefCount(id):void"/>
    <method name="NSInstallLinkEditErrorHandlers(const NSLinkEditErrorHandlers*):void"/>
    <method name="NSIntersectionRange(NSRange;NSRange):NSRange"/>
    <method name="NSIsSymbolDefinedInObjectFileImage(NSObjectFileImage;const char*):_Bool"/>
    <method name="NSIsSymbolNameDefined(const char*):_Bool"/>
    <method name="NSIsSymbolNameDefinedInImage(const struct mach_header*;const char*):_Bool"/>
    <method name="NSIsSymbolNameDefinedWithHint(const char*;const char*):_Bool"/>
    <method name="NSLibraryNameForModule(NSModule):const char*"/>
    <method name="NSLinkEditError(NSLinkEditErrors*;int*;const char**;const char**):void"/>
    <method name="NSLinkModule(NSObjectFileImage;const char*;uint32_t):NSModule"/>
    <method name="NSLocationInRange(NSUInteger;NSRange):BOOL"/>
    <method name="NSLog():int"/>
    <method name="NSLog(NSString*, ...):void"/>
    <method name="NSLogPageSize():NSUInteger"/>
    <method name="NSLogv(NSString*;va_list):void"/>
    <method name="NSLookupAndBindSymbol(const char*):NSSymbol"/>
    <method name="NSLookupAndBindSymbolWithHint(const char*;const char*):NSSymbol"/>
    <method name="NSLookupSymbolInImage(const struct mach_header*;const char*;uint32_t):NSSymbol"/>
    <method name="NSLookupSymbolInModule(NSModule;const char*):NSSymbol"/>
    <method name="NSMakeCollectable(CFTypeRef):id"/>
    <method name="NSMakeRange(NSUInteger;NSUInteger):NSRange"/>
    <method name="NSMaxRange(NSRange):NSUInteger"/>
    <method name="NSModuleForSymbol(NSSymbol):NSModule"/>
    <method name="NSNameOfModule(NSModule):const char*"/>
    <method name="NSNameOfSymbol(NSSymbol):const char*"/>
    <method name="NSPStartup(LPGUID;LPNSP_ROUTINE):INT"/>
    <method name="NSPageSize():NSUInteger"/>
    <method name="NSProtocolFromString(NSString*):Protocol*"/>
    <method name="NSRangeFromString(NSString*):NSRange"/>
    <method name="NSRealMemoryAvailable():NSUInteger"/>
    <method name="NSRecycleZone(NSZone*):void"/>
    <method name="NSRoundDownToMultipleOfPageSize(NSUInteger):NSUInteger"/>
    <method name="NSRoundUpToMultipleOfPageSize(NSUInteger):NSUInteger"/>
    <method name="NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory;NSSearchPathDomainMask;BOOL):NSArray*"/>
    <method name="NSSelectorFromString(NSString*):SEL"/>
    <method name="NSSetUncaughtExceptionHandler((*)(NSException*):void):void"/>
    <method name="NSSetZoneName(NSZone*;NSString*):void"/>
    <method name="NSShouldRetainWithZone(id;NSZone*):BOOL"/>
    <method name="NSStringFromCGAffineTransform(CGAffineTransform):NSString*"/>
    <method name="NSStringFromCGPoint(CGPoint):NSString*"/>
    <method name="NSStringFromCGRect(CGRect):NSString*"/>
    <method name="NSStringFromCGSize(CGSize):NSString*"/>
    <method name="NSStringFromClass(Class*):NSString*"/>
    <method name="NSStringFromGLKMatrix2(GLKMatrix2):NSString*"/>
    <method name="NSStringFromGLKMatrix3(GLKMatrix3):NSString*"/>
    <method name="NSStringFromGLKMatrix4(GLKMatrix4):NSString*"/>
    <method name="NSStringFromGLKQuaternion(GLKQuaternion):NSString*"/>
    <method name="NSStringFromGLKVector2(GLKVector2):NSString*"/>
    <method name="NSStringFromGLKVector3(GLKVector3):NSString*"/>
    <method name="NSStringFromGLKVector4(GLKVector4):NSString*"/>
    <method name="NSStringFromProtocol(Protocol*):NSString*"/>
    <method name="NSStringFromRange(NSRange):NSString*"/>
    <method name="NSStringFromSelector(SEL):NSString*"/>
    <method name="NSStringFromUIEdgeInsets(UIEdgeInsets):NSString*"/>
    <method name="NSStringFromUIOffset(UIOffset):NSString*"/>
    <method name="NSSwapBigDoubleToHost(NSSwappedDouble):double"/>
    <method name="NSSwapBigFloatToHost(NSSwappedFloat):float"/>
    <method name="NSSwapBigIntToHost(unsigned int):unsigned int"/>
    <method name="NSSwapBigLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NSSwapBigLongToHost(unsigned long):unsigned long"/>
    <method name="NSSwapBigShortToHost(unsigned short):unsigned short"/>
    <method name="NSSwapDouble(NSSwappedDouble):NSSwappedDouble"/>
    <method name="NSSwapFloat(NSSwappedFloat):NSSwappedFloat"/>
    <method name="NSSwapHostDoubleToBig(double):NSSwappedDouble"/>
    <method name="NSSwapHostDoubleToLittle(double):NSSwappedDouble"/>
    <method name="NSSwapHostFloatToBig(float):NSSwappedFloat"/>
    <method name="NSSwapHostFloatToLittle(float):NSSwappedFloat"/>
    <method name="NSSwapHostIntToBig(unsigned int):unsigned int"/>
    <method name="NSSwapHostIntToLittle(unsigned int):unsigned int"/>
    <method name="NSSwapHostLongLongToBig(unsigned long long):unsigned long long"/>
    <method name="NSSwapHostLongLongToLittle(unsigned long long):unsigned long long"/>
    <method name="NSSwapHostLongToBig(unsigned long):unsigned long"/>
    <method name="NSSwapHostLongToLittle(unsigned long):unsigned long"/>
    <method name="NSSwapHostShortToBig(unsigned short):unsigned short"/>
    <method name="NSSwapHostShortToLittle(unsigned short):unsigned short"/>
    <method name="NSSwapInt(unsigned int):unsigned int"/>
    <method name="NSSwapLittleDoubleToHost(NSSwappedDouble):double"/>
    <method name="NSSwapLittleFloatToHost(NSSwappedFloat):float"/>
    <method name="NSSwapLittleIntToHost(unsigned int):unsigned int"/>
    <method name="NSSwapLittleLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NSSwapLittleLongToHost(unsigned long):unsigned long"/>
    <method name="NSSwapLittleShortToHost(unsigned short):unsigned short"/>
    <method name="NSSwapLong(unsigned long):unsigned long"/>
    <method name="NSSwapLongLong(unsigned long long):unsigned long long"/>
    <method name="NSSwapShort(unsigned short):unsigned short"/>
    <method name="NSSymbolDefinitionCountInObjectFileImage(NSObjectFileImage):uint32_t"/>
    <method name="NSSymbolDefinitionNameInObjectFileImage(NSObjectFileImage;uint32_t):const char*"/>
    <method name="NSSymbolReferenceCountInObjectFileImage(NSObjectFileImage):uint32_t"/>
    <method name="NSSymbolReferenceNameInObjectFileImage(NSObjectFileImage;uint32_t;_Bool*):const char*"/>
    <method name="NSTextAlignmentFromCTTextAlignment(CTTextAlignment):NSTextAlignment"/>
    <method name="NSTextAlignmentToCTTextAlignment(NSTextAlignment):CTTextAlignment"/>
    <method name="NSUnLinkModule(NSModule;uint32_t):_Bool"/>
    <method name="NSUnionRange(NSRange;NSRange):NSRange"/>
    <method name="NSUserName():NSString*"/>
    <method name="NSVersionOfLinkTimeLibrary(const char*):int32_t"/>
    <method name="NSVersionOfRunTimeLibrary(const char*):int32_t"/>
    <method name="NSZoneCalloc(NSZone*;NSUInteger;NSUInteger):void*"/>
    <method name="NSZoneFree(NSZone*;void*):void"/>
    <method name="NSZoneFromPointer(void*):NSZone*"/>
    <method name="NSZoneMalloc(NSZone*;NSUInteger):void*"/>
    <method name="NSZoneName(NSZone*):NSString*"/>
    <method name="NSZoneRealloc(NSZone*;void*;NSUInteger):void*"/>
    <method name="NXCombineCpuSubtypes(cpu_type_t;cpu_subtype_t;cpu_subtype_t):cpu_subtype_t"/>
    <method name="NXConvertHostDoubleToSwapped(double):NXSwappedDouble"/>
    <method name="NXConvertHostFloatToSwapped(float):NXSwappedFloat"/>
    <method name="NXConvertSwappedDoubleToHost(NXSwappedDouble):double"/>
    <method name="NXConvertSwappedFloatToHost(NXSwappedFloat):float"/>
    <method name="NXFindBestFatArch(cpu_type_t;cpu_subtype_t;struct fat_arch*;uint32_t):struct fat_arch*"/>
    <method name="NXGetAllArchInfos():const NXArchInfo*"/>
    <method name="NXGetArchInfoFromCpuType(cpu_type_t;cpu_subtype_t):const NXArchInfo*"/>
    <method name="NXGetArchInfoFromName(const char*):const NXArchInfo*"/>
    <method name="NXGetLocalArchInfo():const NXArchInfo*"/>
    <method name="NXHostByteOrder():enum NXByteOrder"/>
    <method name="NXSwapBigDoubleToHost(NXSwappedDouble):double"/>
    <method name="NXSwapBigFloatToHost(NXSwappedFloat):float"/>
    <method name="NXSwapBigIntToHost(unsigned int):unsigned int"/>
    <method name="NXSwapBigLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NXSwapBigLongToHost(unsigned long):unsigned long"/>
    <method name="NXSwapBigShortToHost(unsigned short):unsigned short"/>
    <method name="NXSwapDouble(NXSwappedDouble):NXSwappedDouble"/>
    <method name="NXSwapFloat(NXSwappedFloat):NXSwappedFloat"/>
    <method name="NXSwapHostDoubleToBig(double):NXSwappedDouble"/>
    <method name="NXSwapHostDoubleToLittle(double):NXSwappedDouble"/>
    <method name="NXSwapHostFloatToBig(float):NXSwappedFloat"/>
    <method name="NXSwapHostFloatToLittle(float):NXSwappedFloat"/>
    <method name="NXSwapHostIntToBig(unsigned int):unsigned int"/>
    <method name="NXSwapHostIntToLittle(unsigned int):unsigned int"/>
    <method name="NXSwapHostLongLongToBig(unsigned long long):unsigned long long"/>
    <method name="NXSwapHostLongLongToLittle(unsigned long long):unsigned long long"/>
    <method name="NXSwapHostLongToBig(unsigned long):unsigned long"/>
    <method name="NXSwapHostLongToLittle(unsigned long):unsigned long"/>
    <method name="NXSwapHostShortToBig(unsigned short):unsigned short"/>
    <method name="NXSwapHostShortToLittle(unsigned short):unsigned short"/>
    <method name="NXSwapInt(unsigned int):unsigned int"/>
    <method name="NXSwapLittleDoubleToHost(NXSwappedDouble):double"/>
    <method name="NXSwapLittleFloatToHost(NXSwappedFloat):float"/>
    <method name="NXSwapLittleIntToHost(unsigned int):unsigned int"/>
    <method name="NXSwapLittleLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NXSwapLittleLongToHost(unsigned long):unsigned long"/>
    <method name="NXSwapLittleShortToHost(unsigned short):unsigned short"/>
    <method name="NXSwapLong(unsigned long):unsigned long"/>
    <method name="NXSwapLongLong(unsigned long long):unsigned long long"/>
    <method name="NXSwapShort(unsigned short):unsigned short"/>
    <method name="NewAUGraph(AUGraph*):OSStatus"/>
    <method name="NewBase64Decode(const char*;size_t;size_t*):void*"/>
    <method name="NewBase64Encode(const void*;size_t;_Bool;size_t*):char*"/>
    <method name="NewMusicEventIterator(MusicTrack;MusicEventIterator*):OSStatus"/>
    <method name="NewMusicPlayer(MusicPlayer*):OSStatus"/>
    <method name="NewMusicSequence(MusicSequence*):OSStatus"/>
    <method name="NewMusicTrackFrom(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTrack*):OSStatus"/>
    <method name="OBJ_NAME_add(const char*;int;const char*):int"/>
    <method name="OBJ_NAME_cleanup(int):void"/>
    <method name="OBJ_NAME_do_all(int;(*)(const OBJ_NAME*;void*):void*;void*):void"/>
    <method name="OBJ_NAME_do_all_sorted(int;(*)(const OBJ_NAME*;void*):void*;void*):void"/>
    <method name="OBJ_NAME_get(const char*;int):const char*"/>
    <method name="OBJ_NAME_init():int"/>
    <method name="OBJ_NAME_new_index((*)(const char*):unsigned long*;(*)(const char*;const char*):int*;(*)(const char*;int;const char*):void*):int"/>
    <method name="OBJ_NAME_remove(const char*;int):int"/>
    <method name="OBJ_add_object(const ASN1_OBJECT*):int"/>
    <method name="OBJ_bsearch(const char*;const char*;int;int;(*)(const void*;const void*):int*):const char*"/>
    <method name="OBJ_bsearch_ex(const char*;const char*;int;int;(*)(const void*;const void*):int*;int):const char*"/>
    <method name="OBJ_cleanup():void"/>
    <method name="OBJ_cmp(const ASN1_OBJECT*;const ASN1_OBJECT*):int"/>
    <method name="OBJ_create(const char*;const char*;const char*):int"/>
    <method name="OBJ_create_objects(BIO*):int"/>
    <method name="OBJ_dup(const ASN1_OBJECT*):ASN1_OBJECT*"/>
    <method name="OBJ_ln2nid(const char*):int"/>
    <method name="OBJ_new_nid(int):int"/>
    <method name="OBJ_nid2ln(int):const char*"/>
    <method name="OBJ_nid2obj(int):ASN1_OBJECT*"/>
    <method name="OBJ_nid2sn(int):const char*"/>
    <method name="OBJ_obj2nid(const ASN1_OBJECT*):int"/>
    <method name="OBJ_obj2txt(char*;int;const ASN1_OBJECT*;int):int"/>
    <method name="OBJ_sn2nid(const char*):int"/>
    <method name="OBJ_txt2nid(const char*):int"/>
    <method name="OBJ_txt2obj(const char*;int):ASN1_OBJECT*"/>
    <method name="OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_BASICRESP_add_ext(OCSP_BASICRESP*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_BASICRESP_delete_ext(OCSP_BASICRESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_BASICRESP_free(OCSP_BASICRESP*):void"/>
    <method name="OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP*;int;int*;int*):void*"/>
    <method name="OCSP_BASICRESP_get_ext(OCSP_BASICRESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP*;int;int):int"/>
    <method name="OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP*;int;int):int"/>
    <method name="OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP*):int"/>
    <method name="OCSP_BASICRESP_new():OCSP_BASICRESP*"/>
    <method name="OCSP_CERTID_free(OCSP_CERTID*):void"/>
    <method name="OCSP_CERTID_new():OCSP_CERTID*"/>
    <method name="OCSP_CERTSTATUS_free(OCSP_CERTSTATUS*):void"/>
    <method name="OCSP_CERTSTATUS_new():OCSP_CERTSTATUS*"/>
    <method name="OCSP_CRLID_free(OCSP_CRLID*):void"/>
    <method name="OCSP_CRLID_new():OCSP_CRLID*"/>
    <method name="OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_ONEREQ_add_ext(OCSP_ONEREQ*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_ONEREQ_delete_ext(OCSP_ONEREQ*;int):X509_EXTENSION*"/>
    <method name="OCSP_ONEREQ_free(OCSP_ONEREQ*):void"/>
    <method name="OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ*;int;int*;int*):void*"/>
    <method name="OCSP_ONEREQ_get_ext(OCSP_ONEREQ*;int):X509_EXTENSION*"/>
    <method name="OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ*;int;int):int"/>
    <method name="OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ*;int;int):int"/>
    <method name="OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ*):int"/>
    <method name="OCSP_ONEREQ_new():OCSP_ONEREQ*"/>
    <method name="OCSP_REQINFO_free(OCSP_REQINFO*):void"/>
    <method name="OCSP_REQINFO_new():OCSP_REQINFO*"/>
    <method name="OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_REQUEST_add_ext(OCSP_REQUEST*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_REQUEST_delete_ext(OCSP_REQUEST*;int):X509_EXTENSION*"/>
    <method name="OCSP_REQUEST_free(OCSP_REQUEST*):void"/>
    <method name="OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST*;int;int*;int*):void*"/>
    <method name="OCSP_REQUEST_get_ext(OCSP_REQUEST*;int):X509_EXTENSION*"/>
    <method name="OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST*;int;int):int"/>
    <method name="OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST*;int;int):int"/>
    <method name="OCSP_REQUEST_get_ext_count(OCSP_REQUEST*):int"/>
    <method name="OCSP_REQUEST_new():OCSP_REQUEST*"/>
    <method name="OCSP_REQUEST_print(BIO*;OCSP_REQUEST*;unsigned long):int"/>
    <method name="OCSP_RESPBYTES_free(OCSP_RESPBYTES*):void"/>
    <method name="OCSP_RESPBYTES_new():OCSP_RESPBYTES*"/>
    <method name="OCSP_RESPDATA_free(OCSP_RESPDATA*):void"/>
    <method name="OCSP_RESPDATA_new():OCSP_RESPDATA*"/>
    <method name="OCSP_RESPID_free(OCSP_RESPID*):void"/>
    <method name="OCSP_RESPID_new():OCSP_RESPID*"/>
    <method name="OCSP_RESPONSE_free(OCSP_RESPONSE*):void"/>
    <method name="OCSP_RESPONSE_new():OCSP_RESPONSE*"/>
    <method name="OCSP_RESPONSE_print(BIO*;OCSP_RESPONSE*;unsigned long):int"/>
    <method name="OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO*):void"/>
    <method name="OCSP_REVOKEDINFO_new():OCSP_REVOKEDINFO*"/>
    <method name="OCSP_SERVICELOC_free(OCSP_SERVICELOC*):void"/>
    <method name="OCSP_SERVICELOC_new():OCSP_SERVICELOC*"/>
    <method name="OCSP_SIGNATURE_free(OCSP_SIGNATURE*):void"/>
    <method name="OCSP_SIGNATURE_new():OCSP_SIGNATURE*"/>
    <method name="OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_SINGLERESP_free(OCSP_SINGLERESP*):void"/>
    <method name="OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP*;int;int*;int*):void*"/>
    <method name="OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP*;int;int):int"/>
    <method name="OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP*;int;int):int"/>
    <method name="OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP*):int"/>
    <method name="OCSP_SINGLERESP_new():OCSP_SINGLERESP*"/>
    <method name="OCSP_accept_responses_new(char**):X509_EXTENSION*"/>
    <method name="OCSP_archive_cutoff_new(char*):X509_EXTENSION*"/>
    <method name="OCSP_basic_add1_cert(OCSP_BASICRESP*;X509*):int"/>
    <method name="OCSP_basic_add1_nonce(OCSP_BASICRESP*;unsigned char*;int):int"/>
    <method name="OCSP_basic_add1_status(OCSP_BASICRESP*;OCSP_CERTID*;int;int;ASN1_TIME*;ASN1_TIME*;ASN1_TIME*):OCSP_SINGLERESP*"/>
    <method name="OCSP_basic_sign(OCSP_BASICRESP*;X509*;EVP_PKEY*;const EVP_MD*;STACK*;unsigned long):int"/>
    <method name="OCSP_basic_verify(OCSP_BASICRESP*;STACK*;X509_STORE*;unsigned long):int"/>
    <method name="OCSP_cert_id_new(const EVP_MD*;X509_NAME*;ASN1_BIT_STRING*;ASN1_INTEGER*):OCSP_CERTID*"/>
    <method name="OCSP_cert_status_str(long):char*"/>
    <method name="OCSP_cert_to_id(const EVP_MD*;X509*;X509*):OCSP_CERTID*"/>
    <method name="OCSP_check_nonce(OCSP_REQUEST*;OCSP_BASICRESP*):int"/>
    <method name="OCSP_check_validity(ASN1_GENERALIZEDTIME*;ASN1_GENERALIZEDTIME*;long;long):int"/>
    <method name="OCSP_copy_nonce(OCSP_BASICRESP*;OCSP_REQUEST*):int"/>
    <method name="OCSP_crlID_new(char*;long*;char*):X509_EXTENSION*"/>
    <method name="OCSP_crl_reason_str(long):char*"/>
    <method name="OCSP_id_cmp(OCSP_CERTID*;OCSP_CERTID*):int"/>
    <method name="OCSP_id_get0_info(ASN1_OCTET_STRING**;ASN1_OBJECT**;ASN1_OCTET_STRING**;ASN1_INTEGER**;OCSP_CERTID*):int"/>
    <method name="OCSP_id_issuer_cmp(OCSP_CERTID*;OCSP_CERTID*):int"/>
    <method name="OCSP_onereq_get0_id(OCSP_ONEREQ*):OCSP_CERTID*"/>
    <method name="OCSP_parse_url(char*;char**;char**;char**;int*):int"/>
    <method name="OCSP_request_add0_id(OCSP_REQUEST*;OCSP_CERTID*):OCSP_ONEREQ*"/>
    <method name="OCSP_request_add1_cert(OCSP_REQUEST*;X509*):int"/>
    <method name="OCSP_request_add1_nonce(OCSP_REQUEST*;unsigned char*;int):int"/>
    <method name="OCSP_request_is_signed(OCSP_REQUEST*):int"/>
    <method name="OCSP_request_onereq_count(OCSP_REQUEST*):int"/>
    <method name="OCSP_request_onereq_get0(OCSP_REQUEST*;int):OCSP_ONEREQ*"/>
    <method name="OCSP_request_set1_name(OCSP_REQUEST*;X509_NAME*):int"/>
    <method name="OCSP_request_sign(OCSP_REQUEST*;X509*;EVP_PKEY*;const EVP_MD*;STACK*;unsigned long):int"/>
    <method name="OCSP_request_verify(OCSP_REQUEST*;STACK*;X509_STORE*;unsigned long):int"/>
    <method name="OCSP_resp_count(OCSP_BASICRESP*):int"/>
    <method name="OCSP_resp_find(OCSP_BASICRESP*;OCSP_CERTID*;int):int"/>
    <method name="OCSP_resp_find_status(OCSP_BASICRESP*;OCSP_CERTID*;int*;int*;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**):int"/>
    <method name="OCSP_resp_get0(OCSP_BASICRESP*;int):OCSP_SINGLERESP*"/>
    <method name="OCSP_response_create(int;OCSP_BASICRESP*):OCSP_RESPONSE*"/>
    <method name="OCSP_response_get1_basic(OCSP_RESPONSE*):OCSP_BASICRESP*"/>
    <method name="OCSP_response_status(OCSP_RESPONSE*):int"/>
    <method name="OCSP_response_status_str(long):char*"/>
    <method name="OCSP_sendreq_bio(BIO*;char*;OCSP_REQUEST*):OCSP_RESPONSE*"/>
    <method name="OCSP_single_get0_status(OCSP_SINGLERESP*;int*;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**):int"/>
    <method name="OCSP_url_svcloc_new(X509_NAME*;char**):X509_EXTENSION*"/>
    <method name="OPENSSL_add_all_algorithms_conf():void"/>
    <method name="OPENSSL_add_all_algorithms_noconf():void"/>
    <method name="OPENSSL_cleanse(void*;size_t):void"/>
    <method name="OPENSSL_config(const char*):void"/>
    <method name="OPENSSL_ia32cap_loc():unsigned long*"/>
    <method name="OPENSSL_issetugid():int"/>
    <method name="OPENSSL_load_builtin_modules():void"/>
    <method name="OPENSSL_no_config():void"/>
    <method name="OPEN_ALWAYS_Flag5th"/>
    <method name="OSAtomicAdd32(int32_t;volatile int32_t*):int32_t"/>
    <method name="OSAtomicAdd32Barrier(int32_t;volatile int32_t*):int32_t"/>
    <method name="OSAtomicAdd64(int64_t;volatile int64_t*):int64_t"/>
    <method name="OSAtomicAdd64Barrier(int64_t;volatile int64_t*):int64_t"/>
    <method name="OSAtomicAnd32(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicAnd32Barrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicAnd32Orig(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicAnd32OrigBarrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicCompareAndSwap32(int32_t;int32_t;volatile int32_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwap32Barrier(int32_t;int32_t;volatile int32_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwap64(int64_t;int64_t;volatile int64_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwap64Barrier(int64_t;int64_t;volatile int64_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwapInt(int;int;volatile int*):_Bool"/>
    <method name="OSAtomicCompareAndSwapIntBarrier(int;int;volatile int*):_Bool"/>
    <method name="OSAtomicCompareAndSwapLong(long;long;volatile long*):_Bool"/>
    <method name="OSAtomicCompareAndSwapLongBarrier(long;long;volatile long*):_Bool"/>
    <method name="OSAtomicCompareAndSwapPtr(void*;void*;volatile void**):_Bool"/>
    <method name="OSAtomicCompareAndSwapPtrBarrier(void*;void*;volatile void**):_Bool"/>
    <method name="OSAtomicDecrement32(volatile int32_t*):int32_t"/>
    <method name="OSAtomicDecrement32Barrier(volatile int32_t*):int32_t"/>
    <method name="OSAtomicDecrement64(volatile int64_t*):int64_t"/>
    <method name="OSAtomicDecrement64Barrier(volatile int64_t*):int64_t"/>
    <method name="OSAtomicDequeue(volatile struct &lt;anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/usr/include/libkern/OSAtomic.h:623:18&gt;*;size_t):void*"/>
    <method name="OSAtomicEnqueue(volatile struct &lt;anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/usr/include/libkern/OSAtomic.h:623:18&gt;*;void*;size_t):void"/>
    <method name="OSAtomicIncrement32(volatile int32_t*):int32_t"/>
    <method name="OSAtomicIncrement32Barrier(volatile int32_t*):int32_t"/>
    <method name="OSAtomicIncrement64(volatile int64_t*):int64_t"/>
    <method name="OSAtomicIncrement64Barrier(volatile int64_t*):int64_t"/>
    <method name="OSAtomicOr32(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicOr32Barrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicOr32Orig(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicOr32OrigBarrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicTestAndClear(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicTestAndClearBarrier(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicTestAndSet(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicTestAndSetBarrier(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicXor32(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicXor32Barrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicXor32Orig(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicXor32OrigBarrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSHostByteOrder():int32_t"/>
    <method name="OSMemoryBarrier():void"/>
    <method name="OSMemoryNotificationCreate(OSMemoryNotificationRef*):int"/>
    <method name="OSMemoryNotificationCurrentLevel():OSMemoryNotificationLevel"/>
    <method name="OSMemoryNotificationDestroy(OSMemoryNotificationRef):int"/>
    <method name="OSMemoryNotificationTimedWait(OSMemoryNotificationRef;OSMemoryNotificationLevel*;const struct timeval*):int"/>
    <method name="OSMemoryNotificationWait(OSMemoryNotificationRef;OSMemoryNotificationLevel*):int"/>
    <method name="OSSpinLockLock(volatile OSSpinLock*):void"/>
    <method name="OSSpinLockTry(volatile OSSpinLock*):_Bool"/>
    <method name="OSSpinLockUnlock(volatile OSSpinLock*):void"/>
    <method name="OTHERNAME_free(OTHERNAME*):void"/>
    <method name="OTHERNAME_new():OTHERNAME*"/>
    <method name="OpenSSLDie(const char*;int;const char*):void"/>
    <method name="OpenSSL_add_all_ciphers():void"/>
    <method name="OpenSSL_add_all_digests():void"/>
    <method name="OptionBasedTester"/>
    <method name="OutputAfter1stNotValidated"/>
    <method name="PBE2PARAM_free(PBE2PARAM*):void"/>
    <method name="PBE2PARAM_new():PBE2PARAM*"/>
    <method name="PBEPARAM_free(PBEPARAM*):void"/>
    <method name="PBEPARAM_new():PBEPARAM*"/>
    <method name="PBKDF2PARAM_free(PBKDF2PARAM*):void"/>
    <method name="PBKDF2PARAM_new():PBKDF2PARAM*"/>
    <method name="PB_DS_CLASS_NAME():int"/>
    <method name="PB_DS_CLASS_NAME(const int):int"/>
    <method name="PEM_ASN1_read(d2i_of_void*;const char*;FILE*;void**;pem_password_cb*;void*):void*"/>
    <method name="PEM_ASN1_read_bio(d2i_of_void*;const char*;BIO*;void**;pem_password_cb*;void*):void*"/>
    <method name="PEM_ASN1_write(i2d_of_void*;const char*;FILE*;char*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_ASN1_write_bio(i2d_of_void*;const char*;BIO*;char*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_SealFinal(PEM_ENCODE_SEAL_CTX*;unsigned char*;int*;unsigned char*;int*;EVP_PKEY*):int"/>
    <method name="PEM_SealInit(PEM_ENCODE_SEAL_CTX*;EVP_CIPHER*;EVP_MD*;unsigned char**;int*;unsigned char*;EVP_PKEY**;int):int"/>
    <method name="PEM_SealUpdate(PEM_ENCODE_SEAL_CTX*;unsigned char*;int*;unsigned char*;int):void"/>
    <method name="PEM_SignFinal(EVP_MD_CTX*;unsigned char*;unsigned int*;EVP_PKEY*):int"/>
    <method name="PEM_SignInit(EVP_MD_CTX*;EVP_MD*):void"/>
    <method name="PEM_SignUpdate(EVP_MD_CTX*;unsigned char*;unsigned int):void"/>
    <method name="PEM_X509_INFO_read(FILE*;STACK*;pem_password_cb*;void*):STACK*"/>
    <method name="PEM_X509_INFO_read_bio(BIO*;STACK*;pem_password_cb*;void*):STACK*"/>
    <method name="PEM_X509_INFO_write_bio(BIO*;X509_INFO*;EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_bytes_read_bio(unsigned char**;long*;char**;const char*;BIO*;pem_password_cb*;void*):int"/>
    <method name="PEM_def_callback(char*;int;int;void*):int"/>
    <method name="PEM_dek_info(char*;const char*;int;char*):void"/>
    <method name="PEM_do_header(EVP_CIPHER_INFO*;unsigned char*;long*;pem_password_cb*;void*):int"/>
    <method name="PEM_get_EVP_CIPHER_INFO(char*;EVP_CIPHER_INFO*):int"/>
    <method name="PEM_proc_type(char*;int):void"/>
    <method name="PEM_read(FILE*;char**;char**;unsigned char**;long*):int"/>
    <method name="PEM_read_DHparams(FILE*;DH**;pem_password_cb*;void*):DH*"/>
    <method name="PEM_read_DSAPrivateKey(FILE*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_DSA_PUBKEY(FILE*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_DSAparams(FILE*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_ECPKParameters(FILE*;EC_GROUP**;pem_password_cb*;void*):EC_GROUP*"/>
    <method name="PEM_read_ECPrivateKey(FILE*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_EC_PUBKEY(FILE*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_NETSCAPE_CERT_SEQUENCE(FILE*;NETSCAPE_CERT_SEQUENCE**;pem_password_cb*;void*):NETSCAPE_CERT_SEQUENCE*"/>
    <method name="PEM_read_PKCS7(FILE*;PKCS7**;pem_password_cb*;void*):PKCS7*"/>
    <method name="PEM_read_PKCS8(FILE*;X509_SIG**;pem_password_cb*;void*):X509_SIG*"/>
    <method name="PEM_read_PKCS8_PRIV_KEY_INFO(FILE*;PKCS8_PRIV_KEY_INFO**;pem_password_cb*;void*):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PEM_read_PUBKEY(FILE*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_PrivateKey(FILE*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_RSAPrivateKey(FILE*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_RSAPublicKey(FILE*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_RSA_PUBKEY(FILE*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_X509(FILE*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_X509_AUX(FILE*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_X509_CERT_PAIR(FILE*;X509_CERT_PAIR**;pem_password_cb*;void*):X509_CERT_PAIR*"/>
    <method name="PEM_read_X509_CRL(FILE*;X509_CRL**;pem_password_cb*;void*):X509_CRL*"/>
    <method name="PEM_read_X509_REQ(FILE*;X509_REQ**;pem_password_cb*;void*):X509_REQ*"/>
    <method name="PEM_read_bio(BIO*;char**;char**;unsigned char**;long*):int"/>
    <method name="PEM_read_bio_DHparams(BIO*;DH**;pem_password_cb*;void*):DH*"/>
    <method name="PEM_read_bio_DSAPrivateKey(BIO*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_bio_DSA_PUBKEY(BIO*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_bio_DSAparams(BIO*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_bio_ECPKParameters(BIO*;EC_GROUP**;pem_password_cb*;void*):EC_GROUP*"/>
    <method name="PEM_read_bio_ECPrivateKey(BIO*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_bio_EC_PUBKEY(BIO*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO*;NETSCAPE_CERT_SEQUENCE**;pem_password_cb*;void*):NETSCAPE_CERT_SEQUENCE*"/>
    <method name="PEM_read_bio_PKCS7(BIO*;PKCS7**;pem_password_cb*;void*):PKCS7*"/>
    <method name="PEM_read_bio_PKCS8(BIO*;X509_SIG**;pem_password_cb*;void*):X509_SIG*"/>
    <method name="PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO*;PKCS8_PRIV_KEY_INFO**;pem_password_cb*;void*):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PEM_read_bio_PUBKEY(BIO*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_bio_PrivateKey(BIO*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_bio_RSAPrivateKey(BIO*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_bio_RSAPublicKey(BIO*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_bio_RSA_PUBKEY(BIO*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_bio_X509(BIO*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_bio_X509_AUX(BIO*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_bio_X509_CERT_PAIR(BIO*;X509_CERT_PAIR**;pem_password_cb*;void*):X509_CERT_PAIR*"/>
    <method name="PEM_read_bio_X509_CRL(BIO*;X509_CRL**;pem_password_cb*;void*):X509_CRL*"/>
    <method name="PEM_read_bio_X509_REQ(BIO*;X509_REQ**;pem_password_cb*;void*):X509_REQ*"/>
    <method name="PEM_write(FILE*;char*;char*;unsigned char*;long):int"/>
    <method name="PEM_write_DHparams(FILE*;const DH*):int"/>
    <method name="PEM_write_DSAPrivateKey(FILE*;DSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_DSA_PUBKEY(FILE*;DSA*):int"/>
    <method name="PEM_write_DSAparams(FILE*;const DSA*):int"/>
    <method name="PEM_write_ECPKParameters(FILE*;const EC_GROUP*):int"/>
    <method name="PEM_write_ECPrivateKey(FILE*;EC_KEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_EC_PUBKEY(FILE*;EC_KEY*):int"/>
    <method name="PEM_write_NETSCAPE_CERT_SEQUENCE(FILE*;NETSCAPE_CERT_SEQUENCE*):int"/>
    <method name="PEM_write_PKCS7(FILE*;PKCS7*):int"/>
    <method name="PEM_write_PKCS8(FILE*;X509_SIG*):int"/>
    <method name="PEM_write_PKCS8PrivateKey(FILE*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_PKCS8PrivateKey_nid(FILE*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_PKCS8_PRIV_KEY_INFO(FILE*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="PEM_write_PUBKEY(FILE*;EVP_PKEY*):int"/>
    <method name="PEM_write_PrivateKey(FILE*;EVP_PKEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_RSAPrivateKey(FILE*;RSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_RSAPublicKey(FILE*;const RSA*):int"/>
    <method name="PEM_write_RSA_PUBKEY(FILE*;RSA*):int"/>
    <method name="PEM_write_X509(FILE*;X509*):int"/>
    <method name="PEM_write_X509_AUX(FILE*;X509*):int"/>
    <method name="PEM_write_X509_CERT_PAIR(FILE*;X509_CERT_PAIR*):int"/>
    <method name="PEM_write_X509_CRL(FILE*;X509_CRL*):int"/>
    <method name="PEM_write_X509_REQ(FILE*;X509_REQ*):int"/>
    <method name="PEM_write_X509_REQ_NEW(FILE*;X509_REQ*):int"/>
    <method name="PEM_write_bio(BIO*;const char*;char*;unsigned char*;long):int"/>
    <method name="PEM_write_bio_DHparams(BIO*;const DH*):int"/>
    <method name="PEM_write_bio_DSAPrivateKey(BIO*;DSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_DSA_PUBKEY(BIO*;DSA*):int"/>
    <method name="PEM_write_bio_DSAparams(BIO*;const DSA*):int"/>
    <method name="PEM_write_bio_ECPKParameters(BIO*;const EC_GROUP*):int"/>
    <method name="PEM_write_bio_ECPrivateKey(BIO*;EC_KEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_EC_PUBKEY(BIO*;EC_KEY*):int"/>
    <method name="PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO*;NETSCAPE_CERT_SEQUENCE*):int"/>
    <method name="PEM_write_bio_PKCS7(BIO*;PKCS7*):int"/>
    <method name="PEM_write_bio_PKCS8(BIO*;X509_SIG*):int"/>
    <method name="PEM_write_bio_PKCS8PrivateKey(BIO*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_PKCS8PrivateKey_nid(BIO*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="PEM_write_bio_PUBKEY(BIO*;EVP_PKEY*):int"/>
    <method name="PEM_write_bio_PrivateKey(BIO*;EVP_PKEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_RSAPrivateKey(BIO*;RSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_RSAPublicKey(BIO*;const RSA*):int"/>
    <method name="PEM_write_bio_RSA_PUBKEY(BIO*;RSA*):int"/>
    <method name="PEM_write_bio_X509(BIO*;X509*):int"/>
    <method name="PEM_write_bio_X509_AUX(BIO*;X509*):int"/>
    <method name="PEM_write_bio_X509_CERT_PAIR(BIO*;X509_CERT_PAIR*):int"/>
    <method name="PEM_write_bio_X509_CRL(BIO*;X509_CRL*):int"/>
    <method name="PEM_write_bio_X509_REQ(BIO*;X509_REQ*):int"/>
    <method name="PEM_write_bio_X509_REQ_NEW(BIO*;X509_REQ*):int"/>
    <method name="PFXExportCertStore(HCERTSTORE;CRYPT_DATA_BLOB*;LPCWSTR;DWORD):BOOL"/>
    <method name="PFXExportCertStoreEx(HCERTSTORE;CRYPT_DATA_BLOB*;LPCWSTR;void*;DWORD):BOOL"/>
    <method name="PFXImportCertStore(CRYPT_DATA_BLOB*;LPCWSTR;DWORD):HCERTSTORE"/>
    <method name="PFXIsPFXBlob(CRYPT_DATA_BLOB*):BOOL"/>
    <method name="PFXVerifyPassword(CRYPT_DATA_BLOB*;LPCWSTR;DWORD):BOOL"/>
    <method name="PKCS12_BAGS_free(PKCS12_BAGS*):void"/>
    <method name="PKCS12_BAGS_new():PKCS12_BAGS*"/>
    <method name="PKCS12_MAC_DATA_free(PKCS12_MAC_DATA*):void"/>
    <method name="PKCS12_MAC_DATA_new():PKCS12_MAC_DATA*"/>
    <method name="PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_MAKE_SHKEYBAG(int;const char*;int;unsigned char*;int;int;PKCS8_PRIV_KEY_INFO*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_PBE_add():void"/>
    <method name="PKCS12_PBE_keyivgen(EVP_CIPHER_CTX*;const char*;int;ASN1_TYPE*;const EVP_CIPHER*;const EVP_MD*;int):int"/>
    <method name="PKCS12_SAFEBAG_free(PKCS12_SAFEBAG*):void"/>
    <method name="PKCS12_SAFEBAG_new():PKCS12_SAFEBAG*"/>
    <method name="PKCS12_add_CSPName_asc(PKCS12_SAFEBAG*;const char*;int):int"/>
    <method name="PKCS12_add_cert(STACK**;X509*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG*;const char*;int):int"/>
    <method name="PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG*;const unsigned char*;int):int"/>
    <method name="PKCS12_add_key(STACK**;EVP_PKEY*;int;int;int;char*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_add_localkeyid(PKCS12_SAFEBAG*;unsigned char*;int):int"/>
    <method name="PKCS12_add_safe(STACK**;STACK*;int;int;char*):int"/>
    <method name="PKCS12_add_safes(STACK*;int):PKCS12*"/>
    <method name="PKCS12_certbag2x509(PKCS12_SAFEBAG*):X509*"/>
    <method name="PKCS12_certbag2x509crl(PKCS12_SAFEBAG*):X509_CRL*"/>
    <method name="PKCS12_create(char*;char*;EVP_PKEY*;X509*;STACK*;int;int;int;int;int):PKCS12*"/>
    <method name="PKCS12_decrypt_skey(PKCS12_SAFEBAG*;const char*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKCS12_free(PKCS12*):void"/>
    <method name="PKCS12_gen_mac(PKCS12*;const char*;int;unsigned char*;unsigned int*):int"/>
    <method name="PKCS12_get_attr_gen(STACK*;int):ASN1_TYPE*"/>
    <method name="PKCS12_get_friendlyname(PKCS12_SAFEBAG*):char*"/>
    <method name="PKCS12_init(int):PKCS12*"/>
    <method name="PKCS12_item_decrypt_d2i(X509_ALGOR*;const ASN1_ITEM*;const char*;int;ASN1_OCTET_STRING*;int):void*"/>
    <method name="PKCS12_item_i2d_encrypt(X509_ALGOR*;const ASN1_ITEM*;const char*;int;void*;int):ASN1_OCTET_STRING*"/>
    <method name="PKCS12_item_pack_safebag(void*;const ASN1_ITEM*;int;int):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_key_gen_asc(const char*;int;unsigned char*;int;int;int;int;unsigned char*;const EVP_MD*):int"/>
    <method name="PKCS12_key_gen_uni(unsigned char*;int;unsigned char*;int;int;int;int;unsigned char*;const EVP_MD*):int"/>
    <method name="PKCS12_new():PKCS12*"/>
    <method name="PKCS12_newpass(PKCS12*;char*;char*):int"/>
    <method name="PKCS12_pack_authsafes(PKCS12*;STACK*):int"/>
    <method name="PKCS12_pack_p7data(STACK*):PKCS7*"/>
    <method name="PKCS12_pack_p7encdata(int;const char*;int;unsigned char*;int;int;STACK*):PKCS7*"/>
    <method name="PKCS12_parse(PKCS12*;const char*;EVP_PKEY**;X509**;STACK**):int"/>
    <method name="PKCS12_pbe_crypt(X509_ALGOR*;const char*;int;unsigned char*;int;unsigned char**;int*;int):unsigned char*"/>
    <method name="PKCS12_set_mac(PKCS12*;const char*;int;unsigned char*;int;int;const EVP_MD*):int"/>
    <method name="PKCS12_setup_mac(PKCS12*;int;unsigned char*;int;const EVP_MD*):int"/>
    <method name="PKCS12_unpack_authsafes(PKCS12*):STACK*"/>
    <method name="PKCS12_unpack_p7data(PKCS7*):STACK*"/>
    <method name="PKCS12_unpack_p7encdata(PKCS7*;const char*;int):STACK*"/>
    <method name="PKCS12_verify_mac(PKCS12*;const char*;int):int"/>
    <method name="PKCS12_x5092certbag(X509*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_x509crl2certbag(X509_CRL*):PKCS12_SAFEBAG*"/>
    <method name="PKCS1_MGF1(unsigned char*;long;const unsigned char*;long;const EVP_MD*):int"/>
    <method name="PKCS5_PBE_add():void"/>
    <method name="PKCS5_PBE_keyivgen(EVP_CIPHER_CTX*;const char*;int;ASN1_TYPE*;const EVP_CIPHER*;const EVP_MD*;int):int"/>
    <method name="PKCS5_PBKDF2_HMAC_SHA1(const char*;int;const unsigned char*;int;int;int;unsigned char*):int"/>
    <method name="PKCS5_pbe2_set(const EVP_CIPHER*;int;unsigned char*;int):X509_ALGOR*"/>
    <method name="PKCS5_pbe_set(int;int;unsigned char*;int):X509_ALGOR*"/>
    <method name="PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX*;const char*;int;ASN1_TYPE*;const EVP_CIPHER*;const EVP_MD*;int):int"/>
    <method name="PKCS7_DIGEST_free(PKCS7_DIGEST*):void"/>
    <method name="PKCS7_DIGEST_new():PKCS7_DIGEST*"/>
    <method name="PKCS7_ENCRYPT_free(PKCS7_ENCRYPT*):void"/>
    <method name="PKCS7_ENCRYPT_new():PKCS7_ENCRYPT*"/>
    <method name="PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT*):void"/>
    <method name="PKCS7_ENC_CONTENT_new():PKCS7_ENC_CONTENT*"/>
    <method name="PKCS7_ENVELOPE_free(PKCS7_ENVELOPE*):void"/>
    <method name="PKCS7_ENVELOPE_new():PKCS7_ENVELOPE*"/>
    <method name="PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL*):void"/>
    <method name="PKCS7_ISSUER_AND_SERIAL_new():PKCS7_ISSUER_AND_SERIAL*"/>
    <method name="PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO*):void"/>
    <method name="PKCS7_RECIP_INFO_new():PKCS7_RECIP_INFO*"/>
    <method name="PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO*;X509*):int"/>
    <method name="PKCS7_SIGNED_free(PKCS7_SIGNED*):void"/>
    <method name="PKCS7_SIGNED_new():PKCS7_SIGNED*"/>
    <method name="PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO*):void"/>
    <method name="PKCS7_SIGNER_INFO_new():PKCS7_SIGNER_INFO*"/>
    <method name="PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO*;X509*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE*):void"/>
    <method name="PKCS7_SIGN_ENVELOPE_new():PKCS7_SIGN_ENVELOPE*"/>
    <method name="PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO*;STACK*):int"/>
    <method name="PKCS7_add_attribute(PKCS7_SIGNER_INFO*;int;int;void*):int"/>
    <method name="PKCS7_add_certificate(PKCS7*;X509*):int"/>
    <method name="PKCS7_add_crl(PKCS7*;X509_CRL*):int"/>
    <method name="PKCS7_add_recipient(PKCS7*;X509*):PKCS7_RECIP_INFO*"/>
    <method name="PKCS7_add_recipient_info(PKCS7*;PKCS7_RECIP_INFO*):int"/>
    <method name="PKCS7_add_signature(PKCS7*;X509*;EVP_PKEY*;const EVP_MD*):PKCS7_SIGNER_INFO*"/>
    <method name="PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO*;int;int;void*):int"/>
    <method name="PKCS7_add_signer(PKCS7*;PKCS7_SIGNER_INFO*):int"/>
    <method name="PKCS7_cert_from_signer_info(PKCS7*;PKCS7_SIGNER_INFO*):X509*"/>
    <method name="PKCS7_content_new(PKCS7*;int):int"/>
    <method name="PKCS7_ctrl(PKCS7*;int;long;char*):long"/>
    <method name="PKCS7_dataDecode(PKCS7*;EVP_PKEY*;BIO*;X509*):BIO*"/>
    <method name="PKCS7_dataFinal(PKCS7*;BIO*):int"/>
    <method name="PKCS7_dataInit(PKCS7*;BIO*):BIO*"/>
    <method name="PKCS7_dataVerify(X509_STORE*;X509_STORE_CTX*;BIO*;PKCS7*;PKCS7_SIGNER_INFO*):int"/>
    <method name="PKCS7_decrypt(PKCS7*;EVP_PKEY*;X509*;BIO*;int):int"/>
    <method name="PKCS7_digest_from_attributes(STACK*):ASN1_OCTET_STRING*"/>
    <method name="PKCS7_dup(PKCS7*):PKCS7*"/>
    <method name="PKCS7_encrypt(STACK*;BIO*;const EVP_CIPHER*;int):PKCS7*"/>
    <method name="PKCS7_free(PKCS7*):void"/>
    <method name="PKCS7_get0_signers(PKCS7*;STACK*;int):STACK*"/>
    <method name="PKCS7_get_attribute(PKCS7_SIGNER_INFO*;int):ASN1_TYPE*"/>
    <method name="PKCS7_get_issuer_and_serial(PKCS7*;int):PKCS7_ISSUER_AND_SERIAL*"/>
    <method name="PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO*;int):ASN1_TYPE*"/>
    <method name="PKCS7_get_signer_info(PKCS7*):STACK*"/>
    <method name="PKCS7_get_smimecap(PKCS7_SIGNER_INFO*):STACK*"/>
    <method name="PKCS7_new():PKCS7*"/>
    <method name="PKCS7_set0_type_other(PKCS7*;int;ASN1_TYPE*):int"/>
    <method name="PKCS7_set_attributes(PKCS7_SIGNER_INFO*;STACK*):int"/>
    <method name="PKCS7_set_cipher(PKCS7*;const EVP_CIPHER*):int"/>
    <method name="PKCS7_set_content(PKCS7*;PKCS7*):int"/>
    <method name="PKCS7_set_digest(PKCS7*;const EVP_MD*):int"/>
    <method name="PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO*;STACK*):int"/>
    <method name="PKCS7_set_type(PKCS7*;int):int"/>
    <method name="PKCS7_sign(X509*;EVP_PKEY*;STACK*;BIO*;int):PKCS7*"/>
    <method name="PKCS7_signatureVerify(BIO*;PKCS7*;PKCS7_SIGNER_INFO*;X509*):int"/>
    <method name="PKCS7_simple_smimecap(STACK*;int;int):int"/>
    <method name="PKCS7_verify(PKCS7*;STACK*;X509_STORE*;BIO*;BIO*;int):int"/>
    <method name="PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO*):void"/>
    <method name="PKCS8_PRIV_KEY_INFO_new():PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO*;int):int"/>
    <method name="PKCS8_decrypt(X509_SIG*;const char*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKCS8_encrypt(int;const EVP_CIPHER*;const char*;int;unsigned char*;int;int;PKCS8_PRIV_KEY_INFO*):X509_SIG*"/>
    <method name="PKCS8_set_broken(PKCS8_PRIV_KEY_INFO*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD*):void"/>
    <method name="PKEY_USAGE_PERIOD_new():PKEY_USAGE_PERIOD*"/>
    <method name="POLICYINFO_free(POLICYINFO*):void"/>
    <method name="POLICYINFO_new():POLICYINFO*"/>
    <method name="POLICYQUALINFO_free(POLICYQUALINFO*):void"/>
    <method name="POLICYQUALINFO_new():POLICYQUALINFO*"/>
    <method name="POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS*):void"/>
    <method name="POLICY_CONSTRAINTS_new():POLICY_CONSTRAINTS*"/>
    <method name="POLICY_MAPPING_free(POLICY_MAPPING*):void"/>
    <method name="POLICY_MAPPING_new():POLICY_MAPPING*"/>
    <method name="PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION*):void"/>
    <method name="PROXY_CERT_INFO_EXTENSION_new():PROXY_CERT_INFO_EXTENSION*"/>
    <method name="PROXY_POLICY_free(PROXY_POLICY*):void"/>
    <method name="PROXY_POLICY_new():PROXY_POLICY*"/>
    <method name="PSPDFAlignRectangles(CGRect;CGRect;PSPDFRectAlignment):CGRect"/>
    <method name="PSPDFAlignSizeWithinRectWithOffset(CGSize;CGRect;CGFloat;CGFloat;PSPDFRectAlignment):CGRect"/>
    <method name="PSPDFApplyRotationToRect(CGRect;NSInteger):CGRect"/>
    <method name="PSPDFArrayGetString(CGPDFArrayRef;size_t):NSString*"/>
    <method name="PSPDFCGRectFromPoints(CGPoint;CGPoint):CGRect"/>
    <method name="PSPDFCacheKeyboard():void"/>
    <method name="PSPDFConvertPDFArray(CGPDFArrayRef):NSArray*"/>
    <method name="PSPDFConvertPDFDictionary(CGPDFDictionaryRef):NSDictionary*"/>
    <method name="PSPDFConvertPDFObject(CGPDFObjectRef):id"/>
    <method name="PSPDFConvertPDFObjectAsString(CGPDFObjectRef):NSString*"/>
    <method name="PSPDFConvertPDFPointToViewPoint(CGPoint;CGRect;NSUInteger;CGRect):CGPoint"/>
    <method name="PSPDFConvertPDFRectToViewRect(CGRect;CGRect;NSUInteger;CGRect):CGRect"/>
    <method name="PSPDFConvertViewPointToPDFPoint(CGPoint;CGRect;NSUInteger;CGRect):CGPoint"/>
    <method name="PSPDFConvertViewRectToPDFRect(CGRect;CGRect;NSUInteger;CGRect):CGRect"/>
    <method name="PSPDFDictionaryGetObjectForPath(CGPDFDictionaryRef;NSString*):id"/>
    <method name="PSPDFDictionaryGetString(CGPDFDictionaryRef;NSString*):NSString*"/>
    <method name="PSPDFFadeTransition():CATransition*"/>
    <method name="PSPDFFadeTransitionWithDuration(CGFloat):CATransition*"/>
    <method name="PSPDFGetTransformFromPageRectAndRotation(CGRect;NSInteger):CGAffineTransform"/>
    <method name="PSPDFGetViewInsideView(UIView*;NSString*):UIView*"/>
    <method name="PSPDFHSBtoRGB(float*;float*;float*;float;float;float):void"/>
    <method name="PSPDFIndexSetFromArray(NSArray*):NSIndexSet*"/>
    <method name="PSPDFIsControllerClassInPopover(UIPopoverController*;Class*):BOOL"/>
    <method name="PSPDFIsCrappyDevice():BOOL"/>
    <method name="PSPDFIsRotationLocked():BOOL"/>
    <method name="PSPDFKitBundle():NSBundle*"/>
    <method name="PSPDFLocalize(NSString*):NSString*"/>
    <method name="PSPDFLockRotation():void"/>
    <method name="PSPDFNormalizeRect(CGRect):CGRect"/>
    <method name="PSPDFPerformAndTrackTime((^)():void;BOOL):double"/>
    <method name="PSPDFRGBtoHSB(float;float;float;float*;float*;float*):void"/>
    <method name="PSPDFRGBtoHSV(float;float;float;float*;float*;float*):void"/>
    <method name="PSPDFRectsFromGlyphs(NSArray*;CGAffineTransform;CGRect*):NSArray*"/>
    <method name="PSPDFReplaceMethod(Class*;SEL;SEL;int):void"/>
    <method name="PSPDFResolvePathNames(NSString*;NSString*):NSString*"/>
    <method name="PSPDFResolvePathNamesInMutableString(NSMutableString*;NSString*;(^)(NSString*):NSString*):BOOL"/>
    <method name="PSPDFScaleForSizeWithinSize(CGSize;CGSize):CGFloat"/>
    <method name="PSPDFScaleForSizeWithinSizeWithOptions(CGSize;CGSize;BOOL;BOOL):CGFloat"/>
    <method name="PSPDFSetLocalizationDictionary(NSDictionary*):void"/>
    <method name="PSPDFShouldAnimate():BOOL"/>
    <method name="PSPDFSimulatorAnimationDragCoefficient():CGFloat"/>
    <method name="PSPDFSizeForScale(CGSize;CGFloat):CGSize"/>
    <method name="PSPDFSplinePathFromPoints(CGPoint;CGPoint;CGPoint;CGPoint;int):UIBezierPath*"/>
    <method name="PSPDFSplineWithPointArray(NSArray*;CGFloat):UIBezierPath*"/>
    <method name="PSPDFStripPDFFileType(NSString*):NSString*"/>
    <method name="PSPDFTempFileURLWithPathExtension(NSString*;NSString*):NSURL*"/>
    <method name="PSPDFToolbarHeight(BOOL):CGFloat"/>
    <method name="PSPDFToolbarHeightForOrientation(UIInterfaceOrientation):CGFloat"/>
    <method name="PSPDFTrimString(NSString*):NSString*"/>
    <method name="PSPDFUnlockRotation():void"/>
    <method name="PSPDFVersionString():NSString*"/>
    <method name="PSPDPFActionSheetStyleForBarButtonStyle(UIBarStyle;BOOL):UIActionSheetStyle"/>
    <method name="PeerConnectionRelease(DNSServiceFlags;const char*;const char*;const char*):DNSServiceErrorType"/>
    <method name="PrintReachabilityFlags(SCNetworkReachabilityFlags;const char*):void"/>
    <method name="RAND_SSLeay():RAND_METHOD*"/>
    <method name="RAND_add(const void*;int;double):void"/>
    <method name="RAND_bytes(unsigned char*;int):int"/>
    <method name="RAND_cleanup():void"/>
    <method name="RAND_egd(const char*):int"/>
    <method name="RAND_egd_bytes(const char*;int):int"/>
    <method name="RAND_file_name(char*;size_t):const char*"/>
    <method name="RAND_get_rand_method():const RAND_METHOD*"/>
    <method name="RAND_load_file(const char*;long):int"/>
    <method name="RAND_poll():int"/>
    <method name="RAND_pseudo_bytes(unsigned char*;int):int"/>
    <method name="RAND_query_egd_bytes(const char*;unsigned char*;int):int"/>
    <method name="RAND_seed(const void*;int):void"/>
    <method name="RAND_set_rand_engine(ENGINE*):int"/>
    <method name="RAND_set_rand_method(const RAND_METHOD*):int"/>
    <method name="RAND_status():int"/>
    <method name="RAND_write_file(const char*):int"/>
    <method name="RC2_cbc_encrypt(const unsigned char*;unsigned char*;long;RC2_KEY*;unsigned char*;int):void"/>
    <method name="RC2_cfb64_encrypt(const unsigned char*;unsigned char*;long;RC2_KEY*;unsigned char*;int*;int):void"/>
    <method name="RC2_decrypt(unsigned long*;RC2_KEY*):void"/>
    <method name="RC2_ecb_encrypt(const unsigned char*;unsigned char*;RC2_KEY*;int):void"/>
    <method name="RC2_encrypt(unsigned long*;RC2_KEY*):void"/>
    <method name="RC2_ofb64_encrypt(const unsigned char*;unsigned char*;long;RC2_KEY*;unsigned char*;int*):void"/>
    <method name="RC2_set_key(RC2_KEY*;int;const unsigned char*;int):void"/>
    <method name="RC4(RC4_KEY*;unsigned long;const unsigned char*;unsigned char*):void"/>
    <method name="RC4_options():const char*"/>
    <method name="RC4_set_key(RC4_KEY*;int;const unsigned char*):void"/>
    <method name="RIPEMD160(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="RIPEMD160_Final(unsigned char*;RIPEMD160_CTX*):int"/>
    <method name="RIPEMD160_Init(RIPEMD160_CTX*):int"/>
    <method name="RIPEMD160_Transform(RIPEMD160_CTX*;const unsigned char*):void"/>
    <method name="RIPEMD160_Update(RIPEMD160_CTX*;const void*;size_t):int"/>
    <method name="RKObjectIsValueEqualToValue(id;id):BOOL"/>
    <method name="RSAPrivateKey_asn1_meth():ASN1_METHOD*"/>
    <method name="RSAPrivateKey_dup(RSA*):RSA*"/>
    <method name="RSAPublicKey_dup(RSA*):RSA*"/>
    <method name="RSA_PKCS1_SSLeay():const RSA_METHOD*"/>
    <method name="RSA_X931_hash_id(int):int"/>
    <method name="RSA_blinding_off(RSA*):void"/>
    <method name="RSA_blinding_on(RSA*;BN_CTX*):int"/>
    <method name="RSA_check_key(const RSA*):int"/>
    <method name="RSA_flags(const RSA*):int"/>
    <method name="RSA_free(RSA*):void"/>
    <method name="RSA_generate_key(int;unsigned long;(*)(int;int;void*):void*;void*):RSA*"/>
    <method name="RSA_generate_key_ex(RSA*;int;BIGNUM*;BN_GENCB*):int"/>
    <method name="RSA_get_default_method():const RSA_METHOD*"/>
    <method name="RSA_get_ex_data(const RSA*;int):void*"/>
    <method name="RSA_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="RSA_get_method(const RSA*):const RSA_METHOD*"/>
    <method name="RSA_memory_lock(RSA*):int"/>
    <method name="RSA_new():RSA*"/>
    <method name="RSA_new_method(ENGINE*):RSA*"/>
    <method name="RSA_null_method():const RSA_METHOD*"/>
    <method name="RSA_padding_add_PKCS1_OAEP(unsigned char*;int;const unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_PKCS1_PSS(RSA*;unsigned char*;const unsigned char*;const EVP_MD*;int):int"/>
    <method name="RSA_padding_add_PKCS1_type_1(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_PKCS1_type_2(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_SSLv23(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_X931(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_none(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_check_PKCS1_OAEP(unsigned char*;int;const unsigned char*;int;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_check_PKCS1_type_1(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_PKCS1_type_2(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_SSLv23(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_X931(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_none(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_print(BIO*;const RSA*;int):int"/>
    <method name="RSA_print_fp(FILE*;const RSA*;int):int"/>
    <method name="RSA_private_decrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_private_encrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_public_decrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_public_encrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_set_default_method(const RSA_METHOD*):void"/>
    <method name="RSA_set_ex_data(RSA*;int;void*):int"/>
    <method name="RSA_set_method(RSA*;const RSA_METHOD*):int"/>
    <method name="RSA_setup_blinding(RSA*;BN_CTX*):BN_BLINDING*"/>
    <method name="RSA_sign(int;const unsigned char*;unsigned int;unsigned char*;unsigned int*;RSA*):int"/>
    <method name="RSA_sign_ASN1_OCTET_STRING(int;const unsigned char*;unsigned int;unsigned char*;unsigned int*;RSA*):int"/>
    <method name="RSA_size(const RSA*):int"/>
    <method name="RSA_up_ref(RSA*):int"/>
    <method name="RSA_verify(int;const unsigned char*;unsigned int;unsigned char*;unsigned int;RSA*):int"/>
    <method name="RSA_verify_ASN1_OCTET_STRING(int;const unsigned char*;unsigned int;unsigned char*;unsigned int;RSA*):int"/>
    <method name="RSA_verify_PKCS1_PSS(RSA*;const unsigned char*;const EVP_MD*;const char*;int):int"/>
    <method name="RaceCondition"/>
    <method name="ReachabilityCallback(SCNetworkReachabilityRef;SCNetworkReachabilityFlags;void*):void"/>
    <method name="ReadStreamClientCallBack(CFReadStreamRef;CFStreamEventType;void*):void"/>
    <method name="ReleaseNoOp(CFAllocatorRef;const void*):void"/>
    <method name="RetainNoOp(CFAllocatorRef;const void*):const void*"/>
    <method name="ReturnCheckedMedium"/>
    <method name="RpcImpersonateClient(RPC_BINDING_HANDLE):RPC_STATUS"/>
    <method name="SCBondInterfaceCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCBondInterfaceCopyAvailableMemberInterfaces(SCPreferencesRef):CFArrayRef"/>
    <method name="SCBondInterfaceCopyStatus(SCBondInterfaceRef):SCBondStatusRef"/>
    <method name="SCBondInterfaceCreate(SCPreferencesRef):SCBondInterfaceRef"/>
    <method name="SCBondInterfaceGetMemberInterfaces(SCBondInterfaceRef):CFArrayRef"/>
    <method name="SCBondInterfaceGetOptions(SCBondInterfaceRef):CFDictionaryRef"/>
    <method name="SCBondInterfaceRemove(SCBondInterfaceRef):Boolean"/>
    <method name="SCBondInterfaceSetLocalizedDisplayName(SCBondInterfaceRef;CFStringRef):Boolean"/>
    <method name="SCBondInterfaceSetMemberInterfaces(SCBondInterfaceRef;CFArrayRef):Boolean"/>
    <method name="SCBondInterfaceSetOptions(SCBondInterfaceRef;CFDictionaryRef):Boolean"/>
    <method name="SCBondStatusGetInterfaceStatus(SCBondStatusRef;SCNetworkInterfaceRef):CFDictionaryRef"/>
    <method name="SCBondStatusGetMemberInterfaces(SCBondStatusRef):CFArrayRef"/>
    <method name="SCBondStatusGetTypeID():CFTypeID"/>
    <method name="SCCopyLastError():CFErrorRef"/>
    <method name="SCDynamicStoreAddTemporaryValue(SCDynamicStoreRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCDynamicStoreAddValue(SCDynamicStoreRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCDynamicStoreCopyComputerName(SCDynamicStoreRef;CFStringEncoding*):CFStringRef"/>
    <method name="SCDynamicStoreCopyConsoleUser(SCDynamicStoreRef;uid_t*;gid_t*):CFStringRef"/>
    <method name="SCDynamicStoreCopyDHCPInfo(SCDynamicStoreRef;CFStringRef):CFDictionaryRef"/>
    <method name="SCDynamicStoreCopyKeyList(SCDynamicStoreRef;CFStringRef):CFArrayRef"/>
    <method name="SCDynamicStoreCopyLocalHostName(SCDynamicStoreRef):CFStringRef"/>
    <method name="SCDynamicStoreCopyLocation(SCDynamicStoreRef):CFStringRef"/>
    <method name="SCDynamicStoreCopyMultiple(SCDynamicStoreRef;CFArrayRef;CFArrayRef):CFDictionaryRef"/>
    <method name="SCDynamicStoreCopyNotifiedKeys(SCDynamicStoreRef):CFArrayRef"/>
    <method name="SCDynamicStoreCopyProxies(SCDynamicStoreRef):CFDictionaryRef"/>
    <method name="SCDynamicStoreCopyValue(SCDynamicStoreRef;CFStringRef):CFPropertyListRef"/>
    <method name="SCDynamicStoreCreate(CFAllocatorRef;CFStringRef;SCDynamicStoreCallBack;SCDynamicStoreContext*):SCDynamicStoreRef"/>
    <method name="SCDynamicStoreCreateRunLoopSource(CFAllocatorRef;SCDynamicStoreRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="SCDynamicStoreCreateWithOptions(CFAllocatorRef;CFStringRef;CFDictionaryRef;SCDynamicStoreCallBack;SCDynamicStoreContext*):SCDynamicStoreRef"/>
    <method name="SCDynamicStoreGetTypeID():CFTypeID"/>
    <method name="SCDynamicStoreKeyCreate(CFAllocatorRef;CFStringRef, ...):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateComputerName(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateConsoleUser(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateHostNames(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateLocation(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkInterface(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateProxies(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreNotifyValue(SCDynamicStoreRef;CFStringRef):Boolean"/>
    <method name="SCDynamicStoreRemoveValue(SCDynamicStoreRef;CFStringRef):Boolean"/>
    <method name="SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef;dispatch_queue_t):Boolean"/>
    <method name="SCDynamicStoreSetMultiple(SCDynamicStoreRef;CFDictionaryRef;CFArrayRef;CFArrayRef):Boolean"/>
    <method name="SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef;CFArrayRef;CFArrayRef):Boolean"/>
    <method name="SCDynamicStoreSetValue(SCDynamicStoreRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCError():int"/>
    <method name="SCErrorString(int):const char*"/>
    <method name="SCNetworkCheckReachabilityByAddress(const struct sockaddr*;socklen_t;SCNetworkConnectionFlags*):Boolean"/>
    <method name="SCNetworkCheckReachabilityByName(const char*;SCNetworkConnectionFlags*):Boolean"/>
    <method name="SCNetworkConnectionCopyExtendedStatus(SCNetworkConnectionRef):CFDictionaryRef"/>
    <method name="SCNetworkConnectionCopyServiceID(SCNetworkConnectionRef):CFStringRef"/>
    <method name="SCNetworkConnectionCopyStatistics(SCNetworkConnectionRef):CFDictionaryRef"/>
    <method name="SCNetworkConnectionCopyUserOptions(SCNetworkConnectionRef):CFDictionaryRef"/>
    <method name="SCNetworkConnectionCopyUserPreferences(CFDictionaryRef;CFStringRef*;CFDictionaryRef*):Boolean"/>
    <method name="SCNetworkConnectionCreateWithServiceID(CFAllocatorRef;CFStringRef;SCNetworkConnectionCallBack;SCNetworkConnectionContext*):SCNetworkConnectionRef"/>
    <method name="SCNetworkConnectionGetStatus(SCNetworkConnectionRef):SCNetworkConnectionStatus"/>
    <method name="SCNetworkConnectionGetTypeID():CFTypeID"/>
    <method name="SCNetworkConnectionScheduleWithRunLoop(SCNetworkConnectionRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkConnectionSetDispatchQueue(SCNetworkConnectionRef;dispatch_queue_t):Boolean"/>
    <method name="SCNetworkConnectionStart(SCNetworkConnectionRef;CFDictionaryRef;Boolean):Boolean"/>
    <method name="SCNetworkConnectionStop(SCNetworkConnectionRef;Boolean):Boolean"/>
    <method name="SCNetworkConnectionUnscheduleFromRunLoop(SCNetworkConnectionRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkInterfaceCopyAll():CFArrayRef"/>
    <method name="SCNetworkInterfaceCopyMTU(SCNetworkInterfaceRef;int*;int*;int*):Boolean"/>
    <method name="SCNetworkInterfaceCopyMediaOptions(SCNetworkInterfaceRef;CFDictionaryRef*;CFDictionaryRef*;CFArrayRef*;Boolean):Boolean"/>
    <method name="SCNetworkInterfaceCopyMediaSubTypeOptions(CFArrayRef;CFStringRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceCopyMediaSubTypes(CFArrayRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceCreateWithInterface(SCNetworkInterfaceRef;CFStringRef):SCNetworkInterfaceRef"/>
    <method name="SCNetworkInterfaceForceConfigurationRefresh(SCNetworkInterfaceRef):Boolean"/>
    <method name="SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetConfiguration(SCNetworkInterfaceRef):CFDictionaryRef"/>
    <method name="SCNetworkInterfaceGetExtendedConfiguration(SCNetworkInterfaceRef;CFStringRef):CFDictionaryRef"/>
    <method name="SCNetworkInterfaceGetHardwareAddressString(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef):SCNetworkInterfaceRef"/>
    <method name="SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetLocalizedDisplayName(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetSupportedInterfaceTypes(SCNetworkInterfaceRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceGetSupportedProtocolTypes(SCNetworkInterfaceRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceGetTypeID():CFTypeID"/>
    <method name="SCNetworkInterfaceRefreshConfiguration(CFStringRef):Boolean"/>
    <method name="SCNetworkInterfaceSetConfiguration(SCNetworkInterfaceRef;CFDictionaryRef):Boolean"/>
    <method name="SCNetworkInterfaceSetExtendedConfiguration(SCNetworkInterfaceRef;CFStringRef;CFDictionaryRef):Boolean"/>
    <method name="SCNetworkInterfaceSetMTU(SCNetworkInterfaceRef;int):Boolean"/>
    <method name="SCNetworkInterfaceSetMediaOptions(SCNetworkInterfaceRef;CFStringRef;CFArrayRef):Boolean"/>
    <method name="SCNetworkProtocolGetConfiguration(SCNetworkProtocolRef):CFDictionaryRef"/>
    <method name="SCNetworkProtocolGetEnabled(SCNetworkProtocolRef):Boolean"/>
    <method name="SCNetworkProtocolGetProtocolType(SCNetworkProtocolRef):CFStringRef"/>
    <method name="SCNetworkProtocolGetTypeID():CFTypeID"/>
    <method name="SCNetworkProtocolSetConfiguration(SCNetworkProtocolRef;CFDictionaryRef):Boolean"/>
    <method name="SCNetworkProtocolSetEnabled(SCNetworkProtocolRef;Boolean):Boolean"/>
    <method name="SCNetworkReachabilityCreateWithAddress(CFAllocatorRef;const struct sockaddr*):SCNetworkReachabilityRef"/>
    <method name="SCNetworkReachabilityCreateWithAddressPair(CFAllocatorRef;const struct sockaddr*;const struct sockaddr*):SCNetworkReachabilityRef"/>
    <method name="SCNetworkReachabilityCreateWithName(CFAllocatorRef;const char*):SCNetworkReachabilityRef"/>
    <method name="SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef;SCNetworkReachabilityFlags*):Boolean"/>
    <method name="SCNetworkReachabilityGetTypeID():CFTypeID"/>
    <method name="SCNetworkReachabilityScheduleWithRunLoop(SCNetworkReachabilityRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef;SCNetworkReachabilityCallBack;SCNetworkReachabilityContext*):Boolean"/>
    <method name="SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef;dispatch_queue_t):Boolean"/>
    <method name="SCNetworkReachabilityUnscheduleFromRunLoop(SCNetworkReachabilityRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkServiceAddProtocolType(SCNetworkServiceRef;CFStringRef):Boolean"/>
    <method name="SCNetworkServiceCopy(SCPreferencesRef;CFStringRef):SCNetworkServiceRef"/>
    <method name="SCNetworkServiceCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCNetworkServiceCopyProtocol(SCNetworkServiceRef;CFStringRef):SCNetworkProtocolRef"/>
    <method name="SCNetworkServiceCopyProtocols(SCNetworkServiceRef):CFArrayRef"/>
    <method name="SCNetworkServiceCreate(SCPreferencesRef;SCNetworkInterfaceRef):SCNetworkServiceRef"/>
    <method name="SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkServiceGetEnabled(SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkServiceGetInterface(SCNetworkServiceRef):SCNetworkInterfaceRef"/>
    <method name="SCNetworkServiceGetName(SCNetworkServiceRef):CFStringRef"/>
    <method name="SCNetworkServiceGetServiceID(SCNetworkServiceRef):CFStringRef"/>
    <method name="SCNetworkServiceGetTypeID():CFTypeID"/>
    <method name="SCNetworkServiceRemove(SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkServiceRemoveProtocolType(SCNetworkServiceRef;CFStringRef):Boolean"/>
    <method name="SCNetworkServiceSetEnabled(SCNetworkServiceRef;Boolean):Boolean"/>
    <method name="SCNetworkServiceSetName(SCNetworkServiceRef;CFStringRef):Boolean"/>
    <method name="SCNetworkSetAddService(SCNetworkSetRef;SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkSetContainsInterface(SCNetworkSetRef;SCNetworkInterfaceRef):Boolean"/>
    <method name="SCNetworkSetCopy(SCPreferencesRef;CFStringRef):SCNetworkSetRef"/>
    <method name="SCNetworkSetCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCNetworkSetCopyCurrent(SCPreferencesRef):SCNetworkSetRef"/>
    <method name="SCNetworkSetCopyServices(SCNetworkSetRef):CFArrayRef"/>
    <method name="SCNetworkSetCreate(SCPreferencesRef):SCNetworkSetRef"/>
    <method name="SCNetworkSetGetName(SCNetworkSetRef):CFStringRef"/>
    <method name="SCNetworkSetGetServiceOrder(SCNetworkSetRef):CFArrayRef"/>
    <method name="SCNetworkSetGetSetID(SCNetworkSetRef):CFStringRef"/>
    <method name="SCNetworkSetGetTypeID():CFTypeID"/>
    <method name="SCNetworkSetRemove(SCNetworkSetRef):Boolean"/>
    <method name="SCNetworkSetRemoveService(SCNetworkSetRef;SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkSetSetCurrent(SCNetworkSetRef):Boolean"/>
    <method name="SCNetworkSetSetName(SCNetworkSetRef;CFStringRef):Boolean"/>
    <method name="SCNetworkSetSetServiceOrder(SCNetworkSetRef;CFArrayRef):Boolean"/>
    <method name="SCPreferencesAddValue(SCPreferencesRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCPreferencesApplyChanges(SCPreferencesRef):Boolean"/>
    <method name="SCPreferencesCommitChanges(SCPreferencesRef):Boolean"/>
    <method name="SCPreferencesCopyKeyList(SCPreferencesRef):CFArrayRef"/>
    <method name="SCPreferencesCreate(CFAllocatorRef;CFStringRef;CFStringRef):SCPreferencesRef"/>
    <method name="SCPreferencesCreateWithAuthorization(CFAllocatorRef;CFStringRef;CFStringRef;AuthorizationRef):SCPreferencesRef"/>
    <method name="SCPreferencesGetSignature(SCPreferencesRef):CFDataRef"/>
    <method name="SCPreferencesGetTypeID():CFTypeID"/>
    <method name="SCPreferencesGetValue(SCPreferencesRef;CFStringRef):CFPropertyListRef"/>
    <method name="SCPreferencesLock(SCPreferencesRef;Boolean):Boolean"/>
    <method name="SCPreferencesPathCreateUniqueChild(SCPreferencesRef;CFStringRef):CFStringRef"/>
    <method name="SCPreferencesPathGetLink(SCPreferencesRef;CFStringRef):CFStringRef"/>
    <method name="SCPreferencesPathGetValue(SCPreferencesRef;CFStringRef):CFDictionaryRef"/>
    <method name="SCPreferencesPathRemoveValue(SCPreferencesRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesPathSetLink(SCPreferencesRef;CFStringRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesPathSetValue(SCPreferencesRef;CFStringRef;CFDictionaryRef):Boolean"/>
    <method name="SCPreferencesRemoveValue(SCPreferencesRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesScheduleWithRunLoop(SCPreferencesRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesSetCallback(SCPreferencesRef;SCPreferencesCallBack;SCPreferencesContext*):Boolean"/>
    <method name="SCPreferencesSetComputerName(SCPreferencesRef;CFStringRef;CFStringEncoding):Boolean"/>
    <method name="SCPreferencesSetDispatchQueue(SCPreferencesRef;dispatch_queue_t):Boolean"/>
    <method name="SCPreferencesSetLocalHostName(SCPreferencesRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesSetValue(SCPreferencesRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCPreferencesSynchronize(SCPreferencesRef):void"/>
    <method name="SCPreferencesUnlock(SCPreferencesRef):Boolean"/>
    <method name="SCPreferencesUnscheduleFromRunLoop(SCPreferencesRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCVLANInterfaceCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCVLANInterfaceCopyAvailablePhysicalInterfaces():CFArrayRef"/>
    <method name="SCVLANInterfaceCreate(SCPreferencesRef;SCNetworkInterfaceRef;CFNumberRef):SCVLANInterfaceRef"/>
    <method name="SCVLANInterfaceGetOptions(SCVLANInterfaceRef):CFDictionaryRef"/>
    <method name="SCVLANInterfaceGetPhysicalInterface(SCVLANInterfaceRef):SCNetworkInterfaceRef"/>
    <method name="SCVLANInterfaceGetTag(SCVLANInterfaceRef):CFNumberRef"/>
    <method name="SCVLANInterfaceRemove(SCVLANInterfaceRef):Boolean"/>
    <method name="SCVLANInterfaceSetLocalizedDisplayName(SCVLANInterfaceRef;CFStringRef):Boolean"/>
    <method name="SCVLANInterfaceSetOptions(SCVLANInterfaceRef;CFDictionaryRef):Boolean"/>
    <method name="SCVLANInterfaceSetPhysicalInterfaceAndTag(SCVLANInterfaceRef;SCNetworkInterfaceRef;CFNumberRef):Boolean"/>
    <method name="SHA(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA1(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA1_Final(unsigned char*;SHA_CTX*):int"/>
    <method name="SHA1_Init(SHA_CTX*):int"/>
    <method name="SHA1_Transform(SHA_CTX*;const unsigned char*):void"/>
    <method name="SHA1_Update(SHA_CTX*;const void*;size_t):int"/>
    <method name="SHA224(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA224_Final(unsigned char*;SHA256_CTX*):int"/>
    <method name="SHA224_Init(SHA256_CTX*):int"/>
    <method name="SHA224_Update(SHA256_CTX*;const void*;size_t):int"/>
    <method name="SHA256(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA256_Final(unsigned char*;SHA256_CTX*):int"/>
    <method name="SHA256_Init(SHA256_CTX*):int"/>
    <method name="SHA256_Transform(SHA256_CTX*;const unsigned char*):void"/>
    <method name="SHA256_Update(SHA256_CTX*;const void*;size_t):int"/>
    <method name="SHA384(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA384_Final(unsigned char*;SHA512_CTX*):int"/>
    <method name="SHA384_Init(SHA512_CTX*):int"/>
    <method name="SHA384_Update(SHA512_CTX*;const void*;size_t):int"/>
    <method name="SHA512(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA512_Final(unsigned char*;SHA512_CTX*):int"/>
    <method name="SHA512_Init(SHA512_CTX*):int"/>
    <method name="SHA512_Transform(SHA512_CTX*;const unsigned char*):void"/>
    <method name="SHA512_Update(SHA512_CTX*;const void*;size_t):int"/>
    <method name="SHA_Final(unsigned char*;SHA_CTX*):int"/>
    <method name="SHA_Init(SHA_CTX*):int"/>
    <method name="SHA_Transform(SHA_CTX*;const unsigned char*):void"/>
    <method name="SHA_Update(SHA_CTX*;const void*;size_t):int"/>
    <method name="SINGLETON_IMPLEMENTATION(UAInboxNavUI*):int"/>
    <method name="SMIME_crlf_copy(BIO*;BIO*;int):int"/>
    <method name="SMIME_read_PKCS7(BIO*;BIO**):PKCS7*"/>
    <method name="SMIME_text(BIO*;BIO*):int"/>
    <method name="SMIME_write_PKCS7(BIO*;PKCS7*;BIO*;int):int"/>
    <method name="SSLAddDistinguishedName(SSLContextRef;const void*;size_t):OSStatus"/>
    <method name="SSLClose(SSLContextRef):OSStatus"/>
    <method name="SSLContextGetTypeID():CFTypeID"/>
    <method name="SSLCopyDistinguishedNames(SSLContextRef;CFArrayRef*):OSStatus"/>
    <method name="SSLCopyPeerTrust(SSLContextRef;SecTrustRef*):OSStatus"/>
    <method name="SSLCreateContext(CFAllocatorRef;SSLProtocolSide;SSLConnectionType):SSLContextRef"/>
    <method name="SSLGetBufferedReadSize(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetClientCertificateState(SSLContextRef;SSLClientCertificateState*):OSStatus"/>
    <method name="SSLGetConnection(SSLContextRef;SSLConnectionRef*):OSStatus"/>
    <method name="SSLGetDatagramWriteSize(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetEnabledCiphers(SSLContextRef;SSLCipherSuite*;size_t*):OSStatus"/>
    <method name="SSLGetMaxDatagramRecordSize(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetNegotiatedCipher(SSLContextRef;SSLCipherSuite*):OSStatus"/>
    <method name="SSLGetNegotiatedProtocolVersion(SSLContextRef;SSLProtocol*):OSStatus"/>
    <method name="SSLGetNumberEnabledCiphers(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetNumberSupportedCiphers(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetPeerDomainName(SSLContextRef;char*;size_t*):OSStatus"/>
    <method name="SSLGetPeerDomainNameLength(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetPeerID(SSLContextRef;const void**;size_t*):OSStatus"/>
    <method name="SSLGetProtocolVersionMax(SSLContextRef;SSLProtocol*):OSStatus"/>
    <method name="SSLGetProtocolVersionMin(SSLContextRef;SSLProtocol*):OSStatus"/>
    <method name="SSLGetSessionOption(SSLContextRef;SSLSessionOption;Boolean*):OSStatus"/>
    <method name="SSLGetSessionState(SSLContextRef;SSLSessionState*):OSStatus"/>
    <method name="SSLGetSupportedCiphers(SSLContextRef;SSLCipherSuite*;size_t*):OSStatus"/>
    <method name="SSLHandshake(SSLContextRef):OSStatus"/>
    <method name="SSLRead(SSLContextRef;void*;size_t;size_t*):OSStatus"/>
    <method name="SSLSetCertificate(SSLContextRef;CFArrayRef):OSStatus"/>
    <method name="SSLSetClientSideAuthenticate(SSLContextRef;SSLAuthenticate):OSStatus"/>
    <method name="SSLSetConnection(SSLContextRef;SSLConnectionRef):OSStatus"/>
    <method name="SSLSetDatagramHelloCookie(SSLContextRef;const void*;size_t):OSStatus"/>
    <method name="SSLSetEnabledCiphers(SSLContextRef;const SSLCipherSuite*;size_t):OSStatus"/>
    <method name="SSLSetEncryptionCertificate(SSLContextRef;CFArrayRef):OSStatus"/>
    <method name="SSLSetIOFuncs(SSLContextRef;SSLReadFunc;SSLWriteFunc):OSStatus"/>
    <method name="SSLSetMaxDatagramRecordSize(SSLContextRef;size_t):OSStatus"/>
    <method name="SSLSetPeerDomainName(SSLContextRef;const char*;size_t):OSStatus"/>
    <method name="SSLSetPeerID(SSLContextRef;const void*;size_t):OSStatus"/>
    <method name="SSLSetProtocolVersionMax(SSLContextRef;SSLProtocol):OSStatus"/>
    <method name="SSLSetProtocolVersionMin(SSLContextRef;SSLProtocol):OSStatus"/>
    <method name="SSLSetSessionOption(SSLContextRef;SSLSessionOption;Boolean):OSStatus"/>
    <method name="SSLWrite(SSLContextRef;const void*;size_t;size_t*):OSStatus"/>
    <method name="SSL_CIPHER_description(SSL_CIPHER*;char*;int):char*"/>
    <method name="SSL_CIPHER_get_bits(const SSL_CIPHER*;int*):int"/>
    <method name="SSL_CIPHER_get_name(const SSL_CIPHER*):const char*"/>
    <method name="SSL_CIPHER_get_version(const SSL_CIPHER*):char*"/>
    <method name="SSL_COMP_add_compression_method(int;COMP_METHOD*):int"/>
    <method name="SSL_COMP_get_compression_methods():STACK*"/>
    <method name="SSL_COMP_get_name(const COMP_METHOD*):const char*"/>
    <method name="SSL_CTX_add_client_CA(SSL_CTX*;X509*):int"/>
    <method name="SSL_CTX_add_session(SSL_CTX*;SSL_SESSION*):int"/>
    <method name="SSL_CTX_callback_ctrl(SSL_CTX*;int;(*)():void*):long"/>
    <method name="SSL_CTX_check_private_key(const SSL_CTX*):int"/>
    <method name="SSL_CTX_ctrl(SSL_CTX*;int;long;void*):long"/>
    <method name="SSL_CTX_flush_sessions(SSL_CTX*;long):void"/>
    <method name="SSL_CTX_free(SSL_CTX*):void"/>
    <method name="SSL_CTX_get_cert_store(const SSL_CTX*):X509_STORE*"/>
    <method name="SSL_CTX_get_client_CA_list(const SSL_CTX*):STACK*"/>
    <method name="SSL_CTX_get_ex_data(const SSL_CTX*;int):void*"/>
    <method name="SSL_CTX_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="SSL_CTX_get_quiet_shutdown(const SSL_CTX*):int"/>
    <method name="SSL_CTX_get_timeout(const SSL_CTX*):long"/>
    <method name="SSL_CTX_get_verify_callback(const SSL_CTX*):(*)(int;X509_STORE_CTX*):int*"/>
    <method name="SSL_CTX_get_verify_depth(const SSL_CTX*):int"/>
    <method name="SSL_CTX_get_verify_mode(const SSL_CTX*):int"/>
    <method name="SSL_CTX_load_verify_locations(SSL_CTX*;const char*;const char*):int"/>
    <method name="SSL_CTX_new(SSL_METHOD*):SSL_CTX*"/>
    <method name="SSL_CTX_remove_session(SSL_CTX*;SSL_SESSION*):int"/>
    <method name="SSL_CTX_sessions(SSL_CTX*):lhash_st*"/>
    <method name="SSL_CTX_set_cert_store(SSL_CTX*;X509_STORE*):void"/>
    <method name="SSL_CTX_set_cert_verify_callback(SSL_CTX*;(*)(X509_STORE_CTX*;void*):int*;void*):void"/>
    <method name="SSL_CTX_set_cipher_list(SSL_CTX*;const char*):int"/>
    <method name="SSL_CTX_set_client_CA_list(SSL_CTX*;STACK*):void"/>
    <method name="SSL_CTX_set_default_passwd_cb(SSL_CTX*;pem_password_cb*):void"/>
    <method name="SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX*;void*):void"/>
    <method name="SSL_CTX_set_default_verify_paths(SSL_CTX*):int"/>
    <method name="SSL_CTX_set_ex_data(SSL_CTX*;int;void*):int"/>
    <method name="SSL_CTX_set_generate_session_id(SSL_CTX*;GEN_SESSION_CB):int"/>
    <method name="SSL_CTX_set_msg_callback(SSL_CTX*;(*)(int;int;int;const void*;size_t;SSL*;void*):void*):void"/>
    <method name="SSL_CTX_set_purpose(SSL_CTX*;int):int"/>
    <method name="SSL_CTX_set_quiet_shutdown(SSL_CTX*;int):void"/>
    <method name="SSL_CTX_set_session_id_context(SSL_CTX*;const unsigned char*;unsigned int):int"/>
    <method name="SSL_CTX_set_ssl_version(SSL_CTX*;SSL_METHOD*):int"/>
    <method name="SSL_CTX_set_timeout(SSL_CTX*;long):long"/>
    <method name="SSL_CTX_set_tmp_dh_callback(SSL_CTX*;(*)(SSL*;int;int):DH**):void"/>
    <method name="SSL_CTX_set_tmp_ecdh_callback(SSL_CTX*;(*)(SSL*;int;int):EC_KEY**):void"/>
    <method name="SSL_CTX_set_tmp_rsa_callback(SSL_CTX*;(*)(SSL*;int;int):RSA**):void"/>
    <method name="SSL_CTX_set_trust(SSL_CTX*;int):int"/>
    <method name="SSL_CTX_set_verify(SSL_CTX*;int;(*)(int;X509_STORE_CTX*):int*):void"/>
    <method name="SSL_CTX_set_verify_depth(SSL_CTX*;int):void"/>
    <method name="SSL_CTX_use_PrivateKey(SSL_CTX*;EVP_PKEY*):int"/>
    <method name="SSL_CTX_use_PrivateKey_ASN1(int;SSL_CTX*;const unsigned char*;long):int"/>
    <method name="SSL_CTX_use_PrivateKey_file(SSL_CTX*;const char*;int):int"/>
    <method name="SSL_CTX_use_RSAPrivateKey(SSL_CTX*;RSA*):int"/>
    <method name="SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX*;const unsigned char*;long):int"/>
    <method name="SSL_CTX_use_RSAPrivateKey_file(SSL_CTX*;const char*;int):int"/>
    <method name="SSL_CTX_use_certificate(SSL_CTX*;X509*):int"/>
    <method name="SSL_CTX_use_certificate_ASN1(SSL_CTX*;int;const unsigned char*):int"/>
    <method name="SSL_CTX_use_certificate_chain_file(SSL_CTX*;const char*):int"/>
    <method name="SSL_CTX_use_certificate_file(SSL_CTX*;const char*;int):int"/>
    <method name="SSL_SESSION_cmp(const SSL_SESSION*;const SSL_SESSION*):int"/>
    <method name="SSL_SESSION_free(SSL_SESSION*):void"/>
    <method name="SSL_SESSION_get_ex_data(const SSL_SESSION*;int):void*"/>
    <method name="SSL_SESSION_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="SSL_SESSION_get_id(const SSL_SESSION*;unsigned int*):const unsigned char*"/>
    <method name="SSL_SESSION_get_time(const SSL_SESSION*):long"/>
    <method name="SSL_SESSION_get_timeout(const SSL_SESSION*):long"/>
    <method name="SSL_SESSION_hash(const SSL_SESSION*):unsigned long"/>
    <method name="SSL_SESSION_new():SSL_SESSION*"/>
    <method name="SSL_SESSION_print(BIO*;const SSL_SESSION*):int"/>
    <method name="SSL_SESSION_print_fp(FILE*;const SSL_SESSION*):int"/>
    <method name="SSL_SESSION_set_ex_data(SSL_SESSION*;int;void*):int"/>
    <method name="SSL_SESSION_set_time(SSL_SESSION*;long):long"/>
    <method name="SSL_SESSION_set_timeout(SSL_SESSION*;long):long"/>
    <method name="SSL_accept(SSL*):int"/>
    <method name="SSL_add_client_CA(SSL*;X509*):int"/>
    <method name="SSL_add_dir_cert_subjects_to_stack(STACK*;const char*):int"/>
    <method name="SSL_add_file_cert_subjects_to_stack(STACK*;const char*):int"/>
    <method name="SSL_alert_desc_string(int):const char*"/>
    <method name="SSL_alert_desc_string_long(int):const char*"/>
    <method name="SSL_alert_type_string(int):const char*"/>
    <method name="SSL_alert_type_string_long(int):const char*"/>
    <method name="SSL_callback_ctrl(SSL*;int;(*)():void*):long"/>
    <method name="SSL_check_private_key(const SSL*):int"/>
    <method name="SSL_clear(SSL*):int"/>
    <method name="SSL_connect(SSL*):int"/>
    <method name="SSL_copy_session_id(SSL*;const SSL*):void"/>
    <method name="SSL_ctrl(SSL*;int;long;void*):long"/>
    <method name="SSL_do_handshake(SSL*):int"/>
    <method name="SSL_dup(SSL*):SSL*"/>
    <method name="SSL_dup_CA_list(STACK*):STACK*"/>
    <method name="SSL_free(SSL*):void"/>
    <method name="SSL_get1_session(SSL*):SSL_SESSION*"/>
    <method name="SSL_get_SSL_CTX(const SSL*):SSL_CTX*"/>
    <method name="SSL_get_certificate(const SSL*):X509*"/>
    <method name="SSL_get_cipher_list(const SSL*;int):const char*"/>
    <method name="SSL_get_ciphers(const SSL*):STACK*"/>
    <method name="SSL_get_client_CA_list(const SSL*):STACK*"/>
    <method name="SSL_get_current_cipher(const SSL*):SSL_CIPHER*"/>
    <method name="SSL_get_current_compression(SSL*):const COMP_METHOD*"/>
    <method name="SSL_get_current_expansion(SSL*):const COMP_METHOD*"/>
    <method name="SSL_get_default_timeout(const SSL*):long"/>
    <method name="SSL_get_error(const SSL*;int):int"/>
    <method name="SSL_get_ex_data(const SSL*;int):void*"/>
    <method name="SSL_get_ex_data_X509_STORE_CTX_idx():int"/>
    <method name="SSL_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="SSL_get_fd(const SSL*):int"/>
    <method name="SSL_get_finished(const SSL*;void*;size_t):size_t"/>
    <method name="SSL_get_info_callback(const SSL*):(*)(const SSL*;int;int):void*"/>
    <method name="SSL_get_peer_cert_chain(const SSL*):STACK*"/>
    <method name="SSL_get_peer_certificate(const SSL*):X509*"/>
    <method name="SSL_get_peer_finished(const SSL*;void*;size_t):size_t"/>
    <method name="SSL_get_privatekey(SSL*):evp_pkey_st*"/>
    <method name="SSL_get_quiet_shutdown(const SSL*):int"/>
    <method name="SSL_get_rbio(const SSL*):BIO*"/>
    <method name="SSL_get_read_ahead(const SSL*):int"/>
    <method name="SSL_get_rfd(const SSL*):int"/>
    <method name="SSL_get_session(const SSL*):SSL_SESSION*"/>
    <method name="SSL_get_shared_ciphers(const SSL*;char*;int):char*"/>
    <method name="SSL_get_shutdown(const SSL*):int"/>
    <method name="SSL_get_ssl_method(SSL*):SSL_METHOD*"/>
    <method name="SSL_get_verify_callback(const SSL*):(*)(int;X509_STORE_CTX*):int*"/>
    <method name="SSL_get_verify_depth(const SSL*):int"/>
    <method name="SSL_get_verify_mode(const SSL*):int"/>
    <method name="SSL_get_verify_result(const SSL*):long"/>
    <method name="SSL_get_version(const SSL*):const char*"/>
    <method name="SSL_get_wbio(const SSL*):BIO*"/>
    <method name="SSL_get_wfd(const SSL*):int"/>
    <method name="SSL_has_matching_session_id(const SSL*;const unsigned char*;unsigned int):int"/>
    <method name="SSL_library_init():int"/>
    <method name="SSL_load_client_CA_file(const char*):STACK*"/>
    <method name="SSL_load_error_strings():void"/>
    <method name="SSL_new(SSL_CTX*):SSL*"/>
    <method name="SSL_peek(SSL*;void*;int):int"/>
    <method name="SSL_pending(const SSL*):int"/>
    <method name="SSL_read(SSL*;void*;int):int"/>
    <method name="SSL_renegotiate(SSL*):int"/>
    <method name="SSL_renegotiate_pending(SSL*):int"/>
    <method name="SSL_rstate_string(const SSL*):const char*"/>
    <method name="SSL_rstate_string_long(const SSL*):const char*"/>
    <method name="SSL_set_accept_state(SSL*):void"/>
    <method name="SSL_set_bio(SSL*;BIO*;BIO*):void"/>
    <method name="SSL_set_cipher_list(SSL*;const char*):int"/>
    <method name="SSL_set_client_CA_list(SSL*;STACK*):void"/>
    <method name="SSL_set_connect_state(SSL*):void"/>
    <method name="SSL_set_ex_data(SSL*;int;void*):int"/>
    <method name="SSL_set_fd(SSL*;int):int"/>
    <method name="SSL_set_generate_session_id(SSL*;GEN_SESSION_CB):int"/>
    <method name="SSL_set_info_callback(SSL*;(*)(const SSL*;int;int):void*):void"/>
    <method name="SSL_set_msg_callback(SSL*;(*)(int;int;int;const void*;size_t;SSL*;void*):void*):void"/>
    <method name="SSL_set_purpose(SSL*;int):int"/>
    <method name="SSL_set_quiet_shutdown(SSL*;int):void"/>
    <method name="SSL_set_read_ahead(SSL*;int):void"/>
    <method name="SSL_set_rfd(SSL*;int):int"/>
    <method name="SSL_set_session(SSL*;SSL_SESSION*):int"/>
    <method name="SSL_set_session_id_context(SSL*;const unsigned char*;unsigned int):int"/>
    <method name="SSL_set_shutdown(SSL*;int):void"/>
    <method name="SSL_set_ssl_method(SSL*;SSL_METHOD*):int"/>
    <method name="SSL_set_tmp_dh_callback(SSL*;(*)(SSL*;int;int):DH**):void"/>
    <method name="SSL_set_tmp_ecdh_callback(SSL*;(*)(SSL*;int;int):EC_KEY**):void"/>
    <method name="SSL_set_tmp_rsa_callback(SSL*;(*)(SSL*;int;int):RSA**):void"/>
    <method name="SSL_set_trust(SSL*;int):int"/>
    <method name="SSL_set_verify(SSL*;int;(*)(int;X509_STORE_CTX*):int*):void"/>
    <method name="SSL_set_verify_depth(SSL*;int):void"/>
    <method name="SSL_set_verify_result(SSL*;long):void"/>
    <method name="SSL_set_wfd(SSL*;int):int"/>
    <method name="SSL_shutdown(SSL*):int"/>
    <method name="SSL_state(const SSL*):int"/>
    <method name="SSL_state_string(const SSL*):const char*"/>
    <method name="SSL_state_string_long(const SSL*):const char*"/>
    <method name="SSL_use_PrivateKey(SSL*;EVP_PKEY*):int"/>
    <method name="SSL_use_PrivateKey_ASN1(int;SSL*;const unsigned char*;long):int"/>
    <method name="SSL_use_PrivateKey_file(SSL*;const char*;int):int"/>
    <method name="SSL_use_RSAPrivateKey(SSL*;RSA*):int"/>
    <method name="SSL_use_RSAPrivateKey_ASN1(SSL*;unsigned char*;long):int"/>
    <method name="SSL_use_RSAPrivateKey_file(SSL*;const char*;int):int"/>
    <method name="SSL_use_certificate(SSL*;X509*):int"/>
    <method name="SSL_use_certificate_ASN1(SSL*;const unsigned char*;int):int"/>
    <method name="SSL_use_certificate_file(SSL*;const char*;int):int"/>
    <method name="SSL_version(const SSL*):int"/>
    <method name="SSL_want(const SSL*):int"/>
    <method name="SSL_write(SSL*;const void*;int):int"/>
    <method name="SSLeay():unsigned long"/>
    <method name="SSLeay_version(int):const char*"/>
    <method name="SSLv23_client_method():SSL_METHOD*"/>
    <method name="SSLv23_method():SSL_METHOD*"/>
    <method name="SSLv23_server_method():SSL_METHOD*"/>
    <method name="SSLv2_client_method():SSL_METHOD*"/>
    <method name="SSLv2_method():SSL_METHOD*"/>
    <method name="SSLv2_server_method():SSL_METHOD*"/>
    <method name="SSLv3_client_method():SSL_METHOD*"/>
    <method name="SSLv3_method():SSL_METHOD*"/>
    <method name="SSLv3_server_method():SSL_METHOD*"/>
    <method name="STORE_ATTR_INFO_compare(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_free(STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_get0_cstr(STORE_ATTR_INFO*;STORE_ATTR_TYPES):char*"/>
    <method name="STORE_ATTR_INFO_get0_dn(STORE_ATTR_INFO*;STORE_ATTR_TYPES):X509_NAME*"/>
    <method name="STORE_ATTR_INFO_get0_number(STORE_ATTR_INFO*;STORE_ATTR_TYPES):BIGNUM*"/>
    <method name="STORE_ATTR_INFO_get0_sha1str(STORE_ATTR_INFO*;STORE_ATTR_TYPES):unsigned char*"/>
    <method name="STORE_ATTR_INFO_in(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_in_ex(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_in_range(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_modify_cstr(STORE_ATTR_INFO*;STORE_ATTR_TYPES;char*;size_t):int"/>
    <method name="STORE_ATTR_INFO_modify_dn(STORE_ATTR_INFO*;STORE_ATTR_TYPES;X509_NAME*):int"/>
    <method name="STORE_ATTR_INFO_modify_number(STORE_ATTR_INFO*;STORE_ATTR_TYPES;BIGNUM*):int"/>
    <method name="STORE_ATTR_INFO_modify_sha1str(STORE_ATTR_INFO*;STORE_ATTR_TYPES;unsigned char*;size_t):int"/>
    <method name="STORE_ATTR_INFO_new():STORE_ATTR_INFO*"/>
    <method name="STORE_ATTR_INFO_set_cstr(STORE_ATTR_INFO*;STORE_ATTR_TYPES;char*;size_t):int"/>
    <method name="STORE_ATTR_INFO_set_dn(STORE_ATTR_INFO*;STORE_ATTR_TYPES;X509_NAME*):int"/>
    <method name="STORE_ATTR_INFO_set_number(STORE_ATTR_INFO*;STORE_ATTR_TYPES;BIGNUM*):int"/>
    <method name="STORE_ATTR_INFO_set_sha1str(STORE_ATTR_INFO*;STORE_ATTR_TYPES;unsigned char*;size_t):int"/>
    <method name="STORE_Memory():const STORE_METHOD*"/>
    <method name="STORE_OBJECT_free(STORE_OBJECT*):void"/>
    <method name="STORE_OBJECT_new():STORE_OBJECT*"/>
    <method name="STORE_create_method(char*):STORE_METHOD*"/>
    <method name="STORE_ctrl(STORE*;int;long;void*;(*)():void*):int"/>
    <method name="STORE_delete_arbitrary(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_number(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_destroy_method(STORE_METHOD*):void"/>
    <method name="STORE_free(STORE*):void"/>
    <method name="STORE_generate_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):X509_CRL*"/>
    <method name="STORE_generate_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):EVP_PKEY*"/>
    <method name="STORE_get_arbitrary(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):BUF_MEM*"/>
    <method name="STORE_get_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):X509*"/>
    <method name="STORE_get_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):X509_CRL*"/>
    <method name="STORE_get_ex_data(STORE*;int):void*"/>
    <method name="STORE_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="STORE_get_method(STORE*):const STORE_METHOD*"/>
    <method name="STORE_get_number(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):BIGNUM*"/>
    <method name="STORE_get_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):EVP_PKEY*"/>
    <method name="STORE_get_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):EVP_PKEY*"/>
    <method name="STORE_list_certificate_end(STORE*;void*):int"/>
    <method name="STORE_list_certificate_endp(STORE*;void*):int"/>
    <method name="STORE_list_certificate_next(STORE*;void*):X509*"/>
    <method name="STORE_list_certificate_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_list_crl_end(STORE*;void*):int"/>
    <method name="STORE_list_crl_endp(STORE*;void*):int"/>
    <method name="STORE_list_crl_next(STORE*;void*):X509_CRL*"/>
    <method name="STORE_list_crl_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_list_private_key_end(STORE*;void*):int"/>
    <method name="STORE_list_private_key_endp(STORE*;void*):int"/>
    <method name="STORE_list_private_key_next(STORE*;void*):EVP_PKEY*"/>
    <method name="STORE_list_private_key_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_list_public_key_end(STORE*;void*):int"/>
    <method name="STORE_list_public_key_endp(STORE*;void*):int"/>
    <method name="STORE_list_public_key_next(STORE*;void*):EVP_PKEY*"/>
    <method name="STORE_list_public_key_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_method_get_cleanup_function(STORE_METHOD*):STORE_CLEANUP_FUNC_PTR"/>
    <method name="STORE_method_get_ctrl_function(STORE_METHOD*):STORE_CTRL_FUNC_PTR"/>
    <method name="STORE_method_get_delete_function(STORE_METHOD*):STORE_HANDLE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_generate_function(STORE_METHOD*):STORE_GENERATE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_get_function(STORE_METHOD*):STORE_GET_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_initialise_function(STORE_METHOD*):STORE_INITIALISE_FUNC_PTR"/>
    <method name="STORE_method_get_list_end_function(STORE_METHOD*):STORE_END_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_list_next_function(STORE_METHOD*):STORE_NEXT_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_list_start_function(STORE_METHOD*):STORE_START_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_lock_store_function(STORE_METHOD*):STORE_GENERIC_FUNC_PTR"/>
    <method name="STORE_method_get_modify_function(STORE_METHOD*):STORE_MODIFY_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_revoke_function(STORE_METHOD*):STORE_HANDLE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_store_function(STORE_METHOD*):STORE_STORE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_unlock_store_function(STORE_METHOD*):STORE_GENERIC_FUNC_PTR"/>
    <method name="STORE_method_get_update_store_function(STORE_METHOD*):STORE_GENERIC_FUNC_PTR"/>
    <method name="STORE_method_set_cleanup_function(STORE_METHOD*;STORE_CLEANUP_FUNC_PTR):int"/>
    <method name="STORE_method_set_ctrl_function(STORE_METHOD*;STORE_CTRL_FUNC_PTR):int"/>
    <method name="STORE_method_set_delete_function(STORE_METHOD*;STORE_HANDLE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_generate_function(STORE_METHOD*;STORE_GENERATE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_get_function(STORE_METHOD*;STORE_GET_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_initialise_function(STORE_METHOD*;STORE_INITIALISE_FUNC_PTR):int"/>
    <method name="STORE_method_set_list_end_function(STORE_METHOD*;STORE_END_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_list_next_function(STORE_METHOD*;STORE_NEXT_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_list_start_function(STORE_METHOD*;STORE_START_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_lock_store_function(STORE_METHOD*;STORE_GENERIC_FUNC_PTR):int"/>
    <method name="STORE_method_set_modify_function(STORE_METHOD*;STORE_MODIFY_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_revoke_function(STORE_METHOD*;STORE_HANDLE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_store_function(STORE_METHOD*;STORE_STORE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_unlock_store_function(STORE_METHOD*;STORE_GENERIC_FUNC_PTR):int"/>
    <method name="STORE_method_set_update_store_function(STORE_METHOD*;STORE_GENERIC_FUNC_PTR):int"/>
    <method name="STORE_modify_arbitrary(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_number(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_new_engine(ENGINE*):STORE*"/>
    <method name="STORE_new_method(const STORE_METHOD*):STORE*"/>
    <method name="STORE_parse_attrs_end(void*):int"/>
    <method name="STORE_parse_attrs_endp(void*):int"/>
    <method name="STORE_parse_attrs_next(void*):STORE_ATTR_INFO*"/>
    <method name="STORE_parse_attrs_start(OPENSSL_ITEM*):void*"/>
    <method name="STORE_revoke_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_revoke_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_revoke_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_set_ex_data(STORE*;int;void*):int"/>
    <method name="STORE_set_method(STORE*;const STORE_METHOD*):const STORE_METHOD*"/>
    <method name="STORE_store_arbitrary(STORE*;BUF_MEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_certificate(STORE*;X509*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_crl(STORE*;X509_CRL*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_number(STORE*;BIGNUM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_private_key(STORE*;EVP_PKEY*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_public_key(STORE*;EVP_PKEY*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="SXNETID_free(SXNETID*):void"/>
    <method name="SXNETID_new():SXNETID*"/>
    <method name="SXNET_add_id_INTEGER(SXNET**;ASN1_INTEGER*;char*;int):int"/>
    <method name="SXNET_add_id_asc(SXNET**;char*;char*;int):int"/>
    <method name="SXNET_add_id_ulong(SXNET**;unsigned long;char*;int):int"/>
    <method name="SXNET_free(SXNET*):void"/>
    <method name="SXNET_get_id_INTEGER(SXNET*;ASN1_INTEGER*):ASN1_OCTET_STRING*"/>
    <method name="SXNET_get_id_asc(SXNET*;char*):ASN1_OCTET_STRING*"/>
    <method name="SXNET_get_id_ulong(SXNET*;unsigned long):ASN1_OCTET_STRING*"/>
    <method name="SXNET_new():SXNET*"/>
    <method name="SecCertificateCopyData(SecCertificateRef):CFDataRef"/>
    <method name="SecCertificateCopySubjectSummary(SecCertificateRef):CFStringRef"/>
    <method name="SecCertificateCreateWithData(CFAllocatorRef;CFDataRef):SecCertificateRef"/>
    <method name="SecCertificateGetTypeID():CFTypeID"/>
    <method name="SecIdentityCopyCertificate(SecIdentityRef;SecCertificateRef*):OSStatus"/>
    <method name="SecIdentityCopyPrivateKey(SecIdentityRef;SecKeyRef*):OSStatus"/>
    <method name="SecIdentityGetTypeID():CFTypeID"/>
    <method name="SecItemAdd(CFDictionaryRef;CFTypeRef*):OSStatus"/>
    <method name="SecItemCopyMatching(CFDictionaryRef;CFTypeRef*):OSStatus"/>
    <method name="SecItemDelete(CFDictionaryRef):OSStatus"/>
    <method name="SecItemUpdate(CFDictionaryRef;CFDictionaryRef):OSStatus"/>
    <method name="SecKeyDecrypt(SecKeyRef;SecPadding;const uint8_t*;size_t;uint8_t*;size_t*):OSStatus"/>
    <method name="SecKeyEncrypt(SecKeyRef;SecPadding;const uint8_t*;size_t;uint8_t*;size_t*):OSStatus"/>
    <method name="SecKeyGeneratePair(CFDictionaryRef;SecKeyRef*;SecKeyRef*):OSStatus"/>
    <method name="SecKeyGetBlockSize(SecKeyRef):size_t"/>
    <method name="SecKeyGetTypeID():CFTypeID"/>
    <method name="SecKeyRawSign(SecKeyRef;SecPadding;const uint8_t*;size_t;uint8_t*;size_t*):OSStatus"/>
    <method name="SecKeyRawVerify(SecKeyRef;SecPadding;const uint8_t*;size_t;const uint8_t*;size_t):OSStatus"/>
    <method name="SecPKCS12Import(CFDataRef;CFDictionaryRef;CFArrayRef*):OSStatus"/>
    <method name="SecPolicyCreateBasicX509():SecPolicyRef"/>
    <method name="SecPolicyCreateSSL(Boolean;CFStringRef):SecPolicyRef"/>
    <method name="SecPolicyGetTypeID():CFTypeID"/>
    <method name="SecRandomCopyBytes(SecRandomRef;size_t;uint8_t*):int"/>
    <method name="SecTrustCopyExceptions(SecTrustRef):CFDataRef"/>
    <method name="SecTrustCopyPublicKey(SecTrustRef):SecKeyRef"/>
    <method name="SecTrustCreateWithCertificates(CFTypeRef;CFTypeRef;SecTrustRef*):OSStatus"/>
    <method name="SecTrustEvaluate(SecTrustRef;SecTrustResultType*):OSStatus"/>
    <method name="SecTrustGetCertificateAtIndex(SecTrustRef;CFIndex):SecCertificateRef"/>
    <method name="SecTrustGetCertificateCount(SecTrustRef):CFIndex"/>
    <method name="SecTrustGetTypeID():CFTypeID"/>
    <method name="SecTrustGetVerifyTime(SecTrustRef):CFAbsoluteTime"/>
    <method name="SecTrustSetAnchorCertificates(SecTrustRef;CFArrayRef):OSStatus"/>
    <method name="SecTrustSetAnchorCertificatesOnly(SecTrustRef;Boolean):OSStatus"/>
    <method name="SecTrustSetExceptions(SecTrustRef;CFDataRef):_Bool"/>
    <method name="SecTrustSetVerifyDate(SecTrustRef;CFDateRef):OSStatus"/>
    <method name="SecurityDescriptor1stNullName2ndNotNull"/>
    <method name="SecurityDescriptor1stNullName3rdNotNull"/>
    <method name="SecurityDescriptor1stNullName4thNotNull"/>
    <method name="SecurityDescriptor2ndNull"/>
    <method name="SecurityDescriptor2ndNullName6thNotNull"/>
    <method name="SecurityDescriptor8thNull"/>
    <method name="SendMessage(HWND; unsigned int; WPARAM; LPARAM): LPRESULT"/>
    <method name="SetBLASParamErrorProc(BLASParamErrorProc):void"/>
    <method name="SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR;BOOL;PACL;BOOL):BOOL"/>
    <method name="SetServiceA(DWORD;DWORD;DWORD;LPSERVICE_INFOA;LPSERVICE_ASYNC_INFO;LPDWORD):INT"/>
    <method name="SetThreadToken(PHANDLE;HANDLE):BOOL"/>
    <method name="ShellCommand1stTainted"/>
    <method name="ShellExecute(HWND; LPCTSTR; LPCTSTR; LPCTSTR; LPCTSTR; int): HINSTANCE"/>
    <method name="ShellExecuteA(HWND;LPCSTR;LPCSTR;LPCSTR;LPCSTR;INT):HINSTANCE"/>
    <method name="ShellExecuteW(HWND;LPCWSTR;LPCWSTR;LPCWSTR;LPCWSTR;INT):HINSTANCE"/>
    <method name="Src1stFormat2ndArgs3rdCScanfFormat"/>
    <method name="Src1stFormat2ndVa_list3rdCScanfFormat"/>
    <method name="Src1stFormat2ndVa_list3rdCScanfFormatInternalSrc"/>
    <method name="Src1stTainted"/>
    <method name="Src1stUnterminated"/>
    <method name="Src2ndAnyInternalSrc"/>
    <method name="Src2ndAnyNonInternalSrc"/>
    <method name="Src2ndTainted"/>
    <method name="StrCat(LPTSTR; LPCTSTR): LPTSTR"/>
    <method name="StrCpy(LPTSTR; LPCTSTR): LPTSTR"/>
    <method name="SysBreak():void"/>
    <method name="SysBreakFunc(ConstStr255Param):void"/>
    <method name="SysBreakStr(ConstStr255Param):void"/>
    <method name="TLSv1_client_method():SSL_METHOD*"/>
    <method name="TLSv1_method():SSL_METHOD*"/>
    <method name="TLSv1_server_method():SSL_METHOD*"/>
    <method name="TTAlert(NSString*):void"/>
    <method name="TTAlertNoTitle(NSString*):void"/>
    <method name="TTApplicationFrame():CGRect"/>
    <method name="TTDeviceOrientation():UIDeviceOrientation"/>
    <method name="TTDeviceOrientationIsLandscape():BOOL"/>
    <method name="TTDeviceOrientationIsPortrait():BOOL"/>
    <method name="TTGroupedTableCellInset():CGFloat"/>
    <method name="TTIsKeyboardVisible():BOOL"/>
    <method name="TTIsPad():BOOL"/>
    <method name="TTIsPhoneSupported():BOOL"/>
    <method name="TTIsSupportedOrientation(UIInterfaceOrientation):BOOL"/>
    <method name="TTKeyboardHeightForOrientation(UIInterfaceOrientation):CGFloat"/>
    <method name="TTNetworkRequestStarted():void"/>
    <method name="TTNetworkRequestStopped():void"/>
    <method name="TTOSVersion():float"/>
    <method name="TTOSVersionIsAtLeast(float):BOOL"/>
    <method name="TTRotateTransformForOrientation(UIInterfaceOrientation):CGAffineTransform"/>
    <method name="TTToolbarHeightForOrientation(UIInterfaceOrientation):CGFloat"/>
    <method name="TXTRecordContainsKey(uint16_t;const void*;const char*):int"/>
    <method name="TXTRecordCreate(TXTRecordRef*;uint16_t;void*):void"/>
    <method name="TXTRecordDeallocate(TXTRecordRef*):void"/>
    <method name="TXTRecordGetBytesPtr(const TXTRecordRef*):const void*"/>
    <method name="TXTRecordGetCount(uint16_t;const void*):uint16_t"/>
    <method name="TXTRecordGetItemAtIndex(uint16_t;const void*;uint16_t;uint16_t;char*;uint8_t*;const void**):DNSServiceErrorType"/>
    <method name="TXTRecordGetLength(const TXTRecordRef*):uint16_t"/>
    <method name="TXTRecordGetValuePtr(uint16_t;const void*;const char*;uint8_t*):const void*"/>
    <method name="TXTRecordRemoveValue(TXTRecordRef*;const char*):DNSServiceErrorType"/>
    <method name="TXTRecordSetValue(TXTRecordRef*;const char*;uint8_t;const void*):DNSServiceErrorType"/>
    <method name="TXT_DB_create_index(TXT_DB*;int;(*)(char**):int*;LHASH_HASH_FN_TYPE;LHASH_COMP_FN_TYPE):int"/>
    <method name="TXT_DB_free(TXT_DB*):void"/>
    <method name="TXT_DB_get_by_index(TXT_DB*;int;char**):char**"/>
    <method name="TXT_DB_insert(TXT_DB*;char**):int"/>
    <method name="TXT_DB_read(BIO*;int):TXT_DB*"/>
    <method name="TXT_DB_write(BIO*;TXT_DB*):long"/>
    <method name="TransmitFile(SOCKET;HANDLE;DWORD;DWORD;LPOVERLAPPED;LPTRANSMIT_FILE_BUFFERS;DWORD):BOOL"/>
    <method name="UAActiveViewController():int*"/>
    <method name="UAFrameForCurrentOrientation(Rect):Rect"/>
    <method name="UARotateTransformForCurrentOrientation():int"/>
    <method name="UA_VERSION_INTERFACE(int):int"/>
    <method name="UA_fill_fopen_filefunc(zlib_filefunc_def*):void"/>
    <method name="UA_unzClose(unzFile):int"/>
    <method name="UA_unzCloseCurrentFile(unzFile):int"/>
    <method name="UA_unzGetCurrentFileInfo(unzFile;unz_file_info*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="UA_unzGetFilePos(unzFile;unz_file_pos*):int"/>
    <method name="UA_unzGetGlobalComment(unzFile;char*;uLong):int"/>
    <method name="UA_unzGetGlobalInfo(unzFile;unz_global_info*):int"/>
    <method name="UA_unzGetLocalExtrafield(unzFile;voidp;unsigned int):int"/>
    <method name="UA_unzGetOffset(unzFile):uLong"/>
    <method name="UA_unzGoToFilePos(unzFile;unz_file_pos*):int"/>
    <method name="UA_unzGoToFirstFile(unzFile):int"/>
    <method name="UA_unzGoToNextFile(unzFile):int"/>
    <method name="UA_unzLocateFile(unzFile;const char*;int):int"/>
    <method name="UA_unzOpen(const char*):unzFile"/>
    <method name="UA_unzOpen2(const char*;zlib_filefunc_def*):unzFile"/>
    <method name="UA_unzOpenCurrentFile(unzFile):int"/>
    <method name="UA_unzOpenCurrentFile2(unzFile;int*;int*;int):int"/>
    <method name="UA_unzOpenCurrentFile3(unzFile;int*;int*;int;const char*):int"/>
    <method name="UA_unzOpenCurrentFilePassword(unzFile;const char*):int"/>
    <method name="UA_unzReadCurrentFile(unzFile;voidp;unsigned int):int"/>
    <method name="UA_unzRepair(const char*;const char*;const char*;uLong*;uLong*):int"/>
    <method name="UA_unzSetOffset(unzFile;uLong):int"/>
    <method name="UA_unzStringFileNameCompare(const char*;const char*;int):int"/>
    <method name="UA_unzeof(unzFile):int"/>
    <method name="UA_unztell(unzFile):long"/>
    <method name="UA_zipClose(zipFile;const char*):int"/>
    <method name="UA_zipCloseFileInZip(zipFile):int"/>
    <method name="UA_zipCloseFileInZipRaw(zipFile;uLong;uLong):int"/>
    <method name="UA_zipOpen(const char*;int):zipFile"/>
    <method name="UA_zipOpen2(const char*;int;zipcharpc*;zlib_filefunc_def*):zipFile"/>
    <method name="UA_zipOpenNewFileInZip(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int):int"/>
    <method name="UA_zipOpenNewFileInZip2(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int):int"/>
    <method name="UA_zipOpenNewFileInZip3(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong):int"/>
    <method name="UA_zipWriteInFileInZip(zipFile;const void*;unsigned int):int"/>
    <method name="UIAccessibilityIsClosedCaptioningEnabled():BOOL"/>
    <method name="UIAccessibilityIsGuidedAccessEnabled():BOOL"/>
    <method name="UIAccessibilityIsInvertColorsEnabled():BOOL"/>
    <method name="UIAccessibilityIsMonoAudioEnabled():BOOL"/>
    <method name="UIAccessibilityIsVoiceOverRunning():BOOL"/>
    <method name="UIAccessibilityPostNotification(UIAccessibilityNotifications;id):void"/>
    <method name="UIAccessibilityRegisterGestureConflictWithZoom():void"/>
    <method name="UIAccessibilityZoomFocusChanged(UIAccessibilityZoomType;CGRect;UIView*):void"/>
    <method name="UIApplicationMain(int;char**;NSString*;NSString*):int"/>
    <method name="UIEdgeInsetsEqualToEdgeInsets(UIEdgeInsets;UIEdgeInsets):BOOL"/>
    <method name="UIEdgeInsetsFromString(NSString*):UIEdgeInsets"/>
    <method name="UIEdgeInsetsInsetRect(CGRect;UIEdgeInsets):CGRect"/>
    <method name="UIEdgeInsetsMake(CGFloat;CGFloat;CGFloat;CGFloat):UIEdgeInsets"/>
    <method name="UIGraphicsAddPDFContextDestinationAtPoint(NSString*;CGPoint):void"/>
    <method name="UIGraphicsBeginImageContext(CGSize):void"/>
    <method name="UIGraphicsBeginImageContextWithOptions(CGSize;BOOL;CGFloat):void"/>
    <method name="UIGraphicsBeginPDFContextToData(NSMutableData*;CGRect;NSDictionary*):void"/>
    <method name="UIGraphicsBeginPDFContextToFile(NSString*;CGRect;NSDictionary*):BOOL"/>
    <method name="UIGraphicsBeginPDFPage():void"/>
    <method name="UIGraphicsBeginPDFPageWithInfo(CGRect;NSDictionary*):void"/>
    <method name="UIGraphicsEndImageContext():void"/>
    <method name="UIGraphicsEndPDFContext():void"/>
    <method name="UIGraphicsGetCurrentContext():CGContextRef"/>
    <method name="UIGraphicsGetImageFromCurrentImageContext():UIImage*"/>
    <method name="UIGraphicsGetPDFContextBounds():CGRect"/>
    <method name="UIGraphicsPopContext():void"/>
    <method name="UIGraphicsPushContext(CGContextRef):void"/>
    <method name="UIGraphicsSetPDFContextDestinationForRect(NSString*;CGRect):void"/>
    <method name="UIGraphicsSetPDFContextURLForRect(NSURL*;CGRect):void"/>
    <method name="UIImageJPEGRepresentation(UIImage*;CGFloat):NSData*"/>
    <method name="UIImagePNGRepresentation(UIImage*):NSData*"/>
    <method name="UIImageWriteToSavedPhotosAlbum(UIImage*;id;SEL;void*):void"/>
    <method name="UIOffsetEqualToOffset(UIOffset;UIOffset):BOOL"/>
    <method name="UIOffsetFromString(NSString*):UIOffset"/>
    <method name="UIOffsetMake(CGFloat;CGFloat):UIOffset"/>
    <method name="UIRectClip(CGRect):void"/>
    <method name="UIRectFill(CGRect):void"/>
    <method name="UIRectFillUsingBlendMode(CGRect;CGBlendMode):void"/>
    <method name="UIRectFrame(CGRect):void"/>
    <method name="UIRectFrameUsingBlendMode(CGRect;CGBlendMode):void"/>
    <method name="UISaveVideoAtPathToSavedPhotosAlbum(NSString*;id;SEL;void*):void"/>
    <method name="UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(NSString*):BOOL"/>
    <method name="UI_OpenSSL():UI_METHOD*"/>
    <method name="UI_UTIL_read_pw(char*;char*;int;const char*;int):int"/>
    <method name="UI_UTIL_read_pw_string(char*;int;const char*;int):int"/>
    <method name="UI_add_error_string(UI*;const char*):int"/>
    <method name="UI_add_info_string(UI*;const char*):int"/>
    <method name="UI_add_input_boolean(UI*;const char*;const char*;const char*;const char*;int;char*):int"/>
    <method name="UI_add_input_string(UI*;const char*;int;char*;int;int):int"/>
    <method name="UI_add_user_data(UI*;void*):void*"/>
    <method name="UI_add_verify_string(UI*;const char*;int;char*;int;int;const char*):int"/>
    <method name="UI_construct_prompt(UI*;const char*;const char*):char*"/>
    <method name="UI_create_method(char*):UI_METHOD*"/>
    <method name="UI_ctrl(UI*;int;long;void*;(*)():void*):int"/>
    <method name="UI_destroy_method(UI_METHOD*):void"/>
    <method name="UI_dup_error_string(UI*;const char*):int"/>
    <method name="UI_dup_info_string(UI*;const char*):int"/>
    <method name="UI_dup_input_boolean(UI*;const char*;const char*;const char*;const char*;int;char*):int"/>
    <method name="UI_dup_input_string(UI*;const char*;int;char*;int;int):int"/>
    <method name="UI_dup_verify_string(UI*;const char*;int;char*;int;int;const char*):int"/>
    <method name="UI_free(UI*):void"/>
    <method name="UI_get0_action_string(UI_STRING*):const char*"/>
    <method name="UI_get0_output_string(UI_STRING*):const char*"/>
    <method name="UI_get0_result(UI*;int):const char*"/>
    <method name="UI_get0_result_string(UI_STRING*):const char*"/>
    <method name="UI_get0_test_string(UI_STRING*):const char*"/>
    <method name="UI_get0_user_data(UI*):void*"/>
    <method name="UI_get_default_method():const UI_METHOD*"/>
    <method name="UI_get_ex_data(UI*;int):void*"/>
    <method name="UI_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="UI_get_input_flags(UI_STRING*):int"/>
    <method name="UI_get_method(UI*):const UI_METHOD*"/>
    <method name="UI_get_result_maxsize(UI_STRING*):int"/>
    <method name="UI_get_result_minsize(UI_STRING*):int"/>
    <method name="UI_get_string_type(UI_STRING*):UI_string_types"/>
    <method name="UI_method_get_closer(UI_METHOD*):(*)(UI*):int*"/>
    <method name="UI_method_get_flusher(UI_METHOD*):(*)(UI*):int*"/>
    <method name="UI_method_get_opener(UI_METHOD*):(*)(UI*):int*"/>
    <method name="UI_method_get_reader(UI_METHOD*):(*)(UI*;UI_STRING*):int*"/>
    <method name="UI_method_get_writer(UI_METHOD*):(*)(UI*;UI_STRING*):int*"/>
    <method name="UI_method_set_closer(UI_METHOD*;(*)(UI*):int*):int"/>
    <method name="UI_method_set_flusher(UI_METHOD*;(*)(UI*):int*):int"/>
    <method name="UI_method_set_opener(UI_METHOD*;(*)(UI*):int*):int"/>
    <method name="UI_method_set_reader(UI_METHOD*;(*)(UI*;UI_STRING*):int*):int"/>
    <method name="UI_method_set_writer(UI_METHOD*;(*)(UI*;UI_STRING*):int*):int"/>
    <method name="UI_new():UI*"/>
    <method name="UI_new_method(const UI_METHOD*):UI*"/>
    <method name="UI_process(UI*):int"/>
    <method name="UI_set_default_method(const UI_METHOD*):void"/>
    <method name="UI_set_ex_data(UI*;int;void*):int"/>
    <method name="UI_set_method(UI*;const UI_METHOD*):const UI_METHOD*"/>
    <method name="UI_set_result(UI*;UI_STRING*;const char*):int"/>
    <method name="UTCreateStringForOSType(OSType):CFStringRef"/>
    <method name="UTF8_getc(const unsigned char*;int;unsigned long*):int"/>
    <method name="UTF8_putc(unsigned char*;int;unsigned long):int"/>
    <method name="UTGetOSTypeFromString(CFStringRef):OSType"/>
    <method name="UTTypeConformsTo(CFStringRef;CFStringRef):Boolean"/>
    <method name="UTTypeCopyDeclaration(CFStringRef):CFDictionaryRef"/>
    <method name="UTTypeCopyDeclaringBundleURL(CFStringRef):CFURLRef"/>
    <method name="UTTypeCopyDescription(CFStringRef):CFStringRef"/>
    <method name="UTTypeCopyPreferredTagWithClass(CFStringRef;CFStringRef):CFStringRef"/>
    <method name="UTTypeCreateAllIdentifiersForTag(CFStringRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="UTTypeCreatePreferredIdentifierForTag(CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="UTTypeEqual(CFStringRef;CFStringRef):Boolean"/>
    <method name="WPUCloseEvent(HANDLE;LPINT):BOOL"/>
    <method name="WPUCloseSocketHandle(SOCKET;LPINT):int"/>
    <method name="WPUCloseThread(LPWSATHREADID;LPINT):int"/>
    <method name="WPUCompleteOverlappedRequest(SOCKET;LPWSAOVERLAPPED;DWORD;DWORD;LPINT):int"/>
    <method name="WPUCreateEvent(LPINT):HANDLE"/>
    <method name="WPUCreateSocketHandle(DWORD;DWORD_PTR;LPINT):SOCKET"/>
    <method name="WPUFDIsSet(SOCKET;fd_set*):int"/>
    <method name="WPUGetProviderPath(LPGUID;WCHAR*;LPINT;LPINT):int"/>
    <method name="WPUModifyIFSHandle(DWORD;SOCKET;LPINT):SOCKET"/>
    <method name="WPUOpenCurrentThread(LPWSATHREADID;LPINT):int"/>
    <method name="WPUPostMessage(HWND;UINT;WPARAM;LPARAM):BOOL"/>
    <method name="WPUQueryBlockingCallback(DWORD;LPBLOCKINGCALLBACK*;PDWORD_PTR;LPINT):int"/>
    <method name="WPUQuerySocketHandleContext(SOCKET;PDWORD_PTR;LPINT):int"/>
    <method name="WPUQueueApc(LPWSATHREADID;LPWSAUSERAPC;DWORD_PTR;LPINT):int"/>
    <method name="WPUResetEvent(HANDLE;LPINT):BOOL"/>
    <method name="WPUSetEvent(HANDLE;LPINT):BOOL"/>
    <method name="WSAAccept(SOCKET;sockaddr*;LPINT;LPCONDITIONPROC;DWORD_PTR):SOCKET"/>
    <method name="WSAAddressToStringA(LPSOCKADDR;DWORD;LPWSAPROTOCOL_INFOA;LPSTR;LPDWORD):INT"/>
    <method name="WSAAddressToStringW(LPSOCKADDR;DWORD;LPWSAPROTOCOL_INFOW;LPWSTR;LPDWORD):INT"/>
    <method name="WSAAsyncGetHostByAddr(HWND;u_int;const char*;int;int;char*;int):HANDLE"/>
    <method name="WSAAsyncGetHostByName(HWND;u_int;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncGetProtoByName(HWND;u_int;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncGetProtoByNumber(HWND;u_int;int;char*;int):HANDLE"/>
    <method name="WSAAsyncGetServByName(HWND;u_int;const char*;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncGetServByPort(HWND;u_int;int;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncSelect(SOCKET;HWND;u_int;long):int"/>
    <method name="WSACancelAsyncRequest(HANDLE):int"/>
    <method name="WSACancelBlockingCall():int"/>
    <method name="WSACleanup():int"/>
    <method name="WSACloseEvent(HANDLE):BOOL"/>
    <method name="WSAConnect(SOCKET;const sockaddr*;int;LPWSABUF;LPWSABUF;LPQOS;LPQOS):int"/>
    <method name="WSACreateEvent():HANDLE"/>
    <method name="WSADuplicateSocketA(SOCKET;DWORD;LPWSAPROTOCOL_INFOA):int"/>
    <method name="WSADuplicateSocketW(SOCKET;DWORD;LPWSAPROTOCOL_INFOW):int"/>
    <method name="WSAEnumNameSpaceProvidersA(LPDWORD;LPWSANAMESPACE_INFOA):INT"/>
    <method name="WSAEnumNameSpaceProvidersW(LPDWORD;LPWSANAMESPACE_INFOW):INT"/>
    <method name="WSAEnumNetworkEvents(SOCKET;HANDLE;LPWSANETWORKEVENTS):int"/>
    <method name="WSAEnumProtocolsA(LPINT;LPWSAPROTOCOL_INFOA;LPDWORD):int"/>
    <method name="WSAEnumProtocolsW(LPINT;LPWSAPROTOCOL_INFOW;LPDWORD):int"/>
    <method name="WSAEventSelect(SOCKET;HANDLE;long):int"/>
    <method name="WSAGetLastError():int"/>
    <method name="WSAGetOverlappedResult(SOCKET;LPWSAOVERLAPPED;LPDWORD;BOOL;LPDWORD):BOOL"/>
    <method name="WSAGetQOSByName(SOCKET;LPWSABUF;LPQOS):BOOL"/>
    <method name="WSAGetServiceClassInfoA(LPGUID;LPGUID;LPDWORD;LPWSASERVICECLASSINFOA):INT"/>
    <method name="WSAGetServiceClassInfoW(LPGUID;LPGUID;LPDWORD;LPWSASERVICECLASSINFOW):INT"/>
    <method name="WSAGetServiceClassNameByClassIdA(LPGUID;LPSTR;LPDWORD):INT"/>
    <method name="WSAGetServiceClassNameByClassIdW(LPGUID;LPWSTR;LPDWORD):INT"/>
    <method name="WSAHtonl(SOCKET;u_long;u_long*):int"/>
    <method name="WSAHtons(SOCKET;u_short;u_short*):int"/>
    <method name="WSAInstallServiceClassA(LPWSASERVICECLASSINFOA):INT"/>
    <method name="WSAInstallServiceClassW(LPWSASERVICECLASSINFOW):INT"/>
    <method name="WSAIoctl(SOCKET;DWORD;LPVOID;DWORD;LPVOID;DWORD;LPDWORD;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSAIsBlocking():BOOL"/>
    <method name="WSAJoinLeaf(SOCKET;const sockaddr*;int;LPWSABUF;LPWSABUF;LPQOS;LPQOS;DWORD):SOCKET"/>
    <method name="WSALookupServiceBeginA(LPWSAQUERYSETA;DWORD;LPHANDLE):INT"/>
    <method name="WSALookupServiceBeginW(LPWSAQUERYSETW;DWORD;LPHANDLE):INT"/>
    <method name="WSALookupServiceEnd(HANDLE):INT"/>
    <method name="WSALookupServiceNextA(HANDLE;DWORD;LPDWORD;LPWSAQUERYSETA):INT"/>
    <method name="WSALookupServiceNextW(HANDLE;DWORD;LPDWORD;LPWSAQUERYSETW):INT"/>
    <method name="WSANSPIoctl(HANDLE;DWORD;LPVOID;DWORD;LPVOID;DWORD;LPDWORD;LPWSACOMPLETION):INT"/>
    <method name="WSANtohl(SOCKET;u_long;u_long*):int"/>
    <method name="WSANtohs(SOCKET;u_short;u_short*):int"/>
    <method name="WSAProviderConfigChange(LPHANDLE;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):INT"/>
    <method name="WSARecv(SOCKET;LPWSABUF;DWORD;LPDWORD;LPDWORD;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSARecvDisconnect(SOCKET;LPWSABUF):int"/>
    <method name="WSARecvEx(SOCKET;char*;int;int*):int"/>
    <method name="WSARecvFrom(SOCKET;LPWSABUF;DWORD;LPDWORD;LPDWORD;sockaddr*;LPINT;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSARemoveServiceClass(LPGUID):INT"/>
    <method name="WSAResetEvent(HANDLE):BOOL"/>
    <method name="WSASend(SOCKET;LPWSABUF;DWORD;LPDWORD;DWORD;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSASendDisconnect(SOCKET;LPWSABUF):int"/>
    <method name="WSASendTo(SOCKET;LPWSABUF;DWORD;LPDWORD;DWORD;const sockaddr*;int;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSASetBlockingHook(FARPROC):FARPROC"/>
    <method name="WSASetEvent(HANDLE):BOOL"/>
    <method name="WSASetLastError(int):void"/>
    <method name="WSASetServiceA(LPWSAQUERYSETA;WSAESETSERVICEOP;DWORD):INT"/>
    <method name="WSASetServiceW(LPWSAQUERYSETW;WSAESETSERVICEOP;DWORD):INT"/>
    <method name="WSASocketA(int;int;int;LPWSAPROTOCOL_INFOA;GROUP;DWORD):SOCKET"/>
    <method name="WSASocketW(int;int;int;LPWSAPROTOCOL_INFOW;GROUP;DWORD):SOCKET"/>
    <method name="WSAStartup(WORD;LPWSADATA):int"/>
    <method name="WSAStringToAddressA(LPSTR;INT;LPWSAPROTOCOL_INFOA;LPSOCKADDR;LPINT):INT"/>
    <method name="WSAStringToAddressW(LPWSTR;INT;LPWSAPROTOCOL_INFOW;LPSOCKADDR;LPINT):INT"/>
    <method name="WSAUnhookBlockingHook():int"/>
    <method name="WSAWaitForMultipleEvents(DWORD;const HANDLE*;BOOL;DWORD;BOOL):DWORD"/>
    <method name="WSCDeinstallProvider(LPGUID;LPINT):int"/>
    <method name="WSCEnableNSProvider(LPGUID;BOOL):INT"/>
    <method name="WSCEnumProtocols(LPINT;LPWSAPROTOCOL_INFOW;LPDWORD;LPINT):int"/>
    <method name="WSCGetProviderPath(LPGUID;WCHAR*;LPINT;LPINT):int"/>
    <method name="WSCInstallNameSpace(LPWSTR;LPWSTR;DWORD;DWORD;LPGUID):INT"/>
    <method name="WSCInstallProvider(LPGUID;const WCHAR*;LPWSAPROTOCOL_INFOW;DWORD;LPINT):int"/>
    <method name="WSCInstallQOSTemplate(LPGUID;LPWSABUF;LPQOS):int"/>
    <method name="WSCRemoveQOSTemplate(LPGUID;LPWSABUF):int"/>
    <method name="WSCUnInstallNameSpace(LPGUID):INT"/>
    <method name="WSCUpdateProvider(LPGUID;const WCHAR*;LPWSAPROTOCOL_INFOW;DWORD;LPINT):int"/>
    <method name="WSCWriteNameSpaceOrder(LPGUID;DWORD):int"/>
    <method name="WSCWriteProviderOrder(LPDWORD;DWORD):int"/>
    <method name="WSPStartup(WORD;LPWSPDATA;LPWSAPROTOCOL_INFOW;WSPUPCALLTABLE;LPWSPPROC_TABLE):int"/>
    <method name="WTHelperCertCheckValidSignature(CRYPT_PROVIDER_DATA*):HRESULT"/>
    <method name="WTHelperCertIsSelfSigned(DWORD;CERT_INFO*):BOOL"/>
    <method name="WTHelperGetProvCertFromChain(CRYPT_PROVIDER_SGNR*;DWORD):CRYPT_PROVIDER_CERT*"/>
    <method name="WTHelperGetProvPrivateDataFromChain(CRYPT_PROVIDER_DATA*;GUID*):CRYPT_PROVIDER_PRIVDATA*"/>
    <method name="WTHelperGetProvSignerFromChain(CRYPT_PROVIDER_DATA*;DWORD;BOOL;DWORD):CRYPT_PROVIDER_SGNR*"/>
    <method name="WTHelperProvDataFromStateData(HANDLE):CRYPT_PROVIDER_DATA*"/>
    <method name="WinExec(LPCSTR;UINT):UINT"/>
    <method name="WinVerifyTrust(HWND;GUID*;LPVOID):LONG"/>
    <method name="WinVerifyTrustEx(HWND;GUID*;WINTRUST_DATA*):HRESULT"/>
    <method name="WintrustAddActionID(GUID*;DWORD;CRYPT_REGISTER_ACTIONID*):BOOL"/>
    <method name="WintrustGetRegPolicyFlags(DWORD*):void"/>
    <method name="WintrustLoadFunctionPointers(GUID*;CRYPT_PROVIDER_FUNCTIONS*):BOOL"/>
    <method name="WintrustRemoveActionID(GUID*):BOOL"/>
    <method name="WintrustSetRegPolicyFlags(DWORD):BOOL"/>
    <method name="Write_EndOfCentralDirectoryRecord(zip64_internal*;uLong;ZPOS64_T):int"/>
    <method name="Write_GlobalComment(zip64_internal*;const char*):int"/>
    <method name="Write_LocalFileHeader(zip64_internal*;const char*;uInt;const void*):int"/>
    <method name="Write_Zip64EndOfCentralDirectoryLocator(zip64_internal*;ZPOS64_T):int"/>
    <method name="Write_Zip64EndOfCentralDirectoryRecord(zip64_internal*;uLong;ZPOS64_T):int"/>
    <method name="X509V3_EXT_CRL_add_conf(LHASH*;X509V3_CTX*;char*;X509_CRL*):int"/>
    <method name="X509V3_EXT_CRL_add_nconf(CONF*;X509V3_CTX*;char*;X509_CRL*):int"/>
    <method name="X509V3_EXT_REQ_add_conf(LHASH*;X509V3_CTX*;char*;X509_REQ*):int"/>
    <method name="X509V3_EXT_REQ_add_nconf(CONF*;X509V3_CTX*;char*;X509_REQ*):int"/>
    <method name="X509V3_EXT_add(X509V3_EXT_METHOD*):int"/>
    <method name="X509V3_EXT_add_alias(int;int):int"/>
    <method name="X509V3_EXT_add_conf(LHASH*;X509V3_CTX*;char*;X509*):int"/>
    <method name="X509V3_EXT_add_list(X509V3_EXT_METHOD*):int"/>
    <method name="X509V3_EXT_add_nconf(CONF*;X509V3_CTX*;char*;X509*):int"/>
    <method name="X509V3_EXT_add_nconf_sk(CONF*;X509V3_CTX*;char*;STACK**):int"/>
    <method name="X509V3_EXT_cleanup():void"/>
    <method name="X509V3_EXT_conf(LHASH*;X509V3_CTX*;char*;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_conf_nid(LHASH*;X509V3_CTX*;int;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_d2i(X509_EXTENSION*):void*"/>
    <method name="X509V3_EXT_get(X509_EXTENSION*):X509V3_EXT_METHOD*"/>
    <method name="X509V3_EXT_get_nid(int):X509V3_EXT_METHOD*"/>
    <method name="X509V3_EXT_i2d(int;int;void*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_nconf(CONF*;X509V3_CTX*;char*;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_nconf_nid(CONF*;X509V3_CTX*;int;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_print(BIO*;X509_EXTENSION*;unsigned long;int):int"/>
    <method name="X509V3_EXT_print_fp(FILE*;X509_EXTENSION*;int;int):int"/>
    <method name="X509V3_EXT_val_prn(BIO*;STACK*;int;int):void"/>
    <method name="X509V3_NAME_from_section(X509_NAME*;STACK*;unsigned long):int"/>
    <method name="X509V3_add1_i2d(STACK**;int;void*;int;unsigned long):int"/>
    <method name="X509V3_add_standard_extensions():int"/>
    <method name="X509V3_add_value(const char*;const char*;STACK**):int"/>
    <method name="X509V3_add_value_bool(const char*;int;STACK**):int"/>
    <method name="X509V3_add_value_bool_nf(char*;int;STACK**):int"/>
    <method name="X509V3_add_value_int(const char*;ASN1_INTEGER*;STACK**):int"/>
    <method name="X509V3_add_value_uchar(const char*;const unsigned char*;STACK**):int"/>
    <method name="X509V3_conf_free(CONF_VALUE*):void"/>
    <method name="X509V3_extensions_print(BIO*;char*;STACK*;unsigned long;int):int"/>
    <method name="X509V3_get_d2i(STACK*;int;int*;int*):void*"/>
    <method name="X509V3_get_section(X509V3_CTX*;char*):STACK*"/>
    <method name="X509V3_get_string(X509V3_CTX*;char*;char*):char*"/>
    <method name="X509V3_get_value_bool(CONF_VALUE*;int*):int"/>
    <method name="X509V3_get_value_int(CONF_VALUE*;ASN1_INTEGER**):int"/>
    <method name="X509V3_parse_list(const char*):STACK*"/>
    <method name="X509V3_section_free(X509V3_CTX*;STACK*):void"/>
    <method name="X509V3_set_conf_lhash(X509V3_CTX*;LHASH*):void"/>
    <method name="X509V3_set_ctx(X509V3_CTX*;X509*;X509*;X509_REQ*;X509_CRL*;int):void"/>
    <method name="X509V3_set_nconf(X509V3_CTX*;CONF*):void"/>
    <method name="X509V3_string_free(X509V3_CTX*;char*):void"/>
    <method name="X509_ALGOR_dup(X509_ALGOR*):X509_ALGOR*"/>
    <method name="X509_ALGOR_free(X509_ALGOR*):void"/>
    <method name="X509_ALGOR_new():X509_ALGOR*"/>
    <method name="X509_ATTRIBUTE_count(X509_ATTRIBUTE*):int"/>
    <method name="X509_ATTRIBUTE_create(int;int;void*):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE**;int;int;const void*;int):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE**;const ASN1_OBJECT*;int;const void*;int):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE**;const char*;int;const unsigned char*;int):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_dup(X509_ATTRIBUTE*):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_free(X509_ATTRIBUTE*):void"/>
    <method name="X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE*;int;int;void*):void*"/>
    <method name="X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE*):ASN1_OBJECT*"/>
    <method name="X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE*;int):ASN1_TYPE*"/>
    <method name="X509_ATTRIBUTE_new():X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE*;int;const void*;int):int"/>
    <method name="X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE*;const ASN1_OBJECT*):int"/>
    <method name="X509_CERT_AUX_free(X509_CERT_AUX*):void"/>
    <method name="X509_CERT_AUX_new():X509_CERT_AUX*"/>
    <method name="X509_CERT_AUX_print(BIO*;X509_CERT_AUX*;int):int"/>
    <method name="X509_CERT_PAIR_free(X509_CERT_PAIR*):void"/>
    <method name="X509_CERT_PAIR_new():X509_CERT_PAIR*"/>
    <method name="X509_CINF_free(X509_CINF*):void"/>
    <method name="X509_CINF_new():X509_CINF*"/>
    <method name="X509_CRL_INFO_free(X509_CRL_INFO*):void"/>
    <method name="X509_CRL_INFO_new():X509_CRL_INFO*"/>
    <method name="X509_CRL_add0_revoked(X509_CRL*;X509_REVOKED*):int"/>
    <method name="X509_CRL_add1_ext_i2d(X509_CRL*;int;void*;int;unsigned long):int"/>
    <method name="X509_CRL_add_ext(X509_CRL*;X509_EXTENSION*;int):int"/>
    <method name="X509_CRL_cmp(const X509_CRL*;const X509_CRL*):int"/>
    <method name="X509_CRL_delete_ext(X509_CRL*;int):X509_EXTENSION*"/>
    <method name="X509_CRL_digest(const X509_CRL*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_CRL_dup(X509_CRL*):X509_CRL*"/>
    <method name="X509_CRL_free(X509_CRL*):void"/>
    <method name="X509_CRL_get_ext(X509_CRL*;int):X509_EXTENSION*"/>
    <method name="X509_CRL_get_ext_by_NID(X509_CRL*;int;int):int"/>
    <method name="X509_CRL_get_ext_by_OBJ(X509_CRL*;ASN1_OBJECT*;int):int"/>
    <method name="X509_CRL_get_ext_by_critical(X509_CRL*;int;int):int"/>
    <method name="X509_CRL_get_ext_count(X509_CRL*):int"/>
    <method name="X509_CRL_get_ext_d2i(X509_CRL*;int;int*;int*):void*"/>
    <method name="X509_CRL_new():X509_CRL*"/>
    <method name="X509_CRL_print(BIO*;X509_CRL*):int"/>
    <method name="X509_CRL_print_fp(FILE*;X509_CRL*):int"/>
    <method name="X509_CRL_set_issuer_name(X509_CRL*;X509_NAME*):int"/>
    <method name="X509_CRL_set_lastUpdate(X509_CRL*;ASN1_TIME*):int"/>
    <method name="X509_CRL_set_nextUpdate(X509_CRL*;ASN1_TIME*):int"/>
    <method name="X509_CRL_set_version(X509_CRL*;long):int"/>
    <method name="X509_CRL_sign(X509_CRL*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="X509_CRL_sort(X509_CRL*):int"/>
    <method name="X509_CRL_verify(X509_CRL*;EVP_PKEY*):int"/>
    <method name="X509_EXTENSION_create_by_NID(X509_EXTENSION**;int;int;ASN1_OCTET_STRING*):X509_EXTENSION*"/>
    <method name="X509_EXTENSION_create_by_OBJ(X509_EXTENSION**;ASN1_OBJECT*;int;ASN1_OCTET_STRING*):X509_EXTENSION*"/>
    <method name="X509_EXTENSION_dup(X509_EXTENSION*):X509_EXTENSION*"/>
    <method name="X509_EXTENSION_free(X509_EXTENSION*):void"/>
    <method name="X509_EXTENSION_get_critical(X509_EXTENSION*):int"/>
    <method name="X509_EXTENSION_get_data(X509_EXTENSION*):ASN1_OCTET_STRING*"/>
    <method name="X509_EXTENSION_get_object(X509_EXTENSION*):ASN1_OBJECT*"/>
    <method name="X509_EXTENSION_new():X509_EXTENSION*"/>
    <method name="X509_EXTENSION_set_critical(X509_EXTENSION*;int):int"/>
    <method name="X509_EXTENSION_set_data(X509_EXTENSION*;ASN1_OCTET_STRING*):int"/>
    <method name="X509_EXTENSION_set_object(X509_EXTENSION*;ASN1_OBJECT*):int"/>
    <method name="X509_INFO_free(X509_INFO*):void"/>
    <method name="X509_INFO_new():X509_INFO*"/>
    <method name="X509_LOOKUP_by_alias(X509_LOOKUP*;int;char*;int;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_by_fingerprint(X509_LOOKUP*;int;unsigned char*;int;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_by_issuer_serial(X509_LOOKUP*;int;X509_NAME*;ASN1_INTEGER*;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_by_subject(X509_LOOKUP*;int;X509_NAME*;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_ctrl(X509_LOOKUP*;int;const char*;long;char**):int"/>
    <method name="X509_LOOKUP_file():X509_LOOKUP_METHOD*"/>
    <method name="X509_LOOKUP_free(X509_LOOKUP*):void"/>
    <method name="X509_LOOKUP_hash_dir():X509_LOOKUP_METHOD*"/>
    <method name="X509_LOOKUP_init(X509_LOOKUP*):int"/>
    <method name="X509_LOOKUP_new(X509_LOOKUP_METHOD*):X509_LOOKUP*"/>
    <method name="X509_LOOKUP_shutdown(X509_LOOKUP*):int"/>
    <method name="X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY**;int;int;unsigned char*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY**;ASN1_OBJECT*;int;const unsigned char*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY**;const char*;int;const unsigned char*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_dup(X509_NAME_ENTRY*):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_free(X509_NAME_ENTRY*):void"/>
    <method name="X509_NAME_ENTRY_get_data(X509_NAME_ENTRY*):ASN1_STRING*"/>
    <method name="X509_NAME_ENTRY_get_object(X509_NAME_ENTRY*):ASN1_OBJECT*"/>
    <method name="X509_NAME_ENTRY_new():X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_set_data(X509_NAME_ENTRY*;int;const unsigned char*;int):int"/>
    <method name="X509_NAME_ENTRY_set_object(X509_NAME_ENTRY*;ASN1_OBJECT*):int"/>
    <method name="X509_NAME_add_entry(X509_NAME*;X509_NAME_ENTRY*;int;int):int"/>
    <method name="X509_NAME_add_entry_by_NID(X509_NAME*;int;int;unsigned char*;int;int;int):int"/>
    <method name="X509_NAME_add_entry_by_OBJ(X509_NAME*;ASN1_OBJECT*;int;unsigned char*;int;int;int):int"/>
    <method name="X509_NAME_add_entry_by_txt(X509_NAME*;const char*;int;const unsigned char*;int;int;int):int"/>
    <method name="X509_NAME_cmp(const X509_NAME*;const X509_NAME*):int"/>
    <method name="X509_NAME_delete_entry(X509_NAME*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_digest(const X509_NAME*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_NAME_dup(X509_NAME*):X509_NAME*"/>
    <method name="X509_NAME_entry_count(X509_NAME*):int"/>
    <method name="X509_NAME_free(X509_NAME*):void"/>
    <method name="X509_NAME_get_entry(X509_NAME*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_get_index_by_NID(X509_NAME*;int;int):int"/>
    <method name="X509_NAME_get_index_by_OBJ(X509_NAME*;ASN1_OBJECT*;int):int"/>
    <method name="X509_NAME_get_text_by_NID(X509_NAME*;int;char*;int):int"/>
    <method name="X509_NAME_get_text_by_OBJ(X509_NAME*;ASN1_OBJECT*;char*;int):int"/>
    <method name="X509_NAME_hash(X509_NAME*):unsigned long"/>
    <method name="X509_NAME_new():X509_NAME*"/>
    <method name="X509_NAME_oneline(X509_NAME*;char*;int):char*"/>
    <method name="X509_NAME_print(BIO*;X509_NAME*;int):int"/>
    <method name="X509_NAME_print_ex(BIO*;X509_NAME*;int;unsigned long):int"/>
    <method name="X509_NAME_print_ex_fp(FILE*;X509_NAME*;int;unsigned long):int"/>
    <method name="X509_NAME_set(X509_NAME**;X509_NAME*):int"/>
    <method name="X509_OBJECT_free_contents(X509_OBJECT*):void"/>
    <method name="X509_OBJECT_idx_by_subject(STACK*;int;X509_NAME*):int"/>
    <method name="X509_OBJECT_retrieve_by_subject(STACK*;int;X509_NAME*):X509_OBJECT*"/>
    <method name="X509_OBJECT_retrieve_match(STACK*;X509_OBJECT*):X509_OBJECT*"/>
    <method name="X509_OBJECT_up_ref_count(X509_OBJECT*):void"/>
    <method name="X509_PKEY_free(X509_PKEY*):void"/>
    <method name="X509_PKEY_new():X509_PKEY*"/>
    <method name="X509_POLICY_NODE_print(BIO*;X509_POLICY_NODE*;int):void"/>
    <method name="X509_PUBKEY_free(X509_PUBKEY*):void"/>
    <method name="X509_PUBKEY_get(X509_PUBKEY*):EVP_PKEY*"/>
    <method name="X509_PUBKEY_new():X509_PUBKEY*"/>
    <method name="X509_PUBKEY_set(X509_PUBKEY**;EVP_PKEY*):int"/>
    <method name="X509_PURPOSE_add(int;int;int;(*)(const X509_PURPOSE*;const X509*;int):int*;char*;char*;void*):int"/>
    <method name="X509_PURPOSE_cleanup():void"/>
    <method name="X509_PURPOSE_get0(int):X509_PURPOSE*"/>
    <method name="X509_PURPOSE_get0_name(X509_PURPOSE*):char*"/>
    <method name="X509_PURPOSE_get0_sname(X509_PURPOSE*):char*"/>
    <method name="X509_PURPOSE_get_by_id(int):int"/>
    <method name="X509_PURPOSE_get_by_sname(char*):int"/>
    <method name="X509_PURPOSE_get_count():int"/>
    <method name="X509_PURPOSE_get_id(X509_PURPOSE*):int"/>
    <method name="X509_PURPOSE_get_trust(X509_PURPOSE*):int"/>
    <method name="X509_PURPOSE_set(int*;int):int"/>
    <method name="X509_REQ_INFO_free(X509_REQ_INFO*):void"/>
    <method name="X509_REQ_INFO_new():X509_REQ_INFO*"/>
    <method name="X509_REQ_add1_attr(X509_REQ*;X509_ATTRIBUTE*):int"/>
    <method name="X509_REQ_add1_attr_by_NID(X509_REQ*;int;int;const unsigned char*;int):int"/>
    <method name="X509_REQ_add1_attr_by_OBJ(X509_REQ*;const ASN1_OBJECT*;int;const unsigned char*;int):int"/>
    <method name="X509_REQ_add1_attr_by_txt(X509_REQ*;const char*;int;const unsigned char*;int):int"/>
    <method name="X509_REQ_add_extensions(X509_REQ*;STACK*):int"/>
    <method name="X509_REQ_add_extensions_nid(X509_REQ*;STACK*;int):int"/>
    <method name="X509_REQ_check_private_key(X509_REQ*;EVP_PKEY*):int"/>
    <method name="X509_REQ_delete_attr(X509_REQ*;int):X509_ATTRIBUTE*"/>
    <method name="X509_REQ_digest(const X509_REQ*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_REQ_dup(X509_REQ*):X509_REQ*"/>
    <method name="X509_REQ_extension_nid(int):int"/>
    <method name="X509_REQ_free(X509_REQ*):void"/>
    <method name="X509_REQ_get1_email(X509_REQ*):STACK*"/>
    <method name="X509_REQ_get_attr(const X509_REQ*;int):X509_ATTRIBUTE*"/>
    <method name="X509_REQ_get_attr_by_NID(const X509_REQ*;int;int):int"/>
    <method name="X509_REQ_get_attr_by_OBJ(const X509_REQ*;ASN1_OBJECT*;int):int"/>
    <method name="X509_REQ_get_attr_count(const X509_REQ*):int"/>
    <method name="X509_REQ_get_extension_nids():int*"/>
    <method name="X509_REQ_get_extensions(X509_REQ*):STACK*"/>
    <method name="X509_REQ_get_pubkey(X509_REQ*):EVP_PKEY*"/>
    <method name="X509_REQ_new():X509_REQ*"/>
    <method name="X509_REQ_print(BIO*;X509_REQ*):int"/>
    <method name="X509_REQ_print_ex(BIO*;X509_REQ*;unsigned long;unsigned long):int"/>
    <method name="X509_REQ_print_fp(FILE*;X509_REQ*):int"/>
    <method name="X509_REQ_set_extension_nids(int*):void"/>
    <method name="X509_REQ_set_pubkey(X509_REQ*;EVP_PKEY*):int"/>
    <method name="X509_REQ_set_subject_name(X509_REQ*;X509_NAME*):int"/>
    <method name="X509_REQ_set_version(X509_REQ*;long):int"/>
    <method name="X509_REQ_sign(X509_REQ*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="X509_REQ_to_X509(X509_REQ*;int;EVP_PKEY*):X509*"/>
    <method name="X509_REQ_verify(X509_REQ*;EVP_PKEY*):int"/>
    <method name="X509_REVOKED_add1_ext_i2d(X509_REVOKED*;int;void*;int;unsigned long):int"/>
    <method name="X509_REVOKED_add_ext(X509_REVOKED*;X509_EXTENSION*;int):int"/>
    <method name="X509_REVOKED_delete_ext(X509_REVOKED*;int):X509_EXTENSION*"/>
    <method name="X509_REVOKED_free(X509_REVOKED*):void"/>
    <method name="X509_REVOKED_get_ext(X509_REVOKED*;int):X509_EXTENSION*"/>
    <method name="X509_REVOKED_get_ext_by_NID(X509_REVOKED*;int;int):int"/>
    <method name="X509_REVOKED_get_ext_by_OBJ(X509_REVOKED*;ASN1_OBJECT*;int):int"/>
    <method name="X509_REVOKED_get_ext_by_critical(X509_REVOKED*;int;int):int"/>
    <method name="X509_REVOKED_get_ext_count(X509_REVOKED*):int"/>
    <method name="X509_REVOKED_get_ext_d2i(X509_REVOKED*;int;int*;int*):void*"/>
    <method name="X509_REVOKED_new():X509_REVOKED*"/>
    <method name="X509_REVOKED_set_revocationDate(X509_REVOKED*;ASN1_TIME*):int"/>
    <method name="X509_REVOKED_set_serialNumber(X509_REVOKED*;ASN1_INTEGER*):int"/>
    <method name="X509_SIG_free(X509_SIG*):void"/>
    <method name="X509_SIG_new():X509_SIG*"/>
    <method name="X509_STORE_CTX_cleanup(X509_STORE_CTX*):void"/>
    <method name="X509_STORE_CTX_free(X509_STORE_CTX*):void"/>
    <method name="X509_STORE_CTX_get0_param(X509_STORE_CTX*):X509_VERIFY_PARAM*"/>
    <method name="X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX*):X509_POLICY_TREE*"/>
    <method name="X509_STORE_CTX_get1_chain(X509_STORE_CTX*):STACK*"/>
    <method name="X509_STORE_CTX_get1_issuer(X509**;X509_STORE_CTX*;X509*):int"/>
    <method name="X509_STORE_CTX_get_chain(X509_STORE_CTX*):STACK*"/>
    <method name="X509_STORE_CTX_get_current_cert(X509_STORE_CTX*):X509*"/>
    <method name="X509_STORE_CTX_get_error(X509_STORE_CTX*):int"/>
    <method name="X509_STORE_CTX_get_error_depth(X509_STORE_CTX*):int"/>
    <method name="X509_STORE_CTX_get_ex_data(X509_STORE_CTX*;int):void*"/>
    <method name="X509_STORE_CTX_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX*):int"/>
    <method name="X509_STORE_CTX_init(X509_STORE_CTX*;X509_STORE*;X509*;STACK*):int"/>
    <method name="X509_STORE_CTX_new():X509_STORE_CTX*"/>
    <method name="X509_STORE_CTX_purpose_inherit(X509_STORE_CTX*;int;int;int):int"/>
    <method name="X509_STORE_CTX_set0_crls(X509_STORE_CTX*;STACK*):void"/>
    <method name="X509_STORE_CTX_set0_param(X509_STORE_CTX*;X509_VERIFY_PARAM*):void"/>
    <method name="X509_STORE_CTX_set_cert(X509_STORE_CTX*;X509*):void"/>
    <method name="X509_STORE_CTX_set_chain(X509_STORE_CTX*;STACK*):void"/>
    <method name="X509_STORE_CTX_set_default(X509_STORE_CTX*;const char*):int"/>
    <method name="X509_STORE_CTX_set_depth(X509_STORE_CTX*;int):void"/>
    <method name="X509_STORE_CTX_set_error(X509_STORE_CTX*;int):void"/>
    <method name="X509_STORE_CTX_set_ex_data(X509_STORE_CTX*;int;void*):int"/>
    <method name="X509_STORE_CTX_set_flags(X509_STORE_CTX*;unsigned long):void"/>
    <method name="X509_STORE_CTX_set_purpose(X509_STORE_CTX*;int):int"/>
    <method name="X509_STORE_CTX_set_time(X509_STORE_CTX*;unsigned long;time_t):void"/>
    <method name="X509_STORE_CTX_set_trust(X509_STORE_CTX*;int):int"/>
    <method name="X509_STORE_CTX_set_verify_cb(X509_STORE_CTX*;(*)(int;X509_STORE_CTX*):int*):void"/>
    <method name="X509_STORE_CTX_trusted_stack(X509_STORE_CTX*;STACK*):void"/>
    <method name="X509_STORE_add_cert(X509_STORE*;X509*):int"/>
    <method name="X509_STORE_add_crl(X509_STORE*;X509_CRL*):int"/>
    <method name="X509_STORE_add_lookup(X509_STORE*;X509_LOOKUP_METHOD*):X509_LOOKUP*"/>
    <method name="X509_STORE_free(X509_STORE*):void"/>
    <method name="X509_STORE_get_by_subject(X509_STORE_CTX*;int;X509_NAME*;X509_OBJECT*):int"/>
    <method name="X509_STORE_load_locations(X509_STORE*;const char*;const char*):int"/>
    <method name="X509_STORE_new():X509_STORE*"/>
    <method name="X509_STORE_set1_param(X509_STORE*;X509_VERIFY_PARAM*):int"/>
    <method name="X509_STORE_set_default_paths(X509_STORE*):int"/>
    <method name="X509_STORE_set_depth(X509_STORE*;int):int"/>
    <method name="X509_STORE_set_flags(X509_STORE*;unsigned long):int"/>
    <method name="X509_STORE_set_purpose(X509_STORE*;int):int"/>
    <method name="X509_STORE_set_trust(X509_STORE*;int):int"/>
    <method name="X509_TRUST_add(int;int;(*)(X509_TRUST*;X509*;int):int*;char*;int;void*):int"/>
    <method name="X509_TRUST_cleanup():void"/>
    <method name="X509_TRUST_get0(int):X509_TRUST*"/>
    <method name="X509_TRUST_get0_name(X509_TRUST*):char*"/>
    <method name="X509_TRUST_get_by_id(int):int"/>
    <method name="X509_TRUST_get_count():int"/>
    <method name="X509_TRUST_get_flags(X509_TRUST*):int"/>
    <method name="X509_TRUST_get_trust(X509_TRUST*):int"/>
    <method name="X509_TRUST_set(int*;int):int"/>
    <method name="X509_TRUST_set_default((*)(int;X509*;int):int*):(*)(int;X509*;int):int*"/>
    <method name="X509_VAL_free(X509_VAL*):void"/>
    <method name="X509_VAL_new():X509_VAL*"/>
    <method name="X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM*;ASN1_OBJECT*):int"/>
    <method name="X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM*;unsigned long):int"/>
    <method name="X509_VERIFY_PARAM_free(X509_VERIFY_PARAM*):void"/>
    <method name="X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM*):unsigned long"/>
    <method name="X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM*;const X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_lookup(const char*):const X509_VERIFY_PARAM*"/>
    <method name="X509_VERIFY_PARAM_new():X509_VERIFY_PARAM*"/>
    <method name="X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM*;const X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM*;const char*):int"/>
    <method name="X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM*;STACK*):int"/>
    <method name="X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM*;int):void"/>
    <method name="X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM*;unsigned long):int"/>
    <method name="X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM*;int):int"/>
    <method name="X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM*;time_t):void"/>
    <method name="X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM*;int):int"/>
    <method name="X509_VERIFY_PARAM_table_cleanup():void"/>
    <method name="X509_add1_ext_i2d(X509*;int;void*;int;unsigned long):int"/>
    <method name="X509_add1_reject_object(X509*;ASN1_OBJECT*):int"/>
    <method name="X509_add1_trust_object(X509*;ASN1_OBJECT*):int"/>
    <method name="X509_add_ext(X509*;X509_EXTENSION*;int):int"/>
    <method name="X509_alias_get0(X509*;int*):unsigned char*"/>
    <method name="X509_alias_set1(X509*;unsigned char*;int):int"/>
    <method name="X509_asn1_meth():ASN1_METHOD*"/>
    <method name="X509_certificate_type(X509*;EVP_PKEY*):int"/>
    <method name="X509_check_ca(X509*):int"/>
    <method name="X509_check_issued(X509*;X509*):int"/>
    <method name="X509_check_private_key(X509*;EVP_PKEY*):int"/>
    <method name="X509_check_purpose(X509*;int;int):int"/>
    <method name="X509_check_trust(X509*;int;int):int"/>
    <method name="X509_cmp(const X509*;const X509*):int"/>
    <method name="X509_cmp_current_time(ASN1_TIME*):int"/>
    <method name="X509_cmp_time(ASN1_TIME*;time_t*):int"/>
    <method name="X509_delete_ext(X509*;int):X509_EXTENSION*"/>
    <method name="X509_digest(const X509*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_dup(X509*):X509*"/>
    <method name="X509_email_free(STACK*):void"/>
    <method name="X509_find_by_issuer_and_serial(STACK*;X509_NAME*;ASN1_INTEGER*):X509*"/>
    <method name="X509_find_by_subject(STACK*;X509_NAME*):X509*"/>
    <method name="X509_free(X509*):void"/>
    <method name="X509_get0_pubkey_bitstr(const X509*):ASN1_BIT_STRING*"/>
    <method name="X509_get1_email(X509*):STACK*"/>
    <method name="X509_get_default_cert_area():const char*"/>
    <method name="X509_get_default_cert_dir():const char*"/>
    <method name="X509_get_default_cert_dir_env():const char*"/>
    <method name="X509_get_default_cert_file():const char*"/>
    <method name="X509_get_default_cert_file_env():const char*"/>
    <method name="X509_get_default_private_dir():const char*"/>
    <method name="X509_get_ex_data(X509*;int):void*"/>
    <method name="X509_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="X509_get_ext(X509*;int):X509_EXTENSION*"/>
    <method name="X509_get_ext_by_NID(X509*;int;int):int"/>
    <method name="X509_get_ext_by_OBJ(X509*;ASN1_OBJECT*;int):int"/>
    <method name="X509_get_ext_by_critical(X509*;int;int):int"/>
    <method name="X509_get_ext_count(X509*):int"/>
    <method name="X509_get_ext_d2i(X509*;int;int*;int*):void*"/>
    <method name="X509_get_issuer_name(X509*):X509_NAME*"/>
    <method name="X509_get_pubkey(X509*):EVP_PKEY*"/>
    <method name="X509_get_pubkey_parameters(EVP_PKEY*;STACK*):int"/>
    <method name="X509_get_serialNumber(X509*):ASN1_INTEGER*"/>
    <method name="X509_get_subject_name(X509*):X509_NAME*"/>
    <method name="X509_gmtime_adj(ASN1_TIME*;long):ASN1_TIME*"/>
    <method name="X509_issuer_and_serial_cmp(const X509*;const X509*):int"/>
    <method name="X509_issuer_and_serial_hash(X509*):unsigned long"/>
    <method name="X509_issuer_name_cmp(const X509*;const X509*):int"/>
    <method name="X509_issuer_name_hash(X509*):unsigned long"/>
    <method name="X509_keyid_get0(X509*;int*):unsigned char*"/>
    <method name="X509_keyid_set1(X509*;unsigned char*;int):int"/>
    <method name="X509_load_cert_crl_file(X509_LOOKUP*;const char*;int):int"/>
    <method name="X509_load_cert_file(X509_LOOKUP*;const char*;int):int"/>
    <method name="X509_load_crl_file(X509_LOOKUP*;const char*;int):int"/>
    <method name="X509_new():X509*"/>
    <method name="X509_ocspid_print(BIO*;X509*):int"/>
    <method name="X509_policy_check(X509_POLICY_TREE**;int*;STACK*;STACK*;unsigned int):int"/>
    <method name="X509_policy_level_get0_node(X509_POLICY_LEVEL*;int):X509_POLICY_NODE*"/>
    <method name="X509_policy_level_node_count(X509_POLICY_LEVEL*):int"/>
    <method name="X509_policy_node_get0_parent(const X509_POLICY_NODE*):const X509_POLICY_NODE*"/>
    <method name="X509_policy_node_get0_policy(const X509_POLICY_NODE*):const ASN1_OBJECT*"/>
    <method name="X509_policy_node_get0_qualifiers(const X509_POLICY_NODE*):STACK*"/>
    <method name="X509_policy_tree_free(X509_POLICY_TREE*):void"/>
    <method name="X509_policy_tree_get0_level(const X509_POLICY_TREE*;int):X509_POLICY_LEVEL*"/>
    <method name="X509_policy_tree_get0_policies(const X509_POLICY_TREE*):STACK*"/>
    <method name="X509_policy_tree_get0_user_policies(const X509_POLICY_TREE*):STACK*"/>
    <method name="X509_policy_tree_level_count(const X509_POLICY_TREE*):int"/>
    <method name="X509_print(BIO*;X509*):int"/>
    <method name="X509_print_ex(BIO*;X509*;unsigned long;unsigned long):int"/>
    <method name="X509_print_ex_fp(FILE*;X509*;unsigned long;unsigned long):int"/>
    <method name="X509_print_fp(FILE*;X509*):int"/>
    <method name="X509_pubkey_digest(const X509*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_reject_clear(X509*):void"/>
    <method name="X509_set_ex_data(X509*;int;void*):int"/>
    <method name="X509_set_issuer_name(X509*;X509_NAME*):int"/>
    <method name="X509_set_notAfter(X509*;ASN1_TIME*):int"/>
    <method name="X509_set_notBefore(X509*;ASN1_TIME*):int"/>
    <method name="X509_set_pubkey(X509*;EVP_PKEY*):int"/>
    <method name="X509_set_serialNumber(X509*;ASN1_INTEGER*):int"/>
    <method name="X509_set_subject_name(X509*;X509_NAME*):int"/>
    <method name="X509_set_version(X509*;long):int"/>
    <method name="X509_sign(X509*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="X509_signature_print(BIO*;X509_ALGOR*;ASN1_STRING*):int"/>
    <method name="X509_subject_name_cmp(const X509*;const X509*):int"/>
    <method name="X509_subject_name_hash(X509*):unsigned long"/>
    <method name="X509_supported_extension(X509_EXTENSION*):int"/>
    <method name="X509_time_adj(ASN1_TIME*;long;time_t*):ASN1_TIME*"/>
    <method name="X509_to_X509_REQ(X509*;EVP_PKEY*;const EVP_MD*):X509_REQ*"/>
    <method name="X509_trust_clear(X509*):void"/>
    <method name="X509_verify(X509*;EVP_PKEY*):int"/>
    <method name="X509_verify_cert(X509_STORE_CTX*):int"/>
    <method name="X509_verify_cert_error_string(long):const char*"/>
    <method name="X509at_add1_attr(STACK**;X509_ATTRIBUTE*):STACK*"/>
    <method name="X509at_add1_attr_by_NID(STACK**;int;int;const unsigned char*;int):STACK*"/>
    <method name="X509at_add1_attr_by_OBJ(STACK**;const ASN1_OBJECT*;int;const unsigned char*;int):STACK*"/>
    <method name="X509at_add1_attr_by_txt(STACK**;const char*;int;const unsigned char*;int):STACK*"/>
    <method name="X509at_delete_attr(STACK*;int):X509_ATTRIBUTE*"/>
    <method name="X509at_get_attr(const STACK*;int):X509_ATTRIBUTE*"/>
    <method name="X509at_get_attr_by_NID(const STACK*;int;int):int"/>
    <method name="X509at_get_attr_by_OBJ(const STACK*;ASN1_OBJECT*;int):int"/>
    <method name="X509at_get_attr_count(const STACK*):int"/>
    <method name="X509v3_add_ext(STACK**;X509_EXTENSION*;int):STACK*"/>
    <method name="X509v3_delete_ext(STACK*;int):X509_EXTENSION*"/>
    <method name="X509v3_get_ext(const STACK*;int):X509_EXTENSION*"/>
    <method name="X509v3_get_ext_by_NID(const STACK*;int;int):int"/>
    <method name="X509v3_get_ext_by_OBJ(const STACK*;ASN1_OBJECT*;int):int"/>
    <method name="X509v3_get_ext_by_critical(const STACK*;int;int):int"/>
    <method name="X509v3_get_ext_count(const STACK*):int"/>
    <method name="_Block_copy(const void*):void*"/>
    <method name="_Block_object_assign(void*;const void*;const int):void"/>
    <method name="_Block_object_dispose(const void*;const int):void"/>
    <method name="_Block_release(const void*):void"/>
    <method name="_CONF_add_string(CONF*;CONF_VALUE*;CONF_VALUE*):int"/>
    <method name="_CONF_free_data(CONF*):void"/>
    <method name="_CONF_get_number(const CONF*;const char*;const char*):long"/>
    <method name="_CONF_get_section(const CONF*;const char*):CONF_VALUE*"/>
    <method name="_CONF_get_section_values(const CONF*;const char*):STACK*"/>
    <method name="_CONF_get_string(const CONF*;const char*;const char*):char*"/>
    <method name="_CONF_new_data(CONF*):int"/>
    <method name="_CONF_new_section(CONF*;const char*):CONF_VALUE*"/>
    <method name="_Exit(int):void"/>
    <method name="_GLIBCXX_BEGIN_NAMESPACE(int):int"/>
    <method name="_GLIBCXX_BEGIN_NESTED_NAMESPACE(int;int):int"/>
    <method name="_M_call_callbacks(enum event):void"/>
    <method name="_M_dispose_callbacks():void"/>
    <method name="_M_init():void"/>
    <method name="_NSGetExecutablePath(char*;uint32_t*):int"/>
    <method name="_OSReadInt16(const volatile void*;uintptr_t):uint16_t"/>
    <method name="_OSReadInt32(const volatile void*;uintptr_t):uint32_t"/>
    <method name="_OSReadInt64(const volatile void*;uintptr_t):uint64_t"/>
    <method name="_OSWriteInt16(volatile void*;uintptr_t;uint16_t):void"/>
    <method name="_OSWriteInt32(volatile void*;uintptr_t;uint32_t):void"/>
    <method name="_OSWriteInt64(volatile void*;uintptr_t;uint64_t):void"/>
    <method name="_Rb_tree_black_count(const int*;const int*):unsigned int"/>
    <method name="_Rb_tree_decrement(const int*):const int*"/>
    <method name="_Rb_tree_decrement(int*):int*"/>
    <method name="_Rb_tree_increment(const int*):const int*"/>
    <method name="_Rb_tree_increment(int*):int*"/>
    <method name="_Rb_tree_insert_and_rebalance(const int;int*;int*;int):void"/>
    <method name="_Rb_tree_rebalance_for_erase(const int*;int):int*"/>
    <method name="_Rb_tree_rotate_left(const int*;int*):void"/>
    <method name="_Rb_tree_rotate_right(const int*;int*):void"/>
    <method name="_Rope_is_simple(char*):int"/>
    <method name="_Rope_is_simple(int*):int"/>
    <method name="_S_cond_store_eos(char):void"/>
    <method name="_S_cond_store_eos(int):void"/>
    <method name="_S_do_it(int*;int*):void"/>
    <method name="_S_is_basic_char_type(char*):int"/>
    <method name="_S_is_basic_char_type(int*):int"/>
    <method name="_S_is_one_byte_char_type(char*):int"/>
    <method name="_Unwind_DeleteException(struct _Unwind_Exception*):void"/>
    <method name="_Unwind_FindEnclosingFunction(void*):void*"/>
    <method name="_Unwind_Find_FDE(const void*;struct dwarf_eh_bases*):const void*"/>
    <method name="_Unwind_GetCFA(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetDataRelBase(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetGR(struct _Unwind_Context*;int):uintptr_t"/>
    <method name="_Unwind_GetIP(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetIPInfo(struct _Unwind_Context*;int*):uintptr_t"/>
    <method name="_Unwind_GetLanguageSpecificData(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetRegionStart(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetTextRelBase(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_SetGR(struct _Unwind_Context*;int;uintptr_t):void"/>
    <method name="_Unwind_SetIP(struct _Unwind_Context*;uintptr_t):void"/>
    <method name="_Unwind_SjLj_ForcedUnwind(struct _Unwind_Exception*;_Unwind_Stop_Fn;void*):_Unwind_Reason_Code"/>
    <method name="_Unwind_SjLj_RaiseException(struct _Unwind_Exception*):_Unwind_Reason_Code"/>
    <method name="_Unwind_SjLj_Register(_Unwind_FunctionContext_t):void"/>
    <method name="_Unwind_SjLj_Resume(struct _Unwind_Exception*):void"/>
    <method name="_Unwind_SjLj_Resume_or_Rethrow(struct _Unwind_Exception*):_Unwind_Reason_Code"/>
    <method name="_Unwind_SjLj_Unregister(_Unwind_FunctionContext_t):void"/>
    <method name="__CFRangeMake(CFIndex;CFIndex):CFRange"/>
    <method name="__CFStringMakeConstantString(const char*):CFStringRef"/>
    <method name="__CGAffineTransformMake(CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="__CGPointApplyAffineTransform(CGPoint;CGAffineTransform):CGPoint"/>
    <method name="__CGPointEqualToPoint(CGPoint;CGPoint):_Bool"/>
    <method name="__CGSizeApplyAffineTransform(CGSize;CGAffineTransform):CGSize"/>
    <method name="__CGSizeEqualToSize(CGSize;CGSize):_Bool"/>
    <method name="__NDR_convert__mig_reply_error_t(mig_reply_error_t*):void"/>
    <method name="__WSAFDIsSet(SOCKET;fd_set*):int"/>
    <method name="___mb_cur_max():int"/>
    <method name="___runetype(__darwin_ct_rune_t):unsigned long"/>
    <method name="___tolower(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="___toupper(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="__assert_rtn(const char*;const char*;int;const char*):void"/>
    <method name="__atomic_add(volatile int*;int):void"/>
    <method name="__atomic_add_dispatch(int*;int):void"/>
    <method name="__atomic_add_single(int*;int):void"/>
    <method name="__builtin___memset_chk():int"/>
    <method name="__builtin___strcat_chk():int"/>
    <method name="__builtin___strcpy_chk():int"/>
    <method name="__builtin__memset_chk():int"/>
    <method name="__builtin_object_size():int"/>
    <method name="__checkint_int32_add(int64_t;int64_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_signed_signed(int32_t;int32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_signed_unsigned(int32_t;uint32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_unsigned_signed(uint32_t;int32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_unsigned_unsigned(uint32_t;uint32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_mul(int64_t;int64_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_sub(int64_t;int64_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_type_error(int32_t*):int32_t"/>
    <method name="__checkint_int64_add_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_add_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_add_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_add_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_type_error(int32_t*):int32_t"/>
    <method name="__checkint_is_mixed_sign32(int32_t;int32_t):int32_t"/>
    <method name="__checkint_is_mixed_sign64(int64_t;int64_t):int32_t"/>
    <method name="__checkint_uint32_add(int64_t;int64_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_signed_signed(int32_t;int32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_signed_unsigned(int32_t;uint32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_unsigned_signed(uint32_t;int32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_unsigned_unsigned(uint32_t;uint32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_mul(int64_t;int64_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_sub(int64_t;int64_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_type_error(int32_t*):int32_t"/>
    <method name="__checkint_uint64_add_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_add_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_add_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_add_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_type_error(int32_t*):int32_t"/>
    <method name="__deregister_frame(const void*):void"/>
    <method name="__deregister_frame_info(const void*):void*"/>
    <method name="__deregister_frame_info_bases(const void*):void*"/>
    <method name="__dtrace_isenabled$cxa_runtime$cxa_exception_rethrow$v1():int"/>
    <method name="__dtrace_isenabled$cxa_runtime$cxa_exception_throw$v1():int"/>
    <method name="__dtrace_probe$cxa_runtime$cxa_exception_rethrow$v1():void"/>
    <method name="__dtrace_probe$cxa_runtime$cxa_exception_throw$v1$766f6964202a(void*):void"/>
    <method name="__error():int*"/>
    <method name="__error_type_must_be_a_signed_integer_type():void"/>
    <method name="__error_type_must_be_an_unsigned_integer_type():void"/>
    <method name="__exchange_and_add_single(int*;int):int"/>
    <method name="__fpclassify(double):int"/>
    <method name="__fpclassifyf(float):int"/>
    <method name="__fpclassifyl(long double):int"/>
    <method name="__gthread_active_p():int"/>
    <method name="__gthread_getspecific(__gthread_key_t):void*"/>
    <method name="__gthread_key_create(__gthread_key_t*;(*)(void*):void):int"/>
    <method name="__gthread_key_delete(__gthread_key_t):int"/>
    <method name="__gthread_mutex_lock(__gthread_mutex_t*):int"/>
    <method name="__gthread_mutex_trylock(__gthread_mutex_t*):int"/>
    <method name="__gthread_mutex_unlock(__gthread_mutex_t*):int"/>
    <method name="__gthread_once(__gthread_once_t*;(*)():void):int"/>
    <method name="__gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_setspecific(__gthread_key_t;const void*):int"/>
    <method name="__inf():double"/>
    <method name="__inff():float"/>
    <method name="__infl():long double"/>
    <method name="__inline_isfinited(double):int"/>
    <method name="__inline_isfinitef(float):int"/>
    <method name="__inline_isfinitel(long double):int"/>
    <method name="__inline_isinfd(double):int"/>
    <method name="__inline_isinff(float):int"/>
    <method name="__inline_isinfl(long double):int"/>
    <method name="__inline_isnand(double):int"/>
    <method name="__inline_isnanf(float):int"/>
    <method name="__inline_isnanl(long double):int"/>
    <method name="__inline_isnormald(double):int"/>
    <method name="__inline_isnormalf(float):int"/>
    <method name="__inline_isnormall(long double):int"/>
    <method name="__inline_memcpy_chk(void*;const void*;size_t):void*"/>
    <method name="__inline_memset_chk(void*;int;size_t):void*"/>
    <method name="__inline_signbitd(double):int"/>
    <method name="__inline_signbitf(float):int"/>
    <method name="__inline_signbitl(long double):int"/>
    <method name="__inline_strcat_chk(char*;const char*):char*"/>
    <method name="__inline_strcpy_chk(char*;const char*):char*"/>
    <method name="__isctype(__darwin_ct_rune_t;unsigned long):__darwin_ct_rune_t"/>
    <method name="__istype(__darwin_ct_rune_t;unsigned long):int"/>
    <method name="__istype_l(int;unsigned long;int):int"/>
    <method name="__lexicographical_compare_3way(const char*;const char*;const char*;const char*):int"/>
    <method name="__lexicographical_compare_3way(const unsigned char*;const unsigned char*;const unsigned char*;const unsigned char*):int"/>
    <method name="__maskrune(__darwin_ct_rune_t;unsigned long):int"/>
    <method name="__maskrune_l():int"/>
    <method name="__math_errhandling():int"/>
    <method name="__nan():float"/>
    <method name="__opendir2(const char*;int):DIR*"/>
    <method name="__register_frame(const void*):void"/>
    <method name="__register_frame_info(const void*;void*):void"/>
    <method name="__register_frame_info_bases(const void*;void*;void*;void*):void"/>
    <method name="__register_frame_info_table(const void*;void*):void"/>
    <method name="__register_frame_info_table_bases(const void*;void*;void*;void*):void"/>
    <method name="__register_frame_table(const void*):void"/>
    <method name="__slist_make_link(struct _Slist_node_base*;struct _Slist_node_base*):struct _Slist_node_base*"/>
    <method name="__slist_previous(const struct _Slist_node_base*;const struct _Slist_node_base*):const struct _Slist_node_base*"/>
    <method name="__slist_previous(struct _Slist_node_base*;const struct _Slist_node_base*):struct _Slist_node_base*"/>
    <method name="__slist_reverse(struct _Slist_node_base*):struct _Slist_node_base*"/>
    <method name="__slist_size(struct _Slist_node_base*):int"/>
    <method name="__slist_splice_after(struct _Slist_node_base*;struct _Slist_node_base*):void"/>
    <method name="__slist_splice_after(struct _Slist_node_base*;struct _Slist_node_base*;struct _Slist_node_base*):void"/>
    <method name="__sputc(int;FILE*):int"/>
    <method name="__srget(FILE*):int"/>
    <method name="__stl_hash_string(const char*):int"/>
    <method name="__stl_next_prime(unsigned long):unsigned long"/>
    <method name="__svfscanf(FILE*;const char*;va_list):int"/>
    <method name="__swbuf(int;FILE*):int"/>
    <method name="__throw_concurrence_lock_error():void"/>
    <method name="__throw_concurrence_unlock_error():void"/>
    <method name="__throw_forced_exception_error():void"/>
    <method name="__tolower(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="__toupper(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="__verify_grouping(const char*;int;const int):int"/>
    <method name="__wcwidth(__darwin_ct_rune_t):int"/>
    <method name="__xmlParserInputBufferCreateFilename(const char*;int):int"/>
    <method name="_access(const char*;int):int"/>
    <method name="_asl_evaluate_send(aslclient;aslmsg;int):uint32_t"/>
    <method name="_asl_lib_log(aslclient;uint32_t;aslmsg;const char*, ...):int"/>
    <method name="_dateString(NSDate*):NSString*"/>
    <method name="_dupenv_s(char **;size_t*;const char*):errno_t"/>
    <method name="_dyld_all_twolevel_modules_prebound():_Bool"/>
    <method name="_dyld_bind_fully_image_containing_address(const void*):_Bool"/>
    <method name="_dyld_bind_objc_module(const void*):void"/>
    <method name="_dyld_get_image_header(uint32_t):const struct mach_header*"/>
    <method name="_dyld_get_image_header_containing_address(const void*):const struct mach_header*"/>
    <method name="_dyld_get_image_name(uint32_t):const char*"/>
    <method name="_dyld_get_image_vmaddr_slide(uint32_t):intptr_t"/>
    <method name="_dyld_image_containing_address(const void*):_Bool"/>
    <method name="_dyld_image_count():uint32_t"/>
    <method name="_dyld_launched_prebound():_Bool"/>
    <method name="_dyld_lookup_and_bind(const char*;void**;NSModule*):void"/>
    <method name="_dyld_lookup_and_bind_fully(const char*;void**;NSModule*):void"/>
    <method name="_dyld_lookup_and_bind_with_hint(const char*;const char*;void**;NSModule*):void"/>
    <method name="_dyld_moninit((*)(char*;char*):void):void"/>
    <method name="_dyld_present():_Bool"/>
    <method name="_dyld_register_func_for_add_image((*)(const struct mach_header*;intptr_t):void):void"/>
    <method name="_dyld_register_func_for_remove_image((*)(const struct mach_header*;intptr_t):void):void"/>
    <method name="_execl(const char*;const char*, ...):intptr_t"/>
    <method name="_execle(const char*;const char*, ...):intptr_t"/>
    <method name="_execv(const char*;const const char**):intptr_t"/>
    <method name="_execve(const char*;const const char**;const const char**):intptr_t"/>
    <method name="_execvp(const char*;const const char**):intptr_t"/>
    <method name="_execvpe(const char*;const const char**;const const char**):intptr_t"/>
    <method name="_exit(int):void"/>
    <method name="_flsbuf(int;FILE*):int"/>
    <method name="_gcvt(double;int;char*):char*"/>
    <method name="_host_page_size(host_t;vm_size_t*):kern_return_t"/>
    <method name="_i64toa(long long;char*;int):char*"/>
    <method name="_i64tow(long long;wchar_t*;int):wchar_t*"/>
    <method name="_itoa(int;char*;int):char*"/>
    <method name="_itow(int;wchar_t*;int):wchar_t*"/>
    <method name="_kernelrpc_mach_port_allocate_trap(mach_port_name_t;mach_port_right_t;mach_port_name_t*):kern_return_t"/>
    <method name="_kernelrpc_mach_port_deallocate_trap(mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_destroy_trap(mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_extract_member_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_insert_member_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_insert_right_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t;mach_msg_type_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_mod_refs_trap(mach_port_name_t;mach_port_name_t;mach_port_right_t;mach_port_delta_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_move_member_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_vm_allocate_trap(mach_port_name_t;mach_vm_offset_t*;mach_vm_size_t;int):kern_return_t"/>
    <method name="_kernelrpc_mach_vm_deallocate_trap(mach_port_name_t;mach_vm_address_t;mach_vm_size_t):kern_return_t"/>
    <method name="_kernelrpc_mach_vm_protect_trap(mach_port_name_t;mach_vm_address_t;mach_vm_size_t;boolean_t;vm_prot_t):kern_return_t"/>
    <method name="_lcl_configure_by_text(uint32_t;const const char**;_lcl_level_narrow_t*;const char*;_lcl_level_t):uint32_t"/>
    <method name="_longjmp(int*;int):void"/>
    <method name="_ltoa(long;char*;int):char*"/>
    <method name="_ltow(long;wchar_t*;int):wchar_t*"/>
    <method name="_makeDateFormatter(NSDateFormatterStyle;NSDateFormatterStyle):NSDateFormatter*"/>
    <method name="_mbccpy(unsigned char*;const unsigned char*):void"/>
    <method name="_mbscat(unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbscpy(unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbsdec(const unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbsinc(const unsigned char*):unsigned char*"/>
    <method name="_mbslen(const unsigned char*):size_t"/>
    <method name="_mbsnbcat(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsnbcpy(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsncat(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsncpy(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsnextc(const unsigned char*):unsigned int"/>
    <method name="_mbsnset(unsigned char*;unsigned int;size_t):unsigned char*"/>
    <method name="_mbsrev(unsigned char*):unsigned char*"/>
    <method name="_mbsset(unsigned char*;unsigned int):unsigned char*"/>
    <method name="_mbsstr(const unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbstok(unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mkdir(const char*):int"/>
    <method name="_objc_flush_caches(Class*):void"/>
    <method name="_objc_msgForward(id;SEL, ...):id"/>
    <method name="_objc_msgForward_stret(id;SEL, ...):void"/>
    <method name="_objc_resolve_categories_for_class(Class*):void"/>
    <method name="_open(const char*;int, ...):int"/>
    <method name="_ossl_096_des_random_seed(DES_cblock*):void"/>
    <method name="_ossl_old_crypt(const char*;const char*):char*"/>
    <method name="_ossl_old_des_cbc_cksum(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):unsigned long"/>
    <method name="_ossl_old_des_cbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_cfb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*;int):void"/>
    <method name="_ossl_old_des_cfb_encrypt(unsigned char*;unsigned char*;int;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_crypt(const char*;const char*):char*"/>
    <method name="_ossl_old_des_decrypt3(unsigned long*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*):void"/>
    <method name="_ossl_old_des_ecb3_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_ecb_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_ede3_cbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_ede3_cfb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*;int):void"/>
    <method name="_ossl_old_des_ede3_ofb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*):void"/>
    <method name="_ossl_old_des_enc_read(int;char*;int;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):int"/>
    <method name="_ossl_old_des_enc_write(int;char*;int;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):int"/>
    <method name="_ossl_old_des_encrypt(unsigned long*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_encrypt2(unsigned long*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_encrypt3(unsigned long*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*):void"/>
    <method name="_ossl_old_des_fcrypt(const char*;const char*;char*):char*"/>
    <method name="_ossl_old_des_is_weak_key(_ossl_old_des_cblock*):int"/>
    <method name="_ossl_old_des_key_sched(_ossl_old_des_cblock*;_ossl_old_des_ks_struct*):int"/>
    <method name="_ossl_old_des_ncbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_ofb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*):void"/>
    <method name="_ossl_old_des_ofb_encrypt(unsigned char*;unsigned char*;int;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_options():const char*"/>
    <method name="_ossl_old_des_pcbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_quad_cksum(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;int;_ossl_old_des_cblock*):unsigned long"/>
    <method name="_ossl_old_des_random_key(unsigned char*):void"/>
    <method name="_ossl_old_des_random_seed(unsigned char*):void"/>
    <method name="_ossl_old_des_read_2passwords(_ossl_old_des_cblock*;_ossl_old_des_cblock*;const char*;int):int"/>
    <method name="_ossl_old_des_read_password(_ossl_old_des_cblock*;const char*;int):int"/>
    <method name="_ossl_old_des_read_pw(char*;char*;int;const char*;int):int"/>
    <method name="_ossl_old_des_read_pw_string(char*;int;const char*;int):int"/>
    <method name="_ossl_old_des_set_key(_ossl_old_des_cblock*;_ossl_old_des_ks_struct*):int"/>
    <method name="_ossl_old_des_set_odd_parity(_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_string_to_2keys(char*;_ossl_old_des_cblock*;_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_string_to_key(char*;_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_xcbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_xwhite_in2out(_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_cblock*):void"/>
    <method name="_printf():int"/>
    <method name="_putenv(const char*):int"/>
    <method name="_putenv_s(const char*;const char*):errno_t"/>
    <method name="_res_9_h_errno_set(struct __res_9_state*;int):void"/>
    <method name="_rmdir(const char*):int"/>
    <method name="_searchenv(const char*;const char*; char*):void"/>
    <method name="_searchenv_s(const char*;const char*; char*;size_t):errno_t"/>
    <method name="_setjmp(int*):int"/>
    <method name="_snprintf(char*;size_t;const char*, ...):int"/>
    <method name="_snwprintf(wchar_t*;size_t;const wchar_t*, ...):int"/>
    <method name="_stat(const char*;_stat*):int"/>
    <method name="_stat64(const char*;__stat64*):int"/>
    <method name="_stati64(const char*;_stati64*):int"/>
    <method name="_tcscat(tchar_t *; const tchar_t *): tchar_t *"/>
    <method name="_tcscpy(tchar_t *; const tchar_t *): tchar_t *"/>
    <method name="_tcsncat(char*;const char*;size_t):char*"/>
    <method name="_tcsncpy(char*;const char*;size_t):char*"/>
    <method name="_timeString(NSDate*):NSString*"/>
    <method name="_tscanf(const char *format ...): int"/>
    <method name="_ui64toa(unsigned long long;char*;int):char*"/>
    <method name="_ui64tow(unsigned long long;wchar_t*;int):wchar_t*"/>
    <method name="_ultoa(unsigned long;char*;int):char*"/>
    <method name="_ultow(unsigned long;wchar_t*;int):wchar_t*"/>
    <method name="_unlink(const char*):int"/>
    <method name="_utime(const char*;_utimbuf*):int"/>
    <method name="_utime64(const char*;__utimbuf64*):int"/>
    <method name="_waccess(const wchar_t*;int):int"/>
    <method name="_wdupenv_s(wchar_t **;size_t*;const wchar_t*):errno_t"/>
    <method name="_wexecl(const wchar_t*;const wchar_t*, ...):intptr_t"/>
    <method name="_wexecle(const wchar_t*;const wchar_t*, ...):intptr_t"/>
    <method name="_wexecv(const wchar_t*;const const wchar_t**):intptr_t"/>
    <method name="_wexecve(const wchar_t*;const const wchar_t**;const const wchar_t**):intptr_t"/>
    <method name="_wexecvp(const wchar_t*;const const wchar_t**):intptr_t"/>
    <method name="_wexecvpe(const wchar_t*;const const wchar_t**;const const wchar_t**):intptr_t"/>
    <method name="_wfopen(const wchar_t*;const wchar_t*):FILE*"/>
    <method name="_wfreopen(const wchar_t*;const wchar_t*;FILE*):FILE*"/>
    <method name="_wgetenv(const wchar_t*):wchar_t*"/>
    <method name="_wgetenv_s(size_t*;wchar_t*;size_t;const wchar_t*):errno_t"/>
    <method name="_wmkdir(const wchar_t*):int"/>
    <method name="_wopen(const wchar_t*;int, ...):int"/>
    <method name="_wputenv(const wchar_t*):int"/>
    <method name="_wputenv_s(const wchar_t*;const wchar_t*):errno_t"/>
    <method name="_wrmdir(const wchar_t*):int"/>
    <method name="_wsearchenv(const wchar_t*;const wchar_t*;wchar_t*):void"/>
    <method name="_wsearchenv_s(const wchar_t*;const wchar_t*; wchar_t*;size_t):errno_t"/>
    <method name="_wstat(const wchar_t*;_stat*):int"/>
    <method name="_wstat64(const wchar_t*;__stat64*):int"/>
    <method name="_wstati64(const wchar_t*;_stati64*):int"/>
    <method name="_wunlink(const wchar_t*):int"/>
    <method name="_wutime(const wchar_t*;_utimbuf*):int"/>
    <method name="_wutime64(const wchar_t*;__utimbuf64*):int"/>
    <method name="_yppasswd(char*;struct x_passwd*):int"/>
    <method name="a2d_ASN1_OBJECT(unsigned char*;int;const char*;int):int"/>
    <method name="a2i_ASN1_ENUMERATED(BIO*;ASN1_ENUMERATED*;char*;int):int"/>
    <method name="a2i_ASN1_INTEGER(BIO*;ASN1_INTEGER*;char*;int):int"/>
    <method name="a2i_ASN1_STRING(BIO*;ASN1_STRING*;char*;int):int"/>
    <method name="a2i_IPADDRESS(const char*):ASN1_OCTET_STRING*"/>
    <method name="a2i_IPADDRESS_NC(const char*):ASN1_OCTET_STRING*"/>
    <method name="a64l(const char*):long"/>
    <method name="abort():void"/>
    <method name="abs(double):double"/>
    <method name="abs(float):float"/>
    <method name="abs(int):int"/>
    <method name="abs(long double):long double"/>
    <method name="accept(SOCKET;sockaddr*;int*):SOCKET"/>
    <method name="accept(int;sockaddr*;socklen_t*):int"/>
    <method name="accept(int;struct sockaddr*;socklen_t*):int"/>
    <method name="access(const char*;int):int"/>
    <method name="acct(const char*):int"/>
    <method name="acl_add_flag_np(acl_flagset_t;acl_flag_t):int"/>
    <method name="acl_add_perm(acl_permset_t;acl_perm_t):int"/>
    <method name="acl_calc_mask(acl_t*):int"/>
    <method name="acl_clear_flags_np(acl_flagset_t):int"/>
    <method name="acl_clear_perms(acl_permset_t):int"/>
    <method name="acl_copy_entry(acl_entry_t;acl_entry_t):int"/>
    <method name="acl_copy_ext(void*;acl_t;int):int"/>
    <method name="acl_copy_ext_native(void*;acl_t;int):int"/>
    <method name="acl_copy_int(const void*):acl_t"/>
    <method name="acl_copy_int_native(const void*):acl_t"/>
    <method name="acl_create_entry(acl_t*;acl_entry_t*):int"/>
    <method name="acl_create_entry_np(acl_t*;acl_entry_t*;int):int"/>
    <method name="acl_delete_def_file(const char*):int"/>
    <method name="acl_delete_entry(acl_t;acl_entry_t):int"/>
    <method name="acl_delete_flag_np(acl_flagset_t;acl_flag_t):int"/>
    <method name="acl_delete_perm(acl_permset_t;acl_perm_t):int"/>
    <method name="acl_dup(acl_t):acl_t"/>
    <method name="acl_free(void*):int"/>
    <method name="acl_from_text(const char*):acl_t"/>
    <method name="acl_get_entry(acl_t;int;acl_entry_t*):int"/>
    <method name="acl_get_fd(int):acl_t"/>
    <method name="acl_get_fd_np(int;acl_type_t):acl_t"/>
    <method name="acl_get_file(const char*;acl_type_t):acl_t"/>
    <method name="acl_get_flag_np(acl_flagset_t;acl_flag_t):int"/>
    <method name="acl_get_flagset_np(void*;acl_flagset_t*):int"/>
    <method name="acl_get_link_np(const char*;acl_type_t):acl_t"/>
    <method name="acl_get_perm_np(acl_permset_t;acl_perm_t):int"/>
    <method name="acl_get_permset(acl_entry_t;acl_permset_t*):int"/>
    <method name="acl_get_permset_mask_np(acl_entry_t;acl_permset_mask_t*):int"/>
    <method name="acl_get_qualifier(acl_entry_t):void*"/>
    <method name="acl_get_tag_type(acl_entry_t;acl_tag_t*):int"/>
    <method name="acl_init(int):acl_t"/>
    <method name="acl_maximal_permset_mask_np(acl_permset_mask_t*):int"/>
    <method name="acl_set_fd(int;acl_t):int"/>
    <method name="acl_set_fd_np(int;acl_t;acl_type_t):int"/>
    <method name="acl_set_file(const char*;acl_type_t;acl_t):int"/>
    <method name="acl_set_flagset_np(void*;acl_flagset_t):int"/>
    <method name="acl_set_link_np(const char*;acl_type_t;acl_t):int"/>
    <method name="acl_set_permset(acl_entry_t;acl_permset_t):int"/>
    <method name="acl_set_permset_mask_np(acl_entry_t;acl_permset_mask_t):int"/>
    <method name="acl_set_qualifier(acl_entry_t;const void*):int"/>
    <method name="acl_set_tag_type(acl_entry_t;acl_tag_t):int"/>
    <method name="acl_size(acl_t):int"/>
    <method name="acl_to_text(acl_t;int*):char*"/>
    <method name="acl_valid(acl_t):int"/>
    <method name="acl_valid_fd_np(int;acl_type_t;acl_t):int"/>
    <method name="acl_valid_file_np(const char*;acl_type_t;acl_t):int"/>
    <method name="acl_valid_link_np(const char*;acl_type_t;acl_t):int"/>
    <method name="acos(double):double"/>
    <method name="acos(float):float"/>
    <method name="acos(long double):long double"/>
    <method name="acosf(float):float"/>
    <method name="acosh(double):double"/>
    <method name="acoshf(float):float"/>
    <method name="acoshl(long double):long double"/>
    <method name="acosl(long double):long double"/>
    <method name="act_get_state(thread_act_t;int;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="act_set_state(thread_act_t;int;thread_state_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="addRoundedRectToPath(CGContextRef;CGRect;float;float):void"/>
    <method name="add_data_in_datablock(linkedlist_data*;const void*;uLong):int"/>
    <method name="add_profil(char*;size_t;unsigned long;unsigned int):int"/>
    <method name="addr2ascii(int;const void*;int;char*):char*"/>
    <method name="addrsel_policy_init():void"/>
    <method name="adjtime(const struct timeval*;struct timeval*):int"/>
    <method name="aio_error(const struct aiocb*):int"/>
    <method name="aio_read(struct aiocb*):int"/>
    <method name="aio_return(struct aiocb*):ssize_t"/>
    <method name="aio_write(struct aiocb*):int"/>
    <method name="alGetBoolean(ALenum):ALboolean"/>
    <method name="alGetDouble(ALenum):ALdouble"/>
    <method name="alGetEnumValue(const ALchar*):ALenum"/>
    <method name="alGetFloat(ALenum):ALfloat"/>
    <method name="alGetInteger(ALenum):ALint"/>
    <method name="alGetProcAddress(const ALchar*):void*"/>
    <method name="alGetString(ALenum):const ALchar*"/>
    <method name="alIsBuffer(ALuint):ALboolean"/>
    <method name="alIsEnabled(ALenum):ALboolean"/>
    <method name="alIsExtensionPresent(const ALchar*):ALboolean"/>
    <method name="alIsSource(ALuint):ALboolean"/>
    <method name="alarm(unsigned int):unsigned int"/>
    <method name="alcCaptureCloseDevice(ALCdevice*):ALCboolean"/>
    <method name="alcCloseDevice(ALCdevice*):ALCboolean"/>
    <method name="alcGetContextsDevice(ALCcontext*):ALCdevice*"/>
    <method name="alcGetError(ALCdevice*):ALCenum"/>
    <method name="alcMakeContextCurrent(ALCcontext*):ALCboolean"/>
    <method name="alcOpenDevice(const ALCchar*):ALCdevice*"/>
    <method name="alloca(size_t):void*"/>
    <method name="arc4random():u_int32_t"/>
    <method name="arc4random_addrandom(unsigned char*;int):void"/>
    <method name="arc4random_buf(void*;size_t):void"/>
    <method name="arc4random_stir():void"/>
    <method name="arc4random_uniform(u_int32_t):u_int32_t"/>
    <method name="asc2uni(const char*;int;unsigned char**;int*):unsigned char*"/>
    <method name="ascii2addr(int;const char*;void*):int"/>
    <method name="asctime(const struct tm*):char*"/>
    <method name="asctime_r(const struct tm*;char*):char*"/>
    <method name="asin(double):double"/>
    <method name="asin(float):float"/>
    <method name="asin(long double):long double"/>
    <method name="asinf(float):float"/>
    <method name="asinh(double):double"/>
    <method name="asinhf(float):float"/>
    <method name="asinhl(long double):long double"/>
    <method name="asinl(long double):long double"/>
    <method name="asl_add_log_file(aslclient;int):int"/>
    <method name="asl_close(aslclient):void"/>
    <method name="asl_close_auxiliary_file(int):int"/>
    <method name="asl_create_auxiliary_file(aslmsg;const char*;const char*;int*):int"/>
    <method name="asl_free(aslmsg):void"/>
    <method name="asl_get(aslmsg;const char*):const char*"/>
    <method name="asl_key(aslmsg;uint32_t):const char*"/>
    <method name="asl_log(aslclient;aslmsg;int;const char*, ...):int"/>
    <method name="asl_log_auxiliary_location(aslmsg;const char*;const char*;const char*):int"/>
    <method name="asl_log_descriptor(aslclient;aslmsg;int;int;uint32_t):int"/>
    <method name="asl_new(uint32_t):aslmsg"/>
    <method name="asl_open(const char*;const char*;uint32_t):aslclient"/>
    <method name="asl_open_from_file(int;const char*;const char*):aslclient"/>
    <method name="asl_remove_log_file(aslclient;int):int"/>
    <method name="asl_search(aslclient;aslmsg):aslresponse"/>
    <method name="asl_send(aslclient;aslmsg):int"/>
    <method name="asl_set(aslmsg;const char*;const char*):int"/>
    <method name="asl_set_filter(aslclient;int):int"/>
    <method name="asl_set_query(aslmsg;const char*;const char*;uint32_t):int"/>
    <method name="asl_unset(aslmsg;const char*):int"/>
    <method name="asl_vlog(aslclient;aslmsg;int;const char*;va_list):int"/>
    <method name="aslresponse_next(aslresponse):aslmsg"/>
    <method name="asn1_Finish(ASN1_CTX*):int"/>
    <method name="asn1_GetSequence(ASN1_const_CTX*;long*):int"/>
    <method name="asn1_add_error(const unsigned char*;int):void"/>
    <method name="asn1_const_Finish(ASN1_const_CTX*):int"/>
    <method name="asn1_do_adb(ASN1_VALUE**;const ASN1_TEMPLATE*;int):const ASN1_TEMPLATE*"/>
    <method name="asn1_do_lock(ASN1_VALUE**;int;const ASN1_ITEM*):int"/>
    <method name="asn1_enc_free(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="asn1_enc_init(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="asn1_enc_restore(int*;unsigned char**;ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="asn1_enc_save(ASN1_VALUE**;const unsigned char*;int;const ASN1_ITEM*):int"/>
    <method name="asn1_ex_c2i(ASN1_VALUE**;const unsigned char*;int;int;char*;const ASN1_ITEM*):int"/>
    <method name="asn1_ex_i2c(ASN1_VALUE**;unsigned char*;int*;const ASN1_ITEM*):int"/>
    <method name="asn1_get_choice_selector(ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="asn1_get_field_ptr(ASN1_VALUE**;const ASN1_TEMPLATE*):ASN1_VALUE**"/>
    <method name="asn1_set_choice_selector(ASN1_VALUE**;int;const ASN1_ITEM*):int"/>
    <method name="asprintf(char**;const char*, ...):int"/>
    <method name="atan(double):double"/>
    <method name="atan(float):float"/>
    <method name="atan(long double):long double"/>
    <method name="atan2(double;double):double"/>
    <method name="atan2(float;float):float"/>
    <method name="atan2(long double;long double):long double"/>
    <method name="atan2f(float;float):float"/>
    <method name="atan2l(long double;long double):long double"/>
    <method name="atanf(float):float"/>
    <method name="atanh(double):double"/>
    <method name="atanhf(float):float"/>
    <method name="atanhl(long double):long double"/>
    <method name="atanl(long double):long double"/>
    <method name="atexit((*)():void):int"/>
    <method name="atexit_b((^)():void):int"/>
    <method name="atof(const char*):double"/>
    <method name="atoi(const char*):int"/>
    <method name="atol(const char*):long"/>
    <method name="atoll(const char*):long long"/>
    <method name="au_bsm_to_domain(u_short;int*):int"/>
    <method name="au_bsm_to_errno(u_char;int*):int"/>
    <method name="au_bsm_to_fcntl_cmd(u_short;int*):int"/>
    <method name="au_bsm_to_socket_type(u_short;int*):int"/>
    <method name="au_domain_to_bsm(int):u_short"/>
    <method name="au_errno_to_bsm(int):u_char"/>
    <method name="au_fcntl_cmd_to_bsm(int):u_short"/>
    <method name="au_fetch_tok(tokenstr_t*;u_char*;int):int"/>
    <method name="au_free_token(token_t*):void"/>
    <method name="au_get_state():int"/>
    <method name="au_notify_initialize():uint32_t"/>
    <method name="au_notify_terminate():int"/>
    <method name="au_poltostr(int;size_t;char*):ssize_t"/>
    <method name="au_preselect(au_event_t;au_mask_t*;int;int):int"/>
    <method name="au_print_flags_tok(FILE*;tokenstr_t*;char*;int):void"/>
    <method name="au_print_tok(FILE*;tokenstr_t*;char*;char;char):void"/>
    <method name="au_print_tok_xml(FILE*;tokenstr_t*;char*;char;char):void"/>
    <method name="au_print_xml_footer(FILE*):void"/>
    <method name="au_print_xml_header(FILE*):void"/>
    <method name="au_read_rec(FILE*;u_char**):int"/>
    <method name="au_sdev_close(au_sdev_handle_t*):int"/>
    <method name="au_sdev_fd(au_sdev_handle_t*):int"/>
    <method name="au_sdev_open(int):au_sdev_handle_t*"/>
    <method name="au_sdev_read_aia(au_sdev_handle_t*;int*;auditinfo_addr_t*):int"/>
    <method name="au_sflagstostr(uint64_t;size_t;char*):ssize_t"/>
    <method name="au_socket_type_to_bsm(int):u_short"/>
    <method name="au_strerror(u_char):const char*"/>
    <method name="au_strtopol(const char*;int*):int"/>
    <method name="au_strtosflags(const char*;uint64_t*):int"/>
    <method name="au_user_mask(char*;au_mask_t*):int"/>
    <method name="audit_get_cond(int*):int"/>
    <method name="audit_get_policy(int*):int"/>
    <method name="audit_get_sflags(uint64_t*):int"/>
    <method name="audit_send_trigger(int*):int"/>
    <method name="audit_session_join(mach_port_name_t):au_asid_t"/>
    <method name="audit_set_cond(int*):int"/>
    <method name="audit_set_policy(int*):int"/>
    <method name="audit_set_sflags(uint64_t):int"/>
    <method name="audit_set_terminal_id(au_tid_t*):int"/>
    <method name="auditctl(const char*):int"/>
    <method name="authdes_create(char*;unsigned int;struct sockaddr_in*;des_block*):AUTH*"/>
    <method name="authnone_create():AUTH*"/>
    <method name="authunix_create(char*;int;int;int;int*):AUTH*"/>
    <method name="authunix_create_default():AUTH*"/>
    <method name="backtrace(void**;int):int"/>
    <method name="backtrace_symbols(const void**;int):char**"/>
    <method name="backtrace_symbols_fd(const void**;int;int):void"/>
    <method name="basename(char*):char*"/>
    <method name="bcmp(const void*;const void*;size_t):int"/>
    <method name="bcopy(const void*;void*;size_t):void"/>
    <method name="bind(SOCKET;const sockaddr*;int):int"/>
    <method name="bind(int;const sockaddr*;socklen_t):int"/>
    <method name="bind(int;const struct sockaddr*;socklen_t):int"/>
    <method name="bindresvport(int;struct sockaddr_in*):int"/>
    <method name="bindresvport_sa(int;struct sockaddr*):int"/>
    <method name="bn_add_words(unsigned long*;const unsigned long*;const unsigned long*;int):unsigned long"/>
    <method name="bn_div_words(unsigned long;unsigned long;unsigned long):unsigned long"/>
    <method name="bn_dup_expand(const BIGNUM*;int):BIGNUM*"/>
    <method name="bn_expand2(BIGNUM*;int):BIGNUM*"/>
    <method name="bn_mul_add_words(unsigned long*;const unsigned long*;int;unsigned long):unsigned long"/>
    <method name="bn_mul_words(unsigned long*;const unsigned long*;int;unsigned long):unsigned long"/>
    <method name="bn_sqr_words(unsigned long*;const unsigned long*;int):void"/>
    <method name="bn_sub_words(unsigned long*;const unsigned long*;const unsigned long*;int):unsigned long"/>
    <method name="bootparamproc_getfile_1(bp_getfile_arg*;CLIENT*):bp_getfile_res*"/>
    <method name="bootparamproc_getfile_1_svc(bp_getfile_arg*;struct svc_req*):bp_getfile_res*"/>
    <method name="bootparamproc_whoami_1(bp_whoami_arg*;CLIENT*):bp_whoami_res*"/>
    <method name="bootparamproc_whoami_1_svc(bp_whoami_arg*;struct svc_req*):bp_whoami_res*"/>
    <method name="brk(const void*):void*"/>
    <method name="btowc(int):wint_t"/>
    <method name="bzero(void*;size_t):void"/>
    <method name="c2i_ASN1_BIT_STRING(ASN1_BIT_STRING**;const unsigned char**;long):ASN1_BIT_STRING*"/>
    <method name="c2i_ASN1_INTEGER(ASN1_INTEGER**;const unsigned char**;long):ASN1_INTEGER*"/>
    <method name="c2i_ASN1_OBJECT(ASN1_OBJECT**;const unsigned char**;long):ASN1_OBJECT*"/>
    <method name="cabs(_Complex double):double"/>
    <method name="cabsf(_Complex float):float"/>
    <method name="cabsl(_Complex long double):long double"/>
    <method name="cache_create(const char*;cache_attributes_t*;cache_t**):int"/>
    <method name="cache_destroy(cache_t*):int"/>
    <method name="cache_get_and_retain(cache_t*;void*;void**):int"/>
    <method name="cache_hash_byte_string(const char*;size_t):uintptr_t"/>
    <method name="cache_key_hash_cb_cstring(void*;void*):uintptr_t"/>
    <method name="cache_key_hash_cb_integer(void*;void*):uintptr_t"/>
    <method name="cache_key_is_equal_cb_cstring(void*;void*;void*):_Bool"/>
    <method name="cache_key_is_equal_cb_integer(void*;void*;void*):_Bool"/>
    <method name="cache_release_cb_free(void*;void*):void"/>
    <method name="cache_release_value(cache_t*;void*):int"/>
    <method name="cache_remove(cache_t*;void*):int"/>
    <method name="cache_remove_all(cache_t*):int"/>
    <method name="cache_set_and_retain(cache_t*;void*;void*;cache_cost_t):int"/>
    <method name="cache_value_make_nonpurgeable_cb(void*;void*):_Bool"/>
    <method name="cache_value_make_purgeable_cb(void*;void*):void"/>
    <method name="cacos(_Complex double):_Complex double"/>
    <method name="cacosf(_Complex float):_Complex float"/>
    <method name="cacosh(_Complex double):_Complex double"/>
    <method name="cacoshf(_Complex float):_Complex float"/>
    <method name="cacoshl(_Complex long double):_Complex long double"/>
    <method name="cacosl(_Complex long double):_Complex long double"/>
    <method name="calculateStringDiff(int;int):int"/>
    <method name="calloc(size_t;size_t):void*"/>
    <method name="cannot_audit(int):int"/>
    <method name="carg(_Complex double):double"/>
    <method name="cargf(_Complex float):float"/>
    <method name="cargl(_Complex long double):long double"/>
    <method name="casin(_Complex double):_Complex double"/>
    <method name="casinf(_Complex float):_Complex float"/>
    <method name="casinh(_Complex double):_Complex double"/>
    <method name="casinhf(_Complex float):_Complex float"/>
    <method name="casinhl(_Complex long double):_Complex long double"/>
    <method name="casinl(_Complex long double):_Complex long double"/>
    <method name="catan(_Complex double):_Complex double"/>
    <method name="catanf(_Complex float):_Complex float"/>
    <method name="catanh(_Complex double):_Complex double"/>
    <method name="catanhf(_Complex float):_Complex float"/>
    <method name="catanhl(_Complex long double):_Complex long double"/>
    <method name="catanl(_Complex long double):_Complex long double"/>
    <method name="catclose(nl_catd):int"/>
    <method name="catgets(nl_catd;int;int;const char*):char*"/>
    <method name="catlas_caxpby(const int;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="catlas_cset(const int;const void*;void*;const int):void"/>
    <method name="catlas_daxpby(const int;const double;const double*;const int;const double;double*;const int):void"/>
    <method name="catlas_dset(const int;const double;double*;const int):void"/>
    <method name="catlas_saxpby(const int;const float;const float*;const int;const float;float*;const int):void"/>
    <method name="catlas_sset(const int;const float;float*;const int):void"/>
    <method name="catlas_zaxpby(const int;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="catlas_zset(const int;const void*;void*;const int):void"/>
    <method name="catopen(const char*;int):nl_catd"/>
    <method name="cbrt(double):double"/>
    <method name="cbrtf(float):float"/>
    <method name="cbrtl(long double):long double"/>
    <method name="ccos(_Complex double):_Complex double"/>
    <method name="ccosf(_Complex float):_Complex float"/>
    <method name="ccosh(_Complex double):_Complex double"/>
    <method name="ccoshf(_Complex float):_Complex float"/>
    <method name="ccoshl(_Complex long double):_Complex long double"/>
    <method name="ccosl(_Complex long double):_Complex long double"/>
    <method name="ceil(double):double"/>
    <method name="ceil(float):float"/>
    <method name="ceil(long double):long double"/>
    <method name="ceilf(float):float"/>
    <method name="ceill(long double):long double"/>
    <method name="cexp(_Complex double):_Complex double"/>
    <method name="cexpf(_Complex float):_Complex float"/>
    <method name="cexpl(_Complex long double):_Complex long double"/>
    <method name="cfgetispeed(const struct termios*):speed_t"/>
    <method name="cfgetospeed(const struct termios*):speed_t"/>
    <method name="cfmakeraw(struct termios*):void"/>
    <method name="cfsetispeed(struct termios*;speed_t):int"/>
    <method name="cfsetospeed(struct termios*;speed_t):int"/>
    <method name="cfsetspeed(struct termios*;speed_t):int"/>
    <method name="cgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgebal_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgecon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cgeev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgegs_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgegv_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgesc2_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="cgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgetc2_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetcap(char*;const char*;int):char*"/>
    <method name="cgetclose():int"/>
    <method name="cgetent(char**;char**;const char*):int"/>
    <method name="cgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetfirst(char**;char**):int"/>
    <method name="cgetmatch(const char*;const char*):int"/>
    <method name="cgetnext(char**;char**):int"/>
    <method name="cgetnum(char*;const char*;long*):int"/>
    <method name="cgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetri_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetset(const char*):int"/>
    <method name="cgetstr(char*;const char*;char**):int"/>
    <method name="cgetustr(char*;const char*;char**):int"/>
    <method name="cggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggbal_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cggev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgtcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgttrf_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chdir(const char*):int"/>
    <method name="checon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cheequb_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cheev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cheevd_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cheevr_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cheevx_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chegvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cherfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chesv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chetd2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chetf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chetrd_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chetrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chetri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chflags(const char*;__uint32_t):int"/>
    <method name="chfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="chgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chgrp(const char *; group_t): bool"/>
    <method name="chla_transtype__(char*;__CLPK_ftnlen;__CLPK_integer*):void"/>
    <method name="chmod(const char*;mode_t):int"/>
    <method name="chmodx_np(const char*;filesec_t):int"/>
    <method name="chown(const char*;uid_t;gid_t):int"/>
    <method name="chpcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chpev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chpevd_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpevx_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chpgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chpgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chpsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chptrd_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chptrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chptri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chroot(const char*):int"/>
    <method name="chsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cimag(_Complex double):double"/>
    <method name="cimagf(_Complex float):float"/>
    <method name="cimagl(_Complex long double):long double"/>
    <method name="clabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacgv_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacn2_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clacon_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clacp2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacrm_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="clacrt_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="cladiv_(__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):void"/>
    <method name="claed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="claein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="claesy_(__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="claev2_(__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="clag2z_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clags2_(__CLPK_logical*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="clagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clahef_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="clals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clangt_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):__CLPK_doublereal"/>
    <method name="clanhb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhe_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhf_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhp_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhs_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanht_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*):__CLPK_doublereal"/>
    <method name="clansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clansp_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clansy_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clantp_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clapll_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="clapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqhb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqhe_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqhp_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="claqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claqr1_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="claqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqsp_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqsy_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="clar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="clar2v_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarcm_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="clarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarfg_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarfp_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clargv_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarrv_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clartg_(__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="clartv_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="class_addIvar(Class*;const char*;size_t;uint8_t;const char*):BOOL"/>
    <method name="class_addMethod(Class*;SEL;IMP;const char*):BOOL"/>
    <method name="class_addMethods(Class*;struct objc_method_list*):void"/>
    <method name="class_addProperty(Class*;const char*;const objc_property_attribute_t*;unsigned int):BOOL"/>
    <method name="class_addProtocol(Class*;Protocol*):BOOL"/>
    <method name="class_conformsToProtocol(Class*;Protocol*):BOOL"/>
    <method name="class_copyIvarList(Class*;unsigned int*):Ivar*"/>
    <method name="class_copyMethodList(Class*;unsigned int*):Method*"/>
    <method name="class_copyPropertyList(Class*;unsigned int*):objc_property_t*"/>
    <method name="class_copyProtocolList(Class*;unsigned int*):Protocol**"/>
    <method name="class_createInstance(Class*;size_t):id"/>
    <method name="class_createInstanceFromZone(Class*;size_t;void*):id"/>
    <method name="class_getClassMethod(Class*;SEL):Method"/>
    <method name="class_getClassVariable(Class*;const char*):Ivar"/>
    <method name="class_getImageName(Class*):const char*"/>
    <method name="class_getInstanceMethod(Class*;SEL):Method"/>
    <method name="class_getInstanceSize(Class*):size_t"/>
    <method name="class_getInstanceVariable(Class*;const char*):Ivar"/>
    <method name="class_getIvarLayout(Class*):const uint8_t*"/>
    <method name="class_getMethodImplementation(Class*;SEL):IMP"/>
    <method name="class_getMethodImplementation_stret(Class*;SEL):IMP"/>
    <method name="class_getName(Class*):const char*"/>
    <method name="class_getProperty(Class*;const char*):objc_property_t"/>
    <method name="class_getSuperclass(Class*):Class*"/>
    <method name="class_getVersion(Class*):int"/>
    <method name="class_getWeakIvarLayout(Class*):const uint8_t*"/>
    <method name="class_isMetaClass(Class*):BOOL"/>
    <method name="class_lookupMethod(Class*;SEL):IMP"/>
    <method name="class_nextMethodList(Class*;void**):struct objc_method_list*"/>
    <method name="class_poseAs(Class*;Class*):Class*"/>
    <method name="class_removeMethods(Class*;struct objc_method_list*):void"/>
    <method name="class_replaceMethod(Class*;SEL;IMP;const char*):IMP"/>
    <method name="class_replaceProperty(Class*;const char*;const objc_property_attribute_t*;unsigned int):void"/>
    <method name="class_respondsToMethod(Class*;SEL):BOOL"/>
    <method name="class_respondsToSelector(Class*;SEL):BOOL"/>
    <method name="class_setIvarLayout(Class*;const uint8_t*):void"/>
    <method name="class_setSuperclass(Class*;Class*):Class*"/>
    <method name="class_setVersion(Class*;int):void"/>
    <method name="class_setWeakIvarLayout(Class*;const uint8_t*):void"/>
    <method name="classq_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="claswp_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="clatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clauu2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clauum_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cleanupColorTransition(int):int"/>
    <method name="clearerr(FILE*):void"/>
    <method name="clnt_create(char*;unsigned long;unsigned long;char*):CLIENT*"/>
    <method name="clnt_pcreateerror(char*):void"/>
    <method name="clnt_perrno(enum clnt_stat):void"/>
    <method name="clnt_perror(CLIENT*;char*):void"/>
    <method name="clnt_spcreateerror(char*):char*"/>
    <method name="clnt_sperrno(enum clnt_stat):char*"/>
    <method name="clnt_sperror(CLIENT*;char*):char*"/>
    <method name="clntraw_create(unsigned long;unsigned long):CLIENT*"/>
    <method name="clnttcp_create(struct sockaddr_in*;unsigned long;unsigned long;int*;unsigned int;unsigned int):CLIENT*"/>
    <method name="clntudp_bufcreate(struct sockaddr_in*;unsigned long;unsigned long;struct timeval;int*;unsigned int;unsigned int):CLIENT*"/>
    <method name="clntudp_create(struct sockaddr_in*;unsigned long;unsigned long;struct timeval;int*):CLIENT*"/>
    <method name="clock():clock_t"/>
    <method name="clock_alarm(clock_serv_t;alarm_type_t;mach_timespec_t;clock_reply_t):kern_return_t"/>
    <method name="clock_alarm_reply(clock_reply_t;mach_msg_type_name_t;kern_return_t;alarm_type_t;mach_timespec_t):kern_return_t"/>
    <method name="clock_get_attributes(clock_serv_t;clock_flavor_t;clock_attr_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="clock_get_res(mach_port_t;clock_res_t*):kern_return_t"/>
    <method name="clock_get_time(clock_serv_t;mach_timespec_t*):kern_return_t"/>
    <method name="clock_set_attributes(clock_ctrl_t;clock_flavor_t;clock_attr_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="clock_set_res(mach_port_t;clock_res_t):kern_return_t"/>
    <method name="clock_set_time(clock_ctrl_t;mach_timespec_t):kern_return_t"/>
    <method name="clock_sleep(mach_port_t;int;mach_timespec_t;mach_timespec_t*):kern_return_t"/>
    <method name="clock_sleep_trap(mach_port_name_t;sleep_type_t;int;int;mach_timespec_t*):kern_return_t"/>
    <method name="clog(_Complex double):_Complex double"/>
    <method name="clogf(_Complex float):_Complex float"/>
    <method name="clogl(_Complex long double):_Complex long double"/>
    <method name="close():void"/>
    <method name="close(int):int"/>
    <method name="closedir(DIR*):int"/>
    <method name="closelog():void"/>
    <method name="closesocket(SOCKET):int"/>
    <method name="compress(Bytef*;uLongf*;const Bytef*;uLong):int"/>
    <method name="compress2(Bytef*;uLongf*;const Bytef*;uLong;int):int"/>
    <method name="compressBound(uLong):uLong"/>
    <method name="confstr(int;char*;size_t):size_t"/>
    <method name="conj(_Complex double):_Complex double"/>
    <method name="conjf(_Complex float):_Complex float"/>
    <method name="conjl(_Complex long double):_Complex long double"/>
    <method name="connect(SOCKET;const sockaddr*;int):int"/>
    <method name="connect(int;const sockaddr*;socklen_t):int"/>
    <method name="connect(int;const struct sockaddr*;socklen_t):int"/>
    <method name="copyRegexPrefsStyleChanged():int"/>
    <method name="copySelectionToClipboard(int;int):int"/>
    <method name="copyfile(const char*;const char*;copyfile_state_t;copyfile_flags_t):int"/>
    <method name="copyfile_state_alloc():copyfile_state_t"/>
    <method name="copyfile_state_free(copyfile_state_t):int"/>
    <method name="copyfile_state_get(copyfile_state_t;uint32_t;void*):int"/>
    <method name="copyfile_state_set(copyfile_state_t;uint32_t;const void*):int"/>
    <method name="copysign(double;double):double"/>
    <method name="copysignf(float;float):float"/>
    <method name="copysignl(long double;long double):long double"/>
    <method name="cos(double):double"/>
    <method name="cos(float):float"/>
    <method name="cos(long double):long double"/>
    <method name="cosf(float):float"/>
    <method name="cosh(double):double"/>
    <method name="cosh(float):float"/>
    <method name="cosh(long double):long double"/>
    <method name="coshf(float):float"/>
    <method name="coshl(long double):long double"/>
    <method name="cosl(long double):long double"/>
    <method name="cpbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpftrf_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpftri_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpocon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpoequ_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpoequb_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpotf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpotrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpotri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpow(_Complex double;_Complex double):_Complex double"/>
    <method name="cpowf(_Complex float;_Complex float):_Complex float"/>
    <method name="cpowl(_Complex long double;_Complex long double):_Complex long double"/>
    <method name="cppcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cppequ_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;char*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpptrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpptri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cproj(_Complex double):_Complex double"/>
    <method name="cprojf(_Complex float):_Complex float"/>
    <method name="cprojl(_Complex long double):_Complex long double"/>
    <method name="cpstf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpstrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cptcon_(__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cptrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpttrf_(__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="crc32(uLong;const Bytef*;uInt):uLong"/>
    <method name="crc32_combine(uLong;uLong;long):uLong"/>
    <method name="creal(_Complex double):double"/>
    <method name="crealf(_Complex float):float"/>
    <method name="creall(_Complex long double):long double"/>
    <method name="creat(const char*;mode_t):int"/>
    <method name="crot_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="crypt(const char*;const char*):char*"/>
    <method name="crypthead(const char*;unsigned char*;int;unsigned long*;const unsigned long*;unsigned long):int"/>
    <method name="csin(_Complex double):_Complex double"/>
    <method name="csinf(_Complex float):_Complex float"/>
    <method name="csinh(_Complex double):_Complex double"/>
    <method name="csinhf(_Complex float):_Complex float"/>
    <method name="csinhl(_Complex long double):_Complex long double"/>
    <method name="csinl(_Complex long double):_Complex long double"/>
    <method name="cspcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cspmv_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cspr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="csprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csptrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csptri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csqrt(_Complex double):_Complex double"/>
    <method name="csqrtf(_Complex float):_Complex float"/>
    <method name="csqrtl(_Complex long double):_Complex long double"/>
    <method name="csrscl_(__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cssConsume(char*;int):int"/>
    <method name="csslex():int"/>
    <method name="cstedc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cstegr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cstein_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cstemr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csycon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csyequb_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csymv_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csyr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csytf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csytrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csytri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctan(_Complex double):_Complex double"/>
    <method name="ctanf(_Complex float):_Complex float"/>
    <method name="ctanh(_Complex double):_Complex double"/>
    <method name="ctanhf(_Complex float):_Complex float"/>
    <method name="ctanhl(_Complex long double):_Complex long double"/>
    <method name="ctanl(_Complex long double):_Complex long double"/>
    <method name="ctbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctermid(char*):char*"/>
    <method name="ctermid_r(char*):char*"/>
    <method name="ctfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctftri_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctfttp_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctfttr_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctime(const time_t*):char*"/>
    <method name="ctime_r(const time_t*;char*):char*"/>
    <method name="ctpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctptri_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctpttf_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctpttr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrcon_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrexc_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrti2_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrtri_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrttf_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctrttp_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cung2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cung2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cungbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cungrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungtr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cupgtr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cupmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cuserid(char*):char*"/>
    <method name="d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION**;const unsigned char**;long):ACCESS_DESCRIPTION*"/>
    <method name="d2i_ASN1_BIT_STRING(ASN1_BIT_STRING**;const unsigned char**;long):ASN1_BIT_STRING*"/>
    <method name="d2i_ASN1_BMPSTRING(ASN1_BMPSTRING**;const unsigned char**;long):ASN1_BMPSTRING*"/>
    <method name="d2i_ASN1_BOOLEAN(int*;const unsigned char**;long):int"/>
    <method name="d2i_ASN1_ENUMERATED(ASN1_ENUMERATED**;const unsigned char**;long):ASN1_ENUMERATED*"/>
    <method name="d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME**;const unsigned char**;long):ASN1_GENERALIZEDTIME*"/>
    <method name="d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING**;const unsigned char**;long):ASN1_GENERALSTRING*"/>
    <method name="d2i_ASN1_HEADER(ASN1_HEADER**;const unsigned char**;long):ASN1_HEADER*"/>
    <method name="d2i_ASN1_IA5STRING(ASN1_IA5STRING**;const unsigned char**;long):ASN1_IA5STRING*"/>
    <method name="d2i_ASN1_INTEGER(ASN1_INTEGER**;const unsigned char**;long):ASN1_INTEGER*"/>
    <method name="d2i_ASN1_NULL(ASN1_NULL**;const unsigned char**;long):ASN1_NULL*"/>
    <method name="d2i_ASN1_OBJECT(ASN1_OBJECT**;const unsigned char**;long):ASN1_OBJECT*"/>
    <method name="d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING**;const unsigned char**;long):ASN1_OCTET_STRING*"/>
    <method name="d2i_ASN1_PRINTABLE(ASN1_STRING**;const unsigned char**;long):ASN1_STRING*"/>
    <method name="d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING**;const unsigned char**;long):ASN1_PRINTABLESTRING*"/>
    <method name="d2i_ASN1_SET(STACK**;const unsigned char**;long;d2i_of_void*;(*)(void*):void*;int;int):STACK*"/>
    <method name="d2i_ASN1_T61STRING(ASN1_T61STRING**;const unsigned char**;long):ASN1_T61STRING*"/>
    <method name="d2i_ASN1_TIME(ASN1_TIME**;const unsigned char**;long):ASN1_TIME*"/>
    <method name="d2i_ASN1_TYPE(ASN1_TYPE**;const unsigned char**;long):ASN1_TYPE*"/>
    <method name="d2i_ASN1_UINTEGER(ASN1_INTEGER**;const unsigned char**;long):ASN1_INTEGER*"/>
    <method name="d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING**;const unsigned char**;long):ASN1_UNIVERSALSTRING*"/>
    <method name="d2i_ASN1_UTCTIME(ASN1_UTCTIME**;const unsigned char**;long):ASN1_UTCTIME*"/>
    <method name="d2i_ASN1_UTF8STRING(ASN1_UTF8STRING**;const unsigned char**;long):ASN1_UTF8STRING*"/>
    <method name="d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING**;const unsigned char**;long):ASN1_VISIBLESTRING*"/>
    <method name="d2i_ASN1_bytes(ASN1_STRING**;const unsigned char**;long;int;int):ASN1_STRING*"/>
    <method name="d2i_ASN1_type_bytes(ASN1_STRING**;const unsigned char**;long;int):ASN1_STRING*"/>
    <method name="d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS**;const unsigned char**;long):AUTHORITY_INFO_ACCESS*"/>
    <method name="d2i_AUTHORITY_KEYID(AUTHORITY_KEYID**;const unsigned char**;long):AUTHORITY_KEYID*"/>
    <method name="d2i_AutoPrivateKey(EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS**;const unsigned char**;long):BASIC_CONSTRAINTS*"/>
    <method name="d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES**;const unsigned char**;long):CERTIFICATEPOLICIES*"/>
    <method name="d2i_CRL_DIST_POINTS(CRL_DIST_POINTS**;const unsigned char**;long):CRL_DIST_POINTS*"/>
    <method name="d2i_DHparams(DH**;const unsigned char**;long):DH*"/>
    <method name="d2i_DIRECTORYSTRING(ASN1_STRING**;const unsigned char**;long):ASN1_STRING*"/>
    <method name="d2i_DISPLAYTEXT(ASN1_STRING**;const unsigned char**;long):ASN1_STRING*"/>
    <method name="d2i_DIST_POINT(DIST_POINT**;const unsigned char**;long):DIST_POINT*"/>
    <method name="d2i_DIST_POINT_NAME(DIST_POINT_NAME**;const unsigned char**;long):DIST_POINT_NAME*"/>
    <method name="d2i_DSAPrivateKey(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_DSAPrivateKey_bio(BIO*;DSA**):DSA*"/>
    <method name="d2i_DSAPrivateKey_fp(FILE*;DSA**):DSA*"/>
    <method name="d2i_DSAPublicKey(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_DSA_PUBKEY(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_DSA_PUBKEY_bio(BIO*;DSA**):DSA*"/>
    <method name="d2i_DSA_PUBKEY_fp(FILE*;DSA**):DSA*"/>
    <method name="d2i_DSA_SIG(DSA_SIG**;const unsigned char**;long):DSA_SIG*"/>
    <method name="d2i_DSAparams(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_ECDSA_SIG(ECDSA_SIG**;const unsigned char**;long):ECDSA_SIG*"/>
    <method name="d2i_ECPKParameters(EC_GROUP**;const unsigned char**;long):EC_GROUP*"/>
    <method name="d2i_ECParameters(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="d2i_ECPrivateKey(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="d2i_ECPrivateKey_bio(BIO*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_ECPrivateKey_fp(FILE*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_EC_PUBKEY(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="d2i_EC_PUBKEY_bio(BIO*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_EC_PUBKEY_fp(FILE*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_EDIPARTYNAME(EDIPARTYNAME**;const unsigned char**;long):EDIPARTYNAME*"/>
    <method name="d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE**;const unsigned char**;long):EXTENDED_KEY_USAGE*"/>
    <method name="d2i_GENERAL_NAME(GENERAL_NAME**;const unsigned char**;long):GENERAL_NAME*"/>
    <method name="d2i_GENERAL_NAMES(GENERAL_NAMES**;const unsigned char**;long):GENERAL_NAMES*"/>
    <method name="d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE**;const unsigned char**;long):NETSCAPE_CERT_SEQUENCE*"/>
    <method name="d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC**;const unsigned char**;long):NETSCAPE_SPKAC*"/>
    <method name="d2i_NETSCAPE_SPKI(NETSCAPE_SPKI**;const unsigned char**;long):NETSCAPE_SPKI*"/>
    <method name="d2i_NOTICEREF(NOTICEREF**;const unsigned char**;long):NOTICEREF*"/>
    <method name="d2i_Netscape_RSA(RSA**;const unsigned char**;long;(*)(char*;int;const char*;int):int*):RSA*"/>
    <method name="d2i_OCSP_BASICRESP(OCSP_BASICRESP**;const unsigned char**;long):OCSP_BASICRESP*"/>
    <method name="d2i_OCSP_CERTID(OCSP_CERTID**;const unsigned char**;long):OCSP_CERTID*"/>
    <method name="d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS**;const unsigned char**;long):OCSP_CERTSTATUS*"/>
    <method name="d2i_OCSP_CRLID(OCSP_CRLID**;const unsigned char**;long):OCSP_CRLID*"/>
    <method name="d2i_OCSP_ONEREQ(OCSP_ONEREQ**;const unsigned char**;long):OCSP_ONEREQ*"/>
    <method name="d2i_OCSP_REQINFO(OCSP_REQINFO**;const unsigned char**;long):OCSP_REQINFO*"/>
    <method name="d2i_OCSP_REQUEST(OCSP_REQUEST**;const unsigned char**;long):OCSP_REQUEST*"/>
    <method name="d2i_OCSP_RESPBYTES(OCSP_RESPBYTES**;const unsigned char**;long):OCSP_RESPBYTES*"/>
    <method name="d2i_OCSP_RESPDATA(OCSP_RESPDATA**;const unsigned char**;long):OCSP_RESPDATA*"/>
    <method name="d2i_OCSP_RESPID(OCSP_RESPID**;const unsigned char**;long):OCSP_RESPID*"/>
    <method name="d2i_OCSP_RESPONSE(OCSP_RESPONSE**;const unsigned char**;long):OCSP_RESPONSE*"/>
    <method name="d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO**;const unsigned char**;long):OCSP_REVOKEDINFO*"/>
    <method name="d2i_OCSP_SERVICELOC(OCSP_SERVICELOC**;const unsigned char**;long):OCSP_SERVICELOC*"/>
    <method name="d2i_OCSP_SIGNATURE(OCSP_SIGNATURE**;const unsigned char**;long):OCSP_SIGNATURE*"/>
    <method name="d2i_OCSP_SINGLERESP(OCSP_SINGLERESP**;const unsigned char**;long):OCSP_SINGLERESP*"/>
    <method name="d2i_OTHERNAME(OTHERNAME**;const unsigned char**;long):OTHERNAME*"/>
    <method name="d2i_PBE2PARAM(PBE2PARAM**;const unsigned char**;long):PBE2PARAM*"/>
    <method name="d2i_PBEPARAM(PBEPARAM**;const unsigned char**;long):PBEPARAM*"/>
    <method name="d2i_PBKDF2PARAM(PBKDF2PARAM**;const unsigned char**;long):PBKDF2PARAM*"/>
    <method name="d2i_PKCS12(PKCS12**;const unsigned char**;long):PKCS12*"/>
    <method name="d2i_PKCS12_BAGS(PKCS12_BAGS**;const unsigned char**;long):PKCS12_BAGS*"/>
    <method name="d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA**;const unsigned char**;long):PKCS12_MAC_DATA*"/>
    <method name="d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG**;const unsigned char**;long):PKCS12_SAFEBAG*"/>
    <method name="d2i_PKCS12_bio(BIO*;PKCS12**):PKCS12*"/>
    <method name="d2i_PKCS12_fp(FILE*;PKCS12**):PKCS12*"/>
    <method name="d2i_PKCS7(PKCS7**;const unsigned char**;long):PKCS7*"/>
    <method name="d2i_PKCS7_DIGEST(PKCS7_DIGEST**;const unsigned char**;long):PKCS7_DIGEST*"/>
    <method name="d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT**;const unsigned char**;long):PKCS7_ENCRYPT*"/>
    <method name="d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT**;const unsigned char**;long):PKCS7_ENC_CONTENT*"/>
    <method name="d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE**;const unsigned char**;long):PKCS7_ENVELOPE*"/>
    <method name="d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL**;const unsigned char**;long):PKCS7_ISSUER_AND_SERIAL*"/>
    <method name="d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO**;const unsigned char**;long):PKCS7_RECIP_INFO*"/>
    <method name="d2i_PKCS7_SIGNED(PKCS7_SIGNED**;const unsigned char**;long):PKCS7_SIGNED*"/>
    <method name="d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO**;const unsigned char**;long):PKCS7_SIGNER_INFO*"/>
    <method name="d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE**;const unsigned char**;long):PKCS7_SIGN_ENVELOPE*"/>
    <method name="d2i_PKCS7_bio(BIO*;PKCS7**):PKCS7*"/>
    <method name="d2i_PKCS7_fp(FILE*;PKCS7**):PKCS7*"/>
    <method name="d2i_PKCS8PrivateKey_bio(BIO*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="d2i_PKCS8PrivateKey_fp(FILE*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO**;const unsigned char**;long):PKCS8_PRIV_KEY_INFO*"/>
    <method name="d2i_PKCS8_PRIV_KEY_INFO_bio(BIO*;PKCS8_PRIV_KEY_INFO**):PKCS8_PRIV_KEY_INFO*"/>
    <method name="d2i_PKCS8_PRIV_KEY_INFO_fp(FILE*;PKCS8_PRIV_KEY_INFO**):PKCS8_PRIV_KEY_INFO*"/>
    <method name="d2i_PKCS8_bio(BIO*;X509_SIG**):X509_SIG*"/>
    <method name="d2i_PKCS8_fp(FILE*;X509_SIG**):X509_SIG*"/>
    <method name="d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD**;const unsigned char**;long):PKEY_USAGE_PERIOD*"/>
    <method name="d2i_POLICYINFO(POLICYINFO**;const unsigned char**;long):POLICYINFO*"/>
    <method name="d2i_POLICYQUALINFO(POLICYQUALINFO**;const unsigned char**;long):POLICYQUALINFO*"/>
    <method name="d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION**;const unsigned char**;long):PROXY_CERT_INFO_EXTENSION*"/>
    <method name="d2i_PROXY_POLICY(PROXY_POLICY**;const unsigned char**;long):PROXY_POLICY*"/>
    <method name="d2i_PUBKEY(EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_PUBKEY_bio(BIO*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PUBKEY_fp(FILE*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PrivateKey(int;EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_PrivateKey_bio(BIO*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PrivateKey_fp(FILE*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PublicKey(int;EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_RSAPrivateKey(RSA**;const unsigned char**;long):RSA*"/>
    <method name="d2i_RSAPrivateKey_bio(BIO*;RSA**):RSA*"/>
    <method name="d2i_RSAPrivateKey_fp(FILE*;RSA**):RSA*"/>
    <method name="d2i_RSAPublicKey(RSA**;const unsigned char**;long):RSA*"/>
    <method name="d2i_RSAPublicKey_bio(BIO*;RSA**):RSA*"/>
    <method name="d2i_RSAPublicKey_fp(FILE*;RSA**):RSA*"/>
    <method name="d2i_RSA_NET(RSA**;const unsigned char**;long;(*)(char*;int;const char*;int):int*;int):RSA*"/>
    <method name="d2i_RSA_PUBKEY(RSA**;const unsigned char**;long):RSA*"/>
    <method name="d2i_RSA_PUBKEY_bio(BIO*;RSA**):RSA*"/>
    <method name="d2i_RSA_PUBKEY_fp(FILE*;RSA**):RSA*"/>
    <method name="d2i_SSL_SESSION(SSL_SESSION**;const unsigned char**;long):SSL_SESSION*"/>
    <method name="d2i_SXNET(SXNET**;const unsigned char**;long):SXNET*"/>
    <method name="d2i_SXNETID(SXNETID**;const unsigned char**;long):SXNETID*"/>
    <method name="d2i_USERNOTICE(USERNOTICE**;const unsigned char**;long):USERNOTICE*"/>
    <method name="d2i_X509(X509**;const unsigned char**;long):X509*"/>
    <method name="d2i_X509_ALGOR(X509_ALGOR**;const unsigned char**;long):X509_ALGOR*"/>
    <method name="d2i_X509_ATTRIBUTE(X509_ATTRIBUTE**;const unsigned char**;long):X509_ATTRIBUTE*"/>
    <method name="d2i_X509_AUX(X509**;const unsigned char**;long):X509*"/>
    <method name="d2i_X509_CERT_AUX(X509_CERT_AUX**;const unsigned char**;long):X509_CERT_AUX*"/>
    <method name="d2i_X509_CERT_PAIR(X509_CERT_PAIR**;const unsigned char**;long):X509_CERT_PAIR*"/>
    <method name="d2i_X509_CINF(X509_CINF**;const unsigned char**;long):X509_CINF*"/>
    <method name="d2i_X509_CRL(X509_CRL**;const unsigned char**;long):X509_CRL*"/>
    <method name="d2i_X509_CRL_INFO(X509_CRL_INFO**;const unsigned char**;long):X509_CRL_INFO*"/>
    <method name="d2i_X509_CRL_bio(BIO*;X509_CRL**):X509_CRL*"/>
    <method name="d2i_X509_CRL_fp(FILE*;X509_CRL**):X509_CRL*"/>
    <method name="d2i_X509_EXTENSION(X509_EXTENSION**;const unsigned char**;long):X509_EXTENSION*"/>
    <method name="d2i_X509_NAME(X509_NAME**;const unsigned char**;long):X509_NAME*"/>
    <method name="d2i_X509_NAME_ENTRY(X509_NAME_ENTRY**;const unsigned char**;long):X509_NAME_ENTRY*"/>
    <method name="d2i_X509_PKEY(X509_PKEY**;const unsigned char**;long):X509_PKEY*"/>
    <method name="d2i_X509_PUBKEY(X509_PUBKEY**;const unsigned char**;long):X509_PUBKEY*"/>
    <method name="d2i_X509_REQ(X509_REQ**;const unsigned char**;long):X509_REQ*"/>
    <method name="d2i_X509_REQ_INFO(X509_REQ_INFO**;const unsigned char**;long):X509_REQ_INFO*"/>
    <method name="d2i_X509_REQ_bio(BIO*;X509_REQ**):X509_REQ*"/>
    <method name="d2i_X509_REQ_fp(FILE*;X509_REQ**):X509_REQ*"/>
    <method name="d2i_X509_REVOKED(X509_REVOKED**;const unsigned char**;long):X509_REVOKED*"/>
    <method name="d2i_X509_SIG(X509_SIG**;const unsigned char**;long):X509_SIG*"/>
    <method name="d2i_X509_VAL(X509_VAL**;const unsigned char**;long):X509_VAL*"/>
    <method name="d2i_X509_bio(BIO*;X509**):X509*"/>
    <method name="d2i_X509_fp(FILE*;X509**):X509*"/>
    <method name="daemon(int;int):int"/>
    <method name="dbdsdc_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dbdsqr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dbm_clearerr(DBM*):int"/>
    <method name="dbm_close(DBM*):void"/>
    <method name="dbm_delete(DBM*;datum):int"/>
    <method name="dbm_dirfno(DBM*):int"/>
    <method name="dbm_error(DBM*):int"/>
    <method name="dbm_fetch(DBM*;datum):datum"/>
    <method name="dbm_firstkey(DBM*):datum"/>
    <method name="dbm_forder(DBM*;datum):long"/>
    <method name="dbm_nextkey(DBM*):datum"/>
    <method name="dbm_open(const char*;int;mode_t):DBM*"/>
    <method name="dbm_store(DBM*;datum;datum;int):int"/>
    <method name="dbopen(const char*;int;int;DBTYPE;const void*):DB*"/>
    <method name="ddisna_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="decrypt_byte(unsigned long*;const unsigned long*):int"/>
    <method name="deflate(z_streamp;int):int"/>
    <method name="deflateBound(z_streamp;uLong):uLong"/>
    <method name="deflateCopy(z_streamp;z_streamp):int"/>
    <method name="deflateEnd(z_streamp):int"/>
    <method name="deflateInit2_(z_streamp;int;int;int;int;int;const char*;int):int"/>
    <method name="deflateInit_(z_streamp;int;const char*;int):int"/>
    <method name="deflateParams(z_streamp;int;int):int"/>
    <method name="deflatePrime(z_streamp;int;int):int"/>
    <method name="deflateReset(z_streamp):int"/>
    <method name="deflateSetDictionary(z_streamp;const Bytef*;uInt):int"/>
    <method name="deflateSetHeader(z_streamp;gz_headerp):int"/>
    <method name="deflateTune(z_streamp;int;int;int;int):int"/>
    <method name="deleteCSSRule(int):int"/>
    <method name="devname(dev_t;mode_t):char*"/>
    <method name="devname_r(dev_t;mode_t;char*;int):char*"/>
    <method name="dgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgebal_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgecon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dgeev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgegs_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgegv_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgejsv_(char*;char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesc2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesvj_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetc2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetri_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggbal_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dggev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgsvj0_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgsvj1_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtcon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgttrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dhgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dhsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dhseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="diffString(int;int):int"/>
    <method name="difftime(time_t;time_t):double"/>
    <method name="digittoint(int):int"/>
    <method name="dirname(char*):char*"/>
    <method name="disnan_(__CLPK_doublereal*):__CLPK_logical"/>
    <method name="div(int;int):div_t"/>
    <method name="dlabad_(__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlacn2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlacon_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dladdr(const void*;Dl_info*):int"/>
    <method name="dladiv_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlae2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaebz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed1_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaed4_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaed5_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaed6_(__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed9_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaeda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaev2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaexc_(__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlag2_(__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlag2s_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlags2_(__CLPK_logical*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlagtf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlagts_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlagv2_(__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaisnan_(__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_logical"/>
    <method name="dlaln2_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlamc1_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_logical*):int"/>
    <method name="dlamc2_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlamc3_(__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlamc4_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlamc5_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlamch_(char*):__CLPK_doublereal"/>
    <method name="dlamrg_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaneg_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):__CLPK_integer"/>
    <method name="dlangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlangt_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlanhs_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansf_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansp_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlanst_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansy_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlantp_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlanv2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlapll_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlapy2_(__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlapy3_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlaqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaqr1_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqsp_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqsy_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqtr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlar2v_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarfg_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarfp_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlargv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarra_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrb_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrd_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarre_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrj_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrk_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrr_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlartg_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlartv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaruv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlas2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasd0_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd1_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasd3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd4_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd5_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasd6_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasd7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd8_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasdq_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasdt_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasq1_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasq2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasq3_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasq4_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlasq5_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_logical*):int"/>
    <method name="dlasq6_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasrt_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlassq_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasv2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaswp_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasy2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlat2s_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlauu2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlauum_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlclose(void*):int"/>
    <method name="dlerror():char*"/>
    <method name="dlopen(const char*;int):void*"/>
    <method name="dlopen_preflight(const char*):_Bool"/>
    <method name="dlsym(void*;const char*):void*"/>
    <method name="dns_class_number(const char*;uint16_t*):int32_t"/>
    <method name="dns_class_string(uint16_t):const char*"/>
    <method name="dns_free(dns_handle_t):void"/>
    <method name="dns_free_question(dns_question_t*):void"/>
    <method name="dns_free_reply(dns_reply_t*):void"/>
    <method name="dns_free_resource_record(dns_resource_record_t*):void"/>
    <method name="dns_get_buffer_size(dns_handle_t):uint32_t"/>
    <method name="dns_lookup(dns_handle_t;const char*;uint32_t;uint32_t):dns_reply_t*"/>
    <method name="dns_open(const char*):dns_handle_t"/>
    <method name="dns_parse_packet(const char*;uint32_t):dns_reply_t*"/>
    <method name="dns_parse_question(const char*;uint32_t):dns_question_t*"/>
    <method name="dns_parse_resource_record(const char*;uint32_t):dns_resource_record_t*"/>
    <method name="dns_print_handle(dns_handle_t;int*):void"/>
    <method name="dns_print_question(const dns_question_t*;int*):void"/>
    <method name="dns_print_reply(const dns_reply_t*;int*;uint16_t):void"/>
    <method name="dns_print_resource_record(const dns_resource_record_t*;int*):void"/>
    <method name="dns_query(dns_handle_t;const char*;uint32_t;uint32_t;char*;uint32_t;struct sockaddr*;uint32_t*):int32_t"/>
    <method name="dns_search(dns_handle_t;const char*;uint32_t;uint32_t;char*;uint32_t;struct sockaddr*;uint32_t*):int32_t"/>
    <method name="dns_search_list_domain(dns_handle_t;uint32_t):char*"/>
    <method name="dns_search_list_domain_count(dns_handle_t):uint32_t"/>
    <method name="dns_set_buffer_size(dns_handle_t;uint32_t):void"/>
    <method name="dns_set_debug(dns_handle_t;uint32_t):void"/>
    <method name="dns_type_number(const char*;uint16_t*):int32_t"/>
    <method name="dns_type_string(uint16_t):const char*"/>
    <method name="dopgtr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dopmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorg2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorg2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorgbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorgrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgtr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpftrf_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpftri_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpocon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpoequ_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpoequb_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotf2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppcon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppequ_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpptrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpptri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dprintf(int;const char*, ...):int"/>
    <method name="dpstf2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpstrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dptcon_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dptrfs_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpttrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpttrs_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dqhashshift(int):int"/>
    <method name="drand48():double"/>
    <method name="drem(double;double):double"/>
    <method name="drscl_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dsgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspcon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dspevd_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dspgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dspgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsptrd_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsptrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsptri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstebz_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstedc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstegr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstein_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstemr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsterf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dstev_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dstevd_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstevr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstevx_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsycon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyequb_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsyev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyevd_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyevr_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytd2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsytf2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytrd_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtftri_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtfttp_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtfttr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtptri_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtpttf_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtpttr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrexc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrti2_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrtri_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrttf_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrttp_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dup(int):int"/>
    <method name="dup2(int;int):int"/>
    <method name="duplocale(locale_t):locale_t"/>
    <method name="dzsum1_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_doublereal"/>
    <method name="ecvt(double;int;int*;int*):char*"/>
    <method name="encrypt(char*;int):void"/>
    <method name="endTransitionColor(int):int"/>
    <method name="endac():void"/>
    <method name="endauclass():void"/>
    <method name="endauevent():void"/>
    <method name="endauuser():void"/>
    <method name="endfsent():void"/>
    <method name="endgrent():void"/>
    <method name="endhostent():void"/>
    <method name="endnetent():void"/>
    <method name="endnetgrent():void"/>
    <method name="endprotoent():void"/>
    <method name="endpwent():void"/>
    <method name="endrpcent():void"/>
    <method name="endservent():void"/>
    <method name="endttyent():int"/>
    <method name="endusershell():void"/>
    <method name="endutxent():void"/>
    <method name="endutxent_wtmp():void"/>
    <method name="erand48(unsigned short*):double"/>
    <method name="erf(double):double"/>
    <method name="erfc(double):double"/>
    <method name="erfcf(float):float"/>
    <method name="erfcl(long double):long double"/>
    <method name="erff(float):float"/>
    <method name="erfl(long double):long double"/>
    <method name="err(int;const char*, ...):void"/>
    <method name="err_set_exit((*)(int):void):void"/>
    <method name="err_set_exit_b((^)(int):void):void"/>
    <method name="err_set_file(void*):void"/>
    <method name="errc(int;int;const char*, ...):void"/>
    <method name="errx(int;const char*, ...):void"/>
    <method name="escapeToCharacterEntities(int):int"/>
    <method name="etap_trace_thread(thread_act_t;boolean_t):kern_return_t"/>
    <method name="ether_aton(const char*):struct ether_addr*"/>
    <method name="ether_hostton(const char*;struct ether_addr*):int"/>
    <method name="ether_line(const char*;struct ether_addr*;char*):int"/>
    <method name="ether_ntoa(const struct ether_addr*):char*"/>
    <method name="ether_ntohost(char*;const struct ether_addr*):int"/>
    <method name="exception_raise(mach_port_t;mach_port_t;mach_port_t;exception_type_t;exception_data_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="exception_raise_state(mach_port_t;exception_type_t;const exception_data_t;mach_msg_type_number_t;int*;const thread_state_t;mach_msg_type_number_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="exception_raise_state_identity(mach_port_t;mach_port_t;mach_port_t;exception_type_t;exception_data_t;mach_msg_type_number_t;int*;thread_state_t;mach_msg_type_number_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="exchangeImp():void"/>
    <method name="exchangedata(const char*;const char*;unsigned long):int"/>
    <method name="execl(const char*;const char*, ...):int"/>
    <method name="execl(const char*;const char*, ...):intptr_t"/>
    <method name="execle(const char*;const char*, ...):int"/>
    <method name="execle(const char*;const char*, ...):intptr_t"/>
    <method name="execlp(const char*;const char*, ...):int"/>
    <method name="execlp(const char*;const char*, ...):intptr_t"/>
    <method name="execlpe(const char*;const char*, ...):intptr_t"/>
    <method name="execv(const char*;const char**):int"/>
    <method name="execv(const char*;const const char**):intptr_t"/>
    <method name="execvP(const char*;const char*;const char**):int"/>
    <method name="execve(const char*;const char**;const char**):int"/>
    <method name="execve(const char*;const const char**;const const char**):intptr_t"/>
    <method name="execvp(const char*;const char**):int"/>
    <method name="execvp(const char*;const const char**):intptr_t"/>
    <method name="execvpe(const char*;const const char**;const const char**):intptr_t"/>
    <method name="exit(int):void"/>
    <method name="exp(double):double"/>
    <method name="exp(float):float"/>
    <method name="exp(long double):long double"/>
    <method name="exp2(double):double"/>
    <method name="exp2f(float):float"/>
    <method name="exp2l(long double):long double"/>
    <method name="expf(float):float"/>
    <method name="expl(long double):long double"/>
    <method name="expm1(double):double"/>
    <method name="expm1f(float):float"/>
    <method name="expm1l(long double):long double"/>
    <method name="fabs(double):double"/>
    <method name="fabs(float):float"/>
    <method name="fabs(long double):long double"/>
    <method name="fabsf(float):float"/>
    <method name="fabsl(long double):long double"/>
    <method name="fchdir(int):int"/>
    <method name="fchflags(int;__uint32_t):int"/>
    <method name="fchmod(int;mode_t):int"/>
    <method name="fchmodx_np(int;filesec_t):int"/>
    <method name="fchown(int;uid_t;gid_t):int"/>
    <method name="fclose(FILE*):int"/>
    <method name="fclose_file_func(voidpf;voidpf):int"/>
    <method name="fcntl(int;int, ...):int"/>
    <method name="fcopyfile(int;int;copyfile_state_t;copyfile_flags_t):int"/>
    <method name="fcvt(double;int;int*;int*):char*"/>
    <method name="fdim(double;double):double"/>
    <method name="fdimf(float;float):float"/>
    <method name="fdiml(long double;long double):long double"/>
    <method name="fdopen(int;const char*):FILE*"/>
    <method name="feclearexcept(int):int"/>
    <method name="fegetenv(fenv_t*):int"/>
    <method name="fegetexceptflag(fexcept_t*;int):int"/>
    <method name="fegetround():int"/>
    <method name="feholdexcept(fenv_t*):int"/>
    <method name="feof(FILE*):int"/>
    <method name="feraiseexcept(int):int"/>
    <method name="ferror(FILE*):int"/>
    <method name="ferror_file_func(voidpf;voidpf):int"/>
    <method name="fesetenv(const fenv_t*):int"/>
    <method name="fesetexceptflag(const fexcept_t*;int):int"/>
    <method name="fesetround(int):int"/>
    <method name="fetestexcept(int):int"/>
    <method name="feupdateenv(const fenv_t*):int"/>
    <method name="fflagstostr(unsigned long):char*"/>
    <method name="fflush(FILE*):int"/>
    <method name="ffs(int):int"/>
    <method name="ffsctl(int;unsigned long;void*;unsigned int):int"/>
    <method name="ffsl(long):int"/>
    <method name="fgetattrlist(int;void*;void*;size_t;unsigned long):int"/>
    <method name="fgetc(FILE *):int"/>
    <method name="fgetc(FILE*):int"/>
    <method name="fgetln(FILE*;size_t*):char*"/>
    <method name="fgetpos(FILE*;fpos_t*):int"/>
    <method name="fgets(char*;int;FILE*):char*"/>
    <method name="fgetwc(FILE*):wint_t"/>
    <method name="fgetwc_l(int*;int):int"/>
    <method name="fgetwln(FILE*;size_t*):wchar_t*"/>
    <method name="fgetws(wchar_t*;int;FILE*):wchar_t*"/>
    <method name="fgetws_l(int*;int;int*;int):int*"/>
    <method name="fgetxattr(int;const char*;void*;size_t;u_int32_t;int):ssize_t"/>
    <method name="fhopen(const struct fhandle*;int):int"/>
    <method name="fileno(FILE*):int"/>
    <method name="filesec_dup(filesec_t):filesec_t"/>
    <method name="filesec_free(filesec_t):void"/>
    <method name="filesec_get_property(filesec_t;filesec_property_t;void*):int"/>
    <method name="filesec_init():filesec_t"/>
    <method name="filesec_query_property(filesec_t;filesec_property_t;int*):int"/>
    <method name="filesec_set_property(filesec_t;filesec_property_t;const void*):int"/>
    <method name="filesec_unset_property(filesec_t;filesec_property_t):int"/>
    <method name="fill(char*;char*;const char):void"/>
    <method name="fill(signed char*;signed char*;const signed char):void"/>
    <method name="fill(unsigned char*;unsigned char*;const unsigned char):void"/>
    <method name="fill_fopen64_filefunc(zlib_filefunc64_def*):void"/>
    <method name="fill_fopen_filefunc(zlib_filefunc_def*):void"/>
    <method name="fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def*;const zlib_filefunc_def*):void"/>
    <method name="finite(double):int"/>
    <method name="flags():fmtflags"/>
    <method name="flags(fmtflags):fmtflags"/>
    <method name="flattenChildren(int):int"/>
    <method name="flistxattr(int;char*;size_t;int):ssize_t"/>
    <method name="flock(int;int):int"/>
    <method name="flockfile(FILE*):void"/>
    <method name="floor(double):double"/>
    <method name="floor(float):float"/>
    <method name="floor(long double):long double"/>
    <method name="floorf(float):float"/>
    <method name="floorl(long double):long double"/>
    <method name="fls(int):int"/>
    <method name="flsl(long):int"/>
    <method name="fma(double;double;double):double"/>
    <method name="fmaf(float;float;float):float"/>
    <method name="fmal(long double;long double;long double):long double"/>
    <method name="fmax(double;double):double"/>
    <method name="fmaxf(float;float):float"/>
    <method name="fmaxl(long double;long double):long double"/>
    <method name="fmin(double;double):double"/>
    <method name="fminf(float;float):float"/>
    <method name="fminl(long double;long double):long double"/>
    <method name="fmod(double;double):double"/>
    <method name="fmod(float;float):float"/>
    <method name="fmod(long double;long double):long double"/>
    <method name="fmodf(float;float):float"/>
    <method name="fmodl(long double;long double):long double"/>
    <method name="fmtcheck(const char*;const char*):const char*"/>
    <method name="fmtmsg(long;const char*;int;const char*;const char*;const char*):int"/>
    <method name="fnmatch(const char*;const char*;int):int"/>
    <method name="fopen(const char*;const char*):FILE*"/>
    <method name="fopen64_file_func(voidpf;const void*;int):voidpf"/>
    <method name="fopen_file_func(voidpf;const char*;int):voidpf"/>
    <method name="fork():pid_t"/>
    <method name="forkpty(int*;char*;struct termios*;struct winsize*):pid_t"/>
    <method name="fparseln(FILE*;size_t*;size_t*;const char*;int):char*"/>
    <method name="fpathconf(int;int):long"/>
    <method name="fprintf(FILE*;const char*, ...):int"/>
    <method name="fpurge(FILE*):int"/>
    <method name="fputc(int;FILE*):int"/>
    <method name="fputs(const char*;FILE*):int"/>
    <method name="fputwc(wchar_t;FILE*):wint_t"/>
    <method name="fputws(const wchar_t*;FILE*):int"/>
    <method name="fputws_l(const int*;int*;int):int"/>
    <method name="fread(void*;size_t;size_t;FILE*):size_t"/>
    <method name="fread_file_func(voidpf;voidpf;void*;uLong):uLong"/>
    <method name="free(void*):void"/>
    <method name="free_datablock(linkedlist_datablock_internal*):void"/>
    <method name="free_linkedlist(linkedlist_data*):void"/>
    <method name="freeaddrinfo(LPADDRINFO):void"/>
    <method name="freeaddrinfo(struct addrinfo*):void"/>
    <method name="freehostent(struct hostent*):void"/>
    <method name="freeifaddrs(struct ifaddrs*):void"/>
    <method name="freeifmaddrs(struct ifmaddrs*):void"/>
    <method name="freelocale(locale_t):int"/>
    <method name="fremovexattr(int;const char*;int):int"/>
    <method name="freopen(const char*;const char*;FILE*):FILE*"/>
    <method name="frexp(double;int*):double"/>
    <method name="frexp(float;int*):float"/>
    <method name="frexp(long double;int*):long double"/>
    <method name="frexpf(float;int*):float"/>
    <method name="frexpl(long double;int*):long double"/>
    <method name="fscanf(FILE*;const char*, ...):int"/>
    <method name="fsctl(const char*;unsigned long;void*;unsigned int):int"/>
    <method name="fseek(FILE*;long;int):int"/>
    <method name="fseek64_file_func(voidpf;voidpf;ZPOS64_T;int):long"/>
    <method name="fseek_file_func(voidpf;voidpf;uLong;int):long"/>
    <method name="fseeko(FILE*;off_t;int):int"/>
    <method name="fsetattrlist(int;void*;void*;size_t;unsigned long):int"/>
    <method name="fsetpos(FILE*;const fpos_t*):int"/>
    <method name="fsetxattr(int;const char*;const void*;size_t;u_int32_t;int):int"/>
    <method name="fstat(int;struct stat*):int"/>
    <method name="fstatfs(int;struct statfs*):int"/>
    <method name="fstatvfs(int;struct statvfs*):int"/>
    <method name="fstatx_np(int;struct stat*;filesec_t):int"/>
    <method name="fsync(int):int"/>
    <method name="fsync_volume_np(int;int):int"/>
    <method name="ftell(FILE*):long"/>
    <method name="ftell64_file_func(voidpf;voidpf):ZPOS64_T"/>
    <method name="ftell_file_func(voidpf;voidpf):long"/>
    <method name="ftello(FILE*):off_t"/>
    <method name="ftime(struct timeb*):int"/>
    <method name="ftok(const char*;int):key_t"/>
    <method name="ftruncate(int;off_t):int"/>
    <method name="ftrylockfile(FILE*):int"/>
    <method name="fts_children(FTS*;int):FTSENT*"/>
    <method name="fts_close(FTS*):int"/>
    <method name="fts_open(const char**;int;(*)(const FTSENT**;const FTSENT**):int):FTS*"/>
    <method name="fts_open_b(const char**;int;(^)(const FTSENT**;const FTSENT**):int):FTS*"/>
    <method name="fts_read(FTS*):FTSENT*"/>
    <method name="fts_set(FTS*;FTSENT*;int):int"/>
    <method name="ftw(const char*;(*)(const char*;const struct stat*;int):int;int):int"/>
    <method name="function():int"/>
    <method name="funlockfile(FILE*):void"/>
    <method name="futimes(int;const struct timeval*):int"/>
    <method name="fwide(FILE*;int):int"/>
    <method name="fwprintf(FILE*;const wchar_t*, ...):int"/>
    <method name="fwprintf_l(int*;int;const int*, ...):int"/>
    <method name="fwrite(const void*;size_t;size_t;FILE*):size_t"/>
    <method name="fwrite_file_func(voidpf;voidpf;const void*;uLong):uLong"/>
    <method name="fwscanf(FILE*;const wchar_t*, ...):int"/>
    <method name="fwscanf_l(int*;int;const int*, ...):int"/>
    <method name="gai_strerror(int):const char*"/>
    <method name="gai_strerrorA(int):char*"/>
    <method name="gai_strerrorW(int):WCHAR*"/>
    <method name="gamma(double):double"/>
    <method name="gcvt(double;int;char*):char*"/>
    <method name="getWidthInfo(int):int"/>
    <method name="get_allocator():allocator_type"/>
    <method name="get_crc_table():const uLongf*"/>
    <method name="get_dp_control_port(host_priv_t;mach_port_t*):kern_return_t"/>
    <method name="get_edata():unsigned long"/>
    <method name="get_end():unsigned long"/>
    <method name="get_etext():unsigned long"/>
    <method name="get_rfc2409_prime_1024(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc2409_prime_768(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_1536(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_2048(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_3072(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_4096(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_6144(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_8192(BIGNUM*):BIGNUM*"/>
    <method name="getacdir(char*;int):int"/>
    <method name="getacexpire(int*;time_t*;size_t*):int"/>
    <method name="getacfilesz(size_t*):int"/>
    <method name="getacflg(char*;int):int"/>
    <method name="getachost(char*;size_t):int"/>
    <method name="getacmin(int*):int"/>
    <method name="getacna(char*;int):int"/>
    <method name="getacpol(char*;size_t):int"/>
    <method name="getacsflagsmask(const char*;char*;size_t):int"/>
    <method name="getaddrinfo(const char*;const char*;const addrinfo*;addrinfo**):int"/>
    <method name="getaddrinfo(const char*;const char*;const struct addrinfo*;struct addrinfo**):int"/>
    <method name="getattrlist(const char*;void*;void*;size_t;unsigned long):int"/>
    <method name="getauclassent():struct au_class_ent*"/>
    <method name="getauclassent_r(au_class_ent_t*):struct au_class_ent*"/>
    <method name="getauclassnam(const char*):struct au_class_ent*"/>
    <method name="getauclassnam_r(au_class_ent_t*;const char*):struct au_class_ent*"/>
    <method name="getauclassnum(au_class_t):struct au_class_ent*"/>
    <method name="getauclassnum_r(au_class_ent_t*;au_class_t):struct au_class_ent*"/>
    <method name="getaudit(struct auditinfo*):int"/>
    <method name="getaudit_addr(struct auditinfo_addr*;int):int"/>
    <method name="getauditflagsbin(char*;au_mask_t*):int"/>
    <method name="getauditflagschar(char*;au_mask_t*;int):int"/>
    <method name="getauevent():struct au_event_ent*"/>
    <method name="getauevent_r(struct au_event_ent*):struct au_event_ent*"/>
    <method name="getauevnam(const char*):struct au_event_ent*"/>
    <method name="getauevnam_r(struct au_event_ent*;const char*):struct au_event_ent*"/>
    <method name="getauevnonam(const char*):au_event_t*"/>
    <method name="getauevnonam_r(au_event_t*;const char*):au_event_t*"/>
    <method name="getauevnum(au_event_t):struct au_event_ent*"/>
    <method name="getauevnum_r(struct au_event_ent*;au_event_t):struct au_event_ent*"/>
    <method name="getauid(au_id_t*):int"/>
    <method name="getauuserent():struct au_user_ent*"/>
    <method name="getauuserent_r(struct au_user_ent*):struct au_user_ent*"/>
    <method name="getauusernam(const char*):struct au_user_ent*"/>
    <method name="getauusernam_r(struct au_user_ent*;const char*):struct au_user_ent*"/>
    <method name="getbsize(int*;long*):char*"/>
    <method name="getc(FILE *):int"/>
    <method name="getc(FILE*):int"/>
    <method name="getc_unlocked(FILE*):int"/>
    <method name="getchar():int"/>
    <method name="getchar_unlocked():int"/>
    <method name="getcwd(char*;size_t):char*"/>
    <method name="getdate(const char*):struct tm*"/>
    <method name="getdelim(char**;size_t*;int;FILE*):ssize_t"/>
    <method name="getdirentries(int;char*;int;long*):int"/>
    <method name="getdirentriesattr(int;void*;void*;size_t;unsigned long*;unsigned long*;unsigned long*;unsigned long):int"/>
    <method name="getdomainname(char*;int):int"/>
    <method name="getdtablesize():int"/>
    <method name="getegid():gid_t"/>
    <method name="getenv(const char*):char*"/>
    <method name="getenv_s(size_t*;char*;size_t;const char*):errno_t"/>
    <method name="geteuid():uid_t"/>
    <method name="getfauditflags(au_mask_t*;au_mask_t*;au_mask_t*):int"/>
    <method name="getfh(const char*;fhandle_t*):int"/>
    <method name="getfsent():struct fstab*"/>
    <method name="getfsfile(const char*):struct fstab*"/>
    <method name="getfsspec(const char*):struct fstab*"/>
    <method name="getfsstat(struct statfs*;int;int):int"/>
    <method name="getgid():gid_t"/>
    <method name="getgrent():struct group*"/>
    <method name="getgrgid(gid_t):struct group*"/>
    <method name="getgrgid_r(gid_t;struct group*;char*;size_t;struct group**):int"/>
    <method name="getgrnam(const char*):struct group*"/>
    <method name="getgrnam_r(const char*;struct group*;char*;size_t;struct group**):int"/>
    <method name="getgrouplist(const char*;int;int*;int*):int"/>
    <method name="getgroups(int;gid_t*):int"/>
    <method name="getgruuid(unsigned char*):struct group*"/>
    <method name="getgruuid_r(unsigned char*;struct group*;char*;size_t;struct group**):int"/>
    <method name="gethostbyaddr(const char*;int;int):hostent*"/>
    <method name="gethostbyaddr(const void*;socklen_t;int):struct hostent*"/>
    <method name="gethostbyname(const char*):hostent*"/>
    <method name="gethostbyname(const char*):struct hostent*"/>
    <method name="gethostbyname2(const char*;int):struct hostent*"/>
    <method name="gethostent():struct hostent*"/>
    <method name="gethostid():long"/>
    <method name="gethostname(char*;int):int"/>
    <method name="gethostname(char*;size_t):int"/>
    <method name="gethostuuid(unsigned char*;const struct timespec*):int"/>
    <method name="getifaddrs(struct ifaddrs**):int"/>
    <method name="getifmaddrs(struct ifmaddrs**):int"/>
    <method name="getiopolicy_np(int;int):int"/>
    <method name="getipnodebyaddr(const void*;size_t;int;int*):struct hostent*"/>
    <method name="getipnodebyname(const char*;int;int;int*):struct hostent*"/>
    <method name="getipv4sourcefilter(int;struct in_addr;struct in_addr;uint32_t*;uint32_t*;struct in_addr*):int"/>
    <method name="getitimer(int;struct itimerval*):int"/>
    <method name="getlastlogx(uid_t;struct lastlogx*):struct lastlogx*"/>
    <method name="getlastlogxbyname(const char*;struct lastlogx*):struct lastlogx*"/>
    <method name="getlcid(int):int"/>
    <method name="getline(char**;size_t*;FILE*):ssize_t"/>
    <method name="getloadavg(double*;int):int"/>
    <method name="getloc():int"/>
    <method name="getlogin():char*"/>
    <method name="getlogin_r(char*;size_t):int"/>
    <method name="getmntinfo(struct statfs**;int):int"/>
    <method name="getmode(const void*;mode_t):mode_t"/>
    <method name="getnameinfo(const sockaddr*;socklen_t;char*;DWORD;char*;DWORD;int):int"/>
    <method name="getnameinfo(const struct sockaddr*;socklen_t;char*;socklen_t;char*;socklen_t;int):int"/>
    <method name="getnetbyaddr(uint32_t;int):struct netent*"/>
    <method name="getnetbyname(const char*):struct netent*"/>
    <method name="getnetent():struct netent*"/>
    <method name="getnetgrent(char**;char**;char**):int"/>
    <method name="getopt(int;const char**;char):int"/>
    <method name="getopt(int;const char**;const char*):int"/>
    <method name="getopt_long(int;const char**;const char*;const struct option*;int*):int"/>
    <method name="getopt_long_only(int;const char**;const char*;const struct option*;int*):int"/>
    <method name="getpagesize():int"/>
    <method name="getpass(const char*):char*"/>
    <method name="getpeereid(int;uid_t*;gid_t*):int"/>
    <method name="getpeername(SOCKET;sockaddr*;int*):int"/>
    <method name="getpeername(int;sockaddr*;socklen_t*):int"/>
    <method name="getpeername(int;struct sockaddr*;socklen_t*):int"/>
    <method name="getpgid(pid_t):pid_t"/>
    <method name="getpgrp():pid_t"/>
    <method name="getpid():pid_t"/>
    <method name="getppid():pid_t"/>
    <method name="getpriority(int;id_t):int"/>
    <method name="getprogname():const char*"/>
    <method name="getprotobyname(const char*):protoent*"/>
    <method name="getprotobyname(const char*):struct protoent*"/>
    <method name="getprotobynumber(int):protoent*"/>
    <method name="getprotobynumber(int):struct protoent*"/>
    <method name="getprotoent():struct protoent*"/>
    <method name="getpwent():struct passwd*"/>
    <method name="getpwnam(const char*):struct passwd*"/>
    <method name="getpwnam_r(const char*;struct passwd*;char*;size_t;struct passwd**):int"/>
    <method name="getpwuid(uid_t):struct passwd*"/>
    <method name="getpwuid_r(uid_t;struct passwd*;char*;size_t;struct passwd**):int"/>
    <method name="getpwuuid(unsigned char*):struct passwd*"/>
    <method name="getpwuuid_r(unsigned char*;struct passwd*;char*;size_t;struct passwd**):int"/>
    <method name="getrlimit(int;struct rlimit*):int"/>
    <method name="getrpcbyname(const char*):struct rpcent*"/>
    <method name="getrpcbynumber(long):struct rpcent*"/>
    <method name="getrpcent():struct rpcent*"/>
    <method name="getrusage(int;struct rusage*):int"/>
    <method name="gets(char*):char*"/>
    <method name="getsectbyname(const char*;const char*):const struct section*"/>
    <method name="getsectbynamefromheader(const struct mach_header*;const char*;const char*):const struct section*"/>
    <method name="getsectbynamefromheader_64(const struct mach_header_64*;const char*;const char*):const struct section_64*"/>
    <method name="getsectdata(const char*;const char*;unsigned long*):char*"/>
    <method name="getsectdatafromFramework(const char*;const char*;const char*;unsigned long*):char*"/>
    <method name="getsectdatafromheader(const struct mach_header*;const char*;const char*;uint32_t*):char*"/>
    <method name="getsectdatafromheader_64(const struct mach_header_64*;const char*;const char*;uint64_t*):char*"/>
    <method name="getsectiondata(const struct mach_header*;const char*;const char*;unsigned long*):uint8_t*"/>
    <method name="getsegbyname(const char*):const struct segment_command*"/>
    <method name="getsegmentdata(const struct mach_header*;const char*;unsigned long*):uint8_t*"/>
    <method name="getservbyname(const char*;const char*):servent*"/>
    <method name="getservbyname(const char*;const char*):struct servent*"/>
    <method name="getservbyport(int;const char*):servent*"/>
    <method name="getservbyport(int;const char*):struct servent*"/>
    <method name="getservent():struct servent*"/>
    <method name="getsgroups_np(int*;unsigned char*):int"/>
    <method name="getsid(pid_t):pid_t"/>
    <method name="getsockname(SOCKET;sockaddr*;int*):int"/>
    <method name="getsockname(int;sockaddr*;socklen_t*):int"/>
    <method name="getsockname(int;struct sockaddr*;socklen_t*):int"/>
    <method name="getsockopt(SOCKET;int;int;char*;int*):int"/>
    <method name="getsockopt(int;int;int;void*;socklen_t*):int"/>
    <method name="getsourcefilter(int;uint32_t;struct sockaddr*;socklen_t;uint32_t*;uint32_t*;struct sockaddr_storage*):int"/>
    <method name="getsubopt(char**;const char**;char**):int"/>
    <method name="gettimeofday(struct timeval*;void*):int"/>
    <method name="getttyent():struct ttyent*"/>
    <method name="getttynam(const char*):struct ttyent*"/>
    <method name="getuid():uid_t"/>
    <method name="getusershell():char*"/>
    <method name="getutxent():struct utmpx*"/>
    <method name="getutxent_wtmp():struct utmpx*"/>
    <method name="getutxid(const struct utmpx*):struct utmpx*"/>
    <method name="getutxline(const struct utmpx*):struct utmpx*"/>
    <method name="getvfsbyname(const char*;struct vfsconf*):int"/>
    <method name="getw(FILE*):int"/>
    <method name="getwc(FILE*):wint_t"/>
    <method name="getwc_l(int*;int):int"/>
    <method name="getwchar():wint_t"/>
    <method name="getwd(char*):char*"/>
    <method name="getwgroups_np(int*;unsigned char*):int"/>
    <method name="getxattr(const char*;const char*;void*;size_t;u_int32_t;int):ssize_t"/>
    <method name="glCompressedTexImage2D(GLenum;GLint;GLenum;GLsizei;GLsizei;GLint;GLsizei;const GLvoid*):void"/>
    <method name="glob(const char*;int;(*)(const char*;int):int;glob_t*):int"/>
    <method name="glob_b(const char*;int;(^)(const char*;int):int;glob_t*):int"/>
    <method name="globfree(glob_t*):void"/>
    <method name="gmtime(const time_t*):struct tm*"/>
    <method name="gmtime_r(const time_t*;struct tm*):struct tm*"/>
    <method name="grantpt(int):int"/>
    <method name="group_from_gid(gid_t;int):char*"/>
    <method name="gss_aapl_change_password(const gss_name_t;gss_const_OID;CFDictionaryRef;CFErrorRef*):OM_uint32"/>
    <method name="gzbuffer(gzFile;unsigned int):int"/>
    <method name="gzclearerr(gzFile):void"/>
    <method name="gzclose(gzFile):int"/>
    <method name="gzclose_r(gzFile):int"/>
    <method name="gzclose_w(gzFile):int"/>
    <method name="gzdirect(gzFile):int"/>
    <method name="gzdopen(int;const char*):gzFile"/>
    <method name="gzeof(gzFile):int"/>
    <method name="gzerror(gzFile;int*):const char*"/>
    <method name="gzflush(gzFile;int):int"/>
    <method name="gzgetc(gzFile):int"/>
    <method name="gzgets(gzFile;char*;int):char*"/>
    <method name="gzoffset(gzFile):long"/>
    <method name="gzopen(const char*;const char*):gzFile"/>
    <method name="gzprintf(gzFile;const char*, ...):int"/>
    <method name="gzputc(gzFile;int):int"/>
    <method name="gzputs(gzFile;const char*):int"/>
    <method name="gzread(gzFile;voidp;unsigned int):int"/>
    <method name="gzrewind(gzFile):int"/>
    <method name="gzseek(gzFile;long;int):long"/>
    <method name="gzsetparams(gzFile;int;int):int"/>
    <method name="gztell(gzFile):long"/>
    <method name="gzungetc(int;gzFile):int"/>
    <method name="gzwrite(gzFile;voidpc;unsigned int):int"/>
    <method name="handleResize():int"/>
    <method name="havedisk(char*):int"/>
    <method name="hcreate(size_t):int"/>
    <method name="hdestroy():void"/>
    <method name="heapsort(void*;size_t;size_t;(*)(const void*;const void*):int):int"/>
    <method name="heapsort_b(void*;size_t;size_t;(^)(const void*;const void*):int):int"/>
    <method name="herror(const char*):void"/>
    <method name="hex_to_string(unsigned char*;long):char*"/>
    <method name="host_default_memory_manager(host_priv_t;memory_object_default_t*;memory_object_cluster_size_t):kern_return_t"/>
    <method name="host_get_UNDServer(host_priv_t;UNDServerRef*):kern_return_t"/>
    <method name="host_get_boot_info(host_priv_t;char*):kern_return_t"/>
    <method name="host_get_clock_control(host_priv_t;clock_id_t;clock_ctrl_t*):kern_return_t"/>
    <method name="host_get_clock_service(host_t;clock_id_t;clock_serv_t*):kern_return_t"/>
    <method name="host_get_exception_ports(host_priv_t;exception_mask_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="host_get_io_master(host_t;io_master_t*):kern_return_t"/>
    <method name="host_get_special_port(host_priv_t;int;int;mach_port_t*):kern_return_t"/>
    <method name="host_info(host_t;host_flavor_t;host_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_kernel_version(host_t;char*):kern_return_t"/>
    <method name="host_lockgroup_info(host_t;lockgroup_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_page_size(host_t;vm_size_t*):kern_return_t"/>
    <method name="host_priv_statistics(host_priv_t;host_flavor_t;host_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_processor_info(host_t;processor_flavor_t;natural_t*;processor_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_processor_set_priv(host_priv_t;processor_set_name_t;processor_set_t*):kern_return_t"/>
    <method name="host_processor_sets(host_priv_t;processor_set_name_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_processors(host_priv_t;processor_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_reboot(host_priv_t;int):kern_return_t"/>
    <method name="host_request_notification(host_t;host_flavor_t;mach_port_t):kern_return_t"/>
    <method name="host_security_create_task_token(host_security_t;task_t;security_token_t;audit_token_t;host_t;ledger_array_t;mach_msg_type_number_t;boolean_t;task_t*):kern_return_t"/>
    <method name="host_security_set_task_token(host_security_t;task_t;security_token_t;audit_token_t;host_t):kern_return_t"/>
    <method name="host_set_UNDServer(host_priv_t;UNDServerRef):kern_return_t"/>
    <method name="host_set_exception_ports(host_priv_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):kern_return_t"/>
    <method name="host_set_special_port(host_priv_t;int;mach_port_t):kern_return_t"/>
    <method name="host_statistics(host_t;host_flavor_t;host_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_statistics64(host_t;host_flavor_t;host_info64_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_swap_exception_ports(host_priv_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="host_virtual_physical_table_info(host_t;hash_info_bucket_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_zone_info(host_priv_t;zone_name_array_t*;mach_msg_type_number_t*;zone_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="hsearch(ENTRY;ACTION):ENTRY*"/>
    <method name="hstrerror(int):const char*"/>
    <method name="htonl(u_long):u_long"/>
    <method name="htons(u_short):u_short"/>
    <method name="hypot(double;double):double"/>
    <method name="hypotf(float;float):float"/>
    <method name="hypotl(long double;long double):long double"/>
    <method name="i2a_ACCESS_DESCRIPTION(BIO*;ACCESS_DESCRIPTION*):int"/>
    <method name="i2a_ASN1_ENUMERATED(BIO*;ASN1_ENUMERATED*):int"/>
    <method name="i2a_ASN1_INTEGER(BIO*;ASN1_INTEGER*):int"/>
    <method name="i2a_ASN1_OBJECT(BIO*;ASN1_OBJECT*):int"/>
    <method name="i2a_ASN1_STRING(BIO*;ASN1_STRING*;int):int"/>
    <method name="i2c_ASN1_BIT_STRING(ASN1_BIT_STRING*;unsigned char**):int"/>
    <method name="i2c_ASN1_INTEGER(ASN1_INTEGER*;unsigned char**):int"/>
    <method name="i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION*;unsigned char**):int"/>
    <method name="i2d_ASN1_BIT_STRING(ASN1_BIT_STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_BMPSTRING(ASN1_BMPSTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_BOOLEAN(int;unsigned char**):int"/>
    <method name="i2d_ASN1_ENUMERATED(ASN1_ENUMERATED*;unsigned char**):int"/>
    <method name="i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME*;unsigned char**):int"/>
    <method name="i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_HEADER(ASN1_HEADER*;unsigned char**):int"/>
    <method name="i2d_ASN1_IA5STRING(ASN1_IA5STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_INTEGER(ASN1_INTEGER*;unsigned char**):int"/>
    <method name="i2d_ASN1_NULL(ASN1_NULL*;unsigned char**):int"/>
    <method name="i2d_ASN1_OBJECT(ASN1_OBJECT*;unsigned char**):int"/>
    <method name="i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_PRINTABLE(ASN1_STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_SET(STACK*;unsigned char**;i2d_of_void*;int;int;int):int"/>
    <method name="i2d_ASN1_T61STRING(ASN1_T61STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_TIME(ASN1_TIME*;unsigned char**):int"/>
    <method name="i2d_ASN1_TYPE(ASN1_TYPE*;unsigned char**):int"/>
    <method name="i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_UTCTIME(ASN1_UTCTIME*;unsigned char**):int"/>
    <method name="i2d_ASN1_UTF8STRING(ASN1_UTF8STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_bytes(ASN1_STRING*;unsigned char**;int;int):int"/>
    <method name="i2d_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS*;unsigned char**):int"/>
    <method name="i2d_AUTHORITY_KEYID(AUTHORITY_KEYID*;unsigned char**):int"/>
    <method name="i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS*;unsigned char**):int"/>
    <method name="i2d_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES*;unsigned char**):int"/>
    <method name="i2d_CRL_DIST_POINTS(CRL_DIST_POINTS*;unsigned char**):int"/>
    <method name="i2d_DHparams(const DH*;unsigned char**):int"/>
    <method name="i2d_DIRECTORYSTRING(ASN1_STRING*;unsigned char**):int"/>
    <method name="i2d_DISPLAYTEXT(ASN1_STRING*;unsigned char**):int"/>
    <method name="i2d_DIST_POINT(DIST_POINT*;unsigned char**):int"/>
    <method name="i2d_DIST_POINT_NAME(DIST_POINT_NAME*;unsigned char**):int"/>
    <method name="i2d_DSAPrivateKey(const DSA*;unsigned char**):int"/>
    <method name="i2d_DSAPrivateKey_bio(BIO*;DSA*):int"/>
    <method name="i2d_DSAPrivateKey_fp(FILE*;DSA*):int"/>
    <method name="i2d_DSAPublicKey(const DSA*;unsigned char**):int"/>
    <method name="i2d_DSA_PUBKEY(DSA*;unsigned char**):int"/>
    <method name="i2d_DSA_PUBKEY_bio(BIO*;DSA*):int"/>
    <method name="i2d_DSA_PUBKEY_fp(FILE*;DSA*):int"/>
    <method name="i2d_DSA_SIG(const DSA_SIG*;unsigned char**):int"/>
    <method name="i2d_DSAparams(const DSA*;unsigned char**):int"/>
    <method name="i2d_ECDSA_SIG(const ECDSA_SIG*;unsigned char**):int"/>
    <method name="i2d_ECPKParameters(const EC_GROUP*;unsigned char**):int"/>
    <method name="i2d_ECParameters(EC_KEY*;unsigned char**):int"/>
    <method name="i2d_ECPrivateKey(EC_KEY*;unsigned char**):int"/>
    <method name="i2d_ECPrivateKey_bio(BIO*;EC_KEY*):int"/>
    <method name="i2d_ECPrivateKey_fp(FILE*;EC_KEY*):int"/>
    <method name="i2d_EC_PUBKEY(EC_KEY*;unsigned char**):int"/>
    <method name="i2d_EC_PUBKEY_bio(BIO*;EC_KEY*):int"/>
    <method name="i2d_EC_PUBKEY_fp(FILE*;EC_KEY*):int"/>
    <method name="i2d_EDIPARTYNAME(EDIPARTYNAME*;unsigned char**):int"/>
    <method name="i2d_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE*;unsigned char**):int"/>
    <method name="i2d_GENERAL_NAME(GENERAL_NAME*;unsigned char**):int"/>
    <method name="i2d_GENERAL_NAMES(GENERAL_NAMES*;unsigned char**):int"/>
    <method name="i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE*;unsigned char**):int"/>
    <method name="i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC*;unsigned char**):int"/>
    <method name="i2d_NETSCAPE_SPKI(NETSCAPE_SPKI*;unsigned char**):int"/>
    <method name="i2d_NOTICEREF(NOTICEREF*;unsigned char**):int"/>
    <method name="i2d_Netscape_RSA(const RSA*;unsigned char**;(*)(char*;int;const char*;int):int*):int"/>
    <method name="i2d_OCSP_BASICRESP(OCSP_BASICRESP*;unsigned char**):int"/>
    <method name="i2d_OCSP_CERTID(OCSP_CERTID*;unsigned char**):int"/>
    <method name="i2d_OCSP_CERTSTATUS(OCSP_CERTSTATUS*;unsigned char**):int"/>
    <method name="i2d_OCSP_CRLID(OCSP_CRLID*;unsigned char**):int"/>
    <method name="i2d_OCSP_ONEREQ(OCSP_ONEREQ*;unsigned char**):int"/>
    <method name="i2d_OCSP_REQINFO(OCSP_REQINFO*;unsigned char**):int"/>
    <method name="i2d_OCSP_REQUEST(OCSP_REQUEST*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPBYTES(OCSP_RESPBYTES*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPDATA(OCSP_RESPDATA*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPID(OCSP_RESPID*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPONSE(OCSP_RESPONSE*;unsigned char**):int"/>
    <method name="i2d_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO*;unsigned char**):int"/>
    <method name="i2d_OCSP_SERVICELOC(OCSP_SERVICELOC*;unsigned char**):int"/>
    <method name="i2d_OCSP_SIGNATURE(OCSP_SIGNATURE*;unsigned char**):int"/>
    <method name="i2d_OCSP_SINGLERESP(OCSP_SINGLERESP*;unsigned char**):int"/>
    <method name="i2d_OTHERNAME(OTHERNAME*;unsigned char**):int"/>
    <method name="i2d_PBE2PARAM(PBE2PARAM*;unsigned char**):int"/>
    <method name="i2d_PBEPARAM(PBEPARAM*;unsigned char**):int"/>
    <method name="i2d_PBKDF2PARAM(PBKDF2PARAM*;unsigned char**):int"/>
    <method name="i2d_PKCS12(PKCS12*;unsigned char**):int"/>
    <method name="i2d_PKCS12_BAGS(PKCS12_BAGS*;unsigned char**):int"/>
    <method name="i2d_PKCS12_MAC_DATA(PKCS12_MAC_DATA*;unsigned char**):int"/>
    <method name="i2d_PKCS12_SAFEBAG(PKCS12_SAFEBAG*;unsigned char**):int"/>
    <method name="i2d_PKCS12_bio(BIO*;PKCS12*):int"/>
    <method name="i2d_PKCS12_fp(FILE*;PKCS12*):int"/>
    <method name="i2d_PKCS7(PKCS7*;unsigned char**):int"/>
    <method name="i2d_PKCS7_DIGEST(PKCS7_DIGEST*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL*;unsigned char**):int"/>
    <method name="i2d_PKCS7_NDEF(PKCS7*;unsigned char**):int"/>
    <method name="i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO*;unsigned char**):int"/>
    <method name="i2d_PKCS7_SIGNED(PKCS7_SIGNED*;unsigned char**):int"/>
    <method name="i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO*;unsigned char**):int"/>
    <method name="i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE*;unsigned char**):int"/>
    <method name="i2d_PKCS7_bio(BIO*;PKCS7*):int"/>
    <method name="i2d_PKCS7_fp(FILE*;PKCS7*):int"/>
    <method name="i2d_PKCS8PrivateKeyInfo_bio(BIO*;EVP_PKEY*):int"/>
    <method name="i2d_PKCS8PrivateKeyInfo_fp(FILE*;EVP_PKEY*):int"/>
    <method name="i2d_PKCS8PrivateKey_bio(BIO*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8PrivateKey_fp(FILE*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8PrivateKey_nid_bio(BIO*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8PrivateKey_nid_fp(FILE*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO*;unsigned char**):int"/>
    <method name="i2d_PKCS8_PRIV_KEY_INFO_bio(BIO*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="i2d_PKCS8_PRIV_KEY_INFO_fp(FILE*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="i2d_PKCS8_bio(BIO*;X509_SIG*):int"/>
    <method name="i2d_PKCS8_fp(FILE*;X509_SIG*):int"/>
    <method name="i2d_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD*;unsigned char**):int"/>
    <method name="i2d_POLICYINFO(POLICYINFO*;unsigned char**):int"/>
    <method name="i2d_POLICYQUALINFO(POLICYQUALINFO*;unsigned char**):int"/>
    <method name="i2d_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION*;unsigned char**):int"/>
    <method name="i2d_PROXY_POLICY(PROXY_POLICY*;unsigned char**):int"/>
    <method name="i2d_PUBKEY(EVP_PKEY*;unsigned char**):int"/>
    <method name="i2d_PUBKEY_bio(BIO*;EVP_PKEY*):int"/>
    <method name="i2d_PUBKEY_fp(FILE*;EVP_PKEY*):int"/>
    <method name="i2d_PrivateKey(EVP_PKEY*;unsigned char**):int"/>
    <method name="i2d_PrivateKey_bio(BIO*;EVP_PKEY*):int"/>
    <method name="i2d_PrivateKey_fp(FILE*;EVP_PKEY*):int"/>
    <method name="i2d_PublicKey(EVP_PKEY*;unsigned char**):int"/>
    <method name="i2d_RSAPrivateKey(const RSA*;unsigned char**):int"/>
    <method name="i2d_RSAPrivateKey_bio(BIO*;RSA*):int"/>
    <method name="i2d_RSAPrivateKey_fp(FILE*;RSA*):int"/>
    <method name="i2d_RSAPublicKey(const RSA*;unsigned char**):int"/>
    <method name="i2d_RSAPublicKey_bio(BIO*;RSA*):int"/>
    <method name="i2d_RSAPublicKey_fp(FILE*;RSA*):int"/>
    <method name="i2d_RSA_NET(const RSA*;unsigned char**;(*)(char*;int;const char*;int):int*;int):int"/>
    <method name="i2d_RSA_PUBKEY(RSA*;unsigned char**):int"/>
    <method name="i2d_RSA_PUBKEY_bio(BIO*;RSA*):int"/>
    <method name="i2d_RSA_PUBKEY_fp(FILE*;RSA*):int"/>
    <method name="i2d_SSL_SESSION(SSL_SESSION*;unsigned char**):int"/>
    <method name="i2d_SXNET(SXNET*;unsigned char**):int"/>
    <method name="i2d_SXNETID(SXNETID*;unsigned char**):int"/>
    <method name="i2d_USERNOTICE(USERNOTICE*;unsigned char**):int"/>
    <method name="i2d_X509(X509*;unsigned char**):int"/>
    <method name="i2d_X509_ALGOR(X509_ALGOR*;unsigned char**):int"/>
    <method name="i2d_X509_ATTRIBUTE(X509_ATTRIBUTE*;unsigned char**):int"/>
    <method name="i2d_X509_AUX(X509*;unsigned char**):int"/>
    <method name="i2d_X509_CERT_AUX(X509_CERT_AUX*;unsigned char**):int"/>
    <method name="i2d_X509_CERT_PAIR(X509_CERT_PAIR*;unsigned char**):int"/>
    <method name="i2d_X509_CINF(X509_CINF*;unsigned char**):int"/>
    <method name="i2d_X509_CRL(X509_CRL*;unsigned char**):int"/>
    <method name="i2d_X509_CRL_INFO(X509_CRL_INFO*;unsigned char**):int"/>
    <method name="i2d_X509_CRL_bio(BIO*;X509_CRL*):int"/>
    <method name="i2d_X509_CRL_fp(FILE*;X509_CRL*):int"/>
    <method name="i2d_X509_EXTENSION(X509_EXTENSION*;unsigned char**):int"/>
    <method name="i2d_X509_NAME(X509_NAME*;unsigned char**):int"/>
    <method name="i2d_X509_NAME_ENTRY(X509_NAME_ENTRY*;unsigned char**):int"/>
    <method name="i2d_X509_PKEY(X509_PKEY*;unsigned char**):int"/>
    <method name="i2d_X509_PUBKEY(X509_PUBKEY*;unsigned char**):int"/>
    <method name="i2d_X509_REQ(X509_REQ*;unsigned char**):int"/>
    <method name="i2d_X509_REQ_INFO(X509_REQ_INFO*;unsigned char**):int"/>
    <method name="i2d_X509_REQ_bio(BIO*;X509_REQ*):int"/>
    <method name="i2d_X509_REQ_fp(FILE*;X509_REQ*):int"/>
    <method name="i2d_X509_REVOKED(X509_REVOKED*;unsigned char**):int"/>
    <method name="i2d_X509_SIG(X509_SIG*;unsigned char**):int"/>
    <method name="i2d_X509_VAL(X509_VAL*;unsigned char**):int"/>
    <method name="i2d_X509_bio(BIO*;X509*):int"/>
    <method name="i2d_X509_fp(FILE*;X509*):int"/>
    <method name="i2o_ECPublicKey(EC_KEY*;unsigned char**):int"/>
    <method name="i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD*;ASN1_ENUMERATED*):char*"/>
    <method name="i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD*;ASN1_ENUMERATED*):char*"/>
    <method name="i2s_ASN1_INTEGER(X509V3_EXT_METHOD*;ASN1_INTEGER*):char*"/>
    <method name="i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD*;ASN1_OCTET_STRING*):char*"/>
    <method name="i2t_ASN1_OBJECT(char*;int;ASN1_OBJECT*):int"/>
    <method name="i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD*;ASN1_BIT_STRING*;STACK*):STACK*"/>
    <method name="i2v_GENERAL_NAME(X509V3_EXT_METHOD*;GENERAL_NAME*;STACK*):STACK*"/>
    <method name="i2v_GENERAL_NAMES(X509V3_EXT_METHOD*;GENERAL_NAMES*;STACK*):STACK*"/>
    <method name="icmax1_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="iconv(iconv_t;char**;size_t*;char**;size_t*):size_t"/>
    <method name="iconv_canonicalize(const char*):const char*"/>
    <method name="iconv_close(iconv_t):int"/>
    <method name="iconv_open(const char*;const char*):iconv_t"/>
    <method name="iconvctl(iconv_t;int;void*):int"/>
    <method name="iconvlist((*)(unsigned int;const const char**;void*):int;void*):void"/>
    <method name="idea_cbc_encrypt(const unsigned char*;unsigned char*;long;IDEA_KEY_SCHEDULE*;unsigned char*;int):void"/>
    <method name="idea_cfb64_encrypt(const unsigned char*;unsigned char*;long;IDEA_KEY_SCHEDULE*;unsigned char*;int*;int):void"/>
    <method name="idea_ecb_encrypt(const unsigned char*;unsigned char*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="idea_encrypt(unsigned long*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="idea_ofb64_encrypt(const unsigned char*;unsigned char*;long;IDEA_KEY_SCHEDULE*;unsigned char*;int*):void"/>
    <method name="idea_options():const char*"/>
    <method name="idea_set_decrypt_key(const IDEA_KEY_SCHEDULE*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="idea_set_encrypt_key(const unsigned char*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="ieeeck_(__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_integer"/>
    <method name="if_freenameindex(struct if_nameindex*):void"/>
    <method name="if_indextoname(unsigned int;char*):char*"/>
    <method name="if_nameindex():struct if_nameindex*"/>
    <method name="if_nametoindex(const char*):unsigned int"/>
    <method name="ilaclc_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaclr_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="iladiag_(char*):__CLPK_integer"/>
    <method name="iladlc_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):__CLPK_integer"/>
    <method name="iladlr_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaenv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaprec_(char*):__CLPK_integer"/>
    <method name="ilaslc_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaslr_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilatrans_(char*):__CLPK_integer"/>
    <method name="ilauplo_(char*):__CLPK_integer"/>
    <method name="ilaver_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ilazlc_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilazlr_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilogb(double):int"/>
    <method name="ilogbf(float):int"/>
    <method name="ilogbl(long double):int"/>
    <method name="image_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="imaxabs(intmax_t):intmax_t"/>
    <method name="imaxdiv(intmax_t;intmax_t):imaxdiv_t"/>
    <method name="imp_getBlock(IMP):id"/>
    <method name="imp_implementationWithBlock(id):IMP"/>
    <method name="imp_removeBlock(IMP):BOOL"/>
    <method name="index(const char*;int):char*"/>
    <method name="inet6_opt_append(void*;int;int;__uint8_t;int;__uint8_t;void**):int"/>
    <method name="inet6_opt_find(void*;int;int;__uint8_t;int*;void**):int"/>
    <method name="inet6_opt_finish(void*;int;int):int"/>
    <method name="inet6_opt_get_val(void*;int;void*;int):int"/>
    <method name="inet6_opt_init(void*;int):int"/>
    <method name="inet6_opt_next(void*;int;int;__uint8_t*;int*;void**):int"/>
    <method name="inet6_opt_set_val(void*;int;void*;int):int"/>
    <method name="inet6_option_alloc(struct cmsghdr*;int;int;int):__uint8_t*"/>
    <method name="inet6_option_append(struct cmsghdr*;const __uint8_t*;int;int):int"/>
    <method name="inet6_option_find(const struct cmsghdr*;__uint8_t**;int):int"/>
    <method name="inet6_option_init(void*;struct cmsghdr**;int):int"/>
    <method name="inet6_option_next(const struct cmsghdr*;__uint8_t**):int"/>
    <method name="inet6_option_space(int):int"/>
    <method name="inet6_rth_add(void*;const struct in6_addr*):int"/>
    <method name="inet6_rth_getaddr(const void*;int):struct in6_addr*"/>
    <method name="inet6_rth_init(void*;int;int;int):void*"/>
    <method name="inet6_rth_reverse(const void*;void*):int"/>
    <method name="inet6_rth_segments(const void*):int"/>
    <method name="inet6_rth_space(int;int):int"/>
    <method name="inet6_rthdr_add(struct cmsghdr*;const struct in6_addr*;unsigned int):int"/>
    <method name="inet6_rthdr_getaddr(struct cmsghdr*;int):struct in6_addr*"/>
    <method name="inet6_rthdr_getflags(const struct cmsghdr*;int):int"/>
    <method name="inet6_rthdr_init(void*;int):struct cmsghdr*"/>
    <method name="inet6_rthdr_lasthop(struct cmsghdr*;unsigned int):int"/>
    <method name="inet6_rthdr_segments(const struct cmsghdr*):int"/>
    <method name="inet6_rthdr_space(int;int):int"/>
    <method name="inet_addr(const char*):in_addr_t"/>
    <method name="inet_addr(const char*):unsigned long"/>
    <method name="inet_aton(const char*;struct in_addr*):int"/>
    <method name="inet_lnaof(struct in_addr):in_addr_t"/>
    <method name="inet_makeaddr(in_addr_t;in_addr_t):struct in_addr"/>
    <method name="inet_net_ntop(int;const void*;int;char*;__darwin_size_t):char*"/>
    <method name="inet_net_pton(int;const char*;void*;__darwin_size_t):int"/>
    <method name="inet_neta(in_addr_t;char*;__darwin_size_t):char*"/>
    <method name="inet_netof(struct in_addr):in_addr_t"/>
    <method name="inet_network(const char*):in_addr_t"/>
    <method name="inet_nsap_addr(const char*;unsigned char*;int):unsigned int"/>
    <method name="inet_nsap_ntoa(int;const unsigned char*;char*):char*"/>
    <method name="inet_ntoa(in_addr):char*"/>
    <method name="inet_ntoa(struct in_addr):char*"/>
    <method name="inet_ntop(int;const void*;char*;socklen_t):const char*"/>
    <method name="inet_pton(int;const char*;void*):int"/>
    <method name="inflate(z_streamp;int):int"/>
    <method name="inflateBack(z_streamp;in_func;void*;out_func;void*):int"/>
    <method name="inflateBackEnd(z_streamp):int"/>
    <method name="inflateBackInit_(z_streamp;int;unsigned char*;const char*;int):int"/>
    <method name="inflateCopy(z_streamp;z_streamp):int"/>
    <method name="inflateEnd(z_streamp):int"/>
    <method name="inflateGetHeader(z_streamp;gz_headerp):int"/>
    <method name="inflateInit2_(z_streamp;int;const char*;int):int"/>
    <method name="inflateInit_(z_streamp;const char*;int):int"/>
    <method name="inflateMark(z_streamp):long"/>
    <method name="inflatePrime(z_streamp;int;int):int"/>
    <method name="inflateReset(z_streamp):int"/>
    <method name="inflateReset2(z_streamp;int):int"/>
    <method name="inflateSetDictionary(z_streamp;const Bytef*;uInt):int"/>
    <method name="inflateSync(z_streamp):int"/>
    <method name="inflateSyncPoint(z_streamp):int"/>
    <method name="inflateUndermine(z_streamp;int):int"/>
    <method name="initEnhancedCopyToClipboard():int"/>
    <method name="initUIForCBE(id):int"/>
    <method name="init_keys(const char*;unsigned long*;const unsigned long*):void"/>
    <method name="init_linkedlist(linkedlist_data*):void"/>
    <method name="initgroups(const char*;int):int"/>
    <method name="initstate(unsigned int;char*;size_t):char*"/>
    <method name="innetgr(const char*;const char*;const char*;const char*):int"/>
    <method name="insque(void*;void*):void"/>
    <method name="interactiveEscapedInputChanged():int"/>
    <method name="ioctl(int;unsigned long, ...):int"/>
    <method name="ioctlsocket(SOCKET;long;u_long*):int"/>
    <method name="iparmq_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ipsec_dump_policy():char*"/>
    <method name="ipsec_set_policy(char*;int):int"/>
    <method name="ipsec_strerror():const char*"/>
    <method name="iruserok(unsigned long;int;const char*;const char*):int"/>
    <method name="iruserok_sa(const void*;int;int;const char*;const char*):int"/>
    <method name="isSimpleCString(int):int"/>
    <method name="is_leap_year(NSUInteger):BOOL"/>
    <method name="isalnum(int):int"/>
    <method name="isalpha(int):int"/>
    <method name="isascii(int):int"/>
    <method name="isatty(int):int"/>
    <method name="isblank(int):int"/>
    <method name="iscntrl(int):int"/>
    <method name="isdigit(int):int"/>
    <method name="isgraph(int):int"/>
    <method name="ishexnumber(int):int"/>
    <method name="isideogram(int):int"/>
    <method name="islower(int):int"/>
    <method name="isnumber(int):int"/>
    <method name="isphonogram(int):int"/>
    <method name="isprint(int):int"/>
    <method name="ispunct(int):int"/>
    <method name="isrune(int):int"/>
    <method name="issetugid():int"/>
    <method name="isspace(int):int"/>
    <method name="isspecial(int):int"/>
    <method name="isupper(int):int"/>
    <method name="iswalnum(wint_t):int"/>
    <method name="iswalpha(wint_t):int"/>
    <method name="iswascii(wint_t):int"/>
    <method name="iswblank(wint_t):int"/>
    <method name="iswcntrl(wint_t):int"/>
    <method name="iswctype(wint_t;wctype_t):int"/>
    <method name="iswdigit(wint_t):int"/>
    <method name="iswgraph(wint_t):int"/>
    <method name="iswhexnumber(wint_t):int"/>
    <method name="iswideogram(wint_t):int"/>
    <method name="iswlower(wint_t):int"/>
    <method name="iswnumber(wint_t):int"/>
    <method name="iswphonogram(wint_t):int"/>
    <method name="iswprint(wint_t):int"/>
    <method name="iswpunct(wint_t):int"/>
    <method name="iswrune(wint_t):int"/>
    <method name="iswspace(wint_t):int"/>
    <method name="iswspecial(wint_t):int"/>
    <method name="iswupper(wint_t):int"/>
    <method name="iswxdigit(wint_t):int"/>
    <method name="isxdigit(int):int"/>
    <method name="itoa(int;char*;int):char*"/>
    <method name="ivar_getName(Ivar):const char*"/>
    <method name="ivar_getOffset(Ivar):ptrdiff_t"/>
    <method name="ivar_getTypeEncoding(Ivar):const char*"/>
    <method name="izmax1_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="j0(double):double"/>
    <method name="j1(double):double"/>
    <method name="jn(int;double):double"/>
    <method name="jrand48(unsigned short*):long"/>
    <method name="json_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="kevent(int;const struct kevent*;int;struct kevent*;int;const struct timespec*):int"/>
    <method name="kevent64(int;const struct kevent64_s*;int;struct kevent64_s*;int;unsigned int;const struct timespec*):int"/>
    <method name="kext_request(host_priv_t;uint32_t;vm_offset_t;mach_msg_type_number_t;vm_offset_t*;mach_msg_type_number_t*;vm_offset_t*;mach_msg_type_number_t*;kern_return_t*):kern_return_t"/>
    <method name="kill(pid_t;int):int"/>
    <method name="killpg(pid_t;int):int"/>
    <method name="klm_cancel_1(struct klm_lockargs*;CLIENT*):klm_stat*"/>
    <method name="klm_cancel_1_svc(struct klm_lockargs*;struct svc_req*):klm_stat*"/>
    <method name="klm_lock_1(struct klm_lockargs*;CLIENT*):klm_stat*"/>
    <method name="klm_lock_1_svc(struct klm_lockargs*;struct svc_req*):klm_stat*"/>
    <method name="klm_test_1(struct klm_testargs*;CLIENT*):klm_testrply*"/>
    <method name="klm_test_1_svc(struct klm_testargs*;struct svc_req*):klm_testrply*"/>
    <method name="klm_unlock_1(struct klm_unlockargs*;CLIENT*):klm_stat*"/>
    <method name="klm_unlock_1_svc(struct klm_unlockargs*;struct svc_req*):klm_stat*"/>
    <method name="kmod_control(host_priv_t;kmod_t;kmod_control_flavor_t;kmod_args_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="kmod_create(host_priv_t;vm_address_t;kmod_t*):kern_return_t"/>
    <method name="kmod_destroy(host_priv_t;kmod_t):kern_return_t"/>
    <method name="kmod_get_info(host_t;kmod_args_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="kqueue():int"/>
    <method name="l64a(long):char*"/>
    <method name="labs(long):long"/>
    <method name="launch_data_alloc(launch_data_type_t):launch_data_t"/>
    <method name="launch_data_array_get_count(const launch_data_t):size_t"/>
    <method name="launch_data_array_get_index(const launch_data_t;size_t):launch_data_t"/>
    <method name="launch_data_array_set_index(launch_data_t;const launch_data_t;size_t):_Bool"/>
    <method name="launch_data_copy(launch_data_t):launch_data_t"/>
    <method name="launch_data_dict_get_count(const launch_data_t):size_t"/>
    <method name="launch_data_dict_insert(launch_data_t;const launch_data_t;const char*):_Bool"/>
    <method name="launch_data_dict_iterate(const launch_data_t;(*)(const launch_data_t;const char*;void*):void;void*):void"/>
    <method name="launch_data_dict_lookup(const launch_data_t;const char*):launch_data_t"/>
    <method name="launch_data_dict_remove(launch_data_t;const char*):_Bool"/>
    <method name="launch_data_free(launch_data_t):void"/>
    <method name="launch_data_get_bool(const launch_data_t):_Bool"/>
    <method name="launch_data_get_errno(const launch_data_t):int"/>
    <method name="launch_data_get_fd(const launch_data_t):int"/>
    <method name="launch_data_get_integer(const launch_data_t):long long"/>
    <method name="launch_data_get_machport(const launch_data_t):mach_port_t"/>
    <method name="launch_data_get_opaque(const launch_data_t):void*"/>
    <method name="launch_data_get_opaque_size(const launch_data_t):size_t"/>
    <method name="launch_data_get_real(const launch_data_t):double"/>
    <method name="launch_data_get_string(const launch_data_t):const char*"/>
    <method name="launch_data_get_type(const launch_data_t):launch_data_type_t"/>
    <method name="launch_data_new_bool(_Bool):launch_data_t"/>
    <method name="launch_data_new_fd(int):launch_data_t"/>
    <method name="launch_data_new_integer(long long):launch_data_t"/>
    <method name="launch_data_new_machport(mach_port_t):launch_data_t"/>
    <method name="launch_data_new_opaque(const void*;size_t):launch_data_t"/>
    <method name="launch_data_new_real(double):launch_data_t"/>
    <method name="launch_data_new_string(const char*):launch_data_t"/>
    <method name="launch_data_set_bool(launch_data_t;_Bool):_Bool"/>
    <method name="launch_data_set_fd(launch_data_t;int):_Bool"/>
    <method name="launch_data_set_integer(launch_data_t;long long):_Bool"/>
    <method name="launch_data_set_machport(launch_data_t;mach_port_t):_Bool"/>
    <method name="launch_data_set_opaque(launch_data_t;const void*;size_t):_Bool"/>
    <method name="launch_data_set_real(launch_data_t;double):_Bool"/>
    <method name="launch_data_set_string(launch_data_t;const char*):_Bool"/>
    <method name="launch_get_fd():int"/>
    <method name="launch_msg(const launch_data_t):launch_data_t"/>
    <method name="lchflags(const char*;__uint32_t):int"/>
    <method name="lchmod(const char*;mode_t):int"/>
    <method name="lchown(const char*;uid_t;gid_t):int"/>
    <method name="lcl_configure_by_component(_lcl_component_t;_lcl_level_t):uint32_t"/>
    <method name="lcl_configure_by_header(const char*;_lcl_level_t):uint32_t"/>
    <method name="lcl_configure_by_identifier(const char*;_lcl_level_t):uint32_t"/>
    <method name="lcl_configure_by_name(const char*;_lcl_level_t):uint32_t"/>
    <method name="lcong48(unsigned short*):void"/>
    <method name="ldexp(double;int):double"/>
    <method name="ldexp(float;int):float"/>
    <method name="ldexp(long double;int):long double"/>
    <method name="ldexpf(float;int):float"/>
    <method name="ldexpl(long double;int):long double"/>
    <method name="ldiv(long;long):ldiv_t"/>
    <method name="lexicographical_compare(const char*;const char*;const char*;const char*):int"/>
    <method name="lexicographical_compare(const unsigned char*;const unsigned char*;const unsigned char*;const unsigned char*):int"/>
    <method name="lfind(const void*;const void*;size_t*;size_t;(*)(const void*;const void*):int):void*"/>
    <method name="lgamma(double):double"/>
    <method name="lgammaf(float):float"/>
    <method name="lgammal(long double):long double"/>
    <method name="lh_delete(LHASH*;const void*):void*"/>
    <method name="lh_doall(LHASH*;LHASH_DOALL_FN_TYPE):void"/>
    <method name="lh_doall_arg(LHASH*;LHASH_DOALL_ARG_FN_TYPE;void*):void"/>
    <method name="lh_free(LHASH*):void"/>
    <method name="lh_insert(LHASH*;void*):void*"/>
    <method name="lh_new(LHASH_HASH_FN_TYPE;LHASH_COMP_FN_TYPE):LHASH*"/>
    <method name="lh_node_stats(const LHASH*;FILE*):void"/>
    <method name="lh_node_stats_bio(const LHASH*;BIO*):void"/>
    <method name="lh_node_usage_stats(const LHASH*;FILE*):void"/>
    <method name="lh_node_usage_stats_bio(const LHASH*;BIO*):void"/>
    <method name="lh_num_items(const LHASH*):unsigned long"/>
    <method name="lh_retrieve(LHASH*;const void*):void*"/>
    <method name="lh_stats(const LHASH*;FILE*):void"/>
    <method name="lh_stats_bio(const LHASH*;BIO*):void"/>
    <method name="lh_strhash(const char*):unsigned long"/>
    <method name="libiconv_set_relocation_prefix(const char*;const char*):void"/>
    <method name="link(const char*;const char*):int"/>
    <method name="link_addr(const char*;struct sockaddr_dl*):void"/>
    <method name="link_ntoa(const struct sockaddr_dl*):char*"/>
    <method name="lio_listio(int;const struct aiocb**;int;struct sigevent*):int"/>
    <method name="listen(SOCKET;int):int"/>
    <method name="listen(int;int):int"/>
    <method name="listxattr(const char*;char*;size_t;int):ssize_t"/>
    <method name="llabs(long long):long long"/>
    <method name="lldiv(long long;long long):lldiv_t"/>
    <method name="llrint(double):long long"/>
    <method name="llrintf(float):long long"/>
    <method name="llrintl(long double):long long"/>
    <method name="llround(double):long long"/>
    <method name="llroundf(float):long long"/>
    <method name="llroundl(long double):long long"/>
    <method name="localeconv():struct lconv*"/>
    <method name="localeconv_l(locale_t):struct lconv*"/>
    <method name="localtime(const time_t*):struct tm*"/>
    <method name="localtime_r(const time_t*;struct tm*):struct tm*"/>
    <method name="lock_acquire(lock_set_t;int):kern_return_t"/>
    <method name="lock_handoff(lock_set_t;int):kern_return_t"/>
    <method name="lock_handoff_accept(lock_set_t;int):kern_return_t"/>
    <method name="lock_make_stable(lock_set_t;int):kern_return_t"/>
    <method name="lock_release(lock_set_t;int):kern_return_t"/>
    <method name="lock_set_create(task_t;lock_set_t*;int;int):kern_return_t"/>
    <method name="lock_set_destroy(task_t;lock_set_t):kern_return_t"/>
    <method name="lock_try(lock_set_t;int):kern_return_t"/>
    <method name="lockf(int;int;off_t):int"/>
    <method name="log(double):double"/>
    <method name="log(float):float"/>
    <method name="log(long double):long double"/>
    <method name="log10(double):double"/>
    <method name="log10(float):float"/>
    <method name="log10(long double):long double"/>
    <method name="log10f(float):float"/>
    <method name="log10l(long double):long double"/>
    <method name="log1p(double):double"/>
    <method name="log1pf(float):float"/>
    <method name="log1pl(long double):long double"/>
    <method name="log2(double):double"/>
    <method name="log2f(float):float"/>
    <method name="log2l(long double):long double"/>
    <method name="logb(double):double"/>
    <method name="logbf(float):float"/>
    <method name="logbl(long double):long double"/>
    <method name="logf(float):float"/>
    <method name="login_tty(int):int"/>
    <method name="logl(long double):long double"/>
    <method name="logwtmp(const char*;const char*;const char*):void"/>
    <method name="longjmp(int*;int):void"/>
    <method name="longjmperror():void"/>
    <method name="lrand48():long"/>
    <method name="lrint(double):long"/>
    <method name="lrintf(float):long"/>
    <method name="lrintl(long double):long"/>
    <method name="lround(double):long"/>
    <method name="lroundf(float):long"/>
    <method name="lroundl(long double):long"/>
    <method name="lsamen_(__CLPK_integer*;char*;char*):__CLPK_logical"/>
    <method name="lsearch(const void*;void*;size_t*;size_t;(*)(const void*;const void*):int):void*"/>
    <method name="lseek(int;off_t;int):off_t"/>
    <method name="lstat(const char*;stat*):int"/>
    <method name="lstat(const char*;struct stat*):int"/>
    <method name="lstatx_np(const char*;struct stat*;filesec_t):int"/>
    <method name="lstrcat(lchar_t *; const lchar_t *): lchar_t *"/>
    <method name="lstrcatA(LPSTR;LPCSTR):LPSTR"/>
    <method name="lstrcatW(LPWSTR;LPCWSTR):LPWSTR"/>
    <method name="lstrcpy(lchar_t *; const lchar_t *): lchar_t *"/>
    <method name="lstrcpyA(LPSTR;LPCSTR):LPSTR"/>
    <method name="lstrcpyW(LPWSTR;LPCWSTR):LPWSTR"/>
    <method name="lstrcpyn(lchar_t *; const lchar_t *; size_t): lchar_t *"/>
    <method name="lstrcpynA(LPSTR;LPCSTR;int):LPSTR"/>
    <method name="lstrcpynW(LPWSTR;LPCWSTR;int):LPWSTR"/>
    <method name="ltoa(long;char*;int):char*"/>
    <method name="lutimes(const char*;const struct timeval*):int"/>
    <method name="mach_absolute_time():uint64_t"/>
    <method name="mach_error(const char*;mach_error_t):void"/>
    <method name="mach_error_string(mach_error_t):char*"/>
    <method name="mach_error_type(mach_error_t):char*"/>
    <method name="mach_host_self():mach_port_t"/>
    <method name="mach_make_memory_entry(vm_map_t;vm_size_t*;vm_offset_t;vm_prot_t;mem_entry_name_port_t*;mem_entry_name_port_t):kern_return_t"/>
    <method name="mach_make_memory_entry_64(vm_map_t;memory_object_size_t*;memory_object_offset_t;vm_prot_t;mach_port_t*;mem_entry_name_port_t):kern_return_t"/>
    <method name="mach_memory_object_memory_entry(host_t;boolean_t;vm_size_t;vm_prot_t;memory_object_t;mach_port_t*):kern_return_t"/>
    <method name="mach_memory_object_memory_entry_64(host_t;boolean_t;memory_object_size_t;vm_prot_t;memory_object_t;mach_port_t*):kern_return_t"/>
    <method name="mach_msg(mach_msg_header_t*;mach_msg_option_t;mach_msg_size_t;mach_msg_size_t;mach_port_name_t;mach_msg_timeout_t;mach_port_name_t):mach_msg_return_t"/>
    <method name="mach_msg_destroy(mach_msg_header_t*):void"/>
    <method name="mach_msg_overwrite(mach_msg_header_t*;mach_msg_option_t;mach_msg_size_t;mach_msg_size_t;mach_port_name_t;mach_msg_timeout_t;mach_port_name_t;mach_msg_header_t*;mach_msg_size_t):mach_msg_return_t"/>
    <method name="mach_msg_receive(mach_msg_header_t*):mach_msg_return_t"/>
    <method name="mach_msg_send(mach_msg_header_t*):mach_msg_return_t"/>
    <method name="mach_msg_server((*)(mach_msg_header_t*;mach_msg_header_t*):boolean_t;mach_msg_size_t;mach_port_t;mach_msg_options_t):mach_msg_return_t"/>
    <method name="mach_msg_server_importance((*)(mach_msg_header_t*;mach_msg_header_t*):boolean_t;mach_msg_size_t;mach_port_t;mach_msg_options_t):mach_msg_return_t"/>
    <method name="mach_msg_server_once((*)(mach_msg_header_t*;mach_msg_header_t*):boolean_t;mach_msg_size_t;mach_port_t;mach_msg_options_t):mach_msg_return_t"/>
    <method name="mach_port_allocate(ipc_space_t;mach_port_right_t;mach_port_name_t*):kern_return_t"/>
    <method name="mach_port_allocate_full(ipc_space_t;mach_port_right_t;mach_port_t;mach_port_qos_t*;mach_port_name_t*):kern_return_t"/>
    <method name="mach_port_allocate_name(ipc_space_t;mach_port_right_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_allocate_qos(ipc_space_t;mach_port_right_t;mach_port_qos_t*;mach_port_name_t*):kern_return_t"/>
    <method name="mach_port_deallocate(ipc_space_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_destroy(ipc_space_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_dnrequest_info(ipc_space_t;mach_port_name_t;unsigned int*;unsigned int*):kern_return_t"/>
    <method name="mach_port_extract_member(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_extract_right(ipc_space_t;mach_port_name_t;mach_msg_type_name_t;mach_port_t*;mach_msg_type_name_t*):kern_return_t"/>
    <method name="mach_port_get_attributes(ipc_space_t;mach_port_name_t;mach_port_flavor_t;mach_port_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_get_context(ipc_space_t;mach_port_name_t;mach_port_context_t*):kern_return_t"/>
    <method name="mach_port_get_refs(ipc_space_t;mach_port_name_t;mach_port_right_t;mach_port_urefs_t*):kern_return_t"/>
    <method name="mach_port_get_set_status(ipc_space_t;mach_port_name_t;mach_port_name_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_get_srights(ipc_space_t;mach_port_name_t;mach_port_rights_t*):kern_return_t"/>
    <method name="mach_port_insert_member(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_insert_right(ipc_space_t;mach_port_name_t;mach_port_t;mach_msg_type_name_t):kern_return_t"/>
    <method name="mach_port_kernel_object(ipc_space_t;mach_port_name_t;unsigned int*;unsigned int*):kern_return_t"/>
    <method name="mach_port_kobject(ipc_space_t;mach_port_name_t;natural_t*;mach_vm_address_t*):kern_return_t"/>
    <method name="mach_port_mod_refs(ipc_space_t;mach_port_name_t;mach_port_right_t;mach_port_delta_t):kern_return_t"/>
    <method name="mach_port_move_member(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_names(ipc_space_t;mach_port_name_array_t*;mach_msg_type_number_t*;mach_port_type_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_rename(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_request_notification(ipc_space_t;mach_port_name_t;mach_msg_id_t;mach_port_mscount_t;mach_port_t;mach_msg_type_name_t;mach_port_t*):kern_return_t"/>
    <method name="mach_port_set_attributes(ipc_space_t;mach_port_name_t;mach_port_flavor_t;mach_port_info_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="mach_port_set_context(ipc_space_t;mach_port_name_t;mach_port_context_t):kern_return_t"/>
    <method name="mach_port_set_mscount(ipc_space_t;mach_port_name_t;mach_port_mscount_t):kern_return_t"/>
    <method name="mach_port_set_seqno(ipc_space_t;mach_port_name_t;mach_port_seqno_t):kern_return_t"/>
    <method name="mach_port_space_info(ipc_space_t;ipc_info_space_t*;ipc_info_name_array_t*;mach_msg_type_number_t*;ipc_info_tree_name_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_type(ipc_space_t;mach_port_name_t;mach_port_type_t*):kern_return_t"/>
    <method name="mach_ports_lookup(task_t;mach_port_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_ports_register(task_t;mach_port_array_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="mach_thread_self():mach_port_t"/>
    <method name="mach_timebase_info(mach_timebase_info_t):kern_return_t"/>
    <method name="mach_vm_region_info(vm_map_t;vm_address_t;vm_info_region_t*;vm_info_object_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_vm_region_info_64(vm_map_t;vm_address_t;vm_info_region_64_t*;vm_info_object_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_vm_wire(host_priv_t;vm_map_t;mach_vm_address_t;mach_vm_size_t;vm_prot_t):kern_return_t"/>
    <method name="mach_wait_until(uint64_t):kern_return_t"/>
    <method name="mach_zone_info(host_priv_t;mach_zone_name_array_t*;mach_msg_type_number_t*;mach_zone_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="macx_backing_store_recovery(int):kern_return_t"/>
    <method name="macx_backing_store_suspend(boolean_t):kern_return_t"/>
    <method name="macx_swapoff(uint64_t;int):kern_return_t"/>
    <method name="macx_swapon(uint64_t;int;int;int):kern_return_t"/>
    <method name="macx_triggers(int;int;int;mach_port_t):kern_return_t"/>
    <method name="madvise(void*;size_t;int):int"/>
    <method name="malloc(size_t):void*"/>
    <method name="malloc_create_zone(vm_size_t;unsigned int):malloc_zone_t*"/>
    <method name="malloc_default_purgeable_zone():malloc_zone_t*"/>
    <method name="malloc_default_zone():malloc_zone_t*"/>
    <method name="malloc_destroy_zone(malloc_zone_t*):void"/>
    <method name="malloc_get_all_zones(task_t;(*)(task_t;vm_address_t;vm_size_t;void**):kern_return_t;vm_address_t**;unsigned int*):kern_return_t"/>
    <method name="malloc_get_zone_name(malloc_zone_t*):const char*"/>
    <method name="malloc_good_size(size_t):size_t"/>
    <method name="malloc_make_nonpurgeable(void*):int"/>
    <method name="malloc_make_purgeable(void*):void"/>
    <method name="malloc_printf(const char*, ...):void"/>
    <method name="malloc_set_zone_name(malloc_zone_t*;const char*):void"/>
    <method name="malloc_size(const void*):size_t"/>
    <method name="malloc_zone_batch_free(malloc_zone_t*;void**;unsigned int):void"/>
    <method name="malloc_zone_batch_malloc(malloc_zone_t*;size_t;void**;unsigned int):unsigned int"/>
    <method name="malloc_zone_calloc(malloc_zone_t*;size_t;size_t):void*"/>
    <method name="malloc_zone_check(malloc_zone_t*):boolean_t"/>
    <method name="malloc_zone_disable_discharge_checking(malloc_zone_t*):void"/>
    <method name="malloc_zone_discharge(malloc_zone_t*;void*):void"/>
    <method name="malloc_zone_enable_discharge_checking(malloc_zone_t*):boolean_t"/>
    <method name="malloc_zone_enumerate_discharged_pointers(malloc_zone_t*;(^)(void*;void*):void):void"/>
    <method name="malloc_zone_free(malloc_zone_t*;void*):void"/>
    <method name="malloc_zone_from_ptr(const void*):malloc_zone_t*"/>
    <method name="malloc_zone_log(malloc_zone_t*;void*):void"/>
    <method name="malloc_zone_malloc(malloc_zone_t*;size_t):void*"/>
    <method name="malloc_zone_memalign(malloc_zone_t*;size_t;size_t):void*"/>
    <method name="malloc_zone_pressure_relief(malloc_zone_t*;size_t):size_t"/>
    <method name="malloc_zone_print(malloc_zone_t*;boolean_t):void"/>
    <method name="malloc_zone_print_ptr_info(void*):void"/>
    <method name="malloc_zone_realloc(malloc_zone_t*;void*;size_t):void*"/>
    <method name="malloc_zone_register(malloc_zone_t*):void"/>
    <method name="malloc_zone_statistics(malloc_zone_t*;malloc_statistics_t*):void"/>
    <method name="malloc_zone_unregister(malloc_zone_t*):void"/>
    <method name="malloc_zone_valloc(malloc_zone_t*;size_t):void*"/>
    <method name="matherr(struct exception*):int"/>
    <method name="mblen(const char*;size_t):int"/>
    <method name="mblen_l(const char*;int;int):int"/>
    <method name="mbr_check_membership(const unsigned char*;const unsigned char*;int*):int"/>
    <method name="mbr_check_service_membership(const unsigned char*;const char*;int*):int"/>
    <method name="mbr_gid_to_uuid(gid_t;unsigned char*):int"/>
    <method name="mbr_identifier_to_uuid(int;const void*;size_t;unsigned char*):int"/>
    <method name="mbr_sid_to_string(const nt_sid_t*;char*):int"/>
    <method name="mbr_sid_to_uuid(const nt_sid_t*;unsigned char*):int"/>
    <method name="mbr_string_to_sid(const char*;nt_sid_t*):int"/>
    <method name="mbr_uid_to_uuid(uid_t;unsigned char*):int"/>
    <method name="mbr_uuid_to_id(const unsigned char*;id_t*;int*):int"/>
    <method name="mbr_uuid_to_sid(const unsigned char*;nt_sid_t*):int"/>
    <method name="mbrlen(const char*;size_t;mbstate_t*):size_t"/>
    <method name="mbrlen_l(const char*;int;int*;int):int"/>
    <method name="mbrtowc(wchar_t*;const char*;size_t;mbstate_t*):size_t"/>
    <method name="mbrtowc_l(int*;const char*;int;int*;int):int"/>
    <method name="mbsinit(const mbstate_t*):int"/>
    <method name="mbsinit_l(const int*;int):int"/>
    <method name="mbsnrtowcs(wchar_t*;const char**;size_t;size_t;mbstate_t*):size_t"/>
    <method name="mbsrtowcs(wchar_t*;const char**;size_t;mbstate_t*):size_t"/>
    <method name="mbsrtowcs_l(int*;const char**;int;int*;int):int"/>
    <method name="mbstowcs(wchar_t*;const char*;size_t):size_t"/>
    <method name="mbstowcs_l(int*;const char*;int;int):int"/>
    <method name="mbtowc(wchar_t*;const char*;size_t):int"/>
    <method name="mbtowc_l(int*;const char*;int;int):int"/>
    <method name="memccpy(void*;const void*;int;size_t):void*"/>
    <method name="memchr(const void*;int;size_t):void*"/>
    <method name="memchr(void*;int;size_t):void*"/>
    <method name="memcmp(const void*;const void*;size_t):int"/>
    <method name="memcpy(void*;const void*;size_t):void*"/>
    <method name="memmem(const void*;size_t;const void*;size_t):void*"/>
    <method name="memmove(void*;const void*;size_t):void*"/>
    <method name="memset(void*;int;size_t):void*"/>
    <method name="memset_pattern16(void*;const void*;size_t):void"/>
    <method name="memset_pattern4(void*;const void*;size_t):void"/>
    <method name="memset_pattern8(void*;const void*;size_t):void"/>
    <method name="mergesort(void*;size_t;size_t;(*)(const void*;const void*):int):int"/>
    <method name="mergesort_b(void*;size_t;size_t;(^)(const void*;const void*):int):int"/>
    <method name="method_copyArgumentType(Method;unsigned int):char*"/>
    <method name="method_copyReturnType(Method):char*"/>
    <method name="method_exchangeImplementations(Method;Method):void"/>
    <method name="method_getArgumentInfo(struct objc_method*;int;const char**;int*):unsigned int"/>
    <method name="method_getArgumentType(Method;unsigned int;char*;size_t):void"/>
    <method name="method_getDescription(Method):struct objc_method_description*"/>
    <method name="method_getImplementation(Method):IMP"/>
    <method name="method_getName(Method):SEL"/>
    <method name="method_getNumberOfArguments(Method):unsigned int"/>
    <method name="method_getReturnType(Method;char*;size_t):void"/>
    <method name="method_getSizeOfArguments(Method):unsigned int"/>
    <method name="method_getTypeEncoding(Method):const char*"/>
    <method name="method_invoke(id;Method, ...):id"/>
    <method name="method_invoke_stret(id;Method, ...):void"/>
    <method name="method_setImplementation(Method;IMP):IMP"/>
    <method name="mig_allocate(vm_address_t*;vm_size_t):void"/>
    <method name="mig_dealloc_reply_port(mach_port_t):void"/>
    <method name="mig_deallocate(vm_address_t;vm_size_t):void"/>
    <method name="mig_get_reply_port():mach_port_t"/>
    <method name="mig_put_reply_port(mach_port_t):void"/>
    <method name="mig_reply_setup(mach_msg_header_t*;mach_msg_header_t*):void"/>
    <method name="mig_strncpy(char*;const char*;int):int"/>
    <method name="min():int"/>
    <method name="mincore(const void*;size_t;char*):int"/>
    <method name="minherit(void*;size_t;int):int"/>
    <method name="mkdir(const char*):int"/>
    <method name="mkdir(const char*;__mode_t):int"/>
    <method name="mkdir(const char*;mode_t):int"/>
    <method name="mkdirp(const char*;mode_t):int"/>
    <method name="mkdirx_np(const char*;filesec_t):int"/>
    <method name="mkdtemp(char*):char*"/>
    <method name="mkfifo(const char*;mode_t):int"/>
    <method name="mkfifox_np(const char*;filesec_t):int"/>
    <method name="mknod(const char*;__mode_t;__dev_t):int"/>
    <method name="mknod(const char*;mode_t;dev_t):int"/>
    <method name="mkpath_np(const char*;mode_t):int"/>
    <method name="mkstemp(char*):int"/>
    <method name="mkstemps(char*;int):int"/>
    <method name="mktemp(char*):char*"/>
    <method name="mktime(struct tm*):time_t"/>
    <method name="mlock(const void*;size_t):int"/>
    <method name="mlockall(int):int"/>
    <method name="mmap(void*;size_t;int;int;int;off_t):void*"/>
    <method name="modf(double;double*):double"/>
    <method name="modf(float;float*):float"/>
    <method name="modf(long double;long double*):long double"/>
    <method name="modff(float;float*):float"/>
    <method name="modfl(long double;long double*):long double"/>
    <method name="mount(const char*;const char*;int;void*):int"/>
    <method name="mountproc_dump_1(void*;CLIENT*):mountlist*"/>
    <method name="mountproc_dump_1_svc(void*;struct svc_req*):mountlist*"/>
    <method name="mountproc_export_1(void*;CLIENT*):exports*"/>
    <method name="mountproc_export_1_svc(void*;struct svc_req*):exports*"/>
    <method name="mountproc_exportall_1(void*;CLIENT*):exports*"/>
    <method name="mountproc_exportall_1_svc(void*;struct svc_req*):exports*"/>
    <method name="mountproc_mnt_1(dirpath*;CLIENT*):fhstatus*"/>
    <method name="mountproc_mnt_1_svc(dirpath*;struct svc_req*):fhstatus*"/>
    <method name="mountproc_null_1(void*;CLIENT*):void*"/>
    <method name="mountproc_null_1_svc(void*;struct svc_req*):void*"/>
    <method name="mountproc_umnt_1(dirpath*;CLIENT*):void*"/>
    <method name="mountproc_umnt_1_svc(dirpath*;struct svc_req*):void*"/>
    <method name="mountproc_umntall_1(void*;CLIENT*):void*"/>
    <method name="mountproc_umntall_1_svc(void*;struct svc_req*):void*"/>
    <method name="mpool_close(MPOOL*):int"/>
    <method name="mpool_filter(MPOOL*;(*)(void*;int;void*):void;(*)(void*;int;void*):void;void*):void"/>
    <method name="mpool_get(MPOOL*;int;unsigned int):void*"/>
    <method name="mpool_new(MPOOL*;int*):void*"/>
    <method name="mpool_put(MPOOL*;void*;unsigned int):int"/>
    <method name="mpool_sync(MPOOL*):int"/>
    <method name="mprotect(void*;size_t;int):int"/>
    <method name="mrand48():long"/>
    <method name="ms_time_cmp(const MS_TM*;const MS_TM*):int"/>
    <method name="ms_time_diff(MS_TM*;MS_TM*):double"/>
    <method name="ms_time_free(MS_TM*):void"/>
    <method name="ms_time_get(MS_TM*):void"/>
    <method name="ms_time_new():MS_TM*"/>
    <method name="msgctl(int;int;struct __msqid_ds_new*):int"/>
    <method name="msgget(key_t;int):int"/>
    <method name="msgrcv(int;void*;size_t;long;int):ssize_t"/>
    <method name="msgsnd(int;const void*;size_t;int):int"/>
    <method name="msgsys(int, ...):int"/>
    <method name="mstats():struct mstats"/>
    <method name="msync(void*;size_t;int):int"/>
    <method name="munlock(const void*;size_t):int"/>
    <method name="munlockall():int"/>
    <method name="munmap(void*;size_t):int"/>
    <method name="name_cmp(const char*;const char*):int"/>
    <method name="nan(const char*):double"/>
    <method name="nanf(const char*):float"/>
    <method name="nanl(const char*):long double"/>
    <method name="nanosleep(const struct timespec*;struct timespec*):int"/>
    <method name="nearbyint(double):double"/>
    <method name="nearbyintf(float):float"/>
    <method name="nearbyintl(long double):long double"/>
    <method name="newlocale(int;const char*;locale_t):locale_t"/>
    <method name="nextafter(double;double):double"/>
    <method name="nextafterf(float;float):float"/>
    <method name="nextafterl(long double;long double):long double"/>
    <method name="nexttoward(double;long double):double"/>
    <method name="nexttowardf(float;long double):float"/>
    <method name="nexttowardl(long double;long double):long double"/>
    <method name="nextwctype(wint_t;wctype_t):wint_t"/>
    <method name="nfssvc(int;void*):int"/>
    <method name="nftw(const char*;(*)(const char*;const struct stat*;int;struct FTW*):int;int;int):int"/>
    <method name="nice(int):int"/>
    <method name="nl_langinfo(nl_item):char*"/>
    <method name="nlist(const char*;struct nlist*):int"/>
    <method name="nlm4_cancel_4(nlm4_cancargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_cancel_4_svc(nlm4_cancargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_cancel_msg_4(nlm4_cancargs*;CLIENT*):void*"/>
    <method name="nlm4_cancel_msg_4_svc(nlm4_cancargs*;struct svc_req*):void*"/>
    <method name="nlm4_cancel_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_cancel_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_free_all_4(nlm4_notify*;CLIENT*):void*"/>
    <method name="nlm4_free_all_4_svc(nlm4_notify*;struct svc_req*):void*"/>
    <method name="nlm4_granted_4(nlm4_testargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_granted_4_svc(nlm4_testargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_granted_msg_4(nlm4_testargs*;CLIENT*):void*"/>
    <method name="nlm4_granted_msg_4_svc(nlm4_testargs*;struct svc_req*):void*"/>
    <method name="nlm4_granted_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_granted_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_lock_4(nlm4_lockargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_lock_4_svc(nlm4_lockargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_lock_msg_4(nlm4_lockargs*;CLIENT*):void*"/>
    <method name="nlm4_lock_msg_4_svc(nlm4_lockargs*;struct svc_req*):void*"/>
    <method name="nlm4_lock_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_lock_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_nm_lock_4(nlm4_lockargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_nm_lock_4_svc(nlm4_lockargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_share_4(nlm4_shareargs*;CLIENT*):nlm4_shareres*"/>
    <method name="nlm4_share_4_svc(nlm4_shareargs*;struct svc_req*):nlm4_shareres*"/>
    <method name="nlm4_test_4(nlm4_testargs*;CLIENT*):nlm4_testres*"/>
    <method name="nlm4_test_4_svc(nlm4_testargs*;struct svc_req*):nlm4_testres*"/>
    <method name="nlm4_test_msg_4(nlm4_testargs*;CLIENT*):void*"/>
    <method name="nlm4_test_msg_4_svc(nlm4_testargs*;struct svc_req*):void*"/>
    <method name="nlm4_test_res_4(nlm4_testres*;CLIENT*):void*"/>
    <method name="nlm4_test_res_4_svc(nlm4_testres*;struct svc_req*):void*"/>
    <method name="nlm4_unlock_4(nlm4_unlockargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_unlock_4_svc(nlm4_unlockargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_unlock_msg_4(nlm4_unlockargs*;CLIENT*):void*"/>
    <method name="nlm4_unlock_msg_4_svc(nlm4_unlockargs*;struct svc_req*):void*"/>
    <method name="nlm4_unlock_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_unlock_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_unshare_4(nlm4_shareargs*;CLIENT*):nlm4_shareres*"/>
    <method name="nlm4_unshare_4_svc(nlm4_shareargs*;struct svc_req*):nlm4_shareres*"/>
    <method name="nlm_cancel_1(struct nlm_cancargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_cancel_1_svc(struct nlm_cancargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_cancel_3(struct nlm_cancargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_cancel_3_svc(struct nlm_cancargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_cancel_msg_1(struct nlm_cancargs*;CLIENT*):void*"/>
    <method name="nlm_cancel_msg_1_svc(struct nlm_cancargs*;struct svc_req*):void*"/>
    <method name="nlm_cancel_msg_3(struct nlm_cancargs*;CLIENT*):void*"/>
    <method name="nlm_cancel_msg_3_svc(struct nlm_cancargs*;struct svc_req*):void*"/>
    <method name="nlm_cancel_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_cancel_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_cancel_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_cancel_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_free_all_3(nlm_notify*;CLIENT*):void*"/>
    <method name="nlm_free_all_3_svc(nlm_notify*;struct svc_req*):void*"/>
    <method name="nlm_granted_1(struct nlm_testargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_granted_1_svc(struct nlm_testargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_granted_3(struct nlm_testargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_granted_3_svc(struct nlm_testargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_granted_msg_1(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_granted_msg_1_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_granted_msg_3(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_granted_msg_3_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_granted_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_granted_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_granted_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_granted_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_lock_1(struct nlm_lockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_lock_1_svc(struct nlm_lockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_lock_3(struct nlm_lockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_lock_3_svc(struct nlm_lockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_lock_msg_1(struct nlm_lockargs*;CLIENT*):void*"/>
    <method name="nlm_lock_msg_1_svc(struct nlm_lockargs*;struct svc_req*):void*"/>
    <method name="nlm_lock_msg_3(struct nlm_lockargs*;CLIENT*):void*"/>
    <method name="nlm_lock_msg_3_svc(struct nlm_lockargs*;struct svc_req*):void*"/>
    <method name="nlm_lock_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_lock_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_lock_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_lock_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_nm_lock_3(nlm_lockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_nm_lock_3_svc(nlm_lockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_share_3(nlm_shareargs*;CLIENT*):nlm_shareres*"/>
    <method name="nlm_share_3_svc(nlm_shareargs*;struct svc_req*):nlm_shareres*"/>
    <method name="nlm_sm_notify_0(struct nlm_sm_status*;CLIENT*):void*"/>
    <method name="nlm_sm_notify_0_svc(struct nlm_sm_status*;struct svc_req*):void*"/>
    <method name="nlm_test_1(struct nlm_testargs*;CLIENT*):nlm_testres*"/>
    <method name="nlm_test_1_svc(struct nlm_testargs*;struct svc_req*):nlm_testres*"/>
    <method name="nlm_test_3(struct nlm_testargs*;CLIENT*):nlm_testres*"/>
    <method name="nlm_test_3_svc(struct nlm_testargs*;struct svc_req*):nlm_testres*"/>
    <method name="nlm_test_msg_1(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_test_msg_1_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_test_msg_3(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_test_msg_3_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_test_res_1(nlm_testres*;CLIENT*):void*"/>
    <method name="nlm_test_res_1_svc(nlm_testres*;struct svc_req*):void*"/>
    <method name="nlm_test_res_3(nlm_testres*;CLIENT*):void*"/>
    <method name="nlm_test_res_3_svc(nlm_testres*;struct svc_req*):void*"/>
    <method name="nlm_unlock_1(struct nlm_unlockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_unlock_1_svc(struct nlm_unlockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_unlock_3(struct nlm_unlockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_unlock_3_svc(struct nlm_unlockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_unlock_msg_1(struct nlm_unlockargs*;CLIENT*):void*"/>
    <method name="nlm_unlock_msg_1_svc(struct nlm_unlockargs*;struct svc_req*):void*"/>
    <method name="nlm_unlock_msg_3(struct nlm_unlockargs*;CLIENT*):void*"/>
    <method name="nlm_unlock_msg_3_svc(struct nlm_unlockargs*;struct svc_req*):void*"/>
    <method name="nlm_unlock_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_unlock_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_unlock_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_unlock_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_unshare_3(nlm_shareargs*;CLIENT*):nlm_shareres*"/>
    <method name="nlm_unshare_3_svc(nlm_shareargs*;struct svc_req*):nlm_shareres*"/>
    <method name="notify_cancel(int):uint32_t"/>
    <method name="notify_check(int;int*):uint32_t"/>
    <method name="notify_get_state(int;uint64_t*):uint32_t"/>
    <method name="notify_post(const char*):uint32_t"/>
    <method name="notify_register_check(const char*;int*):uint32_t"/>
    <method name="notify_register_dispatch(const char*;int*;dispatch_queue_t;(^)(int):void):uint32_t"/>
    <method name="notify_register_file_descriptor(const char*;int*;int;int*):uint32_t"/>
    <method name="notify_register_mach_port(const char*;mach_port_t*;int;int*):uint32_t"/>
    <method name="notify_register_signal(const char*;int;int*):uint32_t"/>
    <method name="notify_resume(int):uint32_t"/>
    <method name="notify_set_state(int;uint64_t):uint32_t"/>
    <method name="notify_suspend(int):uint32_t"/>
    <method name="nrand48(unsigned short*):long"/>
    <method name="ntohl(u_long):u_long"/>
    <method name="ntohs(u_short):u_short"/>
    <method name="o2i_ECPublicKey(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="objc_addClass(Class*):void"/>
    <method name="objc_addExceptionHandler(objc_exception_handler;void*):uintptr_t"/>
    <method name="objc_allocateClassPair(Class*;const char*;size_t):Class*"/>
    <method name="objc_allocateProtocol(const char*):Protocol*"/>
    <method name="objc_allocate_object(Class*;int):id"/>
    <method name="objc_assertRegisteredThreadWithCollector():void"/>
    <method name="objc_assign_global(id;id*):id"/>
    <method name="objc_assign_ivar(id;id;ptrdiff_t):id"/>
    <method name="objc_assign_strongCast(id;id*):id"/>
    <method name="objc_assign_weak(id;id*):id"/>
    <method name="objc_atomicCompareAndSwapGlobal(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapGlobalBarrier(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapInstanceVariable(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapInstanceVariableBarrier(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapPtr(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapPtrBarrier(id;id;volatile id*):BOOL"/>
    <method name="objc_begin_catch(void*):id"/>
    <method name="objc_clear_stack(unsigned long):void"/>
    <method name="objc_collect(unsigned long):void"/>
    <method name="objc_collect_if_needed(unsigned long):void"/>
    <method name="objc_collectingEnabled():BOOL"/>
    <method name="objc_collecting_enabled():BOOL"/>
    <method name="objc_constructInstance(Class*;void*):id"/>
    <method name="objc_copyClassList(unsigned int*):Class**"/>
    <method name="objc_copyClassNamesForImage(const char*;unsigned int*):const char**"/>
    <method name="objc_copyImageNames(unsigned int*):const char**"/>
    <method name="objc_copyProtocolList(unsigned int*):Protocol**"/>
    <method name="objc_destructInstance(id):void*"/>
    <method name="objc_disposeClassPair(Class*):void"/>
    <method name="objc_duplicateClass(Class*;const char*;size_t):Class*"/>
    <method name="objc_end_catch():void"/>
    <method name="objc_enumerationMutation(id):void"/>
    <method name="objc_exception_rethrow():void"/>
    <method name="objc_finalizeOnMainThread(Class*):void"/>
    <method name="objc_getAssociatedObject(id;const void*):id"/>
    <method name="objc_getClass(const char*):id"/>
    <method name="objc_getClassList(Class**;int):int"/>
    <method name="objc_getClasses():void*"/>
    <method name="objc_getFutureClass(const char*):Class*"/>
    <method name="objc_getMetaClass(const char*):id"/>
    <method name="objc_getOrigClass(const char*):Class*"/>
    <method name="objc_getProtocol(const char*):Protocol*"/>
    <method name="objc_getRequiredClass(const char*):id"/>
    <method name="objc_is_finalized(void*):BOOL"/>
    <method name="objc_loadWeak(id*):id"/>
    <method name="objc_lookUpClass(const char*):id"/>
    <method name="objc_memmove_collectable(void*;const void*;size_t):void*"/>
    <method name="objc_msgSend(id;SEL, ...):id"/>
    <method name="objc_msgSendSuper(struct objc_super*;SEL, ...):id"/>
    <method name="objc_msgSendSuper_stret(struct objc_super*;SEL, ...):void"/>
    <method name="objc_msgSend_stret(id;SEL, ...):void"/>
    <method name="objc_msgSendv(id;SEL;size_t;marg_list):id"/>
    <method name="objc_msgSendv_stret(void*;id;SEL;size_t;marg_list):void"/>
    <method name="objc_read_weak(id*):id"/>
    <method name="objc_registerClassPair(Class*):void"/>
    <method name="objc_registerProtocol(Protocol*):void"/>
    <method name="objc_registerThreadWithCollector():void"/>
    <method name="objc_removeAssociatedObjects(id):void"/>
    <method name="objc_removeExceptionHandler(uintptr_t):void"/>
    <method name="objc_setAssociatedObject(id;const void*;id;objc_AssociationPolicy):void"/>
    <method name="objc_setClassHandler((*)(const char*):int):void"/>
    <method name="objc_setCollectionRatio(size_t):void"/>
    <method name="objc_setCollectionThreshold(size_t):void"/>
    <method name="objc_setEnumerationMutationHandler((*)(id):void):void"/>
    <method name="objc_setExceptionMatcher(objc_exception_matcher):objc_exception_matcher"/>
    <method name="objc_setExceptionPreprocessor(objc_exception_preprocessor):objc_exception_preprocessor"/>
    <method name="objc_setForwardHandler(void*;void*):void"/>
    <method name="objc_setFutureClass(Class*;const char*):void"/>
    <method name="objc_setMultithreaded(BOOL):void"/>
    <method name="objc_setUncaughtExceptionHandler(objc_uncaught_exception_handler):objc_uncaught_exception_handler"/>
    <method name="objc_set_collection_ratio(size_t):void"/>
    <method name="objc_set_collection_threshold(size_t):void"/>
    <method name="objc_startCollectorThread():void"/>
    <method name="objc_start_collector_thread():void"/>
    <method name="objc_storeWeak(id*;id):id"/>
    <method name="objc_sync_enter(id):int"/>
    <method name="objc_sync_exit(id):int"/>
    <method name="objc_sync_notify(id):int"/>
    <method name="objc_sync_notifyAll(id):int"/>
    <method name="objc_sync_wait(id;long long):int"/>
    <method name="objc_terminate():void"/>
    <method name="objc_unregisterThreadWithCollector():void"/>
    <method name="object_copy(id;size_t):id"/>
    <method name="object_copyFromZone(id;size_t;void*):id"/>
    <method name="object_dispose(id):id"/>
    <method name="object_getClass(id):Class*"/>
    <method name="object_getClassName(id):const char*"/>
    <method name="object_getIndexedIvars(id):void*"/>
    <method name="object_getInstanceVariable(id;const char*;void**):Ivar"/>
    <method name="object_getIvar(id;Ivar):id"/>
    <method name="object_realloc(id;size_t):id"/>
    <method name="object_reallocFromZone(id;size_t;void*):id"/>
    <method name="object_setClass(id;Class*):Class*"/>
    <method name="object_setInstanceVariable(id;const char*;void*):Ivar"/>
    <method name="object_setIvar(id;Ivar;id):void"/>
    <method name="obstack_printf(obstack*;const char*, ...):int"/>
    <method name="obstack_vprintf(obstack*;const char*;va_list):int"/>
    <method name="open(const char*;int, ...):int"/>
    <method name="open_dprotected_np(const char*;int;int;int, ...):int"/>
    <method name="opendev(char*;int;int;char**):int"/>
    <method name="opendir(const char*):DIR*"/>
    <method name="openlog(const char*;int;int):void"/>
    <method name="openpty(int*;int*;char*;struct termios*;struct winsize*):int"/>
    <method name="openx_np(const char*;int;filesec_t):int"/>
    <method name="panic(const char*, ...):void"/>
    <method name="panic_init(mach_port_t):void"/>
    <method name="pathconf(const char*;int):long"/>
    <method name="pause():int"/>
    <method name="pclose(FILE*):int"/>
    <method name="perror(const char*):void"/>
    <method name="pfctlinput(int;struct sockaddr*):void"/>
    <method name="pid_for_task(mach_port_name_t;int*):kern_return_t"/>
    <method name="pidlock(const char*;int;pid_t*;const char*):int"/>
    <method name="pipe(int*):int"/>
    <method name="pitem_free(pitem*):void"/>
    <method name="pitem_new(unsigned long long;void*):pitem*"/>
    <method name="poll(struct pollfd*;nfds_t;int):int"/>
    <method name="popen(const char*;const char*):FILE*"/>
    <method name="port_obj_init(int):void"/>
    <method name="posix2time(time_t):time_t"/>
    <method name="posix_madvise(void*;size_t;int):int"/>
    <method name="posix_memalign(void**;size_t;size_t):int"/>
    <method name="posix_openpt(int):int"/>
    <method name="posix_spawn(pid_t*;const char*;const posix_spawn_file_actions_t*;const posix_spawnattr_t*;const char**;const char**):int"/>
    <method name="posix_spawn_file_actions_addclose(posix_spawn_file_actions_t*;int):int"/>
    <method name="posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t*;int;int):int"/>
    <method name="posix_spawn_file_actions_addinherit_np(posix_spawn_file_actions_t*;int):int"/>
    <method name="posix_spawn_file_actions_addopen(posix_spawn_file_actions_t*;int;const char*;int;mode_t):int"/>
    <method name="posix_spawn_file_actions_destroy(posix_spawn_file_actions_t*):int"/>
    <method name="posix_spawn_file_actions_init(posix_spawn_file_actions_t*):int"/>
    <method name="posix_spawnattr_destroy(posix_spawnattr_t*):int"/>
    <method name="posix_spawnattr_getbinpref_np(const posix_spawnattr_t*;size_t;cpu_type_t*;size_t*):int"/>
    <method name="posix_spawnattr_getflags(const posix_spawnattr_t*;short*):int"/>
    <method name="posix_spawnattr_getpgroup(const posix_spawnattr_t*;pid_t*):int"/>
    <method name="posix_spawnattr_getsigdefault(const posix_spawnattr_t*;sigset_t*):int"/>
    <method name="posix_spawnattr_getsigmask(const posix_spawnattr_t*;sigset_t*):int"/>
    <method name="posix_spawnattr_init(posix_spawnattr_t*):int"/>
    <method name="posix_spawnattr_setauditsessionport_np(posix_spawnattr_t*;mach_port_t):int"/>
    <method name="posix_spawnattr_setbinpref_np(posix_spawnattr_t*;size_t;cpu_type_t*;size_t*):int"/>
    <method name="posix_spawnattr_setexceptionports_np(posix_spawnattr_t*;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):int"/>
    <method name="posix_spawnattr_setflags(posix_spawnattr_t*;short):int"/>
    <method name="posix_spawnattr_setpgroup(posix_spawnattr_t*;pid_t):int"/>
    <method name="posix_spawnattr_setsigdefault(posix_spawnattr_t*;const sigset_t*):int"/>
    <method name="posix_spawnattr_setsigmask(posix_spawnattr_t*;const sigset_t*):int"/>
    <method name="posix_spawnattr_setspecialport_np(posix_spawnattr_t*;mach_port_t;int):int"/>
    <method name="posix_spawnp(pid_t*;const char*;const posix_spawn_file_actions_t*;const posix_spawnattr_t*;const char**;const char**):int"/>
    <method name="pow(double;double):double"/>
    <method name="pow(double;int):double"/>
    <method name="pow(float;float):float"/>
    <method name="pow(float;int):float"/>
    <method name="pow(long double;int):long double"/>
    <method name="pow(long double;long double):long double"/>
    <method name="powf(float;float):float"/>
    <method name="powl(long double;long double):long double"/>
    <method name="pqueue_find(pqueue;unsigned long long):pitem*"/>
    <method name="pqueue_free(pqueue):void"/>
    <method name="pqueue_insert(pqueue;pitem*):pitem*"/>
    <method name="pqueue_iterator(pqueue):pitem*"/>
    <method name="pqueue_new():pqueue"/>
    <method name="pqueue_next(piterator*):pitem*"/>
    <method name="pqueue_peek(pqueue):pitem*"/>
    <method name="pqueue_pop(pqueue):pitem*"/>
    <method name="pqueue_print(pqueue):void"/>
    <method name="pread(int;void*;size_t;__off_t):ssize_t"/>
    <method name="pread(int;void*;size_t;off_t):ssize_t"/>
    <method name="prefsEscapedStringOptions():int"/>
    <method name="printf(const char*, ...):int"/>
    <method name="processor_assign(processor_t;processor_set_t;boolean_t):kern_return_t"/>
    <method name="processor_control(processor_t;processor_info_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="processor_exit(processor_t):kern_return_t"/>
    <method name="processor_get_assignment(processor_t;processor_set_name_t*):kern_return_t"/>
    <method name="processor_info(processor_t;processor_flavor_t;host_t*;processor_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_create(host_t;processor_set_t*;processor_set_name_t*):kern_return_t"/>
    <method name="processor_set_default(host_t;processor_set_name_t*):kern_return_t"/>
    <method name="processor_set_destroy(processor_set_t):kern_return_t"/>
    <method name="processor_set_info(processor_set_name_t;int;host_t*;processor_set_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_max_priority(processor_set_t;int;boolean_t):kern_return_t"/>
    <method name="processor_set_policy_control(processor_set_t;processor_set_flavor_t;processor_set_info_t;mach_msg_type_number_t;boolean_t):kern_return_t"/>
    <method name="processor_set_policy_disable(processor_set_t;int;boolean_t):kern_return_t"/>
    <method name="processor_set_policy_enable(processor_set_t;int):kern_return_t"/>
    <method name="processor_set_stack_usage(processor_set_t;unsigned int*;vm_size_t*;vm_size_t*;vm_size_t*;vm_offset_t*):kern_return_t"/>
    <method name="processor_set_statistics(processor_set_name_t;processor_set_flavor_t;processor_set_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_tasks(processor_set_t;task_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_threads(processor_set_t;thread_act_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_start(processor_t):kern_return_t"/>
    <method name="profil(char*;size_t;unsigned long;unsigned int):int"/>
    <method name="property_copyAttributeList(objc_property_t;unsigned int*):objc_property_attribute_t*"/>
    <method name="property_copyAttributeValue(objc_property_t;const char*):char*"/>
    <method name="property_getAttributes(objc_property_t):const char*"/>
    <method name="property_getName(objc_property_t):const char*"/>
    <method name="property_list_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="protocol_addMethodDescription(Protocol*;SEL;const char*;BOOL;BOOL):void"/>
    <method name="protocol_addProperty(Protocol*;const char*;const objc_property_attribute_t*;unsigned int;BOOL;BOOL):void"/>
    <method name="protocol_addProtocol(Protocol*;Protocol*):void"/>
    <method name="protocol_conformsToProtocol(Protocol*;Protocol*):BOOL"/>
    <method name="protocol_copyMethodDescriptionList(Protocol*;BOOL;BOOL;unsigned int*):struct objc_method_description*"/>
    <method name="protocol_copyPropertyList(Protocol*;unsigned int*):objc_property_t*"/>
    <method name="protocol_copyProtocolList(Protocol*;unsigned int*):Protocol**"/>
    <method name="protocol_getMethodDescription(Protocol*;SEL;BOOL;BOOL):struct objc_method_description"/>
    <method name="protocol_getName(Protocol*):const char*"/>
    <method name="protocol_getProperty(Protocol*;const char*;BOOL;BOOL):objc_property_t"/>
    <method name="protocol_isEqual(Protocol*;Protocol*):BOOL"/>
    <method name="pselect(int;fd_set*;fd_set*;fd_set*;const struct timespec*;const sigset_t*):int"/>
    <method name="psignal(unsigned int;const char*):void"/>
    <method name="psort(void*;size_t;size_t;(*)(const void*;const void*):int):void"/>
    <method name="psort_b(void*;size_t;size_t;(^)(const void*;const void*):int):void"/>
    <method name="psort_r(void*;size_t;size_t;void*;(*)(void*;const void*;const void*):int):void"/>
    <method name="pspdf_dispatch_async_if(dispatch_queue_t;BOOL;(^)():void):void"/>
    <method name="pspdf_dispatch_queue_create(const char*;dispatch_queue_attr_t):dispatch_queue_t"/>
    <method name="pspdf_dispatch_sync_reentrant(dispatch_queue_t;(^)():void):void"/>
    <method name="psrangef(float;float;float):CGFloat"/>
    <method name="pthread_atfork((*)():void;(*)():void;(*)():void):int"/>
    <method name="pthread_attr_destroy(pthread_attr_t*):int"/>
    <method name="pthread_attr_getdetachstate(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getguardsize(const pthread_attr_t*;size_t*):int"/>
    <method name="pthread_attr_getinheritsched(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getschedparam(const pthread_attr_t*;struct sched_param*):int"/>
    <method name="pthread_attr_getschedpolicy(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getscope(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getstack(const pthread_attr_t*;void**;size_t*):int"/>
    <method name="pthread_attr_getstackaddr(const pthread_attr_t*;void**):int"/>
    <method name="pthread_attr_getstacksize(const pthread_attr_t*;size_t*):int"/>
    <method name="pthread_attr_init(pthread_attr_t*):int"/>
    <method name="pthread_attr_setdetachstate(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setguardsize(pthread_attr_t*;size_t):int"/>
    <method name="pthread_attr_setinheritsched(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setschedparam(pthread_attr_t*;const struct sched_param*):int"/>
    <method name="pthread_attr_setschedpolicy(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setscope(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setstack(pthread_attr_t*;void*;size_t):int"/>
    <method name="pthread_attr_setstackaddr(pthread_attr_t*;void*):int"/>
    <method name="pthread_attr_setstacksize(pthread_attr_t*;size_t):int"/>
    <method name="pthread_cancel(pthread_t):int"/>
    <method name="pthread_cond_broadcast(pthread_cond_t*):int"/>
    <method name="pthread_cond_destroy(pthread_cond_t*):int"/>
    <method name="pthread_cond_init(pthread_cond_t*;const pthread_condattr_t*):int"/>
    <method name="pthread_cond_signal(pthread_cond_t*):int"/>
    <method name="pthread_cond_signal_thread_np(pthread_cond_t*;pthread_t):int"/>
    <method name="pthread_cond_timedwait(pthread_cond_t*;pthread_mutex_t*;const struct timespec*):int"/>
    <method name="pthread_cond_timedwait_relative_np(pthread_cond_t*;pthread_mutex_t*;const struct timespec*):int"/>
    <method name="pthread_cond_wait(pthread_cond_t*;pthread_mutex_t*):int"/>
    <method name="pthread_condattr_destroy(pthread_condattr_t*):int"/>
    <method name="pthread_condattr_getpshared(const pthread_condattr_t*;int*):int"/>
    <method name="pthread_condattr_init(pthread_condattr_t*):int"/>
    <method name="pthread_condattr_setpshared(pthread_condattr_t*;int):int"/>
    <method name="pthread_create(pthread_t*;const pthread_attr_t*;(*)(void*):void*;void*):int"/>
    <method name="pthread_create_suspended_np(pthread_t*;const pthread_attr_t*;(*)(void*):void*;void*):int"/>
    <method name="pthread_detach(pthread_t):int"/>
    <method name="pthread_equal(pthread_t;pthread_t):int"/>
    <method name="pthread_exit(void*):void"/>
    <method name="pthread_from_mach_thread_np(mach_port_t):pthread_t"/>
    <method name="pthread_get_stackaddr_np(pthread_t):void*"/>
    <method name="pthread_get_stacksize_np(pthread_t):size_t"/>
    <method name="pthread_getconcurrency():int"/>
    <method name="pthread_getname_np(pthread_t;char*;size_t):int"/>
    <method name="pthread_getschedparam(pthread_t;int*;struct sched_param*):int"/>
    <method name="pthread_getspecific(pthread_key_t):void*"/>
    <method name="pthread_getugid_np(uid_t*;gid_t*):int"/>
    <method name="pthread_is_threaded_np():int"/>
    <method name="pthread_join(pthread_t;void**):int"/>
    <method name="pthread_key_create(pthread_key_t*;(*)(void*):void):int"/>
    <method name="pthread_key_delete(pthread_key_t):int"/>
    <method name="pthread_kill(pthread_t;int):int"/>
    <method name="pthread_mach_thread_np(pthread_t):mach_port_t"/>
    <method name="pthread_main_np():int"/>
    <method name="pthread_mutex_destroy(pthread_mutex_t*):int"/>
    <method name="pthread_mutex_getprioceiling(const pthread_mutex_t*;int*):int"/>
    <method name="pthread_mutex_init(pthread_mutex_t*;const pthread_mutexattr_t*):int"/>
    <method name="pthread_mutex_lock(pthread_mutex_t*):int"/>
    <method name="pthread_mutex_setprioceiling(pthread_mutex_t*;int;int*):int"/>
    <method name="pthread_mutex_trylock(pthread_mutex_t*):int"/>
    <method name="pthread_mutex_unlock(pthread_mutex_t*):int"/>
    <method name="pthread_mutexattr_destroy(pthread_mutexattr_t*):int"/>
    <method name="pthread_mutexattr_getprioceiling(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_getprotocol(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_getpshared(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_gettype(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_init(pthread_mutexattr_t*):int"/>
    <method name="pthread_mutexattr_setpolicy_np(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_setprioceiling(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_setprotocol(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_setpshared(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_settype(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_once(pthread_once_t*;(*)():void):int"/>
    <method name="pthread_rwlock_destroy(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_downgrade_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_held_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_init(pthread_rwlock_t*;const pthread_rwlockattr_t*):int"/>
    <method name="pthread_rwlock_longrdlock_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_rdheld_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_rdlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_tryrdlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_tryupgrade_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_trywrlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_unlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_upgrade_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_wrheld_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_wrlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_yieldwrlock_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlockattr_destroy(pthread_rwlockattr_t*):int"/>
    <method name="pthread_rwlockattr_getpshared(const pthread_rwlockattr_t*;int*):int"/>
    <method name="pthread_rwlockattr_init(pthread_rwlockattr_t*):int"/>
    <method name="pthread_rwlockattr_setpshared(pthread_rwlockattr_t*;int):int"/>
    <method name="pthread_self():pthread_t"/>
    <method name="pthread_setcancelstate(int;int*):int"/>
    <method name="pthread_setcanceltype(int;int*):int"/>
    <method name="pthread_setconcurrency(int):int"/>
    <method name="pthread_setname_np(const char*):int"/>
    <method name="pthread_setschedparam(pthread_t;int;const struct sched_param*):int"/>
    <method name="pthread_setspecific(pthread_key_t;const void*):int"/>
    <method name="pthread_setugid_np(uid_t;gid_t):int"/>
    <method name="pthread_sigmask(int;const sigset_t*;sigset_t*):int"/>
    <method name="pthread_testcancel():void"/>
    <method name="pthread_threadid_np(pthread_t;__uint64_t*):int"/>
    <method name="pthread_yield_np():void"/>
    <method name="ptsname(int):char*"/>
    <method name="putc(int;FILE*):int"/>
    <method name="putc_unlocked(int;FILE*):int"/>
    <method name="putchar(int):int"/>
    <method name="putchar_unlocked(int):int"/>
    <method name="putenv(char*):int"/>
    <method name="puts(const char*):int"/>
    <method name="pututxline(const struct utmpx*):struct utmpx*"/>
    <method name="putw(int;FILE*):int"/>
    <method name="putwc(wchar_t;FILE*):wint_t"/>
    <method name="putwchar(wchar_t):wint_t"/>
    <method name="pwrite(int;const void*;size_t;off_t):ssize_t"/>
    <method name="qsort(void*;size_t;size_t;(*)(const void*;const void*):int):void"/>
    <method name="qsort_b(void*;size_t;size_t;(^)(const void*;const void*):int):void"/>
    <method name="qsort_r(void*;size_t;size_t;void*;(*)(void*;const void*;const void*):int):void"/>
    <method name="querylocale(int;locale_t):const char*"/>
    <method name="quotactl(const char*;int;int;int):int"/>
    <method name="radixsort(const unsigned char**;int;const unsigned char*;unsigned int):int"/>
    <method name="raise(int):int"/>
    <method name="rand():int"/>
    <method name="rand_r(unsigned int*):int"/>
    <method name="random():long"/>
    <method name="rcmd(char**;int;const char*;const char*;const char*;int*):int"/>
    <method name="rcmd_af(char**;int;const char*;const char*;const char*;int*;int):int"/>
    <method name="read(int;void*;size_t):ssize_t"/>
    <method name="read(int;void*;unsigned int):int"/>
    <method name="read_double(const unsigned char*;const unsigned char**):double"/>
    <method name="read_segment(const unsigned char*;const unsigned char**;NSUInteger*):NSUInteger"/>
    <method name="read_segment_2digits(const unsigned char*;const unsigned char**):NSUInteger"/>
    <method name="read_segment_4digits(const unsigned char*;const unsigned char**;NSUInteger*):NSUInteger"/>
    <method name="readdir(DIR*):dirent*"/>
    <method name="readdir(DIR*):struct dirent*"/>
    <method name="readdir_r(DIR*;dirent*;dirent**):int"/>
    <method name="readdir_r(DIR*;struct dirent*;struct dirent**):int"/>
    <method name="readlink(const char*;char*;size_t):ssize_t"/>
    <method name="readpassphrase(const char*;char*;size_t;int):char*"/>
    <method name="readv(int;const iovec*;int):ssize_t"/>
    <method name="readv(int;const struct iovec*;int):ssize_t"/>
    <method name="realloc(void*;size_t):void*"/>
    <method name="reallocf(void*;size_t):void*"/>
    <method name="realpath(const char*;char*):char*"/>
    <method name="reboot(int):int"/>
    <method name="recv(SOCKET;char*;int;int):int"/>
    <method name="recv(int;void*;size_t;int):ssize_t"/>
    <method name="recvfrom(SOCKET;char*;int;int;sockaddr*;int*):int"/>
    <method name="recvfrom(int;void*;size_t;int;sockaddr*;socklen_t*):ssize_t"/>
    <method name="recvfrom(int;void*;size_t;int;struct sockaddr*;socklen_t*):ssize_t"/>
    <method name="recvmsg(int;msghdr*;int):ssize_t"/>
    <method name="recvmsg(int;struct msghdr*;int):ssize_t"/>
    <method name="regcomp(regex_t*;const char*;int):int"/>
    <method name="regerror(int;const regex_t*;char*;size_t):size_t"/>
    <method name="regexec(const regex_t*;const char*;size_t;regmatch_t*;int):int"/>
    <method name="regfree(regex_t*):void"/>
    <method name="register_callback(event_callback;int):void"/>
    <method name="regncomp(regex_t*;const char*;size_t;int):int"/>
    <method name="regnexec(const regex_t*;const char*;size_t;size_t;regmatch_t*;int):int"/>
    <method name="regwcomp(regex_t*;const wchar_t*;int):int"/>
    <method name="regwexec(const regex_t*;const wchar_t*;size_t;regmatch_t*;int):int"/>
    <method name="regwncomp(regex_t*;const wchar_t*;size_t;int):int"/>
    <method name="regwnexec(const regex_t*;const wchar_t*;size_t;size_t;regmatch_t*;int):int"/>
    <method name="remainder(double;double):double"/>
    <method name="remainderf(float;float):float"/>
    <method name="remainderl(long double;long double):long double"/>
    <method name="remove(const char*):int"/>
    <method name="removeClassFromElement(int;int):int"/>
    <method name="removefile(const char*;removefile_state_t;removefile_flags_t):int"/>
    <method name="removefile_cancel(removefile_state_t):int"/>
    <method name="removefile_state_alloc():removefile_state_t"/>
    <method name="removefile_state_free(removefile_state_t):int"/>
    <method name="removefile_state_get(removefile_state_t;uint32_t;void*):int"/>
    <method name="removefile_state_set(removefile_state_t;uint32_t;const void*):int"/>
    <method name="removexattr(const char*;const char*;int):int"/>
    <method name="remque(void*):void"/>
    <method name="remquo(double;double;int*):double"/>
    <method name="remquof(float;float;int*):float"/>
    <method name="remquol(long double;long double;int*):long double"/>
    <method name="rename(const char*;const char*):int"/>
    <method name="res_9_close():void"/>
    <method name="res_9_dn_count_labels(const char*):int"/>
    <method name="res_9_dnok(const char*):int"/>
    <method name="res_9_getlong(const u_char*):u_int32_t"/>
    <method name="res_9_getshort(const u_char*):u_int16_t"/>
    <method name="res_9_hnok(const char*):int"/>
    <method name="res_9_hostalias_1(const char*):const char*"/>
    <method name="res_9_init():int"/>
    <method name="res_9_isourserver(const struct sockaddr_in*):int"/>
    <method name="res_9_mailok(const char*):int"/>
    <method name="res_9_ninit(res_9_state):int"/>
    <method name="res_9_ns_get16(const u_char*):u_int"/>
    <method name="res_9_ns_get32(const u_char*):u_long"/>
    <method name="res_9_ownok(const char*):int"/>
    <method name="res_9_p_class(int):const char*"/>
    <method name="res_9_p_option(u_long):const char*"/>
    <method name="res_9_p_rcode(int):const char*"/>
    <method name="res_9_p_secstodate(u_long):char*"/>
    <method name="res_9_p_time(u_int32_t):const char*"/>
    <method name="res_9_p_type(int):const char*"/>
    <method name="res_buildprotolist():void"/>
    <method name="res_destroyprotolist():void"/>
    <method name="res_destroyservicelist():void"/>
    <method name="res_get_bitstringsuffix(res_9_state):const char*"/>
    <method name="res_get_nibblesuffix(res_9_state):const char*"/>
    <method name="res_get_nibblesuffix2(res_9_state):const char*"/>
    <method name="res_protocolname(int):const char*"/>
    <method name="restoreImp():void"/>
    <method name="revoke(const char*):int"/>
    <method name="rewind(FILE*):int"/>
    <method name="rewind(FILE*):void"/>
    <method name="rewinddir(DIR*):void"/>
    <method name="rexproc_modes_1(rex_ttymode*;CLIENT*):void*"/>
    <method name="rexproc_modes_1_svc(rex_ttymode*;struct svc_req*):void*"/>
    <method name="rexproc_signal_1(int*;CLIENT*):void*"/>
    <method name="rexproc_signal_1_svc(int*;struct svc_req*):void*"/>
    <method name="rexproc_start_1(rex_start*;CLIENT*):rex_result*"/>
    <method name="rexproc_start_1_svc(rex_start*;struct svc_req*):rex_result*"/>
    <method name="rexproc_wait_1(void*;CLIENT*):rex_result*"/>
    <method name="rexproc_wait_1_svc(void*;struct svc_req*):rex_result*"/>
    <method name="rexproc_winch_1(rex_ttysize*;CLIENT*):void*"/>
    <method name="rexproc_winch_1_svc(rex_ttysize*;struct svc_req*):void*"/>
    <method name="rindex(const char*;int):char*"/>
    <method name="rint(double):double"/>
    <method name="rintf(float):float"/>
    <method name="rintl(long double):long double"/>
    <method name="rinttol(double):long"/>
    <method name="rmdir(const char*):int"/>
    <method name="rmdirp(char*;char*):int"/>
    <method name="round(double):double"/>
    <method name="roundf(float):float"/>
    <method name="roundl(long double):long double"/>
    <method name="roundtol(double):long"/>
    <method name="rpctest_service():void"/>
    <method name="rquotaproc_getactivequota_1(getquota_args*;CLIENT*):getquota_rslt*"/>
    <method name="rquotaproc_getactivequota_1_svc(getquota_args*;struct svc_req*):getquota_rslt*"/>
    <method name="rquotaproc_getquota_1(getquota_args*;CLIENT*):getquota_rslt*"/>
    <method name="rquotaproc_getquota_1_svc(getquota_args*;struct svc_req*):getquota_rslt*"/>
    <method name="rresvport(int*):int"/>
    <method name="rresvport_af(int*;int):int"/>
    <method name="rstat(char*;struct statstime*):enum clnt_stat"/>
    <method name="rstatproc_havedisk_1(void*;CLIENT*):u_int*"/>
    <method name="rstatproc_havedisk_1_svc(void*;struct svc_req*):u_int*"/>
    <method name="rstatproc_havedisk_2(void*;CLIENT*):u_int*"/>
    <method name="rstatproc_havedisk_2_svc(void*;struct svc_req*):u_int*"/>
    <method name="rstatproc_havedisk_3(void*;CLIENT*):u_int*"/>
    <method name="rstatproc_havedisk_3_svc(void*;struct svc_req*):u_int*"/>
    <method name="rstatproc_stats_1(void*;CLIENT*):stats*"/>
    <method name="rstatproc_stats_1_svc(void*;struct svc_req*):stats*"/>
    <method name="rstatproc_stats_2(void*;CLIENT*):statsswtch*"/>
    <method name="rstatproc_stats_2_svc(void*;struct svc_req*):statsswtch*"/>
    <method name="rstatproc_stats_3(void*;CLIENT*):statstime*"/>
    <method name="rstatproc_stats_3_svc(void*;struct svc_req*):statstime*"/>
    <method name="ruserok(const char*;int;const char*;const char*):int"/>
    <method name="rusersproc_allnames_3(void*;CLIENT*):utmp_array*"/>
    <method name="rusersproc_allnames_3_svc(void*;struct svc_req*):utmp_array*"/>
    <method name="rusersproc_names_3(void*;CLIENT*):utmp_array*"/>
    <method name="rusersproc_names_3_svc(void*;struct svc_req*):utmp_array*"/>
    <method name="rusersproc_num_3(void*;CLIENT*):int*"/>
    <method name="rusersproc_num_3_svc(void*;struct svc_req*):int*"/>
    <method name="s2i_ASN1_INTEGER(X509V3_EXT_METHOD*;char*):ASN1_INTEGER*"/>
    <method name="s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD*;X509V3_CTX*;char*):ASN1_OCTET_STRING*"/>
    <method name="safe_gets(char*;char*;int):void"/>
    <method name="sandbox_free_error(char*):void"/>
    <method name="sandbox_init(const char*;uint64_t;char**):int"/>
    <method name="sbdsdc_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sbdsqr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sbrk(int):void*"/>
    <method name="scalb(double;double):double"/>
    <method name="scalbln(double;long):double"/>
    <method name="scalblnf(float;long):float"/>
    <method name="scalblnl(long double;long):long double"/>
    <method name="scalbn(double;int):double"/>
    <method name="scalbnf(float;int):float"/>
    <method name="scalbnl(long double;int):long double"/>
    <method name="scandir(const char*;struct dirent***;(*)(const struct dirent*):int;(*)(const struct dirent**;const struct dirent**):int):int"/>
    <method name="scandir_b(const char*;struct dirent***;(^)(const struct dirent*):int;(^)(const struct dirent**;const struct dirent**):int):int"/>
    <method name="scanf(const char*, ...):int"/>
    <method name="sched_get_priority_max(int):int"/>
    <method name="sched_get_priority_min(int):int"/>
    <method name="sched_yield():int"/>
    <method name="scsum1_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_doublereal"/>
    <method name="sdisna_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="searchfs(const char*;struct fssearchblock*;unsigned long*;unsigned int;unsigned int;struct searchstate*):int"/>
    <method name="seed48(unsigned short*):unsigned short*"/>
    <method name="seekdir(DIR*;long):void"/>
    <method name="sel_getName(SEL):const char*"/>
    <method name="sel_getUid(const char*):SEL"/>
    <method name="sel_isEqual(SEL;SEL):BOOL"/>
    <method name="sel_isMapped(SEL):BOOL"/>
    <method name="sel_registerName(const char*):SEL"/>
    <method name="select(int;fd_set*;fd_set*;fd_set*;const timeval*):int"/>
    <method name="sem_close(sem_t*):int"/>
    <method name="sem_destroy(sem_t*):int"/>
    <method name="sem_getvalue(sem_t*;int*):int"/>
    <method name="sem_init(sem_t*;int;unsigned int):int"/>
    <method name="sem_open(const char*;int, ...):sem_t*"/>
    <method name="sem_post(sem_t*):int"/>
    <method name="sem_trywait(sem_t*):int"/>
    <method name="sem_unlink(const char*):int"/>
    <method name="sem_wait(sem_t*):int"/>
    <method name="semaphore_create(task_t;semaphore_t*;int;int):kern_return_t"/>
    <method name="semaphore_destroy(task_t;semaphore_t):kern_return_t"/>
    <method name="semaphore_signal(semaphore_t):kern_return_t"/>
    <method name="semaphore_signal_all(semaphore_t):kern_return_t"/>
    <method name="semaphore_signal_thread(semaphore_t;thread_t):kern_return_t"/>
    <method name="semaphore_timedwait(semaphore_t;mach_timespec_t):kern_return_t"/>
    <method name="semaphore_timedwait_signal(semaphore_t;semaphore_t;mach_timespec_t):kern_return_t"/>
    <method name="semaphore_wait(semaphore_t):kern_return_t"/>
    <method name="semaphore_wait_signal(semaphore_t;semaphore_t):kern_return_t"/>
    <method name="semctl(int;int;int, ...):int"/>
    <method name="semget(key_t;int;int):int"/>
    <method name="semop(int;struct sembuf*;size_t):int"/>
    <method name="semsys(int, ...):int"/>
    <method name="send(SOCKET;const char*;int;int):int"/>
    <method name="send(int;const void*;size_t;int):ssize_t"/>
    <method name="sendfile(int;int;off_t;off_t*;struct sf_hdtr*;int):int"/>
    <method name="sendmsg(int;const msghdr*;int):ssize_t"/>
    <method name="sendmsg(int;const struct msghdr*;int):ssize_t"/>
    <method name="sendto(SOCKET;const char*;int;int;const sockaddr*;int):int"/>
    <method name="sendto(int;const void*;size_t;int;const sockaddr*;socklen_t):ssize_t"/>
    <method name="sendto(int;const void*;size_t;int;const struct sockaddr*;socklen_t):ssize_t"/>
    <method name="setCopyToClipboardHUD(int):int"/>
    <method name="setExampleTablesWidth(int):int"/>
    <method name="setPrefsCookie():int"/>
    <method name="setPrefsFromCookie():int"/>
    <method name="setTransitionElement(int;int;int):int"/>
    <method name="set_dp_control_port(host_priv_t;mach_port_t):kern_return_t"/>
    <method name="setac():void"/>
    <method name="setattrlist(const char*;void*;void*;size_t;unsigned long):int"/>
    <method name="setauclass():void"/>
    <method name="setaudit(const struct auditinfo*):int"/>
    <method name="setaudit_addr(const struct auditinfo_addr*;int):int"/>
    <method name="setauevent():void"/>
    <method name="setauid(const au_id_t*):int"/>
    <method name="setauuser():void"/>
    <method name="setbuf(FILE*;char*):void"/>
    <method name="setbuffer(FILE*;char*;int):void"/>
    <method name="setdomainname(const char*;int):int"/>
    <method name="setegid(gid_t):int"/>
    <method name="setenv(const char*;const char*;int):int"/>
    <method name="seteuid(uid_t):int"/>
    <method name="setfsent():int"/>
    <method name="setgid(gid_t):int"/>
    <method name="setgrent():void"/>
    <method name="setgrfile(const char*):void"/>
    <method name="setgroupent(int):int"/>
    <method name="setgroups(int;const gid_t*):int"/>
    <method name="sethostent(int):void"/>
    <method name="sethostid(long):void"/>
    <method name="sethostname(const char*;int):int"/>
    <method name="setiopolicy_np(int;int;int):int"/>
    <method name="setipv4sourcefilter(int;struct in_addr;struct in_addr;uint32_t;uint32_t;struct in_addr*):int"/>
    <method name="setitimer(int;const struct itimerval*;struct itimerval*):int"/>
    <method name="setjmp(int*):int"/>
    <method name="setkey(const char*):void"/>
    <method name="setlcid(int;int):int"/>
    <method name="setlinebuf(FILE*):int"/>
    <method name="setlocale(int;const char*):char*"/>
    <method name="setlogin(const char*):int"/>
    <method name="setlogmask(int):int"/>
    <method name="setmode(const char*):void*"/>
    <method name="setnetent(int):void"/>
    <method name="setnetgrent(const char*):void"/>
    <method name="setpassent(int):int"/>
    <method name="setpgid(pid_t;pid_t):int"/>
    <method name="setpgrp():pid_t"/>
    <method name="setprecision(int):struct _Setprecision"/>
    <method name="setpriority(int;id_t;int):int"/>
    <method name="setproctitle(const char * ...): void"/>
    <method name="setprogname(const char*):void"/>
    <method name="setprotoent(int):void"/>
    <method name="setpwent():void"/>
    <method name="setregid(gid_t;gid_t):int"/>
    <method name="setreuid(uid_t;uid_t):int"/>
    <method name="setrgid(gid_t):int"/>
    <method name="setrlimit(int;const struct rlimit*):int"/>
    <method name="setrpcent(int):void"/>
    <method name="setruid(uid_t):int"/>
    <method name="setservent(int):void"/>
    <method name="setsgroups_np(int;const unsigned char*):int"/>
    <method name="setsid():pid_t"/>
    <method name="setsockopt(SOCKET;int;int;const char*;int):int"/>
    <method name="setsockopt(int;int;int;const void*;socklen_t):int"/>
    <method name="setsourcefilter(int;uint32_t;struct sockaddr*;socklen_t;uint32_t;uint32_t;struct sockaddr_storage*):int"/>
    <method name="setstate(const char*):char*"/>
    <method name="settimeofday(const struct timeval*;const struct timezone*):int"/>
    <method name="setttyent():int"/>
    <method name="setuid(uid_t):int"/>
    <method name="setusershell():void"/>
    <method name="setutxent():void"/>
    <method name="setutxent_wtmp(int):void"/>
    <method name="setvbuf(FILE*;char*;int;size_t):int"/>
    <method name="setw(int):struct _Setw"/>
    <method name="setwgroups_np(int;const unsigned char*):int"/>
    <method name="setxattr(const char*;const char*;const void*;size_t;u_int32_t;int):int"/>
    <method name="sgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgebal_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgecon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sgeev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgegs_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgegv_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgejsv_(char*;char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesc2_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="sgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesvj_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetc2_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetri_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggbal_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sggev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgsvj0_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgsvj1_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtcon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgttrf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sheetIndexAndRuleIndexOfCSSRule(int):int"/>
    <method name="shgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="shm_open(const char*;int, ...):int"/>
    <method name="shm_unlink(const char*):int"/>
    <method name="shmat(int;const void*;int):void*"/>
    <method name="shmctl(int;int;struct __shmid_ds_new*):int"/>
    <method name="shmdt(const void*):int"/>
    <method name="shmget(key_t;size_t;int):int"/>
    <method name="shmsys(int, ...):int"/>
    <method name="shsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="shseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="shutdown(SOCKET;int):int"/>
    <method name="shutdown(int;int):int"/>
    <method name="sigaction(int;const struct sigaction*;struct sigaction*):int"/>
    <method name="sigaddset(sigset_t*;int):int"/>
    <method name="sigaltstack(const stack_t*;stack_t*):int"/>
    <method name="sigblock(int):int"/>
    <method name="sigdelset(sigset_t*;int):int"/>
    <method name="sigemptyset(sigset_t*):int"/>
    <method name="sigfillset(sigset_t*):int"/>
    <method name="sighold(int):int"/>
    <method name="sigignore(int):int"/>
    <method name="siginterrupt(int;int):int"/>
    <method name="sigismember(const sigset_t*;int):int"/>
    <method name="siglongjmp(int*;int):void"/>
    <method name="signal(int;(*)(int):void):(*)(int):void"/>
    <method name="significand(double):double"/>
    <method name="sigpause(int):int"/>
    <method name="sigpending(sigset_t*):int"/>
    <method name="sigprocmask(int;const sigset_t*;sigset_t*):int"/>
    <method name="sigrelse(int):int"/>
    <method name="sigset(int;(*)(int):void):(*)(int):void"/>
    <method name="sigsetjmp(int*;int):int"/>
    <method name="sigsetmask(int):int"/>
    <method name="sigsuspend(const sigset_t*):int"/>
    <method name="sigvec(int;struct sigvec*;struct sigvec*):int"/>
    <method name="sigwait(const sigset_t*;int*):int"/>
    <method name="sin(double):double"/>
    <method name="sin(float):float"/>
    <method name="sin(long double):long double"/>
    <method name="sinf(float):float"/>
    <method name="sinh(double):double"/>
    <method name="sinh(float):float"/>
    <method name="sinh(long double):long double"/>
    <method name="sinhf(float):float"/>
    <method name="sinhl(long double):long double"/>
    <method name="sinl(long double):long double"/>
    <method name="sisnan_(__CLPK_real*):__CLPK_logical"/>
    <method name="sk_delete(STACK*;int):char*"/>
    <method name="sk_delete_ptr(STACK*;char*):char*"/>
    <method name="sk_dup(STACK*):STACK*"/>
    <method name="sk_find(STACK*;char*):int"/>
    <method name="sk_find_ex(STACK*;char*):int"/>
    <method name="sk_free(STACK*):void"/>
    <method name="sk_insert(STACK*;char*;int):int"/>
    <method name="sk_is_sorted(const STACK*):int"/>
    <method name="sk_new((*)(const const char**;const const char**):int*):STACK*"/>
    <method name="sk_new_null():STACK*"/>
    <method name="sk_num(const STACK*):int"/>
    <method name="sk_pop(STACK*):char*"/>
    <method name="sk_pop_free(STACK*;(*)(void*):void*):void"/>
    <method name="sk_push(STACK*;char*):int"/>
    <method name="sk_set(STACK*;int;char*):char*"/>
    <method name="sk_set_cmp_func(STACK*;(*)(const const char**;const const char**):int*):(*)(const const char**;const const char**):int*"/>
    <method name="sk_shift(STACK*):char*"/>
    <method name="sk_sort(STACK*):void"/>
    <method name="sk_unshift(STACK*;char*):int"/>
    <method name="sk_value(const STACK*;int):char*"/>
    <method name="sk_zero(STACK*):void"/>
    <method name="sl_add(StringList*;char*):int"/>
    <method name="sl_find(StringList*;char*):char*"/>
    <method name="sl_free(StringList*;int):void"/>
    <method name="sl_init():StringList*"/>
    <method name="slabad_(__CLPK_real*;__CLPK_real*):int"/>
    <method name="slabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slacn2_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slacon_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sladiv_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slae2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaebz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed1_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaed4_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaed5_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaed6_(__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed9_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaeda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaev2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaexc_(__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slag2_(__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slag2d_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slags2_(__CLPK_logical*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slagtf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slagts_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slagv2_(__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaisnan_(__CLPK_real*;__CLPK_real*):__CLPK_logical"/>
    <method name="slaln2_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slamc1_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_logical*):int"/>
    <method name="slamc2_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slamc3_(__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slamc4_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slamc5_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slamch_(char*):__CLPK_doublereal"/>
    <method name="slamrg_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaneg_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="slangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slangt_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slanhs_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansf_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansp_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slanst_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansy_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slantp_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slanv2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slapll_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slapy2_(__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slapy3_(__CLPK_real*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slaqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaqr1_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqsp_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqsy_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqtr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slar2v_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarfg_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarfp_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slargv_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarra_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrb_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrd_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarre_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrj_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrk_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrr_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrv_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slartg_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slartv_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaruv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slas2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasd0_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd1_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasd3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd4_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd5_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasd6_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasd7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd8_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasdq_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasdt_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasq1_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasq2_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasq3_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasq4_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slasq5_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_logical*):int"/>
    <method name="slasq6_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasrt_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slassq_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasv2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaswp_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasy2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slauu2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slauum_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sleep(unsigned int):unsigned int"/>
    <method name="slot_name(cpu_type_t;cpu_subtype_t;char**;char**):void"/>
    <method name="sm_mon_1(struct mon*;CLIENT*):struct sm_stat_res*"/>
    <method name="sm_mon_1_svc(struct mon*;struct svc_req*):struct sm_stat_res*"/>
    <method name="sm_notify_1(struct stat_chge*;CLIENT*):void*"/>
    <method name="sm_notify_1_svc(struct stat_chge*;struct svc_req*):void*"/>
    <method name="sm_simu_crash_1(void*;CLIENT*):void*"/>
    <method name="sm_simu_crash_1_svc(void*;struct svc_req*):void*"/>
    <method name="sm_stat_1(struct sm_name*;CLIENT*):struct sm_stat_res*"/>
    <method name="sm_stat_1_svc(struct sm_name*;struct svc_req*):struct sm_stat_res*"/>
    <method name="sm_unmon_1(struct mon_id*;CLIENT*):struct sm_stat*"/>
    <method name="sm_unmon_1_svc(struct mon_id*;struct svc_req*):struct sm_stat*"/>
    <method name="sm_unmon_all_1(struct my_id*;CLIENT*):struct sm_stat*"/>
    <method name="sm_unmon_all_1_svc(struct my_id*;struct svc_req*):struct sm_stat*"/>
    <method name="smartElementUpdate(int;int;int):int"/>
    <method name="smaxloc_(__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="snprintf(char*;size_t;const char*, ...):int"/>
    <method name="sockatmark(int):int"/>
    <method name="socket(int;int;int):SOCKET"/>
    <method name="socket(int;int;int):int"/>
    <method name="socketpair(int;int;int;int*):int"/>
    <method name="sopgtr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sopmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorg2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorg2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorgbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorgrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgtr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spftrf_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spftri_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spocon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spoequ_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spoequb_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotf2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppcon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppequ_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;char*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spptrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spptri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sprayproc_clear_1(void*;CLIENT*):void*"/>
    <method name="sprayproc_clear_1_svc(void*;struct svc_req*):void*"/>
    <method name="sprayproc_get_1(void*;CLIENT*):spraycumul*"/>
    <method name="sprayproc_get_1_svc(void*;struct svc_req*):spraycumul*"/>
    <method name="sprayproc_spray_1(sprayarr*;CLIENT*):void*"/>
    <method name="sprayproc_spray_1_svc(sprayarr*;struct svc_req*):void*"/>
    <method name="sprintf(char*;const char*, ...):int"/>
    <method name="spstf2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spstrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sptcon_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sptrfs_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spttrf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spttrs_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sqlite3_aggregate_context(sqlite3_context*;int):void*"/>
    <method name="sqlite3_aggregate_count(sqlite3_context*):int"/>
    <method name="sqlite3_auto_extension((*)():void):int"/>
    <method name="sqlite3_backup_finish(sqlite3_backup*):int"/>
    <method name="sqlite3_backup_init(sqlite3*;const char*;sqlite3*;const char*):sqlite3_backup*"/>
    <method name="sqlite3_backup_pagecount(sqlite3_backup*):int"/>
    <method name="sqlite3_backup_remaining(sqlite3_backup*):int"/>
    <method name="sqlite3_backup_step(sqlite3_backup*;int):int"/>
    <method name="sqlite3_bind_blob(sqlite3_stmt*;int;const void*;int;(*)(void*):void):int"/>
    <method name="sqlite3_bind_double(sqlite3_stmt*;int;double):int"/>
    <method name="sqlite3_bind_int(sqlite3_stmt*;int;int):int"/>
    <method name="sqlite3_bind_int64(sqlite3_stmt*;int;sqlite3_int64):int"/>
    <method name="sqlite3_bind_null(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_bind_parameter_count(sqlite3_stmt*):int"/>
    <method name="sqlite3_bind_parameter_index(sqlite3_stmt*;const char*):int"/>
    <method name="sqlite3_bind_parameter_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_bind_text(sqlite3_stmt*;int;const char*;int;(*)(void*):void):int"/>
    <method name="sqlite3_bind_text16(sqlite3_stmt*;int;const void*;int;(*)(void*):void):int"/>
    <method name="sqlite3_bind_value(sqlite3_stmt*;int;const sqlite3_value*):int"/>
    <method name="sqlite3_bind_zeroblob(sqlite3_stmt*;int;int):int"/>
    <method name="sqlite3_blob_bytes(sqlite3_blob*):int"/>
    <method name="sqlite3_blob_close(sqlite3_blob*):int"/>
    <method name="sqlite3_blob_open(sqlite3*;const char*;const char*;const char*;sqlite3_int64;int;sqlite3_blob**):int"/>
    <method name="sqlite3_blob_read(sqlite3_blob*;void*;int;int):int"/>
    <method name="sqlite3_blob_reopen(sqlite3_blob*;sqlite3_int64):int"/>
    <method name="sqlite3_blob_write(sqlite3_blob*;const void*;int;int):int"/>
    <method name="sqlite3_busy_handler(sqlite3*;(*)(void*;int):int;void*):int"/>
    <method name="sqlite3_busy_timeout(sqlite3*;int):int"/>
    <method name="sqlite3_changes(sqlite3*):int"/>
    <method name="sqlite3_clear_bindings(sqlite3_stmt*):int"/>
    <method name="sqlite3_close(sqlite3*):int"/>
    <method name="sqlite3_collation_needed(sqlite3*;void*;(*)(void*;sqlite3*;int;const char*):void):int"/>
    <method name="sqlite3_collation_needed16(sqlite3*;void*;(*)(void*;sqlite3*;int;const void*):void):int"/>
    <method name="sqlite3_column_blob(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_bytes(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_bytes16(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_count(sqlite3_stmt*):int"/>
    <method name="sqlite3_column_database_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_database_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_decltype(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_decltype16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_double(sqlite3_stmt*;int):double"/>
    <method name="sqlite3_column_int(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_int64(sqlite3_stmt*;int):sqlite3_int64"/>
    <method name="sqlite3_column_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_origin_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_origin_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_table_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_table_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_text(sqlite3_stmt*;int):const unsigned char*"/>
    <method name="sqlite3_column_text16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_type(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_value(sqlite3_stmt*;int):sqlite3_value*"/>
    <method name="sqlite3_commit_hook(sqlite3*;(*)(void*):int;void*):void*"/>
    <method name="sqlite3_compileoption_get(int):const char*"/>
    <method name="sqlite3_compileoption_used(const char*):int"/>
    <method name="sqlite3_complete(const char*):int"/>
    <method name="sqlite3_complete16(const void*):int"/>
    <method name="sqlite3_config(int, ...):int"/>
    <method name="sqlite3_context_db_handle(sqlite3_context*):sqlite3*"/>
    <method name="sqlite3_create_collation(sqlite3*;const char*;int;void*;(*)(void*;int;const void*;int;const void*):int):int"/>
    <method name="sqlite3_create_collation16(sqlite3*;const void*;int;void*;(*)(void*;int;const void*;int;const void*):int):int"/>
    <method name="sqlite3_create_collation_v2(sqlite3*;const char*;int;void*;(*)(void*;int;const void*;int;const void*):int;(*)(void*):void):int"/>
    <method name="sqlite3_create_function(sqlite3*;const char*;int;int;void*;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*):void):int"/>
    <method name="sqlite3_create_function16(sqlite3*;const void*;int;int;void*;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*):void):int"/>
    <method name="sqlite3_create_function_v2(sqlite3*;const char*;int;int;void*;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*):void;(*)(void*):void):int"/>
    <method name="sqlite3_create_module(sqlite3*;const char*;const sqlite3_module*;void*):int"/>
    <method name="sqlite3_create_module_v2(sqlite3*;const char*;const sqlite3_module*;void*;(*)(void*):void):int"/>
    <method name="sqlite3_data_count(sqlite3_stmt*):int"/>
    <method name="sqlite3_db_config(sqlite3*;int, ...):int"/>
    <method name="sqlite3_db_filename(sqlite3*;const char*):const char*"/>
    <method name="sqlite3_db_handle(sqlite3_stmt*):sqlite3*"/>
    <method name="sqlite3_db_mutex(sqlite3*):sqlite3_mutex*"/>
    <method name="sqlite3_db_readonly(sqlite3*;const char*):int"/>
    <method name="sqlite3_db_release_memory(sqlite3*):int"/>
    <method name="sqlite3_db_status(sqlite3*;int;int*;int*;int):int"/>
    <method name="sqlite3_declare_vtab(sqlite3*;const char*):int"/>
    <method name="sqlite3_enable_load_extension(sqlite3*;int):int"/>
    <method name="sqlite3_enable_shared_cache(int):int"/>
    <method name="sqlite3_errcode(sqlite3*):int"/>
    <method name="sqlite3_errmsg(sqlite3*):const char*"/>
    <method name="sqlite3_errmsg16(sqlite3*):const void*"/>
    <method name="sqlite3_exec(sqlite3*;const char*;(*)(void*;int;char**;char**):int;void*;char**):int"/>
    <method name="sqlite3_expired(sqlite3_stmt*):int"/>
    <method name="sqlite3_extended_errcode(sqlite3*):int"/>
    <method name="sqlite3_extended_result_codes(sqlite3*;int):int"/>
    <method name="sqlite3_file_control(sqlite3*;const char*;int;void*):int"/>
    <method name="sqlite3_finalize(sqlite3_stmt*):int"/>
    <method name="sqlite3_free(void*):void"/>
    <method name="sqlite3_free_table(char**):void"/>
    <method name="sqlite3_get_autocommit(sqlite3*):int"/>
    <method name="sqlite3_get_auxdata(sqlite3_context*;int):void*"/>
    <method name="sqlite3_get_table(sqlite3*;const char*;char***;int*;int*;char**):int"/>
    <method name="sqlite3_global_recover():int"/>
    <method name="sqlite3_initialize():int"/>
    <method name="sqlite3_interrupt(sqlite3*):void"/>
    <method name="sqlite3_last_insert_rowid(sqlite3*):sqlite3_int64"/>
    <method name="sqlite3_libversion():const char*"/>
    <method name="sqlite3_libversion_number():int"/>
    <method name="sqlite3_limit(sqlite3*;int;int):int"/>
    <method name="sqlite3_load_extension(sqlite3*;const char*;const char*;char**):int"/>
    <method name="sqlite3_log(int;const char*, ...):void"/>
    <method name="sqlite3_malloc(int):void*"/>
    <method name="sqlite3_memory_alarm((*)(void*;sqlite3_int64;int):void;void*;sqlite3_int64):int"/>
    <method name="sqlite3_memory_highwater(int):sqlite3_int64"/>
    <method name="sqlite3_memory_used():sqlite3_int64"/>
    <method name="sqlite3_mprintf(const char*, ...):char*"/>
    <method name="sqlite3_mutex_alloc(int):sqlite3_mutex*"/>
    <method name="sqlite3_mutex_enter(sqlite3_mutex*):void"/>
    <method name="sqlite3_mutex_free(sqlite3_mutex*):void"/>
    <method name="sqlite3_mutex_held(sqlite3_mutex*):int"/>
    <method name="sqlite3_mutex_leave(sqlite3_mutex*):void"/>
    <method name="sqlite3_mutex_notheld(sqlite3_mutex*):int"/>
    <method name="sqlite3_mutex_try(sqlite3_mutex*):int"/>
    <method name="sqlite3_next_stmt(sqlite3*;sqlite3_stmt*):sqlite3_stmt*"/>
    <method name="sqlite3_open(const char*;sqlite3**):int"/>
    <method name="sqlite3_open16(const void*;sqlite3**):int"/>
    <method name="sqlite3_open_v2(const char*;sqlite3**;int;const char*):int"/>
    <method name="sqlite3_os_end():int"/>
    <method name="sqlite3_os_init():int"/>
    <method name="sqlite3_overload_function(sqlite3*;const char*;int):int"/>
    <method name="sqlite3_prepare(sqlite3*;const char*;int;sqlite3_stmt**;const char**):int"/>
    <method name="sqlite3_prepare16(sqlite3*;const void*;int;sqlite3_stmt**;const void**):int"/>
    <method name="sqlite3_prepare16_v2(sqlite3*;const void*;int;sqlite3_stmt**;const void**):int"/>
    <method name="sqlite3_prepare_v2(sqlite3*;const char*;int;sqlite3_stmt**;const char**):int"/>
    <method name="sqlite3_profile(sqlite3*;(*)(void*;const char*;sqlite3_uint64):void;void*):void*"/>
    <method name="sqlite3_progress_handler(sqlite3*;int;(*)(void*):int;void*):void"/>
    <method name="sqlite3_randomness(int;void*):void"/>
    <method name="sqlite3_realloc(void*;int):void*"/>
    <method name="sqlite3_release_memory(int):int"/>
    <method name="sqlite3_reset(sqlite3_stmt*):int"/>
    <method name="sqlite3_reset_auto_extension():void"/>
    <method name="sqlite3_result_blob(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_double(sqlite3_context*;double):void"/>
    <method name="sqlite3_result_error(sqlite3_context*;const char*;int):void"/>
    <method name="sqlite3_result_error16(sqlite3_context*;const void*;int):void"/>
    <method name="sqlite3_result_error_code(sqlite3_context*;int):void"/>
    <method name="sqlite3_result_error_nomem(sqlite3_context*):void"/>
    <method name="sqlite3_result_error_toobig(sqlite3_context*):void"/>
    <method name="sqlite3_result_int(sqlite3_context*;int):void"/>
    <method name="sqlite3_result_int64(sqlite3_context*;sqlite3_int64):void"/>
    <method name="sqlite3_result_null(sqlite3_context*):void"/>
    <method name="sqlite3_result_text(sqlite3_context*;const char*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_text16(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_text16be(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_text16le(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_value(sqlite3_context*;sqlite3_value*):void"/>
    <method name="sqlite3_result_zeroblob(sqlite3_context*;int):void"/>
    <method name="sqlite3_rollback_hook(sqlite3*;(*)(void*):void;void*):void*"/>
    <method name="sqlite3_rtree_geometry_callback(sqlite3*;const char*;(*)(sqlite3_rtree_geometry*;int;double*;int*):int;void*):int"/>
    <method name="sqlite3_set_authorizer(sqlite3*;(*)(void*;int;const char*;const char*;const char*;const char*):int;void*):int"/>
    <method name="sqlite3_set_auxdata(sqlite3_context*;int;void*;(*)(void*):void):void"/>
    <method name="sqlite3_shutdown():int"/>
    <method name="sqlite3_sleep(int):int"/>
    <method name="sqlite3_snprintf(int;char*;const char*, ...):char*"/>
    <method name="sqlite3_soft_heap_limit(int):void"/>
    <method name="sqlite3_soft_heap_limit64(sqlite3_int64):sqlite3_int64"/>
    <method name="sqlite3_sourceid():const char*"/>
    <method name="sqlite3_sql(sqlite3_stmt*):const char*"/>
    <method name="sqlite3_status(int;int*;int*;int):int"/>
    <method name="sqlite3_step(sqlite3_stmt*):int"/>
    <method name="sqlite3_stmt_busy(sqlite3_stmt*):int"/>
    <method name="sqlite3_stmt_readonly(sqlite3_stmt*):int"/>
    <method name="sqlite3_stmt_status(sqlite3_stmt*;int;int):int"/>
    <method name="sqlite3_stricmp(const char*;const char*):int"/>
    <method name="sqlite3_strnicmp(const char*;const char*;int):int"/>
    <method name="sqlite3_table_column_metadata(sqlite3*;const char*;const char*;const char*;const char**;const char**;int*;int*;int*):int"/>
    <method name="sqlite3_test_control(int, ...):int"/>
    <method name="sqlite3_thread_cleanup():void"/>
    <method name="sqlite3_threadsafe():int"/>
    <method name="sqlite3_total_changes(sqlite3*):int"/>
    <method name="sqlite3_trace(sqlite3*;(*)(void*;const char*):void;void*):void*"/>
    <method name="sqlite3_transfer_bindings(sqlite3_stmt*;sqlite3_stmt*):int"/>
    <method name="sqlite3_unlock_notify(sqlite3*;(*)(void**;int):void;void*):int"/>
    <method name="sqlite3_update_hook(sqlite3*;(*)(void*;int;const char*;const char*;sqlite3_int64):void;void*):void*"/>
    <method name="sqlite3_uri_boolean(const char*;const char*;int):int"/>
    <method name="sqlite3_uri_int64(const char*;const char*;sqlite3_int64):sqlite3_int64"/>
    <method name="sqlite3_uri_parameter(const char*;const char*):const char*"/>
    <method name="sqlite3_user_data(sqlite3_context*):void*"/>
    <method name="sqlite3_value_blob(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_bytes(sqlite3_value*):int"/>
    <method name="sqlite3_value_bytes16(sqlite3_value*):int"/>
    <method name="sqlite3_value_double(sqlite3_value*):double"/>
    <method name="sqlite3_value_int(sqlite3_value*):int"/>
    <method name="sqlite3_value_int64(sqlite3_value*):sqlite3_int64"/>
    <method name="sqlite3_value_numeric_type(sqlite3_value*):int"/>
    <method name="sqlite3_value_text(sqlite3_value*):const unsigned char*"/>
    <method name="sqlite3_value_text16(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_text16be(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_text16le(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_type(sqlite3_value*):int"/>
    <method name="sqlite3_vfs_find(const char*):sqlite3_vfs*"/>
    <method name="sqlite3_vfs_register(sqlite3_vfs*;int):int"/>
    <method name="sqlite3_vfs_unregister(sqlite3_vfs*):int"/>
    <method name="sqlite3_vmprintf(const char*;va_list):char*"/>
    <method name="sqlite3_vsnprintf(int;char*;const char*;va_list):char*"/>
    <method name="sqlite3_vtab_config(sqlite3*;int, ...):int"/>
    <method name="sqlite3_vtab_on_conflict(sqlite3*):int"/>
    <method name="sqlite3_wal_autocheckpoint(sqlite3*;int):int"/>
    <method name="sqlite3_wal_checkpoint(sqlite3*;const char*):int"/>
    <method name="sqlite3_wal_checkpoint_v2(sqlite3*;const char*;int;int*;int*):int"/>
    <method name="sqlite3_wal_hook(sqlite3*;(*)(void*;sqlite3*;const char*;int):int;void*):void*"/>
    <method name="sqrt(double):double"/>
    <method name="sqrt(float):float"/>
    <method name="sqrt(long double):long double"/>
    <method name="sqrtf(float):float"/>
    <method name="sqrtl(long double):long double"/>
    <method name="sradixsort(const unsigned char**;int;const unsigned char*;unsigned int):int"/>
    <method name="srand(unsigned int):void"/>
    <method name="srand48(long):void"/>
    <method name="sranddev():void"/>
    <method name="srandom(unsigned int):void"/>
    <method name="srandomdev():void"/>
    <method name="srscl_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sscanf(const char*;const char*, ...):int"/>
    <method name="ssfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="sspcon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sspevd_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspevx_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sspgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sspgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssptrd_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssptrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssptri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstebz_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstedc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstegr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstein_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstemr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssterf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sstev_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sstevd_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstevr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstevx_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssycon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyequb_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssyev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyevd_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyevr_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyevx_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytd2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssytf2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytrd_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stat(const char*;stat*):int"/>
    <method name="stat(const char*;struct stat*):int"/>
    <method name="statfs(const char*;struct statfs*):int"/>
    <method name="statvfs(const char*;struct statvfs*):int"/>
    <method name="statx_np(const char*;struct stat*;filesec_t):int"/>
    <method name="stbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="std._String_iterator&lt;*&gt;.iterator&lt;*&gt;.operator*(*):*"/>
    <method name="std.basic_ios&lt;*&gt;.operator void *(*):*"/>
    <method name="std.basic_istream&lt;*&gt;.get(*):*"/>
    <method name="std.basic_istream&lt;*&gt;.getline(*):*"/>
    <method name="std.basic_istream&lt;*&gt;.peek(*):*"/>
    <method name="std.basic_istream&lt;*&gt;.read(*):*"/>
    <method name="std.basic_ostream&lt;*&gt;.put(*):*"/>
    <method name="std.basic_ostream&lt;*&gt;.write(*):*"/>
    <method name="std.basic_string&lt;*&gt;.append(*):*"/>
    <method name="std.basic_string&lt;*&gt;.assign(*):*"/>
    <method name="std.basic_string&lt;*&gt;.at(*):*"/>
    <method name="std.basic_string&lt;*&gt;.begin(*):*"/>
    <method name="std.basic_string&lt;*&gt;.c_str(*):*"/>
    <method name="std.basic_string&lt;*&gt;.capacity(*):*"/>
    <method name="std.basic_string&lt;*&gt;.clear(*):*"/>
    <method name="std.basic_string&lt;*&gt;.compare(*):*"/>
    <method name="std.basic_string&lt;*&gt;.copy(*):*"/>
    <method name="std.basic_string&lt;*&gt;.data(*):*"/>
    <method name="std.basic_string&lt;*&gt;.empty(*):*"/>
    <method name="std.basic_string&lt;*&gt;.end(*):*"/>
    <method name="std.basic_string&lt;*&gt;.erase(*):*"/>
    <method name="std.basic_string&lt;*&gt;.find(*):*"/>
    <method name="std.basic_string&lt;*&gt;.find_first_not_of(*):*"/>
    <method name="std.basic_string&lt;*&gt;.find_first_of(*):*"/>
    <method name="std.basic_string&lt;*&gt;.find_last_not_of(*):*"/>
    <method name="std.basic_string&lt;*&gt;.find_last_of(*):*"/>
    <method name="std.basic_string&lt;*&gt;.insert(*):*"/>
    <method name="std.basic_string&lt;*&gt;.iterator&lt;*&gt;.operator*(*):*"/>
    <method name="std.basic_string&lt;*&gt;.length(*):*"/>
    <method name="std.basic_string&lt;*&gt;.max_size(*):*"/>
    <method name="std.basic_string&lt;*&gt;.operator+=(*):*"/>
    <method name="std.basic_string&lt;*&gt;.operator[](*):*"/>
    <method name="std.basic_string&lt;*&gt;.push_back(*):*"/>
    <method name="std.basic_string&lt;*&gt;.rbegin(*):*"/>
    <method name="std.basic_string&lt;*&gt;.rend(*):*"/>
    <method name="std.basic_string&lt;*&gt;.replace(*):*"/>
    <method name="std.basic_string&lt;*&gt;.reserve(*):*"/>
    <method name="std.basic_string&lt;*&gt;.resize(*):*"/>
    <method name="std.basic_string&lt;*&gt;.rfind(*):*"/>
    <method name="std.basic_string&lt;*&gt;.size(*):*"/>
    <method name="std.basic_string&lt;*&gt;.substr(*):*"/>
    <method name="std.basic_string&lt;*&gt;.swap(*):*"/>
    <method name="std.list&lt;*&gt;.push_front(*):*"/>
    <method name="stfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stftri_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stfttp_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stfttr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stpcpy(char*;const char*):char*"/>
    <method name="stpncpy(char*;const char*;size_t):char*"/>
    <method name="stprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stptri_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stpttf_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stpttr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strForChar(int):const char*"/>
    <method name="strcadd(char*;const char*):char*"/>
    <method name="strcasecmp(const char*;const char*):int"/>
    <method name="strcasecmp_l(const char*;const char*;int):int"/>
    <method name="strcasestr(const char*;const char*):char*"/>
    <method name="strcasestr_l(const char*;const char*;int):char*"/>
    <method name="strcat(char*;const char*):char*"/>
    <method name="strccpy(char*;const char*):char*"/>
    <method name="strchr(char*;int):char*"/>
    <method name="strchr(const char*;int):char*"/>
    <method name="strcmp(const char*;const char*):int"/>
    <method name="strcmpcasenosensitive_internal(const char*;const char*):int"/>
    <method name="strcoll(const char*;const char*):int"/>
    <method name="strcon_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strcpy(char*;const char*):char*"/>
    <method name="strcspn(const char*;const char*):size_t"/>
    <method name="strdup(const char*):char*"/>
    <method name="streadd(char*;const char*;const char*):char*"/>
    <method name="strecpy(char*;const char*;const char*):char*"/>
    <method name="strerror(int):char*"/>
    <method name="strerror_r(int;char*;size_t):int"/>
    <method name="strevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strexc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strfmon(char*;size_t;const char*, ...):ssize_t"/>
    <method name="strftime(char*;size_t;const char*;const struct tm*):size_t"/>
    <method name="stringToEscapedString(int;int):int"/>
    <method name="string_to_hex(char*;long*):unsigned char*"/>
    <method name="strlcat(char*;const char*;size_t):size_t"/>
    <method name="strlcpy(char*;const char*;size_t):size_t"/>
    <method name="strlen(const char*):size_t"/>
    <method name="strmode(int;char*):void"/>
    <method name="strncasecmp(const char*;const char*;size_t):int"/>
    <method name="strncasecmp_l(const char*;const char*;int;int):int"/>
    <method name="strncat(char*;const char*;size_t):char*"/>
    <method name="strncmp(const char*;const char*;size_t):int"/>
    <method name="strncpy(char*;const char*;size_t):char*"/>
    <method name="strndup(const char*;size_t):char*"/>
    <method name="strnlen(const char*;size_t):size_t"/>
    <method name="strnstr(const char*;const char*;size_t):char*"/>
    <method name="strpbrk(char*;const char*):char*"/>
    <method name="strpbrk(const char*;const char*):char*"/>
    <method name="strptime(const char*;const char*;struct tm*):char*"/>
    <method name="strrchr(char*;int):char*"/>
    <method name="strrchr(const char*;int):char*"/>
    <method name="strrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strsep(char**;const char*):char*"/>
    <method name="strsignal(int):char*"/>
    <method name="strsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strspn(const char*;const char*):size_t"/>
    <method name="strstr(char*;const char*):char*"/>
    <method name="strstr(const char*;const char*):char*"/>
    <method name="strsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strti2_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strtod(const char*;char**):double"/>
    <method name="strtof(const char*;char**):float"/>
    <method name="strtofflags(char**;unsigned long*;unsigned long*):int"/>
    <method name="strtoimax(const char*;char**;int):intmax_t"/>
    <method name="strtok(char*;const char*):char*"/>
    <method name="strtok_r(char*;const char*;char**):char*"/>
    <method name="strtol(const char*;char**;int):long"/>
    <method name="strtol_l(const char*;char**;int;int):long"/>
    <method name="strtold(const char*;char**):long double"/>
    <method name="strtold_l(const char*;char**;int):long double"/>
    <method name="strtoll(const char*;char**;int):long long"/>
    <method name="strtoll_l(const char*;char**;int;int):long long"/>
    <method name="strtoq(const char*;char**;int):long long"/>
    <method name="strtoq_l(const char*;char**;int;int):long long"/>
    <method name="strtoul(const char*;char**;int):unsigned long"/>
    <method name="strtoul_l(const char*;char**;int;int):unsigned long"/>
    <method name="strtoull(const char*;char**;int):unsigned long long"/>
    <method name="strtoull_l(const char*;char**;int;int):unsigned long long"/>
    <method name="strtoumax(const char*;char**;int):uintmax_t"/>
    <method name="strtoumax_l(const char*;char**;int;int):int"/>
    <method name="strtouq(const char*;char**;int):unsigned long long"/>
    <method name="strtouq_l(const char*;char**;int;int):unsigned long long"/>
    <method name="strtri_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strtrns(const char*;const char*;const char*;char*):char*"/>
    <method name="strtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strttf_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strttp_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strunvis(char*;const char*):int"/>
    <method name="strunvisx(char*;const char*;int):int"/>
    <method name="strvis(char*;const char*;int):int"/>
    <method name="strvisx(char*;const char*;size_t;int):int"/>
    <method name="strxfrm(char*;const char*;size_t):size_t"/>
    <method name="strxfrm_l(char*;const char*;int;int):int"/>
    <method name="stzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="svc_getreq(int):void"/>
    <method name="svc_getreqset(int*):void"/>
    <method name="svc_register(SVCXPRT*;unsigned long;unsigned long;void ()*;int):int"/>
    <method name="svc_run():void"/>
    <method name="svc_sendreply(SVCXPRT*;int;char*):int"/>
    <method name="svc_unregister(unsigned long;unsigned long):void"/>
    <method name="svcerr_auth(SVCXPRT*;enum auth_stat):void"/>
    <method name="svcerr_decode(SVCXPRT*):void"/>
    <method name="svcerr_noproc(SVCXPRT*):void"/>
    <method name="svcerr_noprog(SVCXPRT*):void"/>
    <method name="svcerr_progvers(SVCXPRT*;unsigned long;unsigned long):void"/>
    <method name="svcerr_systemerr(SVCXPRT*):void"/>
    <method name="svcerr_weakauth(SVCXPRT*):void"/>
    <method name="svcfd_create(int;int;int):SVCXPRT*"/>
    <method name="svcraw_create():SVCXPRT*"/>
    <method name="svctcp_create(int;unsigned int;unsigned int):SVCXPRT*"/>
    <method name="svcudp_bufcreate(int;unsigned int;unsigned int):SVCXPRT*"/>
    <method name="svcudp_create(int):SVCXPRT*"/>
    <method name="swab(const void*;void*;ssize_t):void"/>
    <method name="swapon(const char*):int"/>
    <method name="swprintf(wchar_t*;const wchar_t*, ...):int"/>
    <method name="swprintf(wchar_t*;size_t;const wchar_t*, ...):int"/>
    <method name="swprintf_l(int*;int;int;const int*, ...):int"/>
    <method name="swscanf(const wchar_t*;const wchar_t*, ...):int"/>
    <method name="swscanf_l(const int*;int;const int*, ...):int"/>
    <method name="swtch():boolean_t"/>
    <method name="swtch_pri(int):boolean_t"/>
    <method name="symlink(const char*;const char*):int"/>
    <method name="sync():void"/>
    <method name="sync_volume_np(const char*;int):int"/>
    <method name="sys_cache_control(int;void*;size_t):int"/>
    <method name="sys_dcache_flush(void*;size_t):void"/>
    <method name="sys_icache_invalidate(void*;size_t):void"/>
    <method name="syscall(int, ...):int"/>
    <method name="sysconf(int):long"/>
    <method name="sysctl(int*;u_int;void*;size_t*;void*;size_t):int"/>
    <method name="sysctlbyname(const char*;void*;size_t*;void*;size_t):int"/>
    <method name="sysctlnametomib(const char*;int*;size_t*):int"/>
    <method name="syslog(int;const char*, ...):void"/>
    <method name="syslog(int;const signed char*, ...):void"/>
    <method name="system(const char*):int"/>
    <method name="tan(double):double"/>
    <method name="tan(float):float"/>
    <method name="tan(long double):long double"/>
    <method name="tanf(float):float"/>
    <method name="tanh(double):double"/>
    <method name="tanh(float):float"/>
    <method name="tanh(long double):long double"/>
    <method name="tanhf(float):float"/>
    <method name="tanhl(long double):long double"/>
    <method name="tanl(long double):long double"/>
    <method name="task_assign(task_t;processor_set_t;boolean_t):kern_return_t"/>
    <method name="task_assign_default(task_t;boolean_t):kern_return_t"/>
    <method name="task_create(task_t;ledger_array_t;mach_msg_type_number_t;boolean_t;task_t*):kern_return_t"/>
    <method name="task_for_pid(mach_port_name_t;int;mach_port_name_t*):kern_return_t"/>
    <method name="task_get_assignment(task_t;processor_set_name_t*):kern_return_t"/>
    <method name="task_get_emulation_vector(task_t;int*;emulation_vector_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_get_exception_ports(task_t;exception_mask_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="task_get_special_port(task_t;int;mach_port_t*):kern_return_t"/>
    <method name="task_get_state(task_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_info(task_name_t;task_flavor_t;task_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_name_for_pid(mach_port_name_t;int;mach_port_name_t*):kern_return_t"/>
    <method name="task_policy(task_t;policy_t;policy_base_t;mach_msg_type_number_t;boolean_t;boolean_t):kern_return_t"/>
    <method name="task_policy_get(task_t;task_policy_flavor_t;task_policy_t;mach_msg_type_number_t*;boolean_t*):kern_return_t"/>
    <method name="task_policy_set(task_t;task_policy_flavor_t;task_policy_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_resume(task_t):kern_return_t"/>
    <method name="task_sample(task_t;mach_port_t):kern_return_t"/>
    <method name="task_self_trap():mach_port_name_t"/>
    <method name="task_set_emulation(task_t;vm_address_t;int):kern_return_t"/>
    <method name="task_set_emulation_vector(task_t;int;emulation_vector_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_set_exception_ports(task_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):kern_return_t"/>
    <method name="task_set_info(task_t;task_flavor_t;task_info_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_set_policy(task_t;processor_set_t;policy_t;policy_base_t;mach_msg_type_number_t;policy_limit_t;mach_msg_type_number_t;boolean_t):kern_return_t"/>
    <method name="task_set_port_space(ipc_space_t;int):kern_return_t"/>
    <method name="task_set_ras_pc(task_t;vm_address_t;vm_address_t):kern_return_t"/>
    <method name="task_set_special_port(task_t;int;mach_port_t):kern_return_t"/>
    <method name="task_set_state(task_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_suspend(task_t):kern_return_t"/>
    <method name="task_swap_exception_ports(task_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="task_terminate(task_t):kern_return_t"/>
    <method name="task_threads(task_t;thread_act_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_wire(vm_map_t;boolean_t):kern_return_t"/>
    <method name="task_zone_info(task_t;mach_zone_name_array_t*;mach_msg_type_number_t*;task_zone_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="tcdrain(int):int"/>
    <method name="tcflow(int;int):int"/>
    <method name="tcflush(int;int):int"/>
    <method name="tcgetattr(int;struct termios*):int"/>
    <method name="tcgetpgrp(int):pid_t"/>
    <method name="tcgetsid(int):pid_t"/>
    <method name="tcsendbreak(int;int):int"/>
    <method name="tcsetattr(int;int;const struct termios*):int"/>
    <method name="tcsetpgrp(int;pid_t):int"/>
    <method name="tdelete(const void*;void**;(*)(const void*;const void*):int):void*"/>
    <method name="telldir(DIR*):long"/>
    <method name="tempnam(const char*;const char*):char*"/>
    <method name="tfind(const void*;const void**;(*)(const void*;const void*):int):void*"/>
    <method name="tgamma(double):double"/>
    <method name="tgammaf(float):float"/>
    <method name="tgammal(long double):long double"/>
    <method name="thread_abort(thread_act_t):kern_return_t"/>
    <method name="thread_abort_safely(thread_act_t):kern_return_t"/>
    <method name="thread_assign(thread_act_t;processor_set_t):kern_return_t"/>
    <method name="thread_assign_default(thread_act_t):kern_return_t"/>
    <method name="thread_create(task_t;thread_act_t*):kern_return_t"/>
    <method name="thread_create_running(task_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t;thread_act_t*):kern_return_t"/>
    <method name="thread_depress_abort(thread_act_t):kern_return_t"/>
    <method name="thread_get_assignment(thread_act_t;processor_set_name_t*):kern_return_t"/>
    <method name="thread_get_exception_ports(thread_act_t;exception_mask_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="thread_get_special_port(thread_act_t;int;mach_port_t*):kern_return_t"/>
    <method name="thread_get_state(thread_act_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="thread_info(thread_act_t;thread_flavor_t;thread_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="thread_policy(thread_act_t;policy_t;policy_base_t;mach_msg_type_number_t;boolean_t):kern_return_t"/>
    <method name="thread_policy_get(thread_act_t;thread_policy_flavor_t;thread_policy_t;mach_msg_type_number_t*;boolean_t*):kern_return_t"/>
    <method name="thread_policy_set(thread_act_t;thread_policy_flavor_t;thread_policy_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="thread_resume(thread_act_t):kern_return_t"/>
    <method name="thread_sample(thread_act_t;mach_port_t):kern_return_t"/>
    <method name="thread_set_exception_ports(thread_act_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):kern_return_t"/>
    <method name="thread_set_policy(thread_act_t;processor_set_t;policy_t;policy_base_t;mach_msg_type_number_t;policy_limit_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="thread_set_special_port(thread_act_t;int;mach_port_t):kern_return_t"/>
    <method name="thread_set_state(thread_act_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="thread_suspend(thread_act_t):kern_return_t"/>
    <method name="thread_swap_exception_ports(thread_act_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="thread_switch(mach_port_name_t;int;mach_msg_timeout_t):kern_return_t"/>
    <method name="thread_terminate(thread_act_t):kern_return_t"/>
    <method name="thread_wire(host_priv_t;thread_act_t;boolean_t):kern_return_t"/>
    <method name="time(time_t*):time_t"/>
    <method name="time2posix(time_t):time_t"/>
    <method name="timegm(const struct tm*):time_t"/>
    <method name="timelocal(const struct tm*):time_t"/>
    <method name="times(struct tms*):clock_t"/>
    <method name="timestampString():int"/>
    <method name="tmpfile():FILE*"/>
    <method name="tmpnam(char*):char*"/>
    <method name="toascii(int):int"/>
    <method name="tolower(int):int"/>
    <method name="toupper(int):int"/>
    <method name="towctrans(wint_t;wctrans_t):wint_t"/>
    <method name="towlower(wint_t):wint_t"/>
    <method name="towupper(wint_t):wint_t"/>
    <method name="trunc(double):double"/>
    <method name="truncate(const char*;off_t):int"/>
    <method name="truncf(float):float"/>
    <method name="truncl(long double):long double"/>
    <method name="tsearch(const void*;void**;(*)(const void*;const void*):int):void*"/>
    <method name="ttyaction(char*;char*;char*):int"/>
    <method name="ttylock(const char*;int;pid_t*):int"/>
    <method name="ttymsg(struct iovec*;int;const char*;int):char*"/>
    <method name="ttyname(int):char*"/>
    <method name="ttyname_r(int;char*;size_t):int"/>
    <method name="ttyslot():int"/>
    <method name="ttyunlock(const char*):int"/>
    <method name="twalk(const void*;(*)(const void*;VISIT;int):void):void"/>
    <method name="tzset():void"/>
    <method name="tzsetwall():void"/>
    <method name="u_UCharsToChars(const UChar*;char*;int32_t):void"/>
    <method name="u_austrcpy(char*;const UChar*):char*"/>
    <method name="u_austrncpy(char*;const UChar*;int32_t):char*"/>
    <method name="u_charAge(UChar32;uint8_t*):void"/>
    <method name="u_charDigitValue(UChar32):int32_t"/>
    <method name="u_charDirection(UChar32):UCharDirection"/>
    <method name="u_charFromName(UCharNameChoice;const char*;UErrorCode*):UChar32"/>
    <method name="u_charMirror(UChar32):UChar32"/>
    <method name="u_charName(UChar32;UCharNameChoice;char*;int32_t;UErrorCode*):int32_t"/>
    <method name="u_charType(UChar32):int8_t"/>
    <method name="u_charsToUChars(const char*;UChar*;int32_t):void"/>
    <method name="u_countChar32(const UChar*;int32_t):int32_t"/>
    <method name="u_digit(UChar32;int8_t):int32_t"/>
    <method name="u_enumCharNames(UChar32;UChar32;(*)(void*;UChar32;UCharNameChoice;const char*;int32_t):UBool;void*;UCharNameChoice;UErrorCode*):void"/>
    <method name="u_enumCharTypes((*)(const void*;UChar32;UChar32;UCharCategory):UBool;const void*):void"/>
    <method name="u_errorName(UErrorCode):const char*"/>
    <method name="u_foldCase(UChar32;uint32_t):UChar32"/>
    <method name="u_forDigit(int32_t;int8_t):UChar32"/>
    <method name="u_getCombiningClass(UChar32):uint8_t"/>
    <method name="u_getDataDirectory():const char*"/>
    <method name="u_getFC_NFKC_Closure(UChar32;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="u_getISOComment(UChar32;char*;int32_t;UErrorCode*):int32_t"/>
    <method name="u_getIntPropertyMaxValue(UProperty):int32_t"/>
    <method name="u_getIntPropertyMinValue(UProperty):int32_t"/>
    <method name="u_getIntPropertyValue(UChar32;UProperty):int32_t"/>
    <method name="u_getNumericValue(UChar32):double"/>
    <method name="u_getPropertyEnum(const char*):UProperty"/>
    <method name="u_getPropertyName(UProperty;UPropertyNameChoice):const char*"/>
    <method name="u_getPropertyValueEnum(UProperty;const char*):int32_t"/>
    <method name="u_getPropertyValueName(UProperty;int32_t;UPropertyNameChoice):const char*"/>
    <method name="u_getUnicodeVersion(uint8_t*):void"/>
    <method name="u_getVersion(uint8_t*):void"/>
    <method name="u_hasBinaryProperty(UChar32;UProperty):UBool"/>
    <method name="u_isIDIgnorable(UChar32):UBool"/>
    <method name="u_isIDPart(UChar32):UBool"/>
    <method name="u_isIDStart(UChar32):UBool"/>
    <method name="u_isISOControl(UChar32):UBool"/>
    <method name="u_isJavaIDPart(UChar32):UBool"/>
    <method name="u_isJavaIDStart(UChar32):UBool"/>
    <method name="u_isJavaSpaceChar(UChar32):UBool"/>
    <method name="u_isMirrored(UChar32):UBool"/>
    <method name="u_isUAlphabetic(UChar32):UBool"/>
    <method name="u_isULowercase(UChar32):UBool"/>
    <method name="u_isUUppercase(UChar32):UBool"/>
    <method name="u_isUWhiteSpace(UChar32):UBool"/>
    <method name="u_isWhitespace(UChar32):UBool"/>
    <method name="u_isalnum(UChar32):UBool"/>
    <method name="u_isalpha(UChar32):UBool"/>
    <method name="u_isbase(UChar32):UBool"/>
    <method name="u_isblank(UChar32):UBool"/>
    <method name="u_iscntrl(UChar32):UBool"/>
    <method name="u_isdefined(UChar32):UBool"/>
    <method name="u_isdigit(UChar32):UBool"/>
    <method name="u_isgraph(UChar32):UBool"/>
    <method name="u_islower(UChar32):UBool"/>
    <method name="u_isprint(UChar32):UBool"/>
    <method name="u_ispunct(UChar32):UBool"/>
    <method name="u_isspace(UChar32):UBool"/>
    <method name="u_istitle(UChar32):UBool"/>
    <method name="u_isupper(UChar32):UBool"/>
    <method name="u_isxdigit(UChar32):UBool"/>
    <method name="u_memcasecmp(const UChar*;const UChar*;int32_t;uint32_t):int32_t"/>
    <method name="u_memchr(const UChar*;UChar;int32_t):UChar*"/>
    <method name="u_memchr32(const UChar*;UChar32;int32_t):UChar*"/>
    <method name="u_memcmp(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_memcmpCodePointOrder(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_memcpy(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_memmove(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_memrchr(const UChar*;UChar;int32_t):UChar*"/>
    <method name="u_memrchr32(const UChar*;UChar32;int32_t):UChar*"/>
    <method name="u_memset(UChar*;UChar;int32_t):UChar*"/>
    <method name="u_setDataDirectory(const char*):void"/>
    <method name="u_strCaseCompare(const UChar*;int32_t;const UChar*;int32_t;uint32_t;UErrorCode*):int32_t"/>
    <method name="u_strCompare(const UChar*;int32_t;const UChar*;int32_t;UBool):int32_t"/>
    <method name="u_strCompareIter(UCharIterator*;UCharIterator*;UBool):int32_t"/>
    <method name="u_strFindFirst(const UChar*;int32_t;const UChar*;int32_t):UChar*"/>
    <method name="u_strFindLast(const UChar*;int32_t;const UChar*;int32_t):UChar*"/>
    <method name="u_strFoldCase(UChar*;int32_t;const UChar*;int32_t;uint32_t;UErrorCode*):int32_t"/>
    <method name="u_strFromJavaModifiedUTF8WithSub(UChar*;int32_t;int32_t*;const char*;int32_t;UChar32;int32_t*;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF32(UChar*;int32_t;int32_t*;const UChar32*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF32WithSub(UChar*;int32_t;int32_t*;const UChar32*;int32_t;UChar32;int32_t*;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF8(UChar*;int32_t;int32_t*;const char*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF8Lenient(UChar*;int32_t;int32_t*;const char*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF8WithSub(UChar*;int32_t;int32_t*;const char*;int32_t;UChar32;int32_t*;UErrorCode*):UChar*"/>
    <method name="u_strFromWCS(UChar*;int32_t;int32_t*;const wchar_t*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strHasMoreChar32Than(const UChar*;int32_t;int32_t):UBool"/>
    <method name="u_strToJavaModifiedUTF8(char*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):char*"/>
    <method name="u_strToLower(UChar*;int32_t;const UChar*;int32_t;const char*;UErrorCode*):int32_t"/>
    <method name="u_strToTitle(UChar*;int32_t;const UChar*;int32_t;UBreakIterator*;const char*;UErrorCode*):int32_t"/>
    <method name="u_strToUTF32(UChar32*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):UChar32*"/>
    <method name="u_strToUTF32WithSub(UChar32*;int32_t;int32_t*;const UChar*;int32_t;UChar32;int32_t*;UErrorCode*):UChar32*"/>
    <method name="u_strToUTF8(char*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):char*"/>
    <method name="u_strToUTF8WithSub(char*;int32_t;int32_t*;const UChar*;int32_t;UChar32;int32_t*;UErrorCode*):char*"/>
    <method name="u_strToUpper(UChar*;int32_t;const UChar*;int32_t;const char*;UErrorCode*):int32_t"/>
    <method name="u_strToWCS(wchar_t*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):wchar_t*"/>
    <method name="u_strcasecmp(const UChar*;const UChar*;uint32_t):int32_t"/>
    <method name="u_strcat(UChar*;const UChar*):UChar*"/>
    <method name="u_strchr(const UChar*;UChar):UChar*"/>
    <method name="u_strchr32(const UChar*;UChar32):UChar*"/>
    <method name="u_strcmp(const UChar*;const UChar*):int32_t"/>
    <method name="u_strcmpCodePointOrder(const UChar*;const UChar*):int32_t"/>
    <method name="u_strcpy(UChar*;const UChar*):UChar*"/>
    <method name="u_strcspn(const UChar*;const UChar*):int32_t"/>
    <method name="u_strlen(const UChar*):int32_t"/>
    <method name="u_strncasecmp(const UChar*;const UChar*;int32_t;uint32_t):int32_t"/>
    <method name="u_strncat(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_strncmp(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_strncmpCodePointOrder(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_strncpy(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_strpbrk(const UChar*;const UChar*):UChar*"/>
    <method name="u_strrchr(const UChar*;UChar):UChar*"/>
    <method name="u_strrchr32(const UChar*;UChar32):UChar*"/>
    <method name="u_strrstr(const UChar*;const UChar*):UChar*"/>
    <method name="u_strspn(const UChar*;const UChar*):int32_t"/>
    <method name="u_strstr(const UChar*;const UChar*):UChar*"/>
    <method name="u_strtok_r(UChar*;const UChar*;UChar**):UChar*"/>
    <method name="u_tolower(UChar32):UChar32"/>
    <method name="u_totitle(UChar32):UChar32"/>
    <method name="u_toupper(UChar32):UChar32"/>
    <method name="u_uastrcpy(UChar*;const char*):UChar*"/>
    <method name="u_uastrncpy(UChar*;const char*;int32_t):UChar*"/>
    <method name="u_unescape(const char*;UChar*;int32_t):int32_t"/>
    <method name="u_unescapeAt(UNESCAPE_CHAR_AT;int32_t*;int32_t;void*):UChar32"/>
    <method name="u_versionFromString(uint8_t*;const char*):void"/>
    <method name="u_versionFromUString(uint8_t*;const UChar*):void"/>
    <method name="u_versionToString(const uint8_t*;char*):void"/>
    <method name="ualarm(useconds_t;useconds_t):useconds_t"/>
    <method name="ublock_getCode(UChar32):UBlockCode"/>
    <method name="uiter_current32(UCharIterator*):UChar32"/>
    <method name="uiter_getState(const UCharIterator*):uint32_t"/>
    <method name="uiter_next32(UCharIterator*):UChar32"/>
    <method name="uiter_previous32(UCharIterator*):UChar32"/>
    <method name="uiter_setState(UCharIterator*;uint32_t;UErrorCode*):void"/>
    <method name="uiter_setString(UCharIterator*;const UChar*;int32_t):void"/>
    <method name="uiter_setUTF16BE(UCharIterator*;const char*;int32_t):void"/>
    <method name="uiter_setUTF8(UCharIterator*;const char*;int32_t):void"/>
    <method name="ulimit(int, ...):long"/>
    <method name="ultoa(unsigned long;char*;int):char*"/>
    <method name="umask(mode_t):mode_t"/>
    <method name="umaskx_np(filesec_t):int"/>
    <method name="umount(const char*):int"/>
    <method name="uname(struct utsname*):int"/>
    <method name="uncompress(Bytef*;uLongf*;const Bytef*;uLong):int"/>
    <method name="undelete(const char*):int"/>
    <method name="ungetc(int;FILE *):int"/>
    <method name="ungetc(int;FILE*):int"/>
    <method name="ungetwc(wint_t;FILE*):wint_t"/>
    <method name="unlink(const char*):int"/>
    <method name="unlockpt(int):int"/>
    <method name="unmount(const char*;int):int"/>
    <method name="unsetenv(const char*):int"/>
    <method name="unvis(char*;int;int*;int):int"/>
    <method name="unwhiteout(const char*):int"/>
    <method name="unz64local_CheckCurrentFileCoherencyHeader(unz64_s*;uInt*;ZPOS64_T*;uInt*):int"/>
    <method name="unz64local_DosDateToTmuDate(ZPOS64_T;tm_unz*):void"/>
    <method name="unz64local_GetCurrentFileInfoInternal(unzFile;unz_file_info64*;unz_file_info64_internal*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="unz64local_SearchCentralDir(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="unz64local_SearchCentralDir64(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="unz64local_getByte(const zlib_filefunc64_32_def*;voidpf;int*):int"/>
    <method name="unz64local_getLong(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="unz64local_getLong64(const zlib_filefunc64_32_def*;voidpf;ZPOS64_T*):int"/>
    <method name="unz64local_getShort(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="unzClose(unzFile):int"/>
    <method name="unzCloseCurrentFile(unzFile):int"/>
    <method name="unzGetCurrentFileInfo(unzFile;unz_file_info*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="unzGetCurrentFileInfo64(unzFile;unz_file_info64*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="unzGetCurrentFileZStreamPos64(unzFile):ZPOS64_T"/>
    <method name="unzGetFilePos(unzFile;unz_file_pos*):int"/>
    <method name="unzGetFilePos64(unzFile;unz64_file_pos*):int"/>
    <method name="unzGetGlobalComment(unzFile;char*;uLong):int"/>
    <method name="unzGetGlobalInfo(unzFile;unz_global_info*):int"/>
    <method name="unzGetGlobalInfo64(unzFile;unz_global_info64*):int"/>
    <method name="unzGetLocalExtrafield(unzFile;voidp;unsigned int):int"/>
    <method name="unzGetOffset(unzFile):uLong"/>
    <method name="unzGetOffset64(unzFile):ZPOS64_T"/>
    <method name="unzGoToFilePos(unzFile;unz_file_pos*):int"/>
    <method name="unzGoToFilePos64(unzFile;const unz64_file_pos*):int"/>
    <method name="unzGoToFirstFile(unzFile):int"/>
    <method name="unzGoToNextFile(unzFile):int"/>
    <method name="unzLocateFile(unzFile;const char*;int):int"/>
    <method name="unzOpen(const char*):unzFile"/>
    <method name="unzOpen2(const char*;zlib_filefunc_def*):unzFile"/>
    <method name="unzOpen2_64(const void*;zlib_filefunc64_def*):unzFile"/>
    <method name="unzOpen64(const void*):unzFile"/>
    <method name="unzOpenCurrentFile(unzFile):int"/>
    <method name="unzOpenCurrentFile2(unzFile;int*;int*;int):int"/>
    <method name="unzOpenCurrentFile3(unzFile;int*;int*;int;const char*):int"/>
    <method name="unzOpenCurrentFilePassword(unzFile;const char*):int"/>
    <method name="unzOpenInternal(const void*;zlib_filefunc64_32_def*;int):unzFile"/>
    <method name="unzReadCurrentFile(unzFile;voidp;unsigned int):int"/>
    <method name="unzRepair(const char*;const char*;const char*;uLong*;uLong*):int"/>
    <method name="unzSetOffset(unzFile;uLong):int"/>
    <method name="unzSetOffset64(unzFile;ZPOS64_T):int"/>
    <method name="unzStringFileNameCompare(const char*;const char*;int):int"/>
    <method name="unzeof(unzFile):int"/>
    <method name="unztell(unzFile):long"/>
    <method name="unztell64(unzFile):ZPOS64_T"/>
    <method name="updateExamplesTable():int"/>
    <method name="updatePrefWarningsMargins():int"/>
    <method name="updatePrefsUI():int"/>
    <method name="updateRegexEscapedExampleTable(int):int"/>
    <method name="updateRegexEscapedExampleTableNew(int;int):int"/>
    <method name="updateRegexEscapedExamples():int"/>
    <method name="update_keys(unsigned long*;const unsigned long*;int):int"/>
    <method name="uregex_appendReplacement(URegularExpression*;const UChar*;int32_t;UChar**;int32_t*;UErrorCode*):int32_t"/>
    <method name="uregex_appendReplacementUText(URegularExpression*;UText*;UText*;UErrorCode*):void"/>
    <method name="uregex_appendTail(URegularExpression*;UChar**;int32_t*;UErrorCode*):int32_t"/>
    <method name="uregex_appendTailUText(URegularExpression*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_clone(const URegularExpression*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_close(URegularExpression*):void"/>
    <method name="uregex_end(URegularExpression*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_end64(URegularExpression*;int32_t;UErrorCode*):int64_t"/>
    <method name="uregex_find(URegularExpression*;int32_t;UErrorCode*):UBool"/>
    <method name="uregex_find64(URegularExpression*;int64_t;UErrorCode*):UBool"/>
    <method name="uregex_findNext(URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_flags(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_getFindProgressCallback(const URegularExpression*;(*)(const void*;int64_t):UBool*;const void**;UErrorCode*):void"/>
    <method name="uregex_getMatchCallback(const URegularExpression*;(*)(const void*;int32_t):UBool*;const void**;UErrorCode*):void"/>
    <method name="uregex_getStackLimit(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_getText(URegularExpression*;int32_t*;UErrorCode*):const UChar*"/>
    <method name="uregex_getTimeLimit(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_getUText(URegularExpression*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_group(URegularExpression*;int32_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_groupCount(URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_groupUText(URegularExpression*;int32_t;UText*;int64_t*;UErrorCode*):UText*"/>
    <method name="uregex_groupUTextDeep(URegularExpression*;int32_t;UText*;UErrorCode*):UText*"/>
    <method name="uregex_hasAnchoringBounds(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_hasTransparentBounds(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_hitEnd(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_lookingAt(URegularExpression*;int32_t;UErrorCode*):UBool"/>
    <method name="uregex_lookingAt64(URegularExpression*;int64_t;UErrorCode*):UBool"/>
    <method name="uregex_matches(URegularExpression*;int32_t;UErrorCode*):UBool"/>
    <method name="uregex_matches64(URegularExpression*;int64_t;UErrorCode*):UBool"/>
    <method name="uregex_open(const UChar*;int32_t;uint32_t;UParseError*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_openC(const char*;uint32_t;UParseError*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_openUText(UText*;uint32_t;UParseError*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_pattern(const URegularExpression*;int32_t*;UErrorCode*):const UChar*"/>
    <method name="uregex_patternUText(const URegularExpression*;UErrorCode*):UText*"/>
    <method name="uregex_refreshUText(URegularExpression*;UText*;UErrorCode*):void"/>
    <method name="uregex_regionEnd(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_regionEnd64(const URegularExpression*;UErrorCode*):int64_t"/>
    <method name="uregex_regionStart(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_regionStart64(const URegularExpression*;UErrorCode*):int64_t"/>
    <method name="uregex_replaceAll(URegularExpression*;const UChar*;int32_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_replaceAllUText(URegularExpression*;UText*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_replaceFirst(URegularExpression*;const UChar*;int32_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_replaceFirstUText(URegularExpression*;UText*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_requireEnd(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_reset(URegularExpression*;int32_t;UErrorCode*):void"/>
    <method name="uregex_reset64(URegularExpression*;int64_t;UErrorCode*):void"/>
    <method name="uregex_setFindProgressCallback(URegularExpression*;(*)(const void*;int64_t):UBool;const void*;UErrorCode*):void"/>
    <method name="uregex_setMatchCallback(URegularExpression*;(*)(const void*;int32_t):UBool;const void*;UErrorCode*):void"/>
    <method name="uregex_setRegion(URegularExpression*;int32_t;int32_t;UErrorCode*):void"/>
    <method name="uregex_setRegion64(URegularExpression*;int64_t;int64_t;UErrorCode*):void"/>
    <method name="uregex_setRegionAndStart(URegularExpression*;int64_t;int64_t;int64_t;UErrorCode*):void"/>
    <method name="uregex_setStackLimit(URegularExpression*;int32_t;UErrorCode*):void"/>
    <method name="uregex_setText(URegularExpression*;const UChar*;int32_t;UErrorCode*):void"/>
    <method name="uregex_setTimeLimit(URegularExpression*;int32_t;UErrorCode*):void"/>
    <method name="uregex_setUText(URegularExpression*;UText*;UErrorCode*):void"/>
    <method name="uregex_split(URegularExpression*;UChar*;int32_t;int32_t*;UChar**;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_splitUText(URegularExpression*;UText**;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_start(URegularExpression*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_start64(URegularExpression*;int32_t;UErrorCode*):int64_t"/>
    <method name="uregex_useAnchoringBounds(URegularExpression*;UBool;UErrorCode*):void"/>
    <method name="uregex_useTransparentBounds(URegularExpression*;UBool;UErrorCode*):void"/>
    <method name="uselocale(locale_t):locale_t"/>
    <method name="user_from_uid(uid_t;int):char*"/>
    <method name="usleep(useconds_t):int"/>
    <method name="utext_char32At(UText*;int64_t):UChar32"/>
    <method name="utext_clone(UText*;const UText*;UBool;UBool;UErrorCode*):UText*"/>
    <method name="utext_close(UText*):UText*"/>
    <method name="utext_copy(UText*;int64_t;int64_t;int64_t;UBool;UErrorCode*):void"/>
    <method name="utext_current32(UText*):UChar32"/>
    <method name="utext_equals(const UText*;const UText*):UBool"/>
    <method name="utext_extract(UText*;int64_t;int64_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="utext_freeze(UText*):void"/>
    <method name="utext_getNativeIndex(const UText*):int64_t"/>
    <method name="utext_getPreviousNativeIndex(UText*):int64_t"/>
    <method name="utext_hasMetaData(const UText*):UBool"/>
    <method name="utext_isLengthExpensive(const UText*):UBool"/>
    <method name="utext_isWritable(const UText*):UBool"/>
    <method name="utext_moveIndex32(UText*;int32_t):UBool"/>
    <method name="utext_nativeLength(UText*):int64_t"/>
    <method name="utext_next32(UText*):UChar32"/>
    <method name="utext_next32From(UText*;int64_t):UChar32"/>
    <method name="utext_openUChars(UText*;const UChar*;int64_t;UErrorCode*):UText*"/>
    <method name="utext_openUTF8(UText*;const char*;int64_t;UErrorCode*):UText*"/>
    <method name="utext_previous32(UText*):UChar32"/>
    <method name="utext_previous32From(UText*;int64_t):UChar32"/>
    <method name="utext_replace(UText*;int64_t;int64_t;const UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="utext_setNativeIndex(UText*;int64_t):void"/>
    <method name="utext_setup(UText*;int32_t;UErrorCode*):UText*"/>
    <method name="utf8_appendCharSafeBody(uint8_t*;int32_t;int32_t;UChar32;UBool*):int32_t"/>
    <method name="utf8_nextCharSafeBody(const uint8_t*;int32_t*;int32_t;UChar32;UBool):UChar32"/>
    <method name="utf8_prevCharSafeBody(const uint8_t*;int32_t;int32_t*;UChar32;UBool):UChar32"/>
    <method name="utime(const char*;const struct utimbuf*):int"/>
    <method name="utime(const char*;const utimbuf*):int"/>
    <method name="utimes(const char*;const struct timeval*):int"/>
    <method name="utmpxname(const char*):int"/>
    <method name="uuid_clear(unsigned char*):void"/>
    <method name="uuid_compare(const unsigned char*;const unsigned char*):int"/>
    <method name="uuid_copy(unsigned char*;const unsigned char*):void"/>
    <method name="uuid_generate(unsigned char*):void"/>
    <method name="uuid_generate_random(unsigned char*):void"/>
    <method name="uuid_generate_time(unsigned char*):void"/>
    <method name="uuid_is_null(const unsigned char*):int"/>
    <method name="uuid_parse(const char*;unsigned char*):int"/>
    <method name="uuid_unparse(const unsigned char*;char*):void"/>
    <method name="uuid_unparse_lower(const unsigned char*;char*):void"/>
    <method name="uuid_unparse_upper(const unsigned char*;char*):void"/>
    <method name="v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD*;X509V3_CTX*;STACK*):ASN1_BIT_STRING*"/>
    <method name="v2i_GENERAL_NAME(X509V3_EXT_METHOD*;X509V3_CTX*;CONF_VALUE*):GENERAL_NAME*"/>
    <method name="v2i_GENERAL_NAMES(X509V3_EXT_METHOD*;X509V3_CTX*;STACK*):GENERAL_NAMES*"/>
    <method name="v2i_GENERAL_NAME_ex(GENERAL_NAME*;X509V3_EXT_METHOD*;X509V3_CTX*;CONF_VALUE*;int):GENERAL_NAME*"/>
    <method name="vImageAffineWarpCG_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpCG_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpCG_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpCG_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageBoxConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageBoxConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageBufferFill_ARGB8888(const vImage_Buffer*;const uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageBufferFill_ARGBFFFF(const vImage_Buffer*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_RGBA8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_RGBAFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClip_PlanarF(const vImage_Buffer*;const vImage_Buffer*;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_16SToF(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_16UToF(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_16UToPlanar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB1555toARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB1555toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toARGB1555(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toRGB565(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toRGB888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGBFFFFtoPlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_BGRA8888toRGB888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ChunkyToPlanar8(const void**;const vImage_Buffer**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ChunkyToPlanarF(const void**;const vImage_Buffer**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_FTo16S(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_FTo16U(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar16FtoPlanarF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8To16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToBGRX8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToBGRXFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_F;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToXRGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToXRGBFFFF(Pixel_F;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toARGB1555(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toRGB565(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toRGB888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToBGRX8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToBGRXFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_F;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToXRGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToXRGBFFFF(Pixel_F;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoRGBFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarToChunky8(const vImage_Buffer**;void**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarToChunkyF(const vImage_Buffer**;void**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB565toARGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB565toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toARGB8888(const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toBGRA8888(const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toRGBA8888(const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGBA8888toRGB888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGBFFFtoPlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveMultiKernel_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t**;uint32_t;uint32_t;const int32_t*;const int32_t*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveMultiKernel_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float**;uint32_t;uint32_t;const float*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;int32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;float;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;int32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;float;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageCreateGammaFunction(float;int;vImage_Flags):GammaFunction"/>
    <method name="vImageDestroyGammaFunction(GammaFunction):void"/>
    <method name="vImageDestroyResamplingFilter(ResamplingFilter):void"/>
    <method name="vImageDilate_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageDilate_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageDilate_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageDilate_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const unsigned int*;const unsigned int*;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const unsigned int*;const unsigned int*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_Planar8(const vImage_Buffer*;const vImage_Buffer*;unsigned int;unsigned int;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;unsigned int;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_ARGB8888ToRGB888(const vImage_Buffer*;const vImage_Buffer*;uint8_t*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_ARGBFFFFToRGBFFF(const vImage_Buffer*;const vImage_Buffer*;float*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_BGRA8888ToRGB888(const vImage_Buffer*;const vImage_Buffer*;uint8_t*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_BGRAFFFFToRGBFFF(const vImage_Buffer*;const vImage_Buffer*;float*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_RGBA8888ToRGB888(const vImage_Buffer*;const vImage_Buffer*;uint8_t*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_RGBAFFFFToRGBFFF(const vImage_Buffer*;const vImage_Buffer*;float*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageGamma_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;const GammaFunction;vImage_Flags):vImage_Error"/>
    <method name="vImageGamma_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const GammaFunction;vImage_Flags):vImage_Error"/>
    <method name="vImageGamma_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;const GammaFunction;vImage_Flags):vImage_Error"/>
    <method name="vImageGetMinimumGeometryTempBufferSize(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetMinimumTempBufferSizeForConvolution(const vImage_Buffer*;const vImage_Buffer*;uint32_t;uint32_t;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetMinimumTempBufferSizeForHistogram(const vImage_Buffer*;const vImage_Buffer*;unsigned int;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetMinimumTempBufferSizeForMinMax(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetResamplingFilterSize(float;(*)(const float*;float*;unsigned long;void*):void;float;vImage_Flags):size_t"/>
    <method name="vImageHistogramCalculation_ARGB8888(const vImage_Buffer*;vImagePixelCount**;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramCalculation_ARGBFFFF(const vImage_Buffer*;vImagePixelCount**;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramCalculation_Planar8(const vImage_Buffer*;vImagePixelCount*;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramCalculation_PlanarF(const vImage_Buffer*;vImagePixelCount*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImagePixelCount**;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImagePixelCount**;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImagePixelCount*;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImagePixelCount*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_Planar16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageInterpolatedLookupTable_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const Pixel_F*;vImagePixelCount;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageLookupTable_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;const Pixel_F*;vImage_Flags):vImage_Error"/>
    <method name="vImageLookupTable_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;const Pixel_8*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const int16_t*;int32_t;const int16_t*;const int32_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_Planar8(const vImage_Buffer**;const vImage_Buffer**;uint32_t;uint32_t;const int16_t*;int32_t;const int16_t*;const int32_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_PlanarF(const vImage_Buffer**;const vImage_Buffer**;uint32_t;uint32_t;const float*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageNewResamplingFilter(float;vImage_Flags):ResamplingFilter"/>
    <method name="vImageNewResamplingFilterForFunctionUsingBuffer(ResamplingFilter;float;(*)(const float*;float*;unsigned long;void*):void;float;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithPixel_ARGB8888(const uint8_t*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithPixel_ARGBFFFF(const float*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_ARGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_ARGBFFFF(Pixel_F;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_Planar8(Pixel_8;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_PlanarF(Pixel_F;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannels_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannels_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePNGDecompressionFilter(const vImage_Buffer*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePermuteChannels_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImagePermuteChannels_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewisePolynomial_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;const float**;const float*;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewisePolynomial_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const float**;const float*;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewisePolynomial_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;const float**;const float*;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewiseRational_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const float**;const float**;const float*;uint32_t;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_BGRA8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_BGRAFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_ARGB8888(const vImage_Buffer*;Pixel_8;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_ARGBFFFF(const vImage_Buffer*;Pixel_F;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_Planar8(const vImage_Buffer*;Pixel_8;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_PlanarF(const vImage_Buffer*;Pixel_F;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_ARGB16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_RGBA16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_RGBA8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_RGBAFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;const int16_t*;uint32_t;uint32_t;uint32_t;uint32_t;int32_t;int32_t;uint8_t*;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;const float*;uint32_t;uint32_t;uint32_t;uint32_t;float*;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;const int16_t*;uint32_t;uint32_t;uint32_t;uint32_t;int32_t;int32_t;Pixel_8;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;const float*;uint32_t;uint32_t;uint32_t;uint32_t;Pixel_F;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;uint8_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;uint8_t;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_Planar16U(const vImage_Buffer*;const vImage_Buffer*;uint8_t;Pixel_16U;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_Planar8(const vImage_Buffer*;const vImage_Buffer*;uint8_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_PlanarF(const vImage_Buffer*;const vImage_Buffer*;uint8_t;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;float;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;float;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;float;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;float;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageSelectChannels_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageSelectChannels_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageTableLookUp_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const Pixel_8*;const Pixel_8*;const Pixel_8*;const Pixel_8*;vImage_Flags):vImage_Error"/>
    <method name="vImageTableLookUp_Planar8(const vImage_Buffer*;const vImage_Buffer*;const Pixel_8*;vImage_Flags):vImage_Error"/>
    <method name="vImageTentConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageTentConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_ARGB16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_RGBA16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_RGBA8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_RGBAFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_Planar16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vacosf(vFloat):vFloat"/>
    <method name="vacoshf(vFloat):vFloat"/>
    <method name="valloc(size_t):void*"/>
    <method name="vasinf(vFloat):vFloat"/>
    <method name="vasinhf(vFloat):vFloat"/>
    <method name="vasprintf(char**;const char*;va_list):int"/>
    <method name="vatan2f(vFloat;vFloat):vFloat"/>
    <method name="vatanf(vFloat):vFloat"/>
    <method name="vatanhf(vFloat):vFloat"/>
    <method name="vceilf(vFloat):vFloat"/>
    <method name="vclassifyf(vFloat):vUInt32"/>
    <method name="vcopysignf(vFloat;vFloat):vFloat"/>
    <method name="vcosf(vFloat):vFloat"/>
    <method name="vcoshf(vFloat):vFloat"/>
    <method name="vcospif(vFloat):vFloat"/>
    <method name="vdivf(vFloat;vFloat):vFloat"/>
    <method name="vdprintf(int;const char*;va_list):int"/>
    <method name="verr(int;const char*;va_list):void"/>
    <method name="verrx(int;const char*;va_list):void"/>
    <method name="vexp2f(vFloat):vFloat"/>
    <method name="vexpf(vFloat):vFloat"/>
    <method name="vexpm1f(vFloat):vFloat"/>
    <method name="vfabf(vFloat):vFloat"/>
    <method name="vfabsf(vFloat):vFloat"/>
    <method name="vfloorf(vFloat):vFloat"/>
    <method name="vfmodf(vFloat;vFloat):vFloat"/>
    <method name="vfork():pid_t"/>
    <method name="vfprintf(FILE*;const char*;va_list):int"/>
    <method name="vfscanf(FILE*;const char*;va_list):int"/>
    <method name="vfwprintf(FILE*;const wchar_t*;__darwin_va_list):int"/>
    <method name="vfwprintf(FILE*;const wchar_t*;va_list):int"/>
    <method name="vfwprintf_l(int*;int;const int*;int):int"/>
    <method name="vfwscanf(FILE*;const wchar_t*;__darwin_va_list):int"/>
    <method name="vfwscanf(__FILE*;const wchar_t*;va_list):int"/>
    <method name="vintf(vFloat):vFloat"/>
    <method name="vipowf(vFloat;vSInt32):vFloat"/>
    <method name="vis(char*;int;int;int):char*"/>
    <method name="vlog10f(vFloat):vFloat"/>
    <method name="vlog1pf(vFloat):vFloat"/>
    <method name="vlog2f(vFloat):vFloat"/>
    <method name="vlogbf(vFloat):vFloat"/>
    <method name="vlogf(vFloat):vFloat"/>
    <method name="vm_allocate(vm_map_t;vm_address_t*;vm_size_t;int):kern_return_t"/>
    <method name="vm_allocate_cpm(host_priv_t;vm_map_t;vm_address_t*;vm_size_t;int):kern_return_t"/>
    <method name="vm_behavior_set(vm_map_t;vm_address_t;vm_size_t;vm_behavior_t):kern_return_t"/>
    <method name="vm_copy(vm_map_t;vm_address_t;vm_size_t;vm_address_t):kern_return_t"/>
    <method name="vm_deallocate(vm_map_t;vm_address_t;vm_size_t):kern_return_t"/>
    <method name="vm_inherit(vm_map_t;vm_address_t;vm_size_t;vm_inherit_t):kern_return_t"/>
    <method name="vm_machine_attribute(vm_map_t;vm_address_t;vm_size_t;vm_machine_attribute_t;vm_machine_attribute_val_t*):kern_return_t"/>
    <method name="vm_map(vm_map_t;vm_address_t*;vm_size_t;vm_address_t;int;mem_entry_name_port_t;vm_offset_t;boolean_t;vm_prot_t;vm_prot_t;vm_inherit_t):kern_return_t"/>
    <method name="vm_map_64(vm_map_t;vm_address_t*;vm_size_t;vm_address_t;int;mem_entry_name_port_t;memory_object_offset_t;boolean_t;vm_prot_t;vm_prot_t;vm_inherit_t):kern_return_t"/>
    <method name="vm_map_page_query(vm_map_t;vm_offset_t;integer_t*;integer_t*):kern_return_t"/>
    <method name="vm_mapped_pages_info(vm_map_t;page_address_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_msync(vm_map_t;vm_address_t;vm_size_t;vm_sync_t):kern_return_t"/>
    <method name="vm_protect(vm_map_t;vm_address_t;vm_size_t;boolean_t;vm_prot_t):kern_return_t"/>
    <method name="vm_purgable_control(vm_map_t;vm_address_t;vm_purgable_t;int*):kern_return_t"/>
    <method name="vm_read(vm_map_t;vm_address_t;vm_size_t;vm_offset_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_read_list(vm_map_t;struct vm_read_entry*;natural_t):kern_return_t"/>
    <method name="vm_read_overwrite(vm_map_t;vm_address_t;vm_size_t;vm_address_t;vm_size_t*):kern_return_t"/>
    <method name="vm_region(vm_map_t;vm_address_t*;vm_size_t*;vm_region_flavor_t;vm_region_info_t;mach_msg_type_number_t*;mach_port_t*):kern_return_t"/>
    <method name="vm_region_64(vm_map_t;vm_address_t*;vm_size_t*;vm_region_flavor_t;vm_region_info_t;mach_msg_type_number_t*;mach_port_t*):kern_return_t"/>
    <method name="vm_region_recurse(vm_map_t;vm_address_t*;vm_size_t*;natural_t*;vm_region_recurse_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_region_recurse_64(vm_map_t;vm_address_t*;vm_size_t*;natural_t*;vm_region_recurse_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_remap(vm_map_t;vm_address_t*;vm_size_t;vm_address_t;int;vm_map_t;vm_address_t;boolean_t;vm_prot_t*;vm_prot_t*;vm_inherit_t):kern_return_t"/>
    <method name="vm_wire(host_priv_t;vm_map_t;vm_address_t;vm_size_t;vm_prot_t):kern_return_t"/>
    <method name="vm_write(vm_map_t;vm_address_t;vm_offset_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="vnextafterf(vFloat;vFloat):vFloat"/>
    <method name="vnintf(vFloat):vFloat"/>
    <method name="vpowf(vFloat;vFloat):vFloat"/>
    <method name="vprintf(const char*;va_list):int"/>
    <method name="vproc_standby_begin(vproc_t):vproc_standby_t"/>
    <method name="vproc_standby_end(vproc_t;vproc_standby_t):void"/>
    <method name="vproc_strerror(vproc_err_t):const char*"/>
    <method name="vproc_transaction_begin(vproc_t):vproc_transaction_t"/>
    <method name="vproc_transaction_end(vproc_t;vproc_transaction_t):void"/>
    <method name="vrecf(vFloat):vFloat"/>
    <method name="vremainderf(vFloat;vFloat):vFloat"/>
    <method name="vremquof(vFloat;vFloat;vUInt32*):vFloat"/>
    <method name="vrsqrtf(vFloat):vFloat"/>
    <method name="vscalbf(vFloat;vSInt32):vFloat"/>
    <method name="vscanf(const char*;va_list):int"/>
    <method name="vsignbitf(vFloat):vUInt32"/>
    <method name="vsincosf(vFloat;vFloat*):vFloat"/>
    <method name="vsinf(vFloat):vFloat"/>
    <method name="vsinhf(vFloat):vFloat"/>
    <method name="vsinpif(vFloat):vFloat"/>
    <method name="vsnprintf(char*;size_t;const char*;va_list):int"/>
    <method name="vsprintf(char*;const char*;va_list):int"/>
    <method name="vsqrtf(vFloat):vFloat"/>
    <method name="vsscanf(const char*;const char*;va_list):int"/>
    <method name="vswprintf(wchar_t*;size_t;const wchar_t*;__darwin_va_list):int"/>
    <method name="vswprintf_l(int*;int;int;const int*;int):int"/>
    <method name="vswscanf(const wchar_t*;const wchar_t*;__darwin_va_list):int"/>
    <method name="vswscanf(const wchar_t*;const wchar_t*;va_list):int"/>
    <method name="vsyslog(int;const char*;__darwin_va_list):void"/>
    <method name="vtablelookup(vSInt32;uint32_t*):vUInt32"/>
    <method name="vtanf(vFloat):vFloat"/>
    <method name="vtanhf(vFloat):vFloat"/>
    <method name="vtanpif(vFloat):vFloat"/>
    <method name="vtruncf(vFloat):vFloat"/>
    <method name="vvacos(double*;const double*;const int*):void"/>
    <method name="vvacosf(float*;const float*;const int*):void"/>
    <method name="vvacosh(double*;const double*;const int*):void"/>
    <method name="vvacoshf(float*;const float*;const int*):void"/>
    <method name="vvasin(double*;const double*;const int*):void"/>
    <method name="vvasinf(float*;const float*;const int*):void"/>
    <method name="vvasinh(double*;const double*;const int*):void"/>
    <method name="vvasinhf(float*;const float*;const int*):void"/>
    <method name="vvatan(double*;const double*;const int*):void"/>
    <method name="vvatan2(double*;const double*;const double*;const int*):void"/>
    <method name="vvatan2f(float*;const float*;const float*;const int*):void"/>
    <method name="vvatanf(float*;const float*;const int*):void"/>
    <method name="vvatanh(double*;const double*;const int*):void"/>
    <method name="vvatanhf(float*;const float*;const int*):void"/>
    <method name="vvceil(double*;const double*;const int*):void"/>
    <method name="vvceilf(float*;const float*;const int*):void"/>
    <method name="vvcopysign(double*;double*;const double*;const int*):void"/>
    <method name="vvcopysignf(float*;const float*;const float*;const int*):void"/>
    <method name="vvcos(double*;const double*;const int*):void"/>
    <method name="vvcosf(float*;const float*;const int*):void"/>
    <method name="vvcosh(double*;const double*;const int*):void"/>
    <method name="vvcoshf(float*;const float*;const int*):void"/>
    <method name="vvcosisin(__double_complex_t*;const double*;const int*):void"/>
    <method name="vvcosisinf(__float_complex_t*;const float*;const int*):void"/>
    <method name="vvcospi(double*;const double*;const int*):void"/>
    <method name="vvcospif(float*;const float*;const int*):void"/>
    <method name="vvdiv(double*;const double*;const double*;const int*):void"/>
    <method name="vvdivf(float*;const float*;const float*;const int*):void"/>
    <method name="vvexp(double*;const double*;const int*):void"/>
    <method name="vvexp2(double*;const double*;const int*):void"/>
    <method name="vvexp2f(float*;const float*;const int*):void"/>
    <method name="vvexpf(float*;const float*;const int*):void"/>
    <method name="vvexpm1(double*;const double*;const int*):void"/>
    <method name="vvexpm1f(float*;const float*;const int*):void"/>
    <method name="vvfabf(float*;const float*;const int*):void"/>
    <method name="vvfabs(double*;const double*;const int*):void"/>
    <method name="vvfabsf(float*;const float*;const int*):void"/>
    <method name="vvfloor(double*;const double*;const int*):void"/>
    <method name="vvfloorf(float*;const float*;const int*):void"/>
    <method name="vvfmod(double*;double*;const double*;const int*):void"/>
    <method name="vvfmodf(float*;const float*;const float*;const int*):void"/>
    <method name="vvint(double*;const double*;const int*):void"/>
    <method name="vvintf(float*;const float*;const int*):void"/>
    <method name="vvlog(double*;const double*;const int*):void"/>
    <method name="vvlog10(double*;const double*;const int*):void"/>
    <method name="vvlog10f(float*;const float*;const int*):void"/>
    <method name="vvlog1p(double*;const double*;const int*):void"/>
    <method name="vvlog1pf(float*;const float*;const int*):void"/>
    <method name="vvlog2(double*;const double*;const int*):void"/>
    <method name="vvlog2f(float*;const float*;const int*):void"/>
    <method name="vvlogb(double*;const double*;const int*):void"/>
    <method name="vvlogbf(float*;const float*;const int*):void"/>
    <method name="vvlogf(float*;const float*;const int*):void"/>
    <method name="vvnextafter(double*;double*;const double*;const int*):void"/>
    <method name="vvnextafterf(float*;const float*;const float*;const int*):void"/>
    <method name="vvnint(double*;const double*;const int*):void"/>
    <method name="vvnintf(float*;const float*;const int*):void"/>
    <method name="vvpow(double*;const double*;const double*;const int*):void"/>
    <method name="vvpowf(float*;const float*;const float*;const int*):void"/>
    <method name="vvpows(double*;const double*;const double*;const int*):void"/>
    <method name="vvpowsf(float*;const float*;const float*;const int*):void"/>
    <method name="vvrec(double*;const double*;const int*):void"/>
    <method name="vvrecf(float*;const float*;const int*):void"/>
    <method name="vvremainder(double*;double*;const double*;const int*):void"/>
    <method name="vvremainderf(float*;const float*;const float*;const int*):void"/>
    <method name="vvrsqrt(double*;const double*;const int*):void"/>
    <method name="vvrsqrtf(float*;const float*;const int*):void"/>
    <method name="vvsin(double*;const double*;const int*):void"/>
    <method name="vvsincos(double*;double*;const double*;const int*):void"/>
    <method name="vvsincosf(float*;float*;const float*;const int*):void"/>
    <method name="vvsinf(float*;const float*;const int*):void"/>
    <method name="vvsinh(double*;const double*;const int*):void"/>
    <method name="vvsinhf(float*;const float*;const int*):void"/>
    <method name="vvsinpi(double*;const double*;const int*):void"/>
    <method name="vvsinpif(float*;const float*;const int*):void"/>
    <method name="vvsqrt(double*;const double*;const int*):void"/>
    <method name="vvsqrtf(float*;const float*;const int*):void"/>
    <method name="vvtan(double*;const double*;const int*):void"/>
    <method name="vvtanf(float*;const float*;const int*):void"/>
    <method name="vvtanh(double*;const double*;const int*):void"/>
    <method name="vvtanhf(float*;const float*;const int*):void"/>
    <method name="vvtanpi(double*;const double*;const int*):void"/>
    <method name="vvtanpif(float*;const float*;const int*):void"/>
    <method name="vwarn(const char*;__darwin_va_list):void"/>
    <method name="vwarn(const char*;va_list):void"/>
    <method name="vwarnc(int;const char*;__darwin_va_list):void"/>
    <method name="vwarnx(const char*;__darwin_va_list):void"/>
    <method name="vwarnx(const char*;va_list):void"/>
    <method name="vwprintf(const wchar_t*;__darwin_va_list):int"/>
    <method name="vwprintf(const wchar_t*;va_list):int"/>
    <method name="vwprintf_l():int"/>
    <method name="vwscanf(const wchar_t*;__darwin_va_list):int"/>
    <method name="vwscanf(const wchar_t*;va_list):int"/>
    <method name="wait(int*):pid_t"/>
    <method name="wait3(int*;int;struct rusage*):pid_t"/>
    <method name="wait4(pid_t;int*;int;struct rusage*):pid_t"/>
    <method name="waitid(idtype_t;id_t;siginfo_t*;int):int"/>
    <method name="waitpid(pid_t;int*;int):pid_t"/>
    <method name="wallproc_wall_1(char**;CLIENT*):void*"/>
    <method name="wallproc_wall_1_svc(char**;struct svc_req*):void*"/>
    <method name="warn(const char*, ...):void"/>
    <method name="warnc(int;const char*, ...):void"/>
    <method name="warnx(const char*, ...):void"/>
    <method name="wcpcpy(wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcpncpy(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wcrtomb(char*;wchar_t;mbstate_t*):size_t"/>
    <method name="wcrtomb_l(char*;int;int*;int):int"/>
    <method name="wcscasecmp(const wchar_t*;const wchar_t*):int"/>
    <method name="wcscat(wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcschr(const wchar_t*;wchar_t):wchar_t*"/>
    <method name="wcscmp(const wchar_t*;const wchar_t*):int"/>
    <method name="wcscoll(const wchar_t*;const wchar_t*):int"/>
    <method name="wcscoll_l(const int*;const int*;int):int"/>
    <method name="wcscpy(wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcscspn(const wchar_t*;const wchar_t*):size_t"/>
    <method name="wcsdup(const wchar_t*):wchar_t*"/>
    <method name="wcsftime(wchar_t*;size_t;const wchar_t*;const struct tm*):size_t"/>
    <method name="wcslcat(wchar_t*;const wchar_t*;size_t):size_t"/>
    <method name="wcslcpy(wchar_t*;const wchar_t*;size_t):size_t"/>
    <method name="wcslen(const wchar_t*):size_t"/>
    <method name="wcsncasecmp(const wchar_t*;const wchar_t*;size_t):int"/>
    <method name="wcsncat(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wcsncmp(const wchar_t*;const wchar_t*;size_t):int"/>
    <method name="wcsncpy(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wcsnlen(const wchar_t*;size_t):size_t"/>
    <method name="wcsnrtombs(char*;const wchar_t**;size_t;size_t;mbstate_t*):size_t"/>
    <method name="wcspbrk(const wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcsrchr(const wchar_t*;wchar_t):wchar_t*"/>
    <method name="wcsrtombs(char*;const wchar_t**;size_t;mbstate_t*):size_t"/>
    <method name="wcsrtombs_l(char*;const int**;int;int*;int):int"/>
    <method name="wcsspn(const wchar_t*;const wchar_t*):size_t"/>
    <method name="wcsstr(const wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcstod(const wchar_t*;wchar_t**):double"/>
    <method name="wcstod_l(const int*;int**;int):double"/>
    <method name="wcstof(const wchar_t*;wchar_t**):float"/>
    <method name="wcstoimax(const wchar_t*;wchar_t**;int):intmax_t"/>
    <method name="wcstoimax_l(const int*;int**;int;int):int"/>
    <method name="wcstok(wchar_t*;const wchar_t*;wchar_t**):wchar_t*"/>
    <method name="wcstol(const wchar_t*;wchar_t**;int):long"/>
    <method name="wcstol_l(const int*;int**;int;int):long"/>
    <method name="wcstold(const wchar_t*;wchar_t**):long double"/>
    <method name="wcstoll(const wchar_t*;wchar_t**;int):long long"/>
    <method name="wcstombs(char*;const wchar_t*;size_t):size_t"/>
    <method name="wcstombs_l(char*;const int*;int;int):int"/>
    <method name="wcstoul(const wchar_t*;wchar_t**;int):unsigned long"/>
    <method name="wcstoul_l(const int*;int**;int;int):unsigned long"/>
    <method name="wcstoull(const wchar_t*;wchar_t**;int):unsigned long long"/>
    <method name="wcstoumax(const wchar_t*;wchar_t**;int):uintmax_t"/>
    <method name="wcstoumax_l(const int*;int**;int;int):int"/>
    <method name="wcswidth(const wchar_t*;size_t):int"/>
    <method name="wcswidth_l(const int*;int;int):int"/>
    <method name="wcsxfrm(wchar_t*;const wchar_t*;size_t):size_t"/>
    <method name="wcsxfrm_l(int*;const int*;int;int):int"/>
    <method name="wctob(wint_t):int"/>
    <method name="wctomb(char*;wchar_t):int"/>
    <method name="wctomb_l(char*;int;int):int"/>
    <method name="wctrans(const char*):wctrans_t"/>
    <method name="wctrans_l(const char*;int):int"/>
    <method name="wctype(const char*):wctype_t"/>
    <method name="wcwidth(wchar_t):int"/>
    <method name="wexecl(const wchar_t *; const wchar_t *; (wchar_t *)0): int"/>
    <method name="wexecv(const wchar_t *; const wchar_t *): int"/>
    <method name="wexecvp(const wchar_t *; wchar_t *; wchar_t *): int"/>
    <method name="wexecvpe(const wchar_t *; wchar_t *; wchar_t *): int"/>
    <method name="wmemchr(const wchar_t*;wchar_t;size_t):wchar_t*"/>
    <method name="wmemcmp(const wchar_t*;const wchar_t*;size_t):int"/>
    <method name="wmemcpy(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wmemmove(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wmemset(wchar_t*;wchar_t;size_t):wchar_t*"/>
    <method name="wordexp(const char*;wordexp_t*;int):int"/>
    <method name="wordfree(wordexp_t*):void"/>
    <method name="wprintf(const wchar_t*, ...):int"/>
    <method name="wprintf_l():int"/>
    <method name="write(int;const void*;size_t):ssize_t"/>
    <method name="writev(int;const struct iovec*;int):ssize_t"/>
    <method name="wscanf(const wchar_t*, ...):int"/>
    <method name="wscanf_l():int"/>
    <method name="wsprintf(LPTSTR lpOut; LPCTSTR lpFmt): int"/>
    <method name="wtmpxname(const char*):int"/>
    <method name="wvsprintf(LPTSTR lpOutput; LPCTSTR lpFmt; va_list arglist): int"/>
    <method name="wwritev(int;const iovec*;int):ssize_t"/>
    <method name="xalloc():int"/>
    <method name="xdr_array(XDR*;char**;unsigned int*;unsigned int;unsigned int;int):int"/>
    <method name="xdr_attrstat(XDR*;attrstat*):int"/>
    <method name="xdr_authunix_parms(int*;struct authunix_parms*):int"/>
    <method name="xdr_bool(XDR*;(*)(int*):int):int"/>
    <method name="xdr_bp_address(XDR*;bp_address*):int"/>
    <method name="xdr_bp_fileid_t(XDR*;bp_fileid_t*):int"/>
    <method name="xdr_bp_getfile_arg(XDR*;bp_getfile_arg*):int"/>
    <method name="xdr_bp_getfile_res(XDR*;bp_getfile_res*):int"/>
    <method name="xdr_bp_machine_name_t(XDR*;bp_machine_name_t*):int"/>
    <method name="xdr_bp_path_t(XDR*;bp_path_t*):int"/>
    <method name="xdr_bp_whoami_arg(XDR*;bp_whoami_arg*):int"/>
    <method name="xdr_bp_whoami_res(XDR*;bp_whoami_res*):int"/>
    <method name="xdr_bytes(XDR*;char**;unsigned int*;unsigned int):int"/>
    <method name="xdr_char(XDR*;char*):int"/>
    <method name="xdr_createargs(XDR*;createargs*):int"/>
    <method name="xdr_des_block(int*;des_block*):int"/>
    <method name="xdr_dirlist(XDR*;dirlist*):int"/>
    <method name="xdr_diropargs(XDR*;diropargs*):int"/>
    <method name="xdr_diropokres(XDR*;diropokres*):int"/>
    <method name="xdr_diropres(XDR*;diropres*):int"/>
    <method name="xdr_dirpath(XDR*;dirpath*):int"/>
    <method name="xdr_domainname(XDR*;domainname*):int"/>
    <method name="xdr_double(XDR*;double*):int"/>
    <method name="xdr_entry(XDR*;entry*):int"/>
    <method name="xdr_enum(XDR*;int*):int"/>
    <method name="xdr_exportnode(XDR*;exportnode*):int"/>
    <method name="xdr_exports(XDR*;exports*):int"/>
    <method name="xdr_fattr(XDR*;fattr*):int"/>
    <method name="xdr_fhandle(XDR*;char*):int"/>
    <method name="xdr_fhstatus(XDR*;fhstatus*):int"/>
    <method name="xdr_filename(XDR*;filename*):int"/>
    <method name="xdr_float(XDR*;float*):int"/>
    <method name="xdr_free():void"/>
    <method name="xdr_fsh_access(XDR*;fsh_access*):int"/>
    <method name="xdr_fsh_mode(XDR*;fsh_mode*):int"/>
    <method name="xdr_ftype(XDR*;ftype*):int"/>
    <method name="xdr_getint32(XDR*;int*):int"/>
    <method name="xdr_getquota_args(XDR*;getquota_args*):int"/>
    <method name="xdr_getquota_rslt(XDR*;getquota_rslt*):int"/>
    <method name="xdr_gqr_status(XDR*;gqr_status*):int"/>
    <method name="xdr_groupnode(XDR*;groupnode*):int"/>
    <method name="xdr_groups(XDR*;groups*):int"/>
    <method name="xdr_hyper(XDR*;int*):int"/>
    <method name="xdr_int(XDR*;int*):int"/>
    <method name="xdr_int16_t(XDR*;int*):int"/>
    <method name="xdr_int32_t(XDR*;int*):int"/>
    <method name="xdr_int64_t(XDR*;int*):int"/>
    <method name="xdr_ip_addr_t(XDR*;ip_addr_t*):int"/>
    <method name="xdr_keydat(XDR*;keydat*):int"/>
    <method name="xdr_klm_holder(XDR*;klm_holder*):int"/>
    <method name="xdr_klm_lock(XDR*;klm_lock*):int"/>
    <method name="xdr_klm_lockargs(XDR*;klm_lockargs*):int"/>
    <method name="xdr_klm_stat(XDR*;klm_stat*):int"/>
    <method name="xdr_klm_stats(XDR*;klm_stats*):int"/>
    <method name="xdr_klm_testargs(XDR*;klm_testargs*):int"/>
    <method name="xdr_klm_testrply(XDR*;klm_testrply*):int"/>
    <method name="xdr_klm_unlockargs(XDR*;klm_unlockargs*):int"/>
    <method name="xdr_linkargs(XDR*;linkargs*):int"/>
    <method name="xdr_long(XDR*;long*):int"/>
    <method name="xdr_longlong_t(XDR*;int*):int"/>
    <method name="xdr_ltchars(XDR*;ltchars*):int"/>
    <method name="xdr_mapname(XDR*;mapname*):int"/>
    <method name="xdr_mon(XDR*;mon*):int"/>
    <method name="xdr_mon_id(XDR*;mon_id*):int"/>
    <method name="xdr_mountbody(XDR*;mountbody*):int"/>
    <method name="xdr_mountlist(XDR*;mountlist*):int"/>
    <method name="xdr_my_id(XDR*;my_id*):int"/>
    <method name="xdr_name(XDR*;name*):int"/>
    <method name="xdr_netobj(XDR*;struct netobj*):int"/>
    <method name="xdr_nfs_fh(XDR*;nfs_fh*):int"/>
    <method name="xdr_nfscookie(XDR*;char*):int"/>
    <method name="xdr_nfspath(XDR*;nfspath*):int"/>
    <method name="xdr_nfsstat(XDR*;nfsstat*):int"/>
    <method name="xdr_nfstime(XDR*;nfstime*):int"/>
    <method name="xdr_nlm4_cancargs(XDR*;nlm4_cancargs*):int"/>
    <method name="xdr_nlm4_holder(XDR*;nlm4_holder*):int"/>
    <method name="xdr_nlm4_lock(XDR*;nlm4_lock*):int"/>
    <method name="xdr_nlm4_lockargs(XDR*;nlm4_lockargs*):int"/>
    <method name="xdr_nlm4_notify(XDR*;nlm4_notify*):int"/>
    <method name="xdr_nlm4_res(XDR*;nlm4_res*):int"/>
    <method name="xdr_nlm4_share(XDR*;nlm4_share*):int"/>
    <method name="xdr_nlm4_shareargs(XDR*;nlm4_shareargs*):int"/>
    <method name="xdr_nlm4_shareres(XDR*;nlm4_shareres*):int"/>
    <method name="xdr_nlm4_stat(XDR*;nlm4_stat*):int"/>
    <method name="xdr_nlm4_stats(XDR*;nlm4_stats*):int"/>
    <method name="xdr_nlm4_testargs(XDR*;nlm4_testargs*):int"/>
    <method name="xdr_nlm4_testres(XDR*;nlm4_testres*):int"/>
    <method name="xdr_nlm4_testrply(XDR*;nlm4_testrply*):int"/>
    <method name="xdr_nlm4_unlockargs(XDR*;nlm4_unlockargs*):int"/>
    <method name="xdr_nlm_cancargs(XDR*;nlm_cancargs*):int"/>
    <method name="xdr_nlm_holder(XDR*;nlm_holder*):int"/>
    <method name="xdr_nlm_lock(XDR*;nlm_lock*):int"/>
    <method name="xdr_nlm_lockargs(XDR*;nlm_lockargs*):int"/>
    <method name="xdr_nlm_notify(XDR*;nlm_notify*):int"/>
    <method name="xdr_nlm_res(XDR*;nlm_res*):int"/>
    <method name="xdr_nlm_share(XDR*;nlm_share*):int"/>
    <method name="xdr_nlm_shareargs(XDR*;nlm_shareargs*):int"/>
    <method name="xdr_nlm_shareres(XDR*;nlm_shareres*):int"/>
    <method name="xdr_nlm_sm_status(XDR*;nlm_sm_status*):int"/>
    <method name="xdr_nlm_stat(XDR*;nlm_stat*):int"/>
    <method name="xdr_nlm_stats(XDR*;nlm_stats*):int"/>
    <method name="xdr_nlm_testargs(XDR*;nlm_testargs*):int"/>
    <method name="xdr_nlm_testres(XDR*;nlm_testres*):int"/>
    <method name="xdr_nlm_testrply(XDR*;nlm_testrply*):int"/>
    <method name="xdr_nlm_unlockargs(XDR*;nlm_unlockargs*):int"/>
    <method name="xdr_opaque(XDR*;char*;unsigned int):int"/>
    <method name="xdr_peername(XDR*;peername*):int"/>
    <method name="xdr_pointer(XDR*;char**;unsigned int;int):int"/>
    <method name="xdr_putint32(XDR*;int*):int"/>
    <method name="xdr_quadruple(XDR*;long double*):int"/>
    <method name="xdr_readargs(XDR*;readargs*):int"/>
    <method name="xdr_readdirargs(XDR*;readdirargs*):int"/>
    <method name="xdr_readdirres(XDR*;readdirres*):int"/>
    <method name="xdr_readlinkres(XDR*;readlinkres*):int"/>
    <method name="xdr_readokres(XDR*;readokres*):int"/>
    <method name="xdr_readres(XDR*;readres*):int"/>
    <method name="xdr_reference(XDR*;char**;unsigned int;int):int"/>
    <method name="xdr_renameargs(XDR*;renameargs*):int"/>
    <method name="xdr_rex_result(XDR*;rex_result*):int"/>
    <method name="xdr_rex_start(XDR*;rex_start*):int"/>
    <method name="xdr_rex_ttymode(XDR*;rex_ttymode*):int"/>
    <method name="xdr_rex_ttysize(XDR*;rex_ttysize*):int"/>
    <method name="xdr_rexstring(XDR*;rexstring*):int"/>
    <method name="xdr_rquota(XDR*;rquota*):int"/>
    <method name="xdr_rstat_timeval(XDR*;rstat_timeval*):int"/>
    <method name="xdr_rusers_utmp(XDR*;rusers_utmp*):int"/>
    <method name="xdr_sattr(XDR*;sattr*):int"/>
    <method name="xdr_sattrargs(XDR*;sattrargs*):int"/>
    <method name="xdr_sgttyb(XDR*;sgttyb*):int"/>
    <method name="xdr_short(XDR*;short*):int"/>
    <method name="xdr_sm_name(XDR*;sm_name*):int"/>
    <method name="xdr_sm_res(XDR*;sm_res*):int"/>
    <method name="xdr_sm_stat(XDR*;sm_stat*):int"/>
    <method name="xdr_sm_stat_res(XDR*;sm_stat_res*):int"/>
    <method name="xdr_sm_status(XDR*;sm_status*):int"/>
    <method name="xdr_sprayarr(XDR*;sprayarr*):int"/>
    <method name="xdr_spraycumul(XDR*;spraycumul*):int"/>
    <method name="xdr_spraytimeval(XDR*;spraytimeval*):int"/>
    <method name="xdr_stat_chge(XDR*;stat_chge*):int"/>
    <method name="xdr_statfsokres(XDR*;statfsokres*):int"/>
    <method name="xdr_statfsres(XDR*;statfsres*):int"/>
    <method name="xdr_stats(XDR*;stats*):int"/>
    <method name="xdr_statsswtch(XDR*;statsswtch*):int"/>
    <method name="xdr_statstime(XDR*;statstime*):int"/>
    <method name="xdr_string(XDR*;char**;unsigned int):int"/>
    <method name="xdr_symlinkargs(XDR*;symlinkargs*):int"/>
    <method name="xdr_tchars(XDR*;tchars*):int"/>
    <method name="xdr_u_char(XDR*;unsigned char*):int"/>
    <method name="xdr_u_hyper(XDR*;int*):int"/>
    <method name="xdr_u_int(XDR*;unsigned int*):int"/>
    <method name="xdr_u_int16_t(XDR*;int*):int"/>
    <method name="xdr_u_int32_t(XDR*;int*):int"/>
    <method name="xdr_u_int64_t(XDR*;int*):int"/>
    <method name="xdr_u_long(XDR*;unsigned long*):int"/>
    <method name="xdr_u_longlong_t(XDR*;int*):int"/>
    <method name="xdr_u_short(XDR*;unsigned short*):int"/>
    <method name="xdr_union(XDR*;int*;char*;const struct xdr_discrim*;int):int"/>
    <method name="xdr_utmp_array(XDR*;utmp_array*):int"/>
    <method name="xdr_utmparr():int"/>
    <method name="xdr_utmpidlearr():int"/>
    <method name="xdr_valdat(XDR*;valdat*):int"/>
    <method name="xdr_vector(XDR*;char*;unsigned int;unsigned int;int):int"/>
    <method name="xdr_void():int"/>
    <method name="xdr_wrapstring(XDR*;char**):int"/>
    <method name="xdr_writeargs(XDR*;writeargs*):int"/>
    <method name="xdr_x_passwd(XDR*;x_passwd*):int"/>
    <method name="xdr_ypbind_binding(XDR*;ypbind_binding*):int"/>
    <method name="xdr_ypbind_resp(XDR*;ypbind_resp*):int"/>
    <method name="xdr_ypbind_resptype(XDR*;ypbind_resptype*):int"/>
    <method name="xdr_ypbind_setdom(XDR*;ypbind_setdom*):int"/>
    <method name="xdr_ypmap_parms(XDR*;ypmap_parms*):int"/>
    <method name="xdr_ypmaplist(XDR*;ypmaplist*):int"/>
    <method name="xdr_yppasswd(XDR*;yppasswd*):int"/>
    <method name="xdr_yppush_status(XDR*;yppush_status*):int"/>
    <method name="xdr_yppushresp_xfr(XDR*;yppushresp_xfr*):int"/>
    <method name="xdr_ypreq_key(XDR*;ypreq_key*):int"/>
    <method name="xdr_ypreq_nokey(XDR*;ypreq_nokey*):int"/>
    <method name="xdr_ypreq_xfr(XDR*;ypreq_xfr*):int"/>
    <method name="xdr_ypreqtype(XDR*;ypreqtype*):int"/>
    <method name="xdr_yprequest(XDR*;yprequest*):int"/>
    <method name="xdr_ypresp_all(XDR*;ypresp_all*):int"/>
    <method name="xdr_ypresp_key_val(XDR*;ypresp_key_val*):int"/>
    <method name="xdr_ypresp_maplist(XDR*;ypresp_maplist*):int"/>
    <method name="xdr_ypresp_master(XDR*;ypresp_master*):int"/>
    <method name="xdr_ypresp_order(XDR*;ypresp_order*):int"/>
    <method name="xdr_ypresp_val(XDR*;ypresp_val*):int"/>
    <method name="xdr_ypresp_xfr(XDR*;ypresp_xfr*):int"/>
    <method name="xdr_ypresponse(XDR*;ypresponse*):int"/>
    <method name="xdr_ypresptype(XDR*;ypresptype*):int"/>
    <method name="xdr_ypstat(XDR*;ypstat*):int"/>
    <method name="xdr_ypxfrstat(XDR*;ypxfrstat*):int"/>
    <method name="xdrmem_create(XDR*;char*;unsigned int;enum xdr_op):void"/>
    <method name="xdrrec_create(XDR*;unsigned int;unsigned int;void*;(*)(void*;void*;int):int;(*)(void*;void*;int):int):void"/>
    <method name="xdrrec_endofrecord(XDR*;int):int"/>
    <method name="xdrrec_eof(XDR*):int"/>
    <method name="xdrrec_readbytes(XDR*;int;unsigned int):unsigned int"/>
    <method name="xdrrec_skiprecord(XDR*):int"/>
    <method name="xmlAllocParserInputBuffer(int):int"/>
    <method name="xmlCheckHTTPInput(int;int):int"/>
    <method name="xmlCtxtGetLastError(void*):int"/>
    <method name="xmlGetLastError():int"/>
    <method name="xmlNoNetExternalEntityLoader(const char*;const char*;int):int"/>
    <method name="xmlParserInputBufferCreateFd(int;int):int"/>
    <method name="xmlParserInputBufferCreateFile(FILE*;int):int"/>
    <method name="xmlParserInputBufferCreateFilename(const char*;int):int"/>
    <method name="xmlParserInputBufferCreateIO(int;int;void*;int):int"/>
    <method name="xmlParserInputBufferCreateMem(const char*;int;int):int"/>
    <method name="xmlParserInputBufferCreateStatic(const char*;int;int):int"/>
    <method name="xml_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="xprt_register(SVCXPRT*):void"/>
    <method name="xprt_unregister(SVCXPRT*):void"/>
    <method name="y0(double):double"/>
    <method name="y1(double):double"/>
    <method name="yn(int;double):double"/>
    <method name="zError(int):const char*"/>
    <method name="zgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgebal_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgecon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zgeev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgegs_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgegv_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgesc2_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgetc2_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetri_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggbal_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zggev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgtcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgttrf_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhecon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zheequb_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zheev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zheevd_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zheevr_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zheevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhegvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zherfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhesv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhetd2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhetf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhetrd_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhetrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhetri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zhgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhpev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpevd_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhpgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhptrd_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhptrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhptri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zip64FlushWriteBuffer(zip64_internal*):int"/>
    <method name="zip64local_SearchCentralDir(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="zip64local_SearchCentralDir64(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="zip64local_TmzDateToDosDate(const tm_zip*):uLong"/>
    <method name="zip64local_getByte(const zlib_filefunc64_32_def*;voidpf;int*):int"/>
    <method name="zip64local_getLong(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="zip64local_getLong64(const zlib_filefunc64_32_def*;voidpf;ZPOS64_T*):int"/>
    <method name="zip64local_getShort(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="zip64local_putValue(const zlib_filefunc64_32_def*;voidpf;ZPOS64_T;int):int"/>
    <method name="zip64local_putValue_inmemory(void*;ZPOS64_T;int):void"/>
    <method name="zipClose(zipFile;const char*):int"/>
    <method name="zipCloseFileInZip(zipFile):int"/>
    <method name="zipCloseFileInZipRaw(zipFile;uLong;uLong):int"/>
    <method name="zipCloseFileInZipRaw64(zipFile;ZPOS64_T;uLong):int"/>
    <method name="zipOpen(const char*;int):zipFile"/>
    <method name="zipOpen2(const char*;int;zipcharpc*;zlib_filefunc_def*):zipFile"/>
    <method name="zipOpen2_64(const void*;int;zipcharpc*;zlib_filefunc64_def*):zipFile"/>
    <method name="zipOpen3(const void*;int;zipcharpc*;zlib_filefunc64_32_def*):zipFile"/>
    <method name="zipOpen64(const void*;int):zipFile"/>
    <method name="zipOpenNewFileInZip(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int):int"/>
    <method name="zipOpenNewFileInZip2(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int):int"/>
    <method name="zipOpenNewFileInZip2_64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int):int"/>
    <method name="zipOpenNewFileInZip3(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong):int"/>
    <method name="zipOpenNewFileInZip3_64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong;int):int"/>
    <method name="zipOpenNewFileInZip4(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong;uLong;uLong):int"/>
    <method name="zipOpenNewFileInZip4_64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong;uLong;uLong;int):int"/>
    <method name="zipOpenNewFileInZip64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int):int"/>
    <method name="zipRemoveExtraInfoBlock(char*;int*;short):int"/>
    <method name="zipWriteInFileInZip(zipFile;const void*;unsigned int):int"/>
    <method name="zlabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacgv_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacn2_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlacon_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlacp2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacrm_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zlacrt_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zladiv_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):void"/>
    <method name="zlaed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlaein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlaesy_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlaev2_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zlag2c_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlags2_(__CLPK_logical*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zlagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlahef_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlangt_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):__CLPK_doublereal"/>
    <method name="zlanhb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhe_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhf_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhp_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhs_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanht_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*):__CLPK_doublereal"/>
    <method name="zlansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlansp_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlansy_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlantp_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlapll_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zlapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqhb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqhe_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqhp_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zlaqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaqr1_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlaqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqsp_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqsy_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="zlar2v_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarcm_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zlarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarfg_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarfp_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlargv_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarrv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlartg_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlartv_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlassq_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="zlaswp_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlat2c_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlauu2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlauum_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlibCompileFlags():uLong"/>
    <method name="zlibVersion():const char*"/>
    <method name="zopen(const char*;const char*;int):FILE*"/>
    <method name="zpbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpftrf_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpftri_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpocon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpoequ_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpoequb_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpotf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpotrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpotri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zppcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zppequ_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;char*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpptrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpptri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpstf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpstrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zptcon_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zptrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpttrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zrot_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zspcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zspmv_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zspr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zsprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsptrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsptri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstedc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstegr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstein_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstemr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsycon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsyequb_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsymv_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsyr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsytf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsytrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsytri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztftri_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztfttp_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztfttr_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztptri_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztpttf_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztpttr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrexc_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrti2_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrtri_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrttf_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztrttp_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zung2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zung2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zungbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zungrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungtr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zupgtr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zupmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="&lt;automatic_callback_source&gt;(...):void"/>
    <method name="&lt;external_source&gt;(...):void"/>
    <method name="&lt;external_taint&gt;(...):LPCSTR"/>
    <method name="ABAddressBookAddRecord(ABAddressBookRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef;ABRecordRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef;ABRecordRef):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef;ABRecordRef;ABPersonSortOrdering):CFArrayRef"/>
    <method name="ABAddressBookCopyArrayOfAllSources(ABAddressBookRef):CFArrayRef"/>
    <method name="ABAddressBookCopyDefaultSource(ABAddressBookRef):ABRecordRef"/>
    <method name="ABAddressBookCopyLocalizedLabel(CFStringRef):CFStringRef"/>
    <method name="ABAddressBookCopyPeopleWithName(ABAddressBookRef;CFStringRef):CFArrayRef"/>
    <method name="ABAddressBookCreate():ABAddressBookRef"/>
    <method name="ABAddressBookCreateWithOptions(CFDictionaryRef;CFErrorRef*):ABAddressBookRef"/>
    <method name="ABAddressBookGetAuthorizationStatus():ABAuthorizationStatus"/>
    <method name="ABAddressBookGetGroupCount(ABAddressBookRef):CFIndex"/>
    <method name="ABAddressBookGetGroupWithRecordID(ABAddressBookRef;ABRecordID):ABRecordRef"/>
    <method name="ABAddressBookGetPersonCount(ABAddressBookRef):CFIndex"/>
    <method name="ABAddressBookGetPersonWithRecordID(ABAddressBookRef;ABRecordID):ABRecordRef"/>
    <method name="ABAddressBookGetSourceWithRecordID(ABAddressBookRef;ABRecordID):ABRecordRef"/>
    <method name="ABAddressBookHasUnsavedChanges(ABAddressBookRef):_Bool"/>
    <method name="ABAddressBookRegisterExternalChangeCallback(ABAddressBookRef;ABExternalChangeCallback;void*):void"/>
    <method name="ABAddressBookRemoveRecord(ABAddressBookRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABAddressBookRequestAccessWithCompletion(ABAddressBookRef;(^)(_Bool;CFErrorRef):void):void"/>
    <method name="ABAddressBookRevert(ABAddressBookRef):void"/>
    <method name="ABAddressBookSave(ABAddressBookRef;CFErrorRef*):_Bool"/>
    <method name="ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef;ABExternalChangeCallback;void*):void"/>
    <method name="ABCreateStringWithAddressDictionary(NSDictionary*;BOOL):NSString*"/>
    <method name="ABGroupAddMember(ABRecordRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABGroupCopyArrayOfAllMembers(ABRecordRef):CFArrayRef"/>
    <method name="ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef;ABPersonSortOrdering):CFArrayRef"/>
    <method name="ABGroupCopySource(ABRecordRef):ABRecordRef"/>
    <method name="ABGroupCreate():ABRecordRef"/>
    <method name="ABGroupCreateInSource(ABRecordRef):ABRecordRef"/>
    <method name="ABGroupRemoveMember(ABRecordRef;ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABMultiValueAddValueAndLabel(ABMutableMultiValueRef;CFTypeRef;CFStringRef;ABMultiValueIdentifier*):_Bool"/>
    <method name="ABMultiValueCopyArrayOfAllValues(ABMultiValueRef):CFArrayRef"/>
    <method name="ABMultiValueCopyLabelAtIndex(ABMultiValueRef;CFIndex):CFStringRef"/>
    <method name="ABMultiValueCopyValueAtIndex(ABMultiValueRef;CFIndex):CFTypeRef"/>
    <method name="ABMultiValueCreateMutable(ABPropertyType):ABMutableMultiValueRef"/>
    <method name="ABMultiValueCreateMutableCopy(ABMultiValueRef):ABMutableMultiValueRef"/>
    <method name="ABMultiValueGetCount(ABMultiValueRef):CFIndex"/>
    <method name="ABMultiValueGetFirstIndexOfValue(ABMultiValueRef;CFTypeRef):CFIndex"/>
    <method name="ABMultiValueGetIdentifierAtIndex(ABMultiValueRef;CFIndex):ABMultiValueIdentifier"/>
    <method name="ABMultiValueGetIndexForIdentifier(ABMultiValueRef;ABMultiValueIdentifier):CFIndex"/>
    <method name="ABMultiValueGetPropertyType(ABMultiValueRef):ABPropertyType"/>
    <method name="ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef;CFTypeRef;CFStringRef;CFIndex;ABMultiValueIdentifier*):_Bool"/>
    <method name="ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef;CFIndex):_Bool"/>
    <method name="ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef;CFStringRef;CFIndex):_Bool"/>
    <method name="ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef;CFTypeRef;CFIndex):_Bool"/>
    <method name="ABPersonComparePeopleByName(ABRecordRef;ABRecordRef;ABPersonSortOrdering):CFComparisonResult"/>
    <method name="ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef):CFArrayRef"/>
    <method name="ABPersonCopyImageData(ABRecordRef):CFDataRef"/>
    <method name="ABPersonCopyImageDataWithFormat(ABRecordRef;ABPersonImageFormat):CFDataRef"/>
    <method name="ABPersonCopyLocalizedPropertyName(ABPropertyID):CFStringRef"/>
    <method name="ABPersonCopySource(ABRecordRef):ABRecordRef"/>
    <method name="ABPersonCreate():ABRecordRef"/>
    <method name="ABPersonCreateInSource(ABRecordRef):ABRecordRef"/>
    <method name="ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef;CFDataRef):CFArrayRef"/>
    <method name="ABPersonCreateVCardRepresentationWithPeople(CFArrayRef):CFDataRef"/>
    <method name="ABPersonGetCompositeNameFormat():ABPersonCompositeNameFormat"/>
    <method name="ABPersonGetSortOrdering():ABPersonSortOrdering"/>
    <method name="ABPersonGetTypeOfProperty(ABPropertyID):ABPropertyType"/>
    <method name="ABPersonHasImageData(ABRecordRef):_Bool"/>
    <method name="ABPersonRemoveImageData(ABRecordRef;CFErrorRef*):_Bool"/>
    <method name="ABPersonSetImageData(ABRecordRef;CFDataRef;CFErrorRef*):_Bool"/>
    <method name="ABRecordCopyCompositeName(ABRecordRef):CFStringRef"/>
    <method name="ABRecordCopyValue(ABRecordRef;ABPropertyID):CFTypeRef"/>
    <method name="ABRecordGetRecordID(ABRecordRef):ABRecordID"/>
    <method name="ABRecordGetRecordType(ABRecordRef):ABRecordType"/>
    <method name="ABRecordRemoveValue(ABRecordRef;ABPropertyID;CFErrorRef*):_Bool"/>
    <method name="ABRecordSetValue(ABRecordRef;ABPropertyID;CFTypeRef;CFErrorRef*):_Bool"/>
    <method name="ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION*):void"/>
    <method name="ACCESS_DESCRIPTION_new():ACCESS_DESCRIPTION*"/>
    <method name="AES_bi_ige_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;const AES_KEY*;const unsigned char*;int):void"/>
    <method name="AES_cbc_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int):void"/>
    <method name="AES_cfb128_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*;int):void"/>
    <method name="AES_cfb1_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*;int):void"/>
    <method name="AES_cfb8_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*;int):void"/>
    <method name="AES_cfbr_encrypt_block(const unsigned char*;unsigned char*;int;const AES_KEY*;unsigned char*;int):void"/>
    <method name="AES_ctr128_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;unsigned char*;unsigned int*):void"/>
    <method name="AES_decrypt(const unsigned char*;unsigned char*;const AES_KEY*):void"/>
    <method name="AES_ecb_encrypt(const unsigned char*;unsigned char*;const AES_KEY*;int):void"/>
    <method name="AES_encrypt(const unsigned char*;unsigned char*;const AES_KEY*):void"/>
    <method name="AES_ige_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int):void"/>
    <method name="AES_ofb128_encrypt(const unsigned char*;unsigned char*;unsigned long;const AES_KEY*;unsigned char*;int*):void"/>
    <method name="AES_options():const char*"/>
    <method name="AES_set_decrypt_key(const unsigned char*;int;AES_KEY*):int"/>
    <method name="AES_set_encrypt_key(const unsigned char*;int;AES_KEY*):int"/>
    <method name="AFBase64EncodedStringFromString(NSString*):NSString*"/>
    <method name="AFContentTypeForPathExtension(NSString*):NSString*"/>
    <method name="AFContentTypesFromHTTPHeader(NSString*):NSSet*"/>
    <method name="AFImageCacheKeyFromURLRequest(NSURLRequest*):NSString*"/>
    <method name="AFKeyPathFromOperationState(AFOperationState):NSString*"/>
    <method name="AFMultipartFormEncapsulationBoundary():NSString*"/>
    <method name="AFMultipartFormFinalBoundary():NSString*"/>
    <method name="AFMultipartFormInitialBoundary():NSString*"/>
    <method name="AFPercentEscapedQueryStringPairMemberFromStringWithEncoding(NSString*;NSStringEncoding):NSString*"/>
    <method name="AFQueryStringFromParametersWithEncoding(NSDictionary*;NSStringEncoding):NSString*"/>
    <method name="AFQueryStringPairsFromDictionary(NSDictionary*):NSArray*"/>
    <method name="AFQueryStringPairsFromKeyAndValue(NSString*;id):NSArray*"/>
    <method name="AFStateTransitionIsValid(AFOperationState;AFOperationState;BOOL):BOOL"/>
    <method name="AFStringFromIndexSet(NSIndexSet*):NSString*"/>
    <method name="AFSwizzleClassMethodWithClassAndSelectorUsingBlock(Class*;SEL;id):void"/>
    <method name="ASN1_BIT_STRING_asn1_meth():ASN1_METHOD*"/>
    <method name="ASN1_BIT_STRING_free(ASN1_BIT_STRING*):void"/>
    <method name="ASN1_BIT_STRING_get_bit(ASN1_BIT_STRING*;int):int"/>
    <method name="ASN1_BIT_STRING_name_print(BIO*;ASN1_BIT_STRING*;BIT_STRING_BITNAME*;int):int"/>
    <method name="ASN1_BIT_STRING_new():ASN1_BIT_STRING*"/>
    <method name="ASN1_BIT_STRING_num_asc(char*;BIT_STRING_BITNAME*):int"/>
    <method name="ASN1_BIT_STRING_set(ASN1_BIT_STRING*;unsigned char*;int):int"/>
    <method name="ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING*;char*;int;BIT_STRING_BITNAME*):int"/>
    <method name="ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING*;int;int):int"/>
    <method name="ASN1_BMPSTRING_free(ASN1_BMPSTRING*):void"/>
    <method name="ASN1_BMPSTRING_new():ASN1_BMPSTRING*"/>
    <method name="ASN1_ENUMERATED_free(ASN1_ENUMERATED*):void"/>
    <method name="ASN1_ENUMERATED_get(ASN1_ENUMERATED*):long"/>
    <method name="ASN1_ENUMERATED_new():ASN1_ENUMERATED*"/>
    <method name="ASN1_ENUMERATED_set(ASN1_ENUMERATED*;long):int"/>
    <method name="ASN1_ENUMERATED_to_BN(ASN1_ENUMERATED*;BIGNUM*):BIGNUM*"/>
    <method name="ASN1_GENERALIZEDTIME_check(ASN1_GENERALIZEDTIME*):int"/>
    <method name="ASN1_GENERALIZEDTIME_free(ASN1_GENERALIZEDTIME*):void"/>
    <method name="ASN1_GENERALIZEDTIME_new():ASN1_GENERALIZEDTIME*"/>
    <method name="ASN1_GENERALIZEDTIME_print(BIO*;ASN1_GENERALIZEDTIME*):int"/>
    <method name="ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME*;time_t):ASN1_GENERALIZEDTIME*"/>
    <method name="ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME*;const char*):int"/>
    <method name="ASN1_GENERALSTRING_free(ASN1_GENERALSTRING*):void"/>
    <method name="ASN1_GENERALSTRING_new():ASN1_GENERALSTRING*"/>
    <method name="ASN1_HEADER_free(ASN1_HEADER*):void"/>
    <method name="ASN1_HEADER_new():ASN1_HEADER*"/>
    <method name="ASN1_IA5STRING_asn1_meth():ASN1_METHOD*"/>
    <method name="ASN1_IA5STRING_free(ASN1_IA5STRING*):void"/>
    <method name="ASN1_IA5STRING_new():ASN1_IA5STRING*"/>
    <method name="ASN1_INTEGER_cmp(ASN1_INTEGER*;ASN1_INTEGER*):int"/>
    <method name="ASN1_INTEGER_dup(ASN1_INTEGER*):ASN1_INTEGER*"/>
    <method name="ASN1_INTEGER_free(ASN1_INTEGER*):void"/>
    <method name="ASN1_INTEGER_get(ASN1_INTEGER*):long"/>
    <method name="ASN1_INTEGER_new():ASN1_INTEGER*"/>
    <method name="ASN1_INTEGER_set(ASN1_INTEGER*;long):int"/>
    <method name="ASN1_INTEGER_to_BN(ASN1_INTEGER*;BIGNUM*):BIGNUM*"/>
    <method name="ASN1_NULL_free(ASN1_NULL*):void"/>
    <method name="ASN1_NULL_new():ASN1_NULL*"/>
    <method name="ASN1_OBJECT_create(int;unsigned char*;int;const char*;const char*):ASN1_OBJECT*"/>
    <method name="ASN1_OBJECT_free(ASN1_OBJECT*):void"/>
    <method name="ASN1_OBJECT_new():ASN1_OBJECT*"/>
    <method name="ASN1_OCTET_STRING_cmp(ASN1_OCTET_STRING*;ASN1_OCTET_STRING*):int"/>
    <method name="ASN1_OCTET_STRING_dup(ASN1_OCTET_STRING*):ASN1_OCTET_STRING*"/>
    <method name="ASN1_OCTET_STRING_free(ASN1_OCTET_STRING*):void"/>
    <method name="ASN1_OCTET_STRING_new():ASN1_OCTET_STRING*"/>
    <method name="ASN1_OCTET_STRING_set(ASN1_OCTET_STRING*;const unsigned char*;int):int"/>
    <method name="ASN1_PRINTABLESTRING_free(ASN1_PRINTABLESTRING*):void"/>
    <method name="ASN1_PRINTABLESTRING_new():ASN1_PRINTABLESTRING*"/>
    <method name="ASN1_PRINTABLE_free(ASN1_STRING*):void"/>
    <method name="ASN1_PRINTABLE_new():ASN1_STRING*"/>
    <method name="ASN1_PRINTABLE_type(const unsigned char*;int):int"/>
    <method name="ASN1_STRING_TABLE_add(int;long;long;unsigned long;unsigned long):int"/>
    <method name="ASN1_STRING_TABLE_cleanup():void"/>
    <method name="ASN1_STRING_TABLE_get(int):ASN1_STRING_TABLE*"/>
    <method name="ASN1_STRING_cmp(ASN1_STRING*;ASN1_STRING*):int"/>
    <method name="ASN1_STRING_data(ASN1_STRING*):unsigned char*"/>
    <method name="ASN1_STRING_dup(ASN1_STRING*):ASN1_STRING*"/>
    <method name="ASN1_STRING_encode(ASN1_STRING*;i2d_of_void*;void*;STACK*):ASN1_STRING*"/>
    <method name="ASN1_STRING_free(ASN1_STRING*):void"/>
    <method name="ASN1_STRING_get_default_mask():unsigned long"/>
    <method name="ASN1_STRING_length(ASN1_STRING*):int"/>
    <method name="ASN1_STRING_length_set(ASN1_STRING*;int):void"/>
    <method name="ASN1_STRING_new():ASN1_STRING*"/>
    <method name="ASN1_STRING_print(BIO*;ASN1_STRING*):int"/>
    <method name="ASN1_STRING_print_ex(BIO*;ASN1_STRING*;unsigned long):int"/>
    <method name="ASN1_STRING_print_ex_fp(FILE*;ASN1_STRING*;unsigned long):int"/>
    <method name="ASN1_STRING_set(ASN1_STRING*;const void*;int):int"/>
    <method name="ASN1_STRING_set_by_NID(ASN1_STRING**;const unsigned char*;int;int;int):ASN1_STRING*"/>
    <method name="ASN1_STRING_set_default_mask(unsigned long):void"/>
    <method name="ASN1_STRING_set_default_mask_asc(char*):int"/>
    <method name="ASN1_STRING_to_UTF8(unsigned char**;ASN1_STRING*):int"/>
    <method name="ASN1_STRING_type(ASN1_STRING*):int"/>
    <method name="ASN1_STRING_type_new(int):ASN1_STRING*"/>
    <method name="ASN1_T61STRING_free(ASN1_T61STRING*):void"/>
    <method name="ASN1_T61STRING_new():ASN1_T61STRING*"/>
    <method name="ASN1_TIME_check(ASN1_TIME*):int"/>
    <method name="ASN1_TIME_free(ASN1_TIME*):void"/>
    <method name="ASN1_TIME_new():ASN1_TIME*"/>
    <method name="ASN1_TIME_print(BIO*;ASN1_TIME*):int"/>
    <method name="ASN1_TIME_set(ASN1_TIME*;time_t):ASN1_TIME*"/>
    <method name="ASN1_TIME_to_generalizedtime(ASN1_TIME*;ASN1_GENERALIZEDTIME**):ASN1_GENERALIZEDTIME*"/>
    <method name="ASN1_TYPE_free(ASN1_TYPE*):void"/>
    <method name="ASN1_TYPE_get(ASN1_TYPE*):int"/>
    <method name="ASN1_TYPE_get_int_octetstring(ASN1_TYPE*;long*;unsigned char*;int):int"/>
    <method name="ASN1_TYPE_get_octetstring(ASN1_TYPE*;unsigned char*;int):int"/>
    <method name="ASN1_TYPE_new():ASN1_TYPE*"/>
    <method name="ASN1_TYPE_set(ASN1_TYPE*;int;void*):void"/>
    <method name="ASN1_TYPE_set_int_octetstring(ASN1_TYPE*;long;unsigned char*;int):int"/>
    <method name="ASN1_TYPE_set_octetstring(ASN1_TYPE*;unsigned char*;int):int"/>
    <method name="ASN1_UNIVERSALSTRING_free(ASN1_UNIVERSALSTRING*):void"/>
    <method name="ASN1_UNIVERSALSTRING_new():ASN1_UNIVERSALSTRING*"/>
    <method name="ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING*):int"/>
    <method name="ASN1_UTCTIME_check(ASN1_UTCTIME*):int"/>
    <method name="ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME*;time_t):int"/>
    <method name="ASN1_UTCTIME_free(ASN1_UTCTIME*):void"/>
    <method name="ASN1_UTCTIME_new():ASN1_UTCTIME*"/>
    <method name="ASN1_UTCTIME_print(BIO*;ASN1_UTCTIME*):int"/>
    <method name="ASN1_UTCTIME_set(ASN1_UTCTIME*;time_t):ASN1_UTCTIME*"/>
    <method name="ASN1_UTCTIME_set_string(ASN1_UTCTIME*;const char*):int"/>
    <method name="ASN1_UTF8STRING_free(ASN1_UTF8STRING*):void"/>
    <method name="ASN1_UTF8STRING_new():ASN1_UTF8STRING*"/>
    <method name="ASN1_VISIBLESTRING_free(ASN1_VISIBLESTRING*):void"/>
    <method name="ASN1_VISIBLESTRING_new():ASN1_VISIBLESTRING*"/>
    <method name="ASN1_add_oid_module():void"/>
    <method name="ASN1_check_infinite_end(unsigned char**;long):int"/>
    <method name="ASN1_const_check_infinite_end(const unsigned char**;long):int"/>
    <method name="ASN1_d2i_bio((*)():void**;d2i_of_void*;BIO*;void**):void*"/>
    <method name="ASN1_d2i_fp((*)():void**;d2i_of_void*;FILE*;void**):void*"/>
    <method name="ASN1_digest(i2d_of_void*;const EVP_MD*;char*;unsigned char*;unsigned int*):int"/>
    <method name="ASN1_dup(i2d_of_void*;d2i_of_void*;char*):void*"/>
    <method name="ASN1_generate_nconf(char*;CONF*):ASN1_TYPE*"/>
    <method name="ASN1_generate_v3(char*;X509V3_CTX*):ASN1_TYPE*"/>
    <method name="ASN1_get_object(const unsigned char**;long*;int*;int*;long):int"/>
    <method name="ASN1_i2d_bio(i2d_of_void*;BIO*;unsigned char*):int"/>
    <method name="ASN1_i2d_fp(i2d_of_void*;FILE*;void*):int"/>
    <method name="ASN1_item_d2i(ASN1_VALUE**;const unsigned char**;long;const ASN1_ITEM*):ASN1_VALUE*"/>
    <method name="ASN1_item_d2i_bio(const ASN1_ITEM*;BIO*;void*):void*"/>
    <method name="ASN1_item_d2i_fp(const ASN1_ITEM*;FILE*;void*):void*"/>
    <method name="ASN1_item_digest(const ASN1_ITEM*;const EVP_MD*;void*;unsigned char*;unsigned int*):int"/>
    <method name="ASN1_item_dup(const ASN1_ITEM*;void*):void*"/>
    <method name="ASN1_item_ex_d2i(ASN1_VALUE**;const unsigned char**;long;const ASN1_ITEM*;int;int;char;ASN1_TLC*):int"/>
    <method name="ASN1_item_ex_free(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="ASN1_item_ex_i2d(ASN1_VALUE**;unsigned char**;const ASN1_ITEM*;int;int):int"/>
    <method name="ASN1_item_ex_new(ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="ASN1_item_free(ASN1_VALUE*;const ASN1_ITEM*):void"/>
    <method name="ASN1_item_i2d(ASN1_VALUE*;unsigned char**;const ASN1_ITEM*):int"/>
    <method name="ASN1_item_i2d_bio(const ASN1_ITEM*;BIO*;void*):int"/>
    <method name="ASN1_item_i2d_fp(const ASN1_ITEM*;FILE*;void*):int"/>
    <method name="ASN1_item_ndef_i2d(ASN1_VALUE*;unsigned char**;const ASN1_ITEM*):int"/>
    <method name="ASN1_item_new(const ASN1_ITEM*):ASN1_VALUE*"/>
    <method name="ASN1_item_pack(void*;const ASN1_ITEM*;ASN1_OCTET_STRING**):ASN1_STRING*"/>
    <method name="ASN1_item_sign(const ASN1_ITEM*;X509_ALGOR*;X509_ALGOR*;ASN1_BIT_STRING*;void*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="ASN1_item_unpack(ASN1_STRING*;const ASN1_ITEM*):void*"/>
    <method name="ASN1_item_verify(const ASN1_ITEM*;X509_ALGOR*;ASN1_BIT_STRING*;void*;EVP_PKEY*):int"/>
    <method name="ASN1_mbstring_copy(ASN1_STRING**;const unsigned char*;int;int;unsigned long):int"/>
    <method name="ASN1_mbstring_ncopy(ASN1_STRING**;const unsigned char*;int;int;unsigned long;long;long):int"/>
    <method name="ASN1_object_size(int;int;int):int"/>
    <method name="ASN1_pack_string(void*;i2d_of_void*;ASN1_OCTET_STRING**):ASN1_STRING*"/>
    <method name="ASN1_parse(BIO*;const unsigned char*;long;int):int"/>
    <method name="ASN1_parse_dump(BIO*;const unsigned char*;long;int;int):int"/>
    <method name="ASN1_primitive_free(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="ASN1_primitive_new(ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="ASN1_put_eoc(unsigned char**):int"/>
    <method name="ASN1_put_object(unsigned char**;int;int;int;int):void"/>
    <method name="ASN1_seq_pack(STACK*;i2d_of_void*;unsigned char**;int*):unsigned char*"/>
    <method name="ASN1_seq_unpack(const unsigned char*;int;d2i_of_void*;(*)(void*):void*):STACK*"/>
    <method name="ASN1_sign(i2d_of_void*;X509_ALGOR*;X509_ALGOR*;ASN1_BIT_STRING*;char*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="ASN1_tag2bit(int):unsigned long"/>
    <method name="ASN1_tag2str(int):const char*"/>
    <method name="ASN1_template_d2i(ASN1_VALUE**;const unsigned char**;long;const ASN1_TEMPLATE*):int"/>
    <method name="ASN1_template_free(ASN1_VALUE**;const ASN1_TEMPLATE*):void"/>
    <method name="ASN1_template_i2d(ASN1_VALUE**;unsigned char**;const ASN1_TEMPLATE*):int"/>
    <method name="ASN1_template_new(ASN1_VALUE**;const ASN1_TEMPLATE*):int"/>
    <method name="ASN1_unpack_string(ASN1_STRING*;d2i_of_void*):void*"/>
    <method name="ASN1_verify(i2d_of_void*;X509_ALGOR*;ASN1_BIT_STRING*;char*;EVP_PKEY*):int"/>
    <method name="ATLU_DestroyThreadMemory():void"/>
    <method name="AUGraphAddNode(AUGraph;const AudioComponentDescription*;AUNode*):OSStatus"/>
    <method name="AUGraphAddRenderNotify(AUGraph;AURenderCallback;void*):OSStatus"/>
    <method name="AUGraphClearConnections(AUGraph):OSStatus"/>
    <method name="AUGraphClose(AUGraph):OSStatus"/>
    <method name="AUGraphConnectNodeInput(AUGraph;AUNode;UInt32;AUNode;UInt32):OSStatus"/>
    <method name="AUGraphCountNodeInteractions(AUGraph;AUNode;UInt32*):OSStatus"/>
    <method name="AUGraphDisconnectNodeInput(AUGraph;AUNode;UInt32):OSStatus"/>
    <method name="AUGraphGetCPULoad(AUGraph;Float32*):OSStatus"/>
    <method name="AUGraphGetIndNode(AUGraph;UInt32;AUNode*):OSStatus"/>
    <method name="AUGraphGetInteractionInfo(AUGraph;UInt32;AUNodeInteraction*):OSStatus"/>
    <method name="AUGraphGetMaxCPULoad(AUGraph;Float32*):OSStatus"/>
    <method name="AUGraphGetNodeCount(AUGraph;UInt32*):OSStatus"/>
    <method name="AUGraphGetNodeInteractions(AUGraph;AUNode;UInt32*;AUNodeInteraction*):OSStatus"/>
    <method name="AUGraphGetNumberOfInteractions(AUGraph;UInt32*):OSStatus"/>
    <method name="AUGraphInitialize(AUGraph):OSStatus"/>
    <method name="AUGraphIsInitialized(AUGraph;Boolean*):OSStatus"/>
    <method name="AUGraphIsOpen(AUGraph;Boolean*):OSStatus"/>
    <method name="AUGraphIsRunning(AUGraph;Boolean*):OSStatus"/>
    <method name="AUGraphNodeInfo(AUGraph;AUNode;AudioComponentDescription*;AudioUnit*):OSStatus"/>
    <method name="AUGraphOpen(AUGraph):OSStatus"/>
    <method name="AUGraphRemoveNode(AUGraph;AUNode):OSStatus"/>
    <method name="AUGraphRemoveRenderNotify(AUGraph;AURenderCallback;void*):OSStatus"/>
    <method name="AUGraphSetNodeInputCallback(AUGraph;AUNode;UInt32;const AURenderCallbackStruct*):OSStatus"/>
    <method name="AUGraphStart(AUGraph):OSStatus"/>
    <method name="AUGraphStop(AUGraph):OSStatus"/>
    <method name="AUGraphUninitialize(AUGraph):OSStatus"/>
    <method name="AUGraphUpdate(AUGraph;Boolean*):OSStatus"/>
    <method name="AUTHORITY_INFO_ACCESS_free(AUTHORITY_INFO_ACCESS*):void"/>
    <method name="AUTHORITY_INFO_ACCESS_new():AUTHORITY_INFO_ACCESS*"/>
    <method name="AUTHORITY_KEYID_free(AUTHORITY_KEYID*):void"/>
    <method name="AUTHORITY_KEYID_new():AUTHORITY_KEYID*"/>
    <method name="AVMakeRectWithAspectRatioInsideRect(CGSize;CGRect):CGRect"/>
    <method name="AcceptEx(SOCKET;SOCKET;PVOID;DWORD;DWORD;DWORD;LPDWORD;LPOVERLAPPED):BOOL"/>
    <method name="AudioComponentCopyName(AudioComponent;CFStringRef*):OSStatus"/>
    <method name="AudioComponentCount(const AudioComponentDescription*):UInt32"/>
    <method name="AudioComponentFindNext(AudioComponent;const AudioComponentDescription*):AudioComponent"/>
    <method name="AudioComponentGetDescription(AudioComponent;AudioComponentDescription*):OSStatus"/>
    <method name="AudioComponentGetVersion(AudioComponent;UInt32*):OSStatus"/>
    <method name="AudioComponentInstanceCanDo(AudioComponentInstance;SInt16):Boolean"/>
    <method name="AudioComponentInstanceDispose(AudioComponentInstance):OSStatus"/>
    <method name="AudioComponentInstanceGetComponent(AudioComponentInstance):AudioComponent"/>
    <method name="AudioComponentInstanceNew(AudioComponent;AudioComponentInstance*):OSStatus"/>
    <method name="AudioComponentRegister(const AudioComponentDescription*;CFStringRef;UInt32;AudioComponentFactoryFunction):AudioComponent"/>
    <method name="AudioConverterConvertBuffer(AudioConverterRef;UInt32;const void*;UInt32*;void*):OSStatus"/>
    <method name="AudioConverterConvertComplexBuffer(AudioConverterRef;UInt32;const AudioBufferList*;AudioBufferList*):OSStatus"/>
    <method name="AudioConverterDispose(AudioConverterRef):OSStatus"/>
    <method name="AudioConverterFillComplexBuffer(AudioConverterRef;AudioConverterComplexInputDataProc;void*;UInt32*;AudioBufferList*;AudioStreamPacketDescription*):OSStatus"/>
    <method name="AudioConverterGetProperty(AudioConverterRef;AudioConverterPropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioConverterGetPropertyInfo(AudioConverterRef;AudioConverterPropertyID;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioConverterNew(const AudioStreamBasicDescription*;const AudioStreamBasicDescription*;AudioConverterRef*):OSStatus"/>
    <method name="AudioConverterNewSpecific(const AudioStreamBasicDescription*;const AudioStreamBasicDescription*;UInt32;const AudioClassDescription*;AudioConverterRef*):OSStatus"/>
    <method name="AudioConverterReset(AudioConverterRef):OSStatus"/>
    <method name="AudioConverterSetProperty(AudioConverterRef;AudioConverterPropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioFileClose(AudioFileID):OSStatus"/>
    <method name="AudioFileCountUserData(AudioFileID;UInt32;UInt32*):OSStatus"/>
    <method name="AudioFileCreateWithURL(CFURLRef;AudioFileTypeID;const AudioStreamBasicDescription*;UInt32;AudioFileID*):OSStatus"/>
    <method name="AudioFileGetGlobalInfo(AudioFilePropertyID;UInt32;void*;UInt32*;void*):OSStatus"/>
    <method name="AudioFileGetGlobalInfoSize(AudioFilePropertyID;UInt32;void*;UInt32*):OSStatus"/>
    <method name="AudioFileGetProperty(AudioFileID;AudioFilePropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioFileGetPropertyInfo(AudioFileID;AudioFilePropertyID;UInt32*;UInt32*):OSStatus"/>
    <method name="AudioFileGetUserData(AudioFileID;UInt32;UInt32;UInt32*;void*):OSStatus"/>
    <method name="AudioFileGetUserDataSize(AudioFileID;UInt32;UInt32;UInt32*):OSStatus"/>
    <method name="AudioFileInitializeWithCallbacks(void*;AudioFile_ReadProc;AudioFile_WriteProc;AudioFile_GetSizeProc;AudioFile_SetSizeProc;AudioFileTypeID;const AudioStreamBasicDescription*;UInt32;AudioFileID*):OSStatus"/>
    <method name="AudioFileOpenURL(CFURLRef;SInt8;AudioFileTypeID;AudioFileID*):OSStatus"/>
    <method name="AudioFileOpenWithCallbacks(void*;AudioFile_ReadProc;AudioFile_WriteProc;AudioFile_GetSizeProc;AudioFile_SetSizeProc;AudioFileTypeID;AudioFileID*):OSStatus"/>
    <method name="AudioFileOptimize(AudioFileID):OSStatus"/>
    <method name="AudioFileReadBytes(AudioFileID;Boolean;SInt64;UInt32*;void*):OSStatus"/>
    <method name="AudioFileReadPacketData(AudioFileID;Boolean;UInt32*;AudioStreamPacketDescription*;SInt64;UInt32*;void*):OSStatus"/>
    <method name="AudioFileReadPackets(AudioFileID;Boolean;UInt32*;AudioStreamPacketDescription*;SInt64;UInt32*;void*):OSStatus"/>
    <method name="AudioFileRemoveUserData(AudioFileID;UInt32;UInt32):OSStatus"/>
    <method name="AudioFileSetProperty(AudioFileID;AudioFilePropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioFileSetUserData(AudioFileID;UInt32;UInt32;UInt32;const void*):OSStatus"/>
    <method name="AudioFileStreamClose(AudioFileStreamID):OSStatus"/>
    <method name="AudioFileStreamGetProperty(AudioFileStreamID;AudioFileStreamPropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioFileStreamGetPropertyInfo(AudioFileStreamID;AudioFileStreamPropertyID;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioFileStreamOpen(void*;AudioFileStream_PropertyListenerProc;AudioFileStream_PacketsProc;AudioFileTypeID;AudioFileStreamID*):OSStatus"/>
    <method name="AudioFileStreamParseBytes(AudioFileStreamID;UInt32;const void*;UInt32):OSStatus"/>
    <method name="AudioFileStreamSeek(AudioFileStreamID;SInt64;SInt64*;UInt32*):OSStatus"/>
    <method name="AudioFileStreamSetProperty(AudioFileStreamID;AudioFileStreamPropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioFileWriteBytes(AudioFileID;Boolean;SInt64;UInt32*;const void*):OSStatus"/>
    <method name="AudioFileWritePackets(AudioFileID;Boolean;UInt32;const AudioStreamPacketDescription*;SInt64;UInt32*;const void*):OSStatus"/>
    <method name="AudioFormatGetProperty(AudioFormatPropertyID;UInt32;const void*;UInt32*;void*):OSStatus"/>
    <method name="AudioFormatGetPropertyInfo(AudioFormatPropertyID;UInt32;const void*;UInt32*):OSStatus"/>
    <method name="AudioOutputUnitStart(AudioUnit):OSStatus"/>
    <method name="AudioOutputUnitStop(AudioUnit):OSStatus"/>
    <method name="AudioQueueAddPropertyListener(AudioQueueRef;AudioQueuePropertyID;AudioQueuePropertyListenerProc;void*):OSStatus"/>
    <method name="AudioQueueAllocateBuffer(AudioQueueRef;UInt32;AudioQueueBufferRef*):OSStatus"/>
    <method name="AudioQueueAllocateBufferWithPacketDescriptions(AudioQueueRef;UInt32;UInt32;AudioQueueBufferRef*):OSStatus"/>
    <method name="AudioQueueCreateTimeline(AudioQueueRef;AudioQueueTimelineRef*):OSStatus"/>
    <method name="AudioQueueDeviceGetCurrentTime(AudioQueueRef;AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueDeviceGetNearestStartTime(AudioQueueRef;AudioTimeStamp*;UInt32):OSStatus"/>
    <method name="AudioQueueDeviceTranslateTime(AudioQueueRef;const AudioTimeStamp*;AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueDispose(AudioQueueRef;Boolean):OSStatus"/>
    <method name="AudioQueueDisposeTimeline(AudioQueueRef;AudioQueueTimelineRef):OSStatus"/>
    <method name="AudioQueueEnqueueBuffer(AudioQueueRef;AudioQueueBufferRef;UInt32;const AudioStreamPacketDescription*):OSStatus"/>
    <method name="AudioQueueEnqueueBufferWithParameters(AudioQueueRef;AudioQueueBufferRef;UInt32;const AudioStreamPacketDescription*;UInt32;UInt32;UInt32;const AudioQueueParameterEvent*;const AudioTimeStamp*;AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueFlush(AudioQueueRef):OSStatus"/>
    <method name="AudioQueueFreeBuffer(AudioQueueRef;AudioQueueBufferRef):OSStatus"/>
    <method name="AudioQueueGetCurrentTime(AudioQueueRef;AudioQueueTimelineRef;AudioTimeStamp*;Boolean*):OSStatus"/>
    <method name="AudioQueueGetParameter(AudioQueueRef;AudioQueueParameterID;AudioQueueParameterValue*):OSStatus"/>
    <method name="AudioQueueGetProperty(AudioQueueRef;AudioQueuePropertyID;void*;UInt32*):OSStatus"/>
    <method name="AudioQueueGetPropertySize(AudioQueueRef;AudioQueuePropertyID;UInt32*):OSStatus"/>
    <method name="AudioQueueNewInput(const AudioStreamBasicDescription*;AudioQueueInputCallback;void*;CFRunLoopRef;CFStringRef;UInt32;AudioQueueRef*):OSStatus"/>
    <method name="AudioQueueNewOutput(const AudioStreamBasicDescription*;AudioQueueOutputCallback;void*;CFRunLoopRef;CFStringRef;UInt32;AudioQueueRef*):OSStatus"/>
    <method name="AudioQueueOfflineRender(AudioQueueRef;const AudioTimeStamp*;AudioQueueBufferRef;UInt32):OSStatus"/>
    <method name="AudioQueuePause(AudioQueueRef):OSStatus"/>
    <method name="AudioQueuePrime(AudioQueueRef;UInt32;UInt32*):OSStatus"/>
    <method name="AudioQueueProcessingTapDispose(AudioQueueProcessingTapRef):OSStatus"/>
    <method name="AudioQueueProcessingTapGetQueueTime(AudioQueueProcessingTapRef;Float64*;UInt32*):OSStatus"/>
    <method name="AudioQueueProcessingTapGetSourceAudio(AudioQueueProcessingTapRef;UInt32;AudioTimeStamp*;UInt32*;UInt32*;AudioBufferList*):OSStatus"/>
    <method name="AudioQueueProcessingTapNew(AudioQueueRef;AudioQueueProcessingTapCallback;void*;UInt32;UInt32*;AudioStreamBasicDescription*;AudioQueueProcessingTapRef*):OSStatus"/>
    <method name="AudioQueueRemovePropertyListener(AudioQueueRef;AudioQueuePropertyID;AudioQueuePropertyListenerProc;void*):OSStatus"/>
    <method name="AudioQueueReset(AudioQueueRef):OSStatus"/>
    <method name="AudioQueueSetOfflineRenderFormat(AudioQueueRef;const AudioStreamBasicDescription*;const AudioChannelLayout*):OSStatus"/>
    <method name="AudioQueueSetParameter(AudioQueueRef;AudioQueueParameterID;AudioQueueParameterValue):OSStatus"/>
    <method name="AudioQueueSetProperty(AudioQueueRef;AudioQueuePropertyID;const void*;UInt32):OSStatus"/>
    <method name="AudioQueueStart(AudioQueueRef;const AudioTimeStamp*):OSStatus"/>
    <method name="AudioQueueStop(AudioQueueRef;Boolean):OSStatus"/>
    <method name="AudioServicesAddSystemSoundCompletion(SystemSoundID;CFRunLoopRef;CFStringRef;AudioServicesSystemSoundCompletionProc;void*):OSStatus"/>
    <method name="AudioServicesCreateSystemSoundID(CFURLRef;SystemSoundID*):OSStatus"/>
    <method name="AudioServicesDisposeSystemSoundID(SystemSoundID):OSStatus"/>
    <method name="AudioServicesGetProperty(AudioServicesPropertyID;UInt32;const void*;UInt32*;void*):OSStatus"/>
    <method name="AudioServicesGetPropertyInfo(AudioServicesPropertyID;UInt32;const void*;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioServicesPlayAlertSound(SystemSoundID):void"/>
    <method name="AudioServicesPlaySystemSound(SystemSoundID):void"/>
    <method name="AudioServicesRemoveSystemSoundCompletion(SystemSoundID):void"/>
    <method name="AudioServicesSetProperty(AudioServicesPropertyID;UInt32;const void*;UInt32;const void*):OSStatus"/>
    <method name="AudioSessionAddPropertyListener(AudioSessionPropertyID;AudioSessionPropertyListener;void*):OSStatus"/>
    <method name="AudioSessionGetProperty(AudioSessionPropertyID;UInt32*;void*):OSStatus"/>
    <method name="AudioSessionGetPropertySize(AudioSessionPropertyID;UInt32*):OSStatus"/>
    <method name="AudioSessionInitialize(CFRunLoopRef;CFStringRef;AudioSessionInterruptionListener;void*):OSStatus"/>
    <method name="AudioSessionRemovePropertyListener(AudioSessionPropertyID):OSStatus"/>
    <method name="AudioSessionRemovePropertyListenerWithUserData(AudioSessionPropertyID;AudioSessionPropertyListener;void*):OSStatus"/>
    <method name="AudioSessionSetActive(Boolean):OSStatus"/>
    <method name="AudioSessionSetActiveWithFlags(Boolean;UInt32):OSStatus"/>
    <method name="AudioSessionSetProperty(AudioSessionPropertyID;UInt32;const void*):OSStatus"/>
    <method name="AudioUnitAddPropertyListener(AudioUnit;AudioUnitPropertyID;AudioUnitPropertyListenerProc;void*):OSStatus"/>
    <method name="AudioUnitAddRenderNotify(AudioUnit;AURenderCallback;void*):OSStatus"/>
    <method name="AudioUnitGetParameter(AudioUnit;AudioUnitParameterID;AudioUnitScope;AudioUnitElement;AudioUnitParameterValue*):OSStatus"/>
    <method name="AudioUnitGetProperty(AudioUnit;AudioUnitPropertyID;AudioUnitScope;AudioUnitElement;void*;UInt32*):OSStatus"/>
    <method name="AudioUnitGetPropertyInfo(AudioUnit;AudioUnitPropertyID;AudioUnitScope;AudioUnitElement;UInt32*;Boolean*):OSStatus"/>
    <method name="AudioUnitInitialize(AudioUnit):OSStatus"/>
    <method name="AudioUnitProcess(AudioUnit;AudioUnitRenderActionFlags*;const AudioTimeStamp*;UInt32;AudioBufferList*):OSStatus"/>
    <method name="AudioUnitProcessMultiple(AudioUnit;AudioUnitRenderActionFlags*;const AudioTimeStamp*;UInt32;UInt32;const AudioBufferList**;UInt32;AudioBufferList**):OSStatus"/>
    <method name="AudioUnitRemovePropertyListenerWithUserData(AudioUnit;AudioUnitPropertyID;AudioUnitPropertyListenerProc;void*):OSStatus"/>
    <method name="AudioUnitRemoveRenderNotify(AudioUnit;AURenderCallback;void*):OSStatus"/>
    <method name="AudioUnitRender(AudioUnit;AudioUnitRenderActionFlags*;const AudioTimeStamp*;UInt32;UInt32;AudioBufferList*):OSStatus"/>
    <method name="AudioUnitReset(AudioUnit;AudioUnitScope;AudioUnitElement):OSStatus"/>
    <method name="AudioUnitScheduleParameters(AudioUnit;const AudioUnitParameterEvent*;UInt32):OSStatus"/>
    <method name="AudioUnitSetParameter(AudioUnit;AudioUnitParameterID;AudioUnitScope;AudioUnitElement;AudioUnitParameterValue;UInt32):OSStatus"/>
    <method name="AudioUnitSetProperty(AudioUnit;AudioUnitPropertyID;AudioUnitScope;AudioUnitElement;const void*;UInt32):OSStatus"/>
    <method name="AudioUnitUninitialize(AudioUnit):OSStatus"/>
    <method name="BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS*):void"/>
    <method name="BASIC_CONSTRAINTS_new():BASIC_CONSTRAINTS*"/>
    <method name="BF_cbc_encrypt(const unsigned char*;unsigned char*;long;const BF_KEY*;unsigned char*;int):void"/>
    <method name="BF_cfb64_encrypt(const unsigned char*;unsigned char*;long;const BF_KEY*;unsigned char*;int*;int):void"/>
    <method name="BF_decrypt(unsigned int*;const BF_KEY*):void"/>
    <method name="BF_ecb_encrypt(const unsigned char*;unsigned char*;const BF_KEY*;int):void"/>
    <method name="BF_encrypt(unsigned int*;const BF_KEY*):void"/>
    <method name="BF_ofb64_encrypt(const unsigned char*;unsigned char*;long;const BF_KEY*;unsigned char*;int*):void"/>
    <method name="BF_options():const char*"/>
    <method name="BF_set_key(BF_KEY*;int;const unsigned char*):void"/>
    <method name="BIO_accept(int;char**):int"/>
    <method name="BIO_callback_ctrl(BIO*;int;(*)(bio_st*;int;const char*;int;long;long):void*):long"/>
    <method name="BIO_copy_next_retry(BIO*):void"/>
    <method name="BIO_ctrl(BIO*;int;long;void*):long"/>
    <method name="BIO_ctrl_get_read_request(BIO*):size_t"/>
    <method name="BIO_ctrl_get_write_guarantee(BIO*):size_t"/>
    <method name="BIO_ctrl_pending(BIO*):size_t"/>
    <method name="BIO_ctrl_reset_read_request(BIO*):int"/>
    <method name="BIO_ctrl_wpending(BIO*):size_t"/>
    <method name="BIO_debug_callback(BIO*;int;const char*;int;long;long):long"/>
    <method name="BIO_dgram_non_fatal_error(int):int"/>
    <method name="BIO_dump(BIO*;const char*;int):int"/>
    <method name="BIO_dump_cb((*)(const void*;size_t;void*):int*;void*;const char*;int):int"/>
    <method name="BIO_dump_fp(FILE*;const char*;int):int"/>
    <method name="BIO_dump_indent(BIO*;const char*;int;int):int"/>
    <method name="BIO_dump_indent_cb((*)(const void*;size_t;void*):int*;void*;const char*;int;int):int"/>
    <method name="BIO_dump_indent_fp(FILE*;const char*;int;int):int"/>
    <method name="BIO_dup_chain(BIO*):BIO*"/>
    <method name="BIO_f_base64():BIO_METHOD*"/>
    <method name="BIO_f_buffer():BIO_METHOD*"/>
    <method name="BIO_f_cipher():BIO_METHOD*"/>
    <method name="BIO_f_md():BIO_METHOD*"/>
    <method name="BIO_f_nbio_test():BIO_METHOD*"/>
    <method name="BIO_f_null():BIO_METHOD*"/>
    <method name="BIO_f_reliable():BIO_METHOD*"/>
    <method name="BIO_f_ssl():BIO_METHOD*"/>
    <method name="BIO_fd_non_fatal_error(int):int"/>
    <method name="BIO_fd_should_retry(int):int"/>
    <method name="BIO_find_type(BIO*;int):BIO*"/>
    <method name="BIO_free(BIO*):int"/>
    <method name="BIO_free_all(BIO*):void"/>
    <method name="BIO_get_accept_socket(char*;int):int"/>
    <method name="BIO_get_ex_data(BIO*;int):void*"/>
    <method name="BIO_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="BIO_get_host_ip(const char*;unsigned char*):int"/>
    <method name="BIO_get_port(const char*;unsigned short*):int"/>
    <method name="BIO_get_retry_BIO(BIO*;int*):BIO*"/>
    <method name="BIO_get_retry_reason(BIO*):int"/>
    <method name="BIO_gethostbyname(const char*):hostent*"/>
    <method name="BIO_gets(BIO*;char*;int):int"/>
    <method name="BIO_indent(BIO*;int;int):int"/>
    <method name="BIO_int_ctrl(BIO*;int;long;int):long"/>
    <method name="BIO_new(BIO_METHOD*):BIO*"/>
    <method name="BIO_new_accept(char*):BIO*"/>
    <method name="BIO_new_bio_pair(BIO**;size_t;BIO**;size_t):int"/>
    <method name="BIO_new_buffer_ssl_connect(SSL_CTX*):BIO*"/>
    <method name="BIO_new_connect(char*):BIO*"/>
    <method name="BIO_new_dgram(int;int):BIO*"/>
    <method name="BIO_new_fd(int;int):BIO*"/>
    <method name="BIO_new_file(const char*;const char*):BIO*"/>
    <method name="BIO_new_fp(FILE*;int):BIO*"/>
    <method name="BIO_new_mem_buf(void*;int):BIO*"/>
    <method name="BIO_new_socket(int;int):BIO*"/>
    <method name="BIO_new_ssl(SSL_CTX*;int):BIO*"/>
    <method name="BIO_new_ssl_connect(SSL_CTX*):BIO*"/>
    <method name="BIO_next(BIO*):BIO*"/>
    <method name="BIO_nread(BIO*;char**;int):int"/>
    <method name="BIO_nread0(BIO*;char**):int"/>
    <method name="BIO_number_read(BIO*):unsigned long"/>
    <method name="BIO_number_written(BIO*):unsigned long"/>
    <method name="BIO_nwrite(BIO*;char**;int):int"/>
    <method name="BIO_nwrite0(BIO*;char**):int"/>
    <method name="BIO_pop(BIO*):BIO*"/>
    <method name="BIO_printf(BIO*;const char*, ...):int"/>
    <method name="BIO_ptr_ctrl(BIO*;int;long):char*"/>
    <method name="BIO_push(BIO*;BIO*):BIO*"/>
    <method name="BIO_puts(BIO*;const char*):int"/>
    <method name="BIO_read(BIO*;void*;int):int"/>
    <method name="BIO_s_accept():BIO_METHOD*"/>
    <method name="BIO_s_bio():BIO_METHOD*"/>
    <method name="BIO_s_connect():BIO_METHOD*"/>
    <method name="BIO_s_datagram():BIO_METHOD*"/>
    <method name="BIO_s_fd():BIO_METHOD*"/>
    <method name="BIO_s_file():BIO_METHOD*"/>
    <method name="BIO_s_log():BIO_METHOD*"/>
    <method name="BIO_s_mem():BIO_METHOD*"/>
    <method name="BIO_s_null():BIO_METHOD*"/>
    <method name="BIO_s_socket():BIO_METHOD*"/>
    <method name="BIO_set(BIO*;BIO_METHOD*):int"/>
    <method name="BIO_set_cipher(BIO*;const EVP_CIPHER*;const unsigned char*;const unsigned char*;int):void"/>
    <method name="BIO_set_ex_data(BIO*;int;void*):int"/>
    <method name="BIO_set_tcp_ndelay(int;int):int"/>
    <method name="BIO_snprintf(char*;size_t;const char*, ...):int"/>
    <method name="BIO_sock_cleanup():void"/>
    <method name="BIO_sock_error(int):int"/>
    <method name="BIO_sock_init():int"/>
    <method name="BIO_sock_non_fatal_error(int):int"/>
    <method name="BIO_sock_should_retry(int):int"/>
    <method name="BIO_socket_ioctl(int;long;void*):int"/>
    <method name="BIO_socket_nbio(int;int):int"/>
    <method name="BIO_ssl_copy_session_id(BIO*;BIO*):int"/>
    <method name="BIO_ssl_shutdown(BIO*):void"/>
    <method name="BIO_vfree(BIO*):void"/>
    <method name="BIO_vprintf(BIO*;const char*;va_list):int"/>
    <method name="BIO_vsnprintf(char*;size_t;const char*;va_list):int"/>
    <method name="BIO_write(BIO*;const void*;int):int"/>
    <method name="BITHockeyBundle():NSBundle*"/>
    <method name="BITHockeyLocalizedString(NSString*):NSString*"/>
    <method name="BITHockeyMD5(NSString*):NSString*"/>
    <method name="BN_BLINDING_convert(BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_convert_ex(BIGNUM*;BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_create_param(BN_BLINDING*;const BIGNUM*;BIGNUM*;BN_CTX*;(*)(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int*;BN_MONT_CTX*):BN_BLINDING*"/>
    <method name="BN_BLINDING_free(BN_BLINDING*):void"/>
    <method name="BN_BLINDING_get_flags(const BN_BLINDING*):unsigned long"/>
    <method name="BN_BLINDING_get_thread_id(const BN_BLINDING*):unsigned long"/>
    <method name="BN_BLINDING_invert(BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_invert_ex(BIGNUM*;const BIGNUM*;BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_BLINDING_new(const BIGNUM*;const BIGNUM*;BIGNUM*):BN_BLINDING*"/>
    <method name="BN_BLINDING_set_flags(BN_BLINDING*;unsigned long):void"/>
    <method name="BN_BLINDING_set_thread_id(BN_BLINDING*;unsigned long):void"/>
    <method name="BN_BLINDING_update(BN_BLINDING*;BN_CTX*):int"/>
    <method name="BN_CTX_end(BN_CTX*):void"/>
    <method name="BN_CTX_free(BN_CTX*):void"/>
    <method name="BN_CTX_get(BN_CTX*):BIGNUM*"/>
    <method name="BN_CTX_init(BN_CTX*):void"/>
    <method name="BN_CTX_new():BN_CTX*"/>
    <method name="BN_CTX_start(BN_CTX*):void"/>
    <method name="BN_GENCB_call(BN_GENCB*;int;int):int"/>
    <method name="BN_GF2m_add(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_GF2m_arr2poly(const unsigned int*;BIGNUM*):int"/>
    <method name="BN_GF2m_mod(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_GF2m_mod_arr(BIGNUM*;const BIGNUM*;const unsigned int*):int"/>
    <method name="BN_GF2m_mod_div(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_div_arr(BIGNUM*;const BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_exp(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_exp_arr(BIGNUM*;const BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_inv(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_inv_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_mul(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_mul_arr(BIGNUM*;const BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_solve_quad(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_solve_quad_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqr(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqr_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqrt(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_GF2m_mod_sqrt_arr(BIGNUM*;const BIGNUM*;const unsigned int*;BN_CTX*):int"/>
    <method name="BN_GF2m_poly2arr(const BIGNUM*;unsigned int*;int):int"/>
    <method name="BN_MONT_CTX_copy(BN_MONT_CTX*;BN_MONT_CTX*):BN_MONT_CTX*"/>
    <method name="BN_MONT_CTX_free(BN_MONT_CTX*):void"/>
    <method name="BN_MONT_CTX_init(BN_MONT_CTX*):void"/>
    <method name="BN_MONT_CTX_new():BN_MONT_CTX*"/>
    <method name="BN_MONT_CTX_set(BN_MONT_CTX*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_MONT_CTX_set_locked(BN_MONT_CTX**;int;const BIGNUM*;BN_CTX*):BN_MONT_CTX*"/>
    <method name="BN_RECP_CTX_free(BN_RECP_CTX*):void"/>
    <method name="BN_RECP_CTX_init(BN_RECP_CTX*):void"/>
    <method name="BN_RECP_CTX_new():BN_RECP_CTX*"/>
    <method name="BN_RECP_CTX_set(BN_RECP_CTX*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_add(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_add_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_bin2bn(const unsigned char*;int;BIGNUM*):BIGNUM*"/>
    <method name="BN_bn2bin(const BIGNUM*;unsigned char*):int"/>
    <method name="BN_bn2dec(const BIGNUM*):char*"/>
    <method name="BN_bn2hex(const BIGNUM*):char*"/>
    <method name="BN_bn2mpi(const BIGNUM*;unsigned char*):int"/>
    <method name="BN_bntest_rand(BIGNUM*;int;int;int):int"/>
    <method name="BN_clear(BIGNUM*):void"/>
    <method name="BN_clear_bit(BIGNUM*;int):int"/>
    <method name="BN_clear_free(BIGNUM*):void"/>
    <method name="BN_cmp(const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_copy(BIGNUM*;const BIGNUM*):BIGNUM*"/>
    <method name="BN_dec2bn(BIGNUM**;const char*):int"/>
    <method name="BN_div(BIGNUM*;BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_div_recp(BIGNUM*;BIGNUM*;const BIGNUM*;BN_RECP_CTX*;BN_CTX*):int"/>
    <method name="BN_div_word(BIGNUM*;unsigned long):unsigned long"/>
    <method name="BN_dup(const BIGNUM*):BIGNUM*"/>
    <method name="BN_exp(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_free(BIGNUM*):void"/>
    <method name="BN_from_montgomery(BIGNUM*;const BIGNUM*;BN_MONT_CTX*;BN_CTX*):int"/>
    <method name="BN_gcd(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_generate_prime(BIGNUM*;int;int;const BIGNUM*;const BIGNUM*;(*)(int;int;void*):void*;void*):BIGNUM*"/>
    <method name="BN_generate_prime_ex(BIGNUM*;int;int;const BIGNUM*;const BIGNUM*;BN_GENCB*):int"/>
    <method name="BN_get0_nist_prime_192():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_224():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_256():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_384():const BIGNUM*"/>
    <method name="BN_get0_nist_prime_521():const BIGNUM*"/>
    <method name="BN_get_params(int):int"/>
    <method name="BN_get_word(const BIGNUM*):unsigned long"/>
    <method name="BN_hex2bn(BIGNUM**;const char*):int"/>
    <method name="BN_init(BIGNUM*):void"/>
    <method name="BN_is_bit_set(const BIGNUM*;int):int"/>
    <method name="BN_is_prime(const BIGNUM*;int;(*)(int;int;void*):void*;BN_CTX*;void*):int"/>
    <method name="BN_is_prime_ex(const BIGNUM*;int;BN_CTX*;BN_GENCB*):int"/>
    <method name="BN_is_prime_fasttest(const BIGNUM*;int;(*)(int;int;void*):void*;BN_CTX*;void*;int):int"/>
    <method name="BN_is_prime_fasttest_ex(const BIGNUM*;int;BN_CTX*;int;BN_GENCB*):int"/>
    <method name="BN_kronecker(const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_lshift(BIGNUM*;const BIGNUM*;int):int"/>
    <method name="BN_lshift1(BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mask_bits(BIGNUM*;int):int"/>
    <method name="BN_mod_add(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_add_quick(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mod_exp(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_exp2_mont(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_mont(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_mont_consttime(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_mont_word(BIGNUM*;unsigned long;const BIGNUM*;const BIGNUM*;BN_CTX*;BN_MONT_CTX*):int"/>
    <method name="BN_mod_exp_recp(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_exp_simple(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_inverse(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):BIGNUM*"/>
    <method name="BN_mod_lshift(BIGNUM*;const BIGNUM*;int;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_lshift1(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_lshift1_quick(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mod_lshift_quick(BIGNUM*;const BIGNUM*;int;const BIGNUM*):int"/>
    <method name="BN_mod_mul(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_mul_montgomery(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_MONT_CTX*;BN_CTX*):int"/>
    <method name="BN_mod_mul_reciprocal(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_RECP_CTX*;BN_CTX*):int"/>
    <method name="BN_mod_sqr(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_sqrt(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):BIGNUM*"/>
    <method name="BN_mod_sub(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mod_sub_quick(BIGNUM*;const BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_mod_word(const BIGNUM*;unsigned long):unsigned long"/>
    <method name="BN_mpi2bn(const unsigned char*;int;BIGNUM*):BIGNUM*"/>
    <method name="BN_mul(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_mul_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_new():BIGNUM*"/>
    <method name="BN_nist_mod_192(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_224(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_256(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_384(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nist_mod_521(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_nnmod(BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_num_bits(const BIGNUM*):int"/>
    <method name="BN_num_bits_word(unsigned long):int"/>
    <method name="BN_options():char*"/>
    <method name="BN_print(BIO*;const BIGNUM*):int"/>
    <method name="BN_print(void*;const BIGNUM*):int"/>
    <method name="BN_print_fp(FILE*;const BIGNUM*):int"/>
    <method name="BN_pseudo_rand(BIGNUM*;int;int;int):int"/>
    <method name="BN_pseudo_rand_range(BIGNUM*;BIGNUM*):int"/>
    <method name="BN_rand(BIGNUM*;int;int;int):int"/>
    <method name="BN_rand_range(BIGNUM*;BIGNUM*):int"/>
    <method name="BN_reciprocal(BIGNUM*;const BIGNUM*;int;BN_CTX*):int"/>
    <method name="BN_rshift(BIGNUM*;const BIGNUM*;int):int"/>
    <method name="BN_rshift1(BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_set_bit(BIGNUM*;int):int"/>
    <method name="BN_set_negative(BIGNUM*;int):void"/>
    <method name="BN_set_params(int;int;int;int):void"/>
    <method name="BN_set_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_sqr(BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="BN_sub(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_sub_word(BIGNUM*;unsigned long):int"/>
    <method name="BN_swap(BIGNUM*;BIGNUM*):void"/>
    <method name="BN_to_ASN1_ENUMERATED(BIGNUM*;ASN1_ENUMERATED*):ASN1_ENUMERATED*"/>
    <method name="BN_to_ASN1_INTEGER(BIGNUM*;ASN1_INTEGER*):ASN1_INTEGER*"/>
    <method name="BN_uadd(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_ucmp(const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_usub(BIGNUM*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="BN_value_one():const BIGNUM*"/>
    <method name="BUF_MEM_free(BUF_MEM*):void"/>
    <method name="BUF_MEM_grow(BUF_MEM*;int):int"/>
    <method name="BUF_MEM_grow_clean(BUF_MEM*;int):int"/>
    <method name="BUF_MEM_new():BUF_MEM*"/>
    <method name="BUF_memdup(const void*;size_t):void*"/>
    <method name="BUF_strdup(const char*):char*"/>
    <method name="BUF_strlcat(char*;const char*;size_t):size_t"/>
    <method name="BUF_strlcpy(char*;const char*;size_t):size_t"/>
    <method name="BUF_strndup(const char*;size_t):char*"/>
    <method name="BZ2_bzBuffToBuffCompress(char*;unsigned int*;char*;unsigned int;int;int;int):int"/>
    <method name="BZ2_bzBuffToBuffDecompress(char*;unsigned int*;char*;unsigned int;int;int):int"/>
    <method name="BZ2_bzCompress(bz_stream*;int):int"/>
    <method name="BZ2_bzCompressEnd(bz_stream*):int"/>
    <method name="BZ2_bzCompressInit(bz_stream*;int;int;int):int"/>
    <method name="BZ2_bzDecompress(bz_stream*):int"/>
    <method name="BZ2_bzDecompressEnd(bz_stream*):int"/>
    <method name="BZ2_bzDecompressInit(bz_stream*;int;int):int"/>
    <method name="BZ2_bzRead(int*;BZFILE*;void*;int):int"/>
    <method name="BZ2_bzReadClose(int*;BZFILE*):void"/>
    <method name="BZ2_bzReadGetUnused(int*;BZFILE*;void**;int*):void"/>
    <method name="BZ2_bzReadOpen(int*;FILE*;int;int;void*;int):BZFILE*"/>
    <method name="BZ2_bzWrite(int*;BZFILE*;void*;int):void"/>
    <method name="BZ2_bzWriteClose(int*;BZFILE*;int;unsigned int*;unsigned int*):void"/>
    <method name="BZ2_bzWriteClose64(int*;BZFILE*;int;unsigned int*;unsigned int*;unsigned int*;unsigned int*):void"/>
    <method name="BZ2_bzWriteOpen(int*;FILE*;int;int;int):BZFILE*"/>
    <method name="BZ2_bzclose(BZFILE*):void"/>
    <method name="BZ2_bzdopen(int;const char*):BZFILE*"/>
    <method name="BZ2_bzerror(BZFILE*;int*):const char*"/>
    <method name="BZ2_bzflush(BZFILE*):int"/>
    <method name="BZ2_bzlibVersion():const char*"/>
    <method name="BZ2_bzopen(const char*;const char*):BZFILE*"/>
    <method name="BZ2_bzread(BZFILE*;void*;int):int"/>
    <method name="BZ2_bzwrite(BZFILE*;void*;int):int"/>
    <method name="CACurrentMediaTime():CFTimeInterval"/>
    <method name="CAST_cbc_encrypt(const unsigned char*;unsigned char*;long;CAST_KEY*;unsigned char*;int):void"/>
    <method name="CAST_cfb64_encrypt(const unsigned char*;unsigned char*;long;CAST_KEY*;unsigned char*;int*;int):void"/>
    <method name="CAST_decrypt(unsigned long*;CAST_KEY*):void"/>
    <method name="CAST_ecb_encrypt(const unsigned char*;unsigned char*;CAST_KEY*;int):void"/>
    <method name="CAST_encrypt(unsigned long*;CAST_KEY*):void"/>
    <method name="CAST_ofb64_encrypt(const unsigned char*;unsigned char*;long;CAST_KEY*;unsigned char*;int*):void"/>
    <method name="CAST_set_key(CAST_KEY*;int;const unsigned char*):void"/>
    <method name="CAShow(void*):void"/>
    <method name="CAShowFile(void*;FILE*):void"/>
    <method name="CATransform3DConcat(CATransform3D;CATransform3D):CATransform3D"/>
    <method name="CATransform3DEqualToTransform(CATransform3D;CATransform3D):_Bool"/>
    <method name="CATransform3DGetAffineTransform(CATransform3D):CGAffineTransform"/>
    <method name="CATransform3DInvert(CATransform3D):CATransform3D"/>
    <method name="CATransform3DIsAffine(CATransform3D):_Bool"/>
    <method name="CATransform3DIsIdentity(CATransform3D):_Bool"/>
    <method name="CATransform3DMakeAffineTransform(CGAffineTransform):CATransform3D"/>
    <method name="CATransform3DMakeRotation(CGFloat;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DMakeScale(CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DMakeTranslation(CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DRotate(CATransform3D;CGFloat;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DScale(CATransform3D;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CATransform3DTranslate(CATransform3D;CGFloat;CGFloat;CGFloat):CATransform3D"/>
    <method name="CCCalibratePBKDF(CCPBKDFAlgorithm;size_t;size_t;CCPseudoRandomAlgorithm;size_t;uint32_t):uint"/>
    <method name="CCCrypt(CCOperation;CCAlgorithm;CCOptions;const void*;size_t;const void*;const void*;size_t;void*;size_t;size_t*):CCCryptorStatus"/>
    <method name="CCCryptorCreate(CCOperation;CCAlgorithm;CCOptions;const void*;size_t;const void*;CCCryptorRef*):CCCryptorStatus"/>
    <method name="CCCryptorCreateFromData(CCOperation;CCAlgorithm;CCOptions;const void*;size_t;const void*;const void*;size_t;CCCryptorRef*;size_t*):CCCryptorStatus"/>
    <method name="CCCryptorCreateWithMode(CCOperation;CCMode;CCAlgorithm;CCPadding;const void*;const void*;size_t;const void*;size_t;int;CCModeOptions;CCCryptorRef*):CCCryptorStatus"/>
    <method name="CCCryptorFinal(CCCryptorRef;void*;size_t;size_t*):CCCryptorStatus"/>
    <method name="CCCryptorGetOutputLength(CCCryptorRef;size_t;_Bool):size_t"/>
    <method name="CCCryptorRelease(CCCryptorRef):CCCryptorStatus"/>
    <method name="CCCryptorReset(CCCryptorRef;const void*):CCCryptorStatus"/>
    <method name="CCCryptorUpdate(CCCryptorRef;const void*;size_t;void*;size_t;size_t*):CCCryptorStatus"/>
    <method name="CCHmac(CCHmacAlgorithm;const void*;size_t;const void*;size_t;void*):void"/>
    <method name="CCHmacFinal(CCHmacContext*;void*):void"/>
    <method name="CCHmacInit(CCHmacContext*;CCHmacAlgorithm;const void*;size_t):void"/>
    <method name="CCHmacUpdate(CCHmacContext*;const void*;size_t):void"/>
    <method name="CCKeyDerivationPBKDF(CCPBKDFAlgorithm;const char*;size_t;const uint8_t*;size_t;CCPseudoRandomAlgorithm;uint;uint8_t*;size_t):int"/>
    <method name="CCSymmetricKeyUnwrap(CCWrappingAlgorithm;const uint8_t*;const size_t;const uint8_t*;size_t;const uint8_t*;size_t;uint8_t*;size_t*):int"/>
    <method name="CCSymmetricKeyWrap(CCWrappingAlgorithm;const uint8_t*;const size_t;const uint8_t*;size_t;const uint8_t*;size_t;uint8_t*;size_t*):int"/>
    <method name="CCSymmetricUnwrappedSize(CCWrappingAlgorithm;size_t):size_t"/>
    <method name="CCSymmetricWrappedSize(CCWrappingAlgorithm;size_t):size_t"/>
    <method name="CC_MD2(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_MD2_Final(unsigned char*;CC_MD2_CTX*):int"/>
    <method name="CC_MD2_Init(CC_MD2_CTX*):int"/>
    <method name="CC_MD2_Update(CC_MD2_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_MD4(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_MD4_Final(unsigned char*;CC_MD4_CTX*):int"/>
    <method name="CC_MD4_Init(CC_MD4_CTX*):int"/>
    <method name="CC_MD4_Update(CC_MD4_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_MD5(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_MD5_Final(unsigned char*;CC_MD5_CTX*):int"/>
    <method name="CC_MD5_Init(CC_MD5_CTX*):int"/>
    <method name="CC_MD5_Update(CC_MD5_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA1(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA1_Final(unsigned char*;CC_SHA1_CTX*):int"/>
    <method name="CC_SHA1_Init(CC_SHA1_CTX*):int"/>
    <method name="CC_SHA1_Update(CC_SHA1_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA224(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA224_Final(unsigned char*;CC_SHA256_CTX*):int"/>
    <method name="CC_SHA224_Init(CC_SHA256_CTX*):int"/>
    <method name="CC_SHA224_Update(CC_SHA256_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA256(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA256_Final(unsigned char*;CC_SHA256_CTX*):int"/>
    <method name="CC_SHA256_Init(CC_SHA256_CTX*):int"/>
    <method name="CC_SHA256_Update(CC_SHA256_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA384(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA384_Final(unsigned char*;CC_SHA512_CTX*):int"/>
    <method name="CC_SHA384_Init(CC_SHA512_CTX*):int"/>
    <method name="CC_SHA384_Update(CC_SHA512_CTX*;const void*;CC_LONG):int"/>
    <method name="CC_SHA512(const void*;CC_LONG;unsigned char*):unsigned char*"/>
    <method name="CC_SHA512_Final(unsigned char*;CC_SHA512_CTX*):int"/>
    <method name="CC_SHA512_Init(CC_SHA512_CTX*):int"/>
    <method name="CC_SHA512_Update(CC_SHA512_CTX*;const void*;CC_LONG):int"/>
    <method name="CERTIFICATEPOLICIES_free(CERTIFICATEPOLICIES*):void"/>
    <method name="CERTIFICATEPOLICIES_new():CERTIFICATEPOLICIES*"/>
    <method name="CFAbsoluteTimeAddGregorianUnits(CFAbsoluteTime;CFTimeZoneRef;CFGregorianUnits):CFAbsoluteTime"/>
    <method name="CFAbsoluteTimeGetCurrent():CFAbsoluteTime"/>
    <method name="CFAbsoluteTimeGetDayOfWeek(CFAbsoluteTime;CFTimeZoneRef):SInt32"/>
    <method name="CFAbsoluteTimeGetDayOfYear(CFAbsoluteTime;CFTimeZoneRef):SInt32"/>
    <method name="CFAbsoluteTimeGetDifferenceAsGregorianUnits(CFAbsoluteTime;CFAbsoluteTime;CFTimeZoneRef;CFOptionFlags):CFGregorianUnits"/>
    <method name="CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime;CFTimeZoneRef):CFGregorianDate"/>
    <method name="CFAbsoluteTimeGetWeekOfYear(CFAbsoluteTime;CFTimeZoneRef):SInt32"/>
    <method name="CFAllocatorAllocate(CFAllocatorRef;CFIndex;CFOptionFlags):void*"/>
    <method name="CFAllocatorCreate(CFAllocatorRef;CFAllocatorContext*):CFAllocatorRef"/>
    <method name="CFAllocatorDeallocate(CFAllocatorRef;void*):void"/>
    <method name="CFAllocatorGetContext(CFAllocatorRef;CFAllocatorContext*):void"/>
    <method name="CFAllocatorGetDefault():CFAllocatorRef"/>
    <method name="CFAllocatorGetPreferredSizeForSize(CFAllocatorRef;CFIndex;CFOptionFlags):CFIndex"/>
    <method name="CFAllocatorGetTypeID():CFTypeID"/>
    <method name="CFAllocatorReallocate(CFAllocatorRef;void*;CFIndex;CFOptionFlags):void*"/>
    <method name="CFAllocatorSetDefault(CFAllocatorRef):void"/>
    <method name="CFArrayAppendArray(CFMutableArrayRef;CFArrayRef;CFRange):void"/>
    <method name="CFArrayAppendValue(CFMutableArrayRef;const void*):void"/>
    <method name="CFArrayApplyFunction(CFArrayRef;CFRange;CFArrayApplierFunction;void*):void"/>
    <method name="CFArrayBSearchValues(CFArrayRef;CFRange;const void*;CFComparatorFunction;void*):CFIndex"/>
    <method name="CFArrayContainsValue(CFArrayRef;CFRange;const void*):Boolean"/>
    <method name="CFArrayCreate(CFAllocatorRef;const void**;CFIndex;const CFArrayCallBacks*):CFArrayRef"/>
    <method name="CFArrayCreateCopy(CFAllocatorRef;CFArrayRef):CFArrayRef"/>
    <method name="CFArrayCreateMutable(CFAllocatorRef;CFIndex;const CFArrayCallBacks*):CFMutableArrayRef"/>
    <method name="CFArrayCreateMutableCopy(CFAllocatorRef;CFIndex;CFArrayRef):CFMutableArrayRef"/>
    <method name="CFArrayExchangeValuesAtIndices(CFMutableArrayRef;CFIndex;CFIndex):void"/>
    <method name="CFArrayGetCount(CFArrayRef):CFIndex"/>
    <method name="CFArrayGetCountOfValue(CFArrayRef;CFRange;const void*):CFIndex"/>
    <method name="CFArrayGetFirstIndexOfValue(CFArrayRef;CFRange;const void*):CFIndex"/>
    <method name="CFArrayGetLastIndexOfValue(CFArrayRef;CFRange;const void*):CFIndex"/>
    <method name="CFArrayGetTypeID():CFTypeID"/>
    <method name="CFArrayGetValueAtIndex(CFArrayRef;CFIndex):const void*"/>
    <method name="CFArrayGetValues(CFArrayRef;CFRange;const void**):void"/>
    <method name="CFArrayInsertValueAtIndex(CFMutableArrayRef;CFIndex;const void*):void"/>
    <method name="CFArrayRemoveAllValues(CFMutableArrayRef):void"/>
    <method name="CFArrayRemoveValueAtIndex(CFMutableArrayRef;CFIndex):void"/>
    <method name="CFArrayReplaceValues(CFMutableArrayRef;CFRange;const void**;CFIndex):void"/>
    <method name="CFArraySetValueAtIndex(CFMutableArrayRef;CFIndex;const void*):void"/>
    <method name="CFArraySortValues(CFMutableArrayRef;CFRange;CFComparatorFunction;void*):void"/>
    <method name="CFAttributedStringBeginEditing(CFMutableAttributedStringRef):void"/>
    <method name="CFAttributedStringCreate(CFAllocatorRef;CFStringRef;CFDictionaryRef):CFAttributedStringRef"/>
    <method name="CFAttributedStringCreateCopy(CFAllocatorRef;CFAttributedStringRef):CFAttributedStringRef"/>
    <method name="CFAttributedStringCreateMutable(CFAllocatorRef;CFIndex):CFMutableAttributedStringRef"/>
    <method name="CFAttributedStringCreateMutableCopy(CFAllocatorRef;CFIndex;CFAttributedStringRef):CFMutableAttributedStringRef"/>
    <method name="CFAttributedStringCreateWithSubstring(CFAllocatorRef;CFAttributedStringRef;CFRange):CFAttributedStringRef"/>
    <method name="CFAttributedStringEndEditing(CFMutableAttributedStringRef):void"/>
    <method name="CFAttributedStringGetAttribute(CFAttributedStringRef;CFIndex;CFStringRef;CFRange*):CFTypeRef"/>
    <method name="CFAttributedStringGetAttributeAndLongestEffectiveRange(CFAttributedStringRef;CFIndex;CFStringRef;CFRange;CFRange*):CFTypeRef"/>
    <method name="CFAttributedStringGetAttributes(CFAttributedStringRef;CFIndex;CFRange*):CFDictionaryRef"/>
    <method name="CFAttributedStringGetAttributesAndLongestEffectiveRange(CFAttributedStringRef;CFIndex;CFRange;CFRange*):CFDictionaryRef"/>
    <method name="CFAttributedStringGetLength(CFAttributedStringRef):CFIndex"/>
    <method name="CFAttributedStringGetMutableString(CFMutableAttributedStringRef):CFMutableStringRef"/>
    <method name="CFAttributedStringGetString(CFAttributedStringRef):CFStringRef"/>
    <method name="CFAttributedStringGetTypeID():CFTypeID"/>
    <method name="CFAttributedStringRemoveAttribute(CFMutableAttributedStringRef;CFRange;CFStringRef):void"/>
    <method name="CFAttributedStringReplaceAttributedString(CFMutableAttributedStringRef;CFRange;CFAttributedStringRef):void"/>
    <method name="CFAttributedStringReplaceString(CFMutableAttributedStringRef;CFRange;CFStringRef):void"/>
    <method name="CFAttributedStringSetAttribute(CFMutableAttributedStringRef;CFRange;CFStringRef;CFTypeRef):void"/>
    <method name="CFAttributedStringSetAttributes(CFMutableAttributedStringRef;CFRange;CFDictionaryRef;Boolean):void"/>
    <method name="CFBagAddValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBagApplyFunction(CFBagRef;CFBagApplierFunction;void*):void"/>
    <method name="CFBagContainsValue(CFBagRef;const void*):Boolean"/>
    <method name="CFBagCreate(CFAllocatorRef;const void**;CFIndex;const CFBagCallBacks*):CFBagRef"/>
    <method name="CFBagCreateCopy(CFAllocatorRef;CFBagRef):CFBagRef"/>
    <method name="CFBagCreateMutable(CFAllocatorRef;CFIndex;const CFBagCallBacks*):CFMutableBagRef"/>
    <method name="CFBagCreateMutableCopy(CFAllocatorRef;CFIndex;CFBagRef):CFMutableBagRef"/>
    <method name="CFBagGetCount(CFBagRef):CFIndex"/>
    <method name="CFBagGetCountOfValue(CFBagRef;const void*):CFIndex"/>
    <method name="CFBagGetTypeID():CFTypeID"/>
    <method name="CFBagGetValue(CFBagRef;const void*):const void*"/>
    <method name="CFBagGetValueIfPresent(CFBagRef;const void*;const void**):Boolean"/>
    <method name="CFBagGetValues(CFBagRef;const void**):void"/>
    <method name="CFBagRemoveAllValues(CFMutableBagRef):void"/>
    <method name="CFBagRemoveValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBagReplaceValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBagSetValue(CFMutableBagRef;const void*):void"/>
    <method name="CFBinaryHeapAddValue(CFBinaryHeapRef;const void*):void"/>
    <method name="CFBinaryHeapApplyFunction(CFBinaryHeapRef;CFBinaryHeapApplierFunction;void*):void"/>
    <method name="CFBinaryHeapContainsValue(CFBinaryHeapRef;const void*):Boolean"/>
    <method name="CFBinaryHeapCreate(CFAllocatorRef;CFIndex;const CFBinaryHeapCallBacks*;const CFBinaryHeapCompareContext*):CFBinaryHeapRef"/>
    <method name="CFBinaryHeapCreateCopy(CFAllocatorRef;CFIndex;CFBinaryHeapRef):CFBinaryHeapRef"/>
    <method name="CFBinaryHeapGetCount(CFBinaryHeapRef):CFIndex"/>
    <method name="CFBinaryHeapGetCountOfValue(CFBinaryHeapRef;const void*):CFIndex"/>
    <method name="CFBinaryHeapGetMinimum(CFBinaryHeapRef):const void*"/>
    <method name="CFBinaryHeapGetMinimumIfPresent(CFBinaryHeapRef;const void**):Boolean"/>
    <method name="CFBinaryHeapGetTypeID():CFTypeID"/>
    <method name="CFBinaryHeapGetValues(CFBinaryHeapRef;const void**):void"/>
    <method name="CFBinaryHeapRemoveAllValues(CFBinaryHeapRef):void"/>
    <method name="CFBinaryHeapRemoveMinimumValue(CFBinaryHeapRef):void"/>
    <method name="CFBitVectorContainsBit(CFBitVectorRef;CFRange;CFBit):Boolean"/>
    <method name="CFBitVectorCreate(CFAllocatorRef;const UInt8*;CFIndex):CFBitVectorRef"/>
    <method name="CFBitVectorCreateCopy(CFAllocatorRef;CFBitVectorRef):CFBitVectorRef"/>
    <method name="CFBitVectorCreateMutable(CFAllocatorRef;CFIndex):CFMutableBitVectorRef"/>
    <method name="CFBitVectorCreateMutableCopy(CFAllocatorRef;CFIndex;CFBitVectorRef):CFMutableBitVectorRef"/>
    <method name="CFBitVectorFlipBitAtIndex(CFMutableBitVectorRef;CFIndex):void"/>
    <method name="CFBitVectorFlipBits(CFMutableBitVectorRef;CFRange):void"/>
    <method name="CFBitVectorGetBitAtIndex(CFBitVectorRef;CFIndex):CFBit"/>
    <method name="CFBitVectorGetBits(CFBitVectorRef;CFRange;UInt8*):void"/>
    <method name="CFBitVectorGetCount(CFBitVectorRef):CFIndex"/>
    <method name="CFBitVectorGetCountOfBit(CFBitVectorRef;CFRange;CFBit):CFIndex"/>
    <method name="CFBitVectorGetFirstIndexOfBit(CFBitVectorRef;CFRange;CFBit):CFIndex"/>
    <method name="CFBitVectorGetLastIndexOfBit(CFBitVectorRef;CFRange;CFBit):CFIndex"/>
    <method name="CFBitVectorGetTypeID():CFTypeID"/>
    <method name="CFBitVectorSetAllBits(CFMutableBitVectorRef;CFBit):void"/>
    <method name="CFBitVectorSetBitAtIndex(CFMutableBitVectorRef;CFIndex;CFBit):void"/>
    <method name="CFBitVectorSetBits(CFMutableBitVectorRef;CFRange;CFBit):void"/>
    <method name="CFBitVectorSetCount(CFMutableBitVectorRef;CFIndex):void"/>
    <method name="CFBooleanGetTypeID():CFTypeID"/>
    <method name="CFBooleanGetValue(CFBooleanRef):Boolean"/>
    <method name="CFBridgingRelease(CFTypeRef):id"/>
    <method name="CFBridgingRetain(id):CFTypeRef"/>
    <method name="CFBundleCloseBundleResourceMap(CFBundleRef;CFBundleRefNum):void"/>
    <method name="CFBundleCopyAuxiliaryExecutableURL(CFBundleRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyBuiltInPlugInsURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyBundleLocalizations(CFBundleRef):CFArrayRef"/>
    <method name="CFBundleCopyBundleURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyExecutableArchitectures(CFBundleRef):CFArrayRef"/>
    <method name="CFBundleCopyExecutableArchitecturesForURL(CFURLRef):CFArrayRef"/>
    <method name="CFBundleCopyExecutableURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyInfoDictionaryForURL(CFURLRef):CFDictionaryRef"/>
    <method name="CFBundleCopyInfoDictionaryInDirectory(CFURLRef):CFDictionaryRef"/>
    <method name="CFBundleCopyLocalizationsForPreferences(CFArrayRef;CFArrayRef):CFArrayRef"/>
    <method name="CFBundleCopyLocalizationsForURL(CFURLRef):CFArrayRef"/>
    <method name="CFBundleCopyLocalizedString(CFBundleRef;CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="CFBundleCopyPreferredLocalizationsFromArray(CFArrayRef):CFArrayRef"/>
    <method name="CFBundleCopyPrivateFrameworksURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURL(CFBundleRef;CFStringRef;CFStringRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURLForLocalization(CFBundleRef;CFStringRef;CFStringRef;CFStringRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURLInDirectory(CFURLRef;CFStringRef;CFStringRef;CFStringRef):CFURLRef"/>
    <method name="CFBundleCopyResourceURLsOfType(CFBundleRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef;CFStringRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleCopyResourcesDirectoryURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopySharedFrameworksURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopySharedSupportURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCopySupportFilesDirectoryURL(CFBundleRef):CFURLRef"/>
    <method name="CFBundleCreate(CFAllocatorRef;CFURLRef):CFBundleRef"/>
    <method name="CFBundleCreateBundlesFromDirectory(CFAllocatorRef;CFURLRef;CFStringRef):CFArrayRef"/>
    <method name="CFBundleGetAllBundles():CFArrayRef"/>
    <method name="CFBundleGetBundleWithIdentifier(CFStringRef):CFBundleRef"/>
    <method name="CFBundleGetDataPointerForName(CFBundleRef;CFStringRef):void*"/>
    <method name="CFBundleGetDataPointersForNames(CFBundleRef;CFArrayRef;void**):void"/>
    <method name="CFBundleGetDevelopmentRegion(CFBundleRef):CFStringRef"/>
    <method name="CFBundleGetFunctionPointerForName(CFBundleRef;CFStringRef):void*"/>
    <method name="CFBundleGetFunctionPointersForNames(CFBundleRef;CFArrayRef;void**):void"/>
    <method name="CFBundleGetIdentifier(CFBundleRef):CFStringRef"/>
    <method name="CFBundleGetInfoDictionary(CFBundleRef):CFDictionaryRef"/>
    <method name="CFBundleGetLocalInfoDictionary(CFBundleRef):CFDictionaryRef"/>
    <method name="CFBundleGetMainBundle():CFBundleRef"/>
    <method name="CFBundleGetPackageInfo(CFBundleRef;UInt32*;UInt32*):void"/>
    <method name="CFBundleGetPackageInfoInDirectory(CFURLRef;UInt32*;UInt32*):Boolean"/>
    <method name="CFBundleGetPlugIn(CFBundleRef):CFPlugInRef"/>
    <method name="CFBundleGetTypeID():CFTypeID"/>
    <method name="CFBundleGetValueForInfoDictionaryKey(CFBundleRef;CFStringRef):CFTypeRef"/>
    <method name="CFBundleGetVersionNumber(CFBundleRef):UInt32"/>
    <method name="CFBundleIsExecutableLoaded(CFBundleRef):Boolean"/>
    <method name="CFBundleLoadExecutable(CFBundleRef):Boolean"/>
    <method name="CFBundleLoadExecutableAndReturnError(CFBundleRef;CFErrorRef*):Boolean"/>
    <method name="CFBundleOpenBundleResourceFiles(CFBundleRef;CFBundleRefNum*;CFBundleRefNum*):SInt32"/>
    <method name="CFBundleOpenBundleResourceMap(CFBundleRef):CFBundleRefNum"/>
    <method name="CFBundlePreflightExecutable(CFBundleRef;CFErrorRef*):Boolean"/>
    <method name="CFBundleUnloadExecutable(CFBundleRef):void"/>
    <method name="CFByteOrderGetCurrent():CFByteOrder"/>
    <method name="CFCalendarAddComponents(CFCalendarRef;CFAbsoluteTime*;CFOptionFlags;const char*, ...):Boolean"/>
    <method name="CFCalendarComposeAbsoluteTime(CFCalendarRef;CFAbsoluteTime*;const char*, ...):Boolean"/>
    <method name="CFCalendarCopyCurrent():CFCalendarRef"/>
    <method name="CFCalendarCopyLocale(CFCalendarRef):CFLocaleRef"/>
    <method name="CFCalendarCopyTimeZone(CFCalendarRef):CFTimeZoneRef"/>
    <method name="CFCalendarCreateWithIdentifier(CFAllocatorRef;CFStringRef):CFCalendarRef"/>
    <method name="CFCalendarDecomposeAbsoluteTime(CFCalendarRef;CFAbsoluteTime;const char*, ...):Boolean"/>
    <method name="CFCalendarGetComponentDifference(CFCalendarRef;CFAbsoluteTime;CFAbsoluteTime;CFOptionFlags;const char*, ...):Boolean"/>
    <method name="CFCalendarGetFirstWeekday(CFCalendarRef):CFIndex"/>
    <method name="CFCalendarGetIdentifier(CFCalendarRef):CFStringRef"/>
    <method name="CFCalendarGetMaximumRangeOfUnit(CFCalendarRef;CFCalendarUnit):CFRange"/>
    <method name="CFCalendarGetMinimumDaysInFirstWeek(CFCalendarRef):CFIndex"/>
    <method name="CFCalendarGetMinimumRangeOfUnit(CFCalendarRef;CFCalendarUnit):CFRange"/>
    <method name="CFCalendarGetOrdinalityOfUnit(CFCalendarRef;CFCalendarUnit;CFCalendarUnit;CFAbsoluteTime):CFIndex"/>
    <method name="CFCalendarGetRangeOfUnit(CFCalendarRef;CFCalendarUnit;CFCalendarUnit;CFAbsoluteTime):CFRange"/>
    <method name="CFCalendarGetTimeRangeOfUnit(CFCalendarRef;CFCalendarUnit;CFAbsoluteTime;CFAbsoluteTime*;CFTimeInterval*):Boolean"/>
    <method name="CFCalendarGetTypeID():CFTypeID"/>
    <method name="CFCalendarSetFirstWeekday(CFCalendarRef;CFIndex):void"/>
    <method name="CFCalendarSetLocale(CFCalendarRef;CFLocaleRef):void"/>
    <method name="CFCalendarSetMinimumDaysInFirstWeek(CFCalendarRef;CFIndex):void"/>
    <method name="CFCalendarSetTimeZone(CFCalendarRef;CFTimeZoneRef):void"/>
    <method name="CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef;CFRange):void"/>
    <method name="CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef;CFStringRef):void"/>
    <method name="CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef;CFCharacterSetRef):CFDataRef"/>
    <method name="CFCharacterSetCreateCopy(CFAllocatorRef;CFCharacterSetRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateInvertedSet(CFAllocatorRef;CFCharacterSetRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateMutable(CFAllocatorRef):CFMutableCharacterSetRef"/>
    <method name="CFCharacterSetCreateMutableCopy(CFAllocatorRef;CFCharacterSetRef):CFMutableCharacterSetRef"/>
    <method name="CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef;CFDataRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef;CFRange):CFCharacterSetRef"/>
    <method name="CFCharacterSetCreateWithCharactersInString(CFAllocatorRef;CFStringRef):CFCharacterSetRef"/>
    <method name="CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet):CFCharacterSetRef"/>
    <method name="CFCharacterSetGetTypeID():CFTypeID"/>
    <method name="CFCharacterSetHasMemberInPlane(CFCharacterSetRef;CFIndex):Boolean"/>
    <method name="CFCharacterSetIntersect(CFMutableCharacterSetRef;CFCharacterSetRef):void"/>
    <method name="CFCharacterSetInvert(CFMutableCharacterSetRef):void"/>
    <method name="CFCharacterSetIsCharacterMember(CFCharacterSetRef;UniChar):Boolean"/>
    <method name="CFCharacterSetIsLongCharacterMember(CFCharacterSetRef;UTF32Char):Boolean"/>
    <method name="CFCharacterSetIsSupersetOfSet(CFCharacterSetRef;CFCharacterSetRef):Boolean"/>
    <method name="CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef;CFRange):void"/>
    <method name="CFCharacterSetRemoveCharactersInString(CFMutableCharacterSetRef;CFStringRef):void"/>
    <method name="CFCharacterSetUnion(CFMutableCharacterSetRef;CFCharacterSetRef):void"/>
    <method name="CFConvertDoubleHostToSwapped(double):CFSwappedFloat64"/>
    <method name="CFConvertDoubleSwappedToHost(CFSwappedFloat64):double"/>
    <method name="CFConvertFloat32HostToSwapped(Float32):CFSwappedFloat32"/>
    <method name="CFConvertFloat32SwappedToHost(CFSwappedFloat32):Float32"/>
    <method name="CFConvertFloat64HostToSwapped(Float64):CFSwappedFloat64"/>
    <method name="CFConvertFloat64SwappedToHost(CFSwappedFloat64):Float64"/>
    <method name="CFConvertFloatHostToSwapped(float):CFSwappedFloat32"/>
    <method name="CFConvertFloatSwappedToHost(CFSwappedFloat32):float"/>
    <method name="CFCopyDescription(CFTypeRef):CFStringRef"/>
    <method name="CFCopyHomeDirectoryURL():CFURLRef"/>
    <method name="CFCopyTypeIDDescription(CFTypeID):CFStringRef"/>
    <method name="CFDataAppendBytes(CFMutableDataRef;const UInt8*;CFIndex):void"/>
    <method name="CFDataCreate(CFAllocatorRef;const UInt8*;CFIndex):CFDataRef"/>
    <method name="CFDataCreateCopy(CFAllocatorRef;CFDataRef):CFDataRef"/>
    <method name="CFDataCreateMutable(CFAllocatorRef;CFIndex):CFMutableDataRef"/>
    <method name="CFDataCreateMutableCopy(CFAllocatorRef;CFIndex;CFDataRef):CFMutableDataRef"/>
    <method name="CFDataCreateWithBytesNoCopy(CFAllocatorRef;const UInt8*;CFIndex;CFAllocatorRef):CFDataRef"/>
    <method name="CFDataDeleteBytes(CFMutableDataRef;CFRange):void"/>
    <method name="CFDataFind(CFDataRef;CFDataRef;CFRange;CFDataSearchFlags):CFRange"/>
    <method name="CFDataGetBytePtr(CFDataRef):const UInt8*"/>
    <method name="CFDataGetBytes(CFDataRef;CFRange;UInt8*):void"/>
    <method name="CFDataGetLength(CFDataRef):CFIndex"/>
    <method name="CFDataGetMutableBytePtr(CFMutableDataRef):UInt8*"/>
    <method name="CFDataGetTypeID():CFTypeID"/>
    <method name="CFDataIncreaseLength(CFMutableDataRef;CFIndex):void"/>
    <method name="CFDataReplaceBytes(CFMutableDataRef;CFRange;const UInt8*;CFIndex):void"/>
    <method name="CFDataSetLength(CFMutableDataRef;CFIndex):void"/>
    <method name="CFDateCompare(CFDateRef;CFDateRef;void*):CFComparisonResult"/>
    <method name="CFDateCreate(CFAllocatorRef;CFAbsoluteTime):CFDateRef"/>
    <method name="CFDateFormatterCopyProperty(CFDateFormatterRef;CFStringRef):CFTypeRef"/>
    <method name="CFDateFormatterCreate(CFAllocatorRef;CFLocaleRef;CFDateFormatterStyle;CFDateFormatterStyle):CFDateFormatterRef"/>
    <method name="CFDateFormatterCreateDateFormatFromTemplate(CFAllocatorRef;CFStringRef;CFOptionFlags;CFLocaleRef):CFStringRef"/>
    <method name="CFDateFormatterCreateDateFromString(CFAllocatorRef;CFDateFormatterRef;CFStringRef;CFRange*):CFDateRef"/>
    <method name="CFDateFormatterCreateStringWithAbsoluteTime(CFAllocatorRef;CFDateFormatterRef;CFAbsoluteTime):CFStringRef"/>
    <method name="CFDateFormatterCreateStringWithDate(CFAllocatorRef;CFDateFormatterRef;CFDateRef):CFStringRef"/>
    <method name="CFDateFormatterGetAbsoluteTimeFromString(CFDateFormatterRef;CFStringRef;CFRange*;CFAbsoluteTime*):Boolean"/>
    <method name="CFDateFormatterGetDateStyle(CFDateFormatterRef):CFDateFormatterStyle"/>
    <method name="CFDateFormatterGetFormat(CFDateFormatterRef):CFStringRef"/>
    <method name="CFDateFormatterGetLocale(CFDateFormatterRef):CFLocaleRef"/>
    <method name="CFDateFormatterGetTimeStyle(CFDateFormatterRef):CFDateFormatterStyle"/>
    <method name="CFDateFormatterGetTypeID():CFTypeID"/>
    <method name="CFDateFormatterSetFormat(CFDateFormatterRef;CFStringRef):void"/>
    <method name="CFDateFormatterSetProperty(CFDateFormatterRef;CFStringRef;CFTypeRef):void"/>
    <method name="CFDateGetAbsoluteTime(CFDateRef):CFAbsoluteTime"/>
    <method name="CFDateGetTimeIntervalSinceDate(CFDateRef;CFDateRef):CFTimeInterval"/>
    <method name="CFDateGetTypeID():CFTypeID"/>
    <method name="CFDictionaryAddValue(CFMutableDictionaryRef;const void*;const void*):void"/>
    <method name="CFDictionaryApplyFunction(CFDictionaryRef;CFDictionaryApplierFunction;void*):void"/>
    <method name="CFDictionaryContainsKey(CFDictionaryRef;const void*):Boolean"/>
    <method name="CFDictionaryContainsValue(CFDictionaryRef;const void*):Boolean"/>
    <method name="CFDictionaryCreate(CFAllocatorRef;const void**;const void**;CFIndex;const CFDictionaryKeyCallBacks*;const CFDictionaryValueCallBacks*):CFDictionaryRef"/>
    <method name="CFDictionaryCreateCopy(CFAllocatorRef;CFDictionaryRef):CFDictionaryRef"/>
    <method name="CFDictionaryCreateMutable(CFAllocatorRef;CFIndex;const CFDictionaryKeyCallBacks*;const CFDictionaryValueCallBacks*):CFMutableDictionaryRef"/>
    <method name="CFDictionaryCreateMutableCopy(CFAllocatorRef;CFIndex;CFDictionaryRef):CFMutableDictionaryRef"/>
    <method name="CFDictionaryGetCount(CFDictionaryRef):CFIndex"/>
    <method name="CFDictionaryGetCountOfKey(CFDictionaryRef;const void*):CFIndex"/>
    <method name="CFDictionaryGetCountOfValue(CFDictionaryRef;const void*):CFIndex"/>
    <method name="CFDictionaryGetKeysAndValues(CFDictionaryRef;const void**;const void**):void"/>
    <method name="CFDictionaryGetTypeID():CFTypeID"/>
    <method name="CFDictionaryGetValue(CFDictionaryRef;const void*):const void*"/>
    <method name="CFDictionaryGetValueIfPresent(CFDictionaryRef;const void*;const void**):Boolean"/>
    <method name="CFDictionaryRemoveAllValues(CFMutableDictionaryRef):void"/>
    <method name="CFDictionaryRemoveValue(CFMutableDictionaryRef;const void*):void"/>
    <method name="CFDictionaryReplaceValue(CFMutableDictionaryRef;const void*;const void*):void"/>
    <method name="CFDictionarySetValue(CFMutableDictionaryRef;const void*;const void*):void"/>
    <method name="CFEqual(CFTypeRef;CFTypeRef):Boolean"/>
    <method name="CFErrorCopyDescription(CFErrorRef):CFStringRef"/>
    <method name="CFErrorCopyFailureReason(CFErrorRef):CFStringRef"/>
    <method name="CFErrorCopyRecoverySuggestion(CFErrorRef):CFStringRef"/>
    <method name="CFErrorCopyUserInfo(CFErrorRef):CFDictionaryRef"/>
    <method name="CFErrorCreate(CFAllocatorRef;CFStringRef;CFIndex;CFDictionaryRef):CFErrorRef"/>
    <method name="CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef;CFStringRef;CFIndex;const const void**;const const void**;CFIndex):CFErrorRef"/>
    <method name="CFErrorGetCode(CFErrorRef):CFIndex"/>
    <method name="CFErrorGetDomain(CFErrorRef):CFStringRef"/>
    <method name="CFErrorGetTypeID():CFTypeID"/>
    <method name="CFFTPCreateParsedResourceListing(CFAllocatorRef;const UInt8*;CFIndex;CFDictionaryRef*):CFIndex"/>
    <method name="CFFileDescriptorCreate(CFAllocatorRef;CFFileDescriptorNativeDescriptor;Boolean;CFFileDescriptorCallBack;const CFFileDescriptorContext*):CFFileDescriptorRef"/>
    <method name="CFFileDescriptorCreateRunLoopSource(CFAllocatorRef;CFFileDescriptorRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFFileDescriptorDisableCallBacks(CFFileDescriptorRef;CFOptionFlags):void"/>
    <method name="CFFileDescriptorEnableCallBacks(CFFileDescriptorRef;CFOptionFlags):void"/>
    <method name="CFFileDescriptorGetContext(CFFileDescriptorRef;CFFileDescriptorContext*):void"/>
    <method name="CFFileDescriptorGetNativeDescriptor(CFFileDescriptorRef):CFFileDescriptorNativeDescriptor"/>
    <method name="CFFileDescriptorGetTypeID():CFTypeID"/>
    <method name="CFFileDescriptorInvalidate(CFFileDescriptorRef):void"/>
    <method name="CFFileDescriptorIsValid(CFFileDescriptorRef):Boolean"/>
    <method name="CFGetAllocator(CFTypeRef):CFAllocatorRef"/>
    <method name="CFGetRetainCount(CFTypeRef):CFIndex"/>
    <method name="CFGetTypeID(CFTypeRef):CFTypeID"/>
    <method name="CFGregorianDateGetAbsoluteTime(CFGregorianDate;CFTimeZoneRef):CFAbsoluteTime"/>
    <method name="CFGregorianDateIsValid(CFGregorianDate;CFOptionFlags):Boolean"/>
    <method name="CFHTTPAuthenticationAppliesToRequest(CFHTTPAuthenticationRef;CFHTTPMessageRef):Boolean"/>
    <method name="CFHTTPAuthenticationCopyDomains(CFHTTPAuthenticationRef):CFArrayRef"/>
    <method name="CFHTTPAuthenticationCopyMethod(CFHTTPAuthenticationRef):CFStringRef"/>
    <method name="CFHTTPAuthenticationCopyRealm(CFHTTPAuthenticationRef):CFStringRef"/>
    <method name="CFHTTPAuthenticationCreateFromResponse(CFAllocatorRef;CFHTTPMessageRef):CFHTTPAuthenticationRef"/>
    <method name="CFHTTPAuthenticationGetTypeID():CFTypeID"/>
    <method name="CFHTTPAuthenticationIsValid(CFHTTPAuthenticationRef;CFStreamError*):Boolean"/>
    <method name="CFHTTPAuthenticationRequiresAccountDomain(CFHTTPAuthenticationRef):Boolean"/>
    <method name="CFHTTPAuthenticationRequiresOrderedRequests(CFHTTPAuthenticationRef):Boolean"/>
    <method name="CFHTTPAuthenticationRequiresUserNameAndPassword(CFHTTPAuthenticationRef):Boolean"/>
    <method name="CFHTTPMessageAddAuthentication(CFHTTPMessageRef;CFHTTPMessageRef;CFStringRef;CFStringRef;CFStringRef;Boolean):Boolean"/>
    <method name="CFHTTPMessageAppendBytes(CFHTTPMessageRef;const UInt8*;CFIndex):Boolean"/>
    <method name="CFHTTPMessageApplyCredentialDictionary(CFHTTPMessageRef;CFHTTPAuthenticationRef;CFDictionaryRef;CFStreamError*):Boolean"/>
    <method name="CFHTTPMessageApplyCredentials(CFHTTPMessageRef;CFHTTPAuthenticationRef;CFStringRef;CFStringRef;CFStreamError*):Boolean"/>
    <method name="CFHTTPMessageCopyAllHeaderFields(CFHTTPMessageRef):CFDictionaryRef"/>
    <method name="CFHTTPMessageCopyBody(CFHTTPMessageRef):CFDataRef"/>
    <method name="CFHTTPMessageCopyHeaderFieldValue(CFHTTPMessageRef;CFStringRef):CFStringRef"/>
    <method name="CFHTTPMessageCopyRequestMethod(CFHTTPMessageRef):CFStringRef"/>
    <method name="CFHTTPMessageCopyRequestURL(CFHTTPMessageRef):CFURLRef"/>
    <method name="CFHTTPMessageCopyResponseStatusLine(CFHTTPMessageRef):CFStringRef"/>
    <method name="CFHTTPMessageCopySerializedMessage(CFHTTPMessageRef):CFDataRef"/>
    <method name="CFHTTPMessageCopyVersion(CFHTTPMessageRef):CFStringRef"/>
    <method name="CFHTTPMessageCreateCopy(CFAllocatorRef;CFHTTPMessageRef):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageCreateEmpty(CFAllocatorRef;Boolean):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageCreateRequest(CFAllocatorRef;CFStringRef;CFURLRef;CFStringRef):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageCreateResponse(CFAllocatorRef;CFIndex;CFStringRef;CFStringRef):CFHTTPMessageRef"/>
    <method name="CFHTTPMessageGetResponseStatusCode(CFHTTPMessageRef):CFIndex"/>
    <method name="CFHTTPMessageGetTypeID():CFTypeID"/>
    <method name="CFHTTPMessageIsHeaderComplete(CFHTTPMessageRef):Boolean"/>
    <method name="CFHTTPMessageIsRequest(CFHTTPMessageRef):Boolean"/>
    <method name="CFHTTPMessageSetBody(CFHTTPMessageRef;CFDataRef):void"/>
    <method name="CFHTTPMessageSetHeaderFieldValue(CFHTTPMessageRef;CFStringRef;CFStringRef):void"/>
    <method name="CFHTTPReadStreamSetProxy(CFReadStreamRef;CFStringRef;CFIndex):void"/>
    <method name="CFHTTPReadStreamSetRedirectsAutomatically(CFReadStreamRef;Boolean):void"/>
    <method name="CFHash(CFTypeRef):CFHashCode"/>
    <method name="CFHostCancelInfoResolution(CFHostRef;CFHostInfoType):void"/>
    <method name="CFHostCreateCopy(CFAllocatorRef;CFHostRef):CFHostRef"/>
    <method name="CFHostCreateWithAddress(CFAllocatorRef;CFDataRef):CFHostRef"/>
    <method name="CFHostCreateWithName(CFAllocatorRef;CFStringRef):CFHostRef"/>
    <method name="CFHostGetAddressing(CFHostRef;Boolean*):CFArrayRef"/>
    <method name="CFHostGetNames(CFHostRef;Boolean*):CFArrayRef"/>
    <method name="CFHostGetReachability(CFHostRef;Boolean*):CFDataRef"/>
    <method name="CFHostGetTypeID():CFTypeID"/>
    <method name="CFHostScheduleWithRunLoop(CFHostRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFHostSetClient(CFHostRef;CFHostClientCallBack;CFHostClientContext*):Boolean"/>
    <method name="CFHostStartInfoResolution(CFHostRef;CFHostInfoType;CFStreamError*):Boolean"/>
    <method name="CFHostUnscheduleFromRunLoop(CFHostRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFLocaleCopyAvailableLocaleIdentifiers():CFArrayRef"/>
    <method name="CFLocaleCopyCommonISOCurrencyCodes():CFArrayRef"/>
    <method name="CFLocaleCopyCurrent():CFLocaleRef"/>
    <method name="CFLocaleCopyDisplayNameForPropertyValue(CFLocaleRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="CFLocaleCopyISOCountryCodes():CFArrayRef"/>
    <method name="CFLocaleCopyISOCurrencyCodes():CFArrayRef"/>
    <method name="CFLocaleCopyISOLanguageCodes():CFArrayRef"/>
    <method name="CFLocaleCopyPreferredLanguages():CFArrayRef"/>
    <method name="CFLocaleCreate(CFAllocatorRef;CFStringRef):CFLocaleRef"/>
    <method name="CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef;LangCode;RegionCode):CFStringRef"/>
    <method name="CFLocaleCreateCanonicalLocaleIdentifierFromString(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="CFLocaleCreateComponentsFromLocaleIdentifier(CFAllocatorRef;CFStringRef):CFDictionaryRef"/>
    <method name="CFLocaleCreateCopy(CFAllocatorRef;CFLocaleRef):CFLocaleRef"/>
    <method name="CFLocaleCreateLocaleIdentifierFromComponents(CFAllocatorRef;CFDictionaryRef):CFStringRef"/>
    <method name="CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(CFAllocatorRef;uint32_t):CFStringRef"/>
    <method name="CFLocaleGetIdentifier(CFLocaleRef):CFStringRef"/>
    <method name="CFLocaleGetLanguageCharacterDirection(CFStringRef):CFLocaleLanguageDirection"/>
    <method name="CFLocaleGetLanguageLineDirection(CFStringRef):CFLocaleLanguageDirection"/>
    <method name="CFLocaleGetSystem():CFLocaleRef"/>
    <method name="CFLocaleGetTypeID():CFTypeID"/>
    <method name="CFLocaleGetValue(CFLocaleRef;CFStringRef):CFTypeRef"/>
    <method name="CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(CFStringRef):uint32_t"/>
    <method name="CFMachPortCreate(CFAllocatorRef;CFMachPortCallBack;CFMachPortContext*;Boolean*):CFMachPortRef"/>
    <method name="CFMachPortCreateRunLoopSource(CFAllocatorRef;CFMachPortRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFMachPortCreateWithPort(CFAllocatorRef;mach_port_t;CFMachPortCallBack;CFMachPortContext*;Boolean*):CFMachPortRef"/>
    <method name="CFMachPortGetContext(CFMachPortRef;CFMachPortContext*):void"/>
    <method name="CFMachPortGetInvalidationCallBack(CFMachPortRef):CFMachPortInvalidationCallBack"/>
    <method name="CFMachPortGetPort(CFMachPortRef):mach_port_t"/>
    <method name="CFMachPortGetTypeID():CFTypeID"/>
    <method name="CFMachPortInvalidate(CFMachPortRef):void"/>
    <method name="CFMachPortIsValid(CFMachPortRef):Boolean"/>
    <method name="CFMachPortSetInvalidationCallBack(CFMachPortRef;CFMachPortInvalidationCallBack):void"/>
    <method name="CFMakeCollectable(CFTypeRef):CFTypeRef"/>
    <method name="CFMessagePortCreateLocal(CFAllocatorRef;CFStringRef;CFMessagePortCallBack;CFMessagePortContext*;Boolean*):CFMessagePortRef"/>
    <method name="CFMessagePortCreateRemote(CFAllocatorRef;CFStringRef):CFMessagePortRef"/>
    <method name="CFMessagePortCreateRunLoopSource(CFAllocatorRef;CFMessagePortRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFMessagePortGetContext(CFMessagePortRef;CFMessagePortContext*):void"/>
    <method name="CFMessagePortGetInvalidationCallBack(CFMessagePortRef):CFMessagePortInvalidationCallBack"/>
    <method name="CFMessagePortGetName(CFMessagePortRef):CFStringRef"/>
    <method name="CFMessagePortGetTypeID():CFTypeID"/>
    <method name="CFMessagePortInvalidate(CFMessagePortRef):void"/>
    <method name="CFMessagePortIsRemote(CFMessagePortRef):Boolean"/>
    <method name="CFMessagePortIsValid(CFMessagePortRef):Boolean"/>
    <method name="CFMessagePortSendRequest(CFMessagePortRef;SInt32;CFDataRef;CFTimeInterval;CFTimeInterval;CFStringRef;CFDataRef*):SInt32"/>
    <method name="CFMessagePortSetDispatchQueue(CFMessagePortRef;dispatch_queue_t):void"/>
    <method name="CFMessagePortSetInvalidationCallBack(CFMessagePortRef;CFMessagePortInvalidationCallBack):void"/>
    <method name="CFMessagePortSetName(CFMessagePortRef;CFStringRef):Boolean"/>
    <method name="CFNetDiagnosticCopyNetworkStatusPassively(CFNetDiagnosticRef;CFStringRef*):CFNetDiagnosticStatus"/>
    <method name="CFNetDiagnosticCreateWithStreams(CFAllocatorRef;CFReadStreamRef;CFWriteStreamRef):CFNetDiagnosticRef"/>
    <method name="CFNetDiagnosticCreateWithURL(CFAllocatorRef;CFURLRef):CFNetDiagnosticRef"/>
    <method name="CFNetDiagnosticDiagnoseProblemInteractively(CFNetDiagnosticRef):CFNetDiagnosticStatus"/>
    <method name="CFNetDiagnosticSetName(CFNetDiagnosticRef;CFStringRef):void"/>
    <method name="CFNetServiceBrowserCreate(CFAllocatorRef;CFNetServiceBrowserClientCallBack;CFNetServiceClientContext*):CFNetServiceBrowserRef"/>
    <method name="CFNetServiceBrowserGetTypeID():CFTypeID"/>
    <method name="CFNetServiceBrowserInvalidate(CFNetServiceBrowserRef):void"/>
    <method name="CFNetServiceBrowserScheduleWithRunLoop(CFNetServiceBrowserRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceBrowserSearchForDomains(CFNetServiceBrowserRef;Boolean;CFStreamError*):Boolean"/>
    <method name="CFNetServiceBrowserSearchForServices(CFNetServiceBrowserRef;CFStringRef;CFStringRef;CFStreamError*):Boolean"/>
    <method name="CFNetServiceBrowserStopSearch(CFNetServiceBrowserRef;CFStreamError*):void"/>
    <method name="CFNetServiceBrowserUnscheduleFromRunLoop(CFNetServiceBrowserRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceCancel(CFNetServiceRef):void"/>
    <method name="CFNetServiceCreate(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef;SInt32):CFNetServiceRef"/>
    <method name="CFNetServiceCreateCopy(CFAllocatorRef;CFNetServiceRef):CFNetServiceRef"/>
    <method name="CFNetServiceCreateDictionaryWithTXTData(CFAllocatorRef;CFDataRef):CFDictionaryRef"/>
    <method name="CFNetServiceCreateTXTDataWithDictionary(CFAllocatorRef;CFDictionaryRef):CFDataRef"/>
    <method name="CFNetServiceGetAddressing(CFNetServiceRef):CFArrayRef"/>
    <method name="CFNetServiceGetDomain(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetName(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetPortNumber(CFNetServiceRef):SInt32"/>
    <method name="CFNetServiceGetProtocolSpecificInformation(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetTXTData(CFNetServiceRef):CFDataRef"/>
    <method name="CFNetServiceGetTargetHost(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetType(CFNetServiceRef):CFStringRef"/>
    <method name="CFNetServiceGetTypeID():CFTypeID"/>
    <method name="CFNetServiceMonitorCreate(CFAllocatorRef;CFNetServiceRef;CFNetServiceMonitorClientCallBack;CFNetServiceClientContext*):CFNetServiceMonitorRef"/>
    <method name="CFNetServiceMonitorGetTypeID():CFTypeID"/>
    <method name="CFNetServiceMonitorInvalidate(CFNetServiceMonitorRef):void"/>
    <method name="CFNetServiceMonitorScheduleWithRunLoop(CFNetServiceMonitorRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceMonitorStart(CFNetServiceMonitorRef;CFNetServiceMonitorType;CFStreamError*):Boolean"/>
    <method name="CFNetServiceMonitorStop(CFNetServiceMonitorRef;CFStreamError*):void"/>
    <method name="CFNetServiceMonitorUnscheduleFromRunLoop(CFNetServiceMonitorRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceRegister(CFNetServiceRef;CFStreamError*):Boolean"/>
    <method name="CFNetServiceRegisterWithOptions(CFNetServiceRef;CFOptionFlags;CFStreamError*):Boolean"/>
    <method name="CFNetServiceResolve(CFNetServiceRef;CFStreamError*):Boolean"/>
    <method name="CFNetServiceResolveWithTimeout(CFNetServiceRef;CFTimeInterval;CFStreamError*):Boolean"/>
    <method name="CFNetServiceScheduleWithRunLoop(CFNetServiceRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetServiceSetClient(CFNetServiceRef;CFNetServiceClientCallBack;CFNetServiceClientContext*):Boolean"/>
    <method name="CFNetServiceSetProtocolSpecificInformation(CFNetServiceRef;CFStringRef):void"/>
    <method name="CFNetServiceSetTXTData(CFNetServiceRef;CFDataRef):Boolean"/>
    <method name="CFNetServiceUnscheduleFromRunLoop(CFNetServiceRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFNetworkCopyProxiesForAutoConfigurationScript(CFStringRef;CFURLRef;CFErrorRef*):CFArrayRef"/>
    <method name="CFNetworkCopyProxiesForURL(CFURLRef;CFDictionaryRef):CFArrayRef"/>
    <method name="CFNetworkCopySystemProxySettings():CFDictionaryRef"/>
    <method name="CFNetworkExecuteProxyAutoConfigurationScript(CFStringRef;CFURLRef;CFProxyAutoConfigurationResultCallback;CFStreamClientContext*):CFRunLoopSourceRef"/>
    <method name="CFNetworkExecuteProxyAutoConfigurationURL(CFURLRef;CFURLRef;CFProxyAutoConfigurationResultCallback;CFStreamClientContext*):CFRunLoopSourceRef"/>
    <method name="CFNotificationCenterAddObserver(CFNotificationCenterRef;const void*;CFNotificationCallback;CFStringRef;const void*;CFNotificationSuspensionBehavior):void"/>
    <method name="CFNotificationCenterGetDarwinNotifyCenter():CFNotificationCenterRef"/>
    <method name="CFNotificationCenterGetLocalCenter():CFNotificationCenterRef"/>
    <method name="CFNotificationCenterGetTypeID():CFTypeID"/>
    <method name="CFNotificationCenterPostNotification(CFNotificationCenterRef;CFStringRef;const void*;CFDictionaryRef;Boolean):void"/>
    <method name="CFNotificationCenterPostNotificationWithOptions(CFNotificationCenterRef;CFStringRef;const void*;CFDictionaryRef;CFOptionFlags):void"/>
    <method name="CFNotificationCenterRemoveEveryObserver(CFNotificationCenterRef;const void*):void"/>
    <method name="CFNotificationCenterRemoveObserver(CFNotificationCenterRef;const void*;CFStringRef;const void*):void"/>
    <method name="CFNullGetTypeID():CFTypeID"/>
    <method name="CFNumberCompare(CFNumberRef;CFNumberRef;void*):CFComparisonResult"/>
    <method name="CFNumberCreate(CFAllocatorRef;CFNumberType;const void*):CFNumberRef"/>
    <method name="CFNumberFormatterCopyProperty(CFNumberFormatterRef;CFStringRef):CFTypeRef"/>
    <method name="CFNumberFormatterCreate(CFAllocatorRef;CFLocaleRef;CFNumberFormatterStyle):CFNumberFormatterRef"/>
    <method name="CFNumberFormatterCreateNumberFromString(CFAllocatorRef;CFNumberFormatterRef;CFStringRef;CFRange*;CFOptionFlags):CFNumberRef"/>
    <method name="CFNumberFormatterCreateStringWithNumber(CFAllocatorRef;CFNumberFormatterRef;CFNumberRef):CFStringRef"/>
    <method name="CFNumberFormatterCreateStringWithValue(CFAllocatorRef;CFNumberFormatterRef;CFNumberType;const void*):CFStringRef"/>
    <method name="CFNumberFormatterGetDecimalInfoForCurrencyCode(CFStringRef;int32_t*;double*):Boolean"/>
    <method name="CFNumberFormatterGetFormat(CFNumberFormatterRef):CFStringRef"/>
    <method name="CFNumberFormatterGetLocale(CFNumberFormatterRef):CFLocaleRef"/>
    <method name="CFNumberFormatterGetStyle(CFNumberFormatterRef):CFNumberFormatterStyle"/>
    <method name="CFNumberFormatterGetTypeID():CFTypeID"/>
    <method name="CFNumberFormatterGetValueFromString(CFNumberFormatterRef;CFStringRef;CFRange*;CFNumberType;void*):Boolean"/>
    <method name="CFNumberFormatterSetFormat(CFNumberFormatterRef;CFStringRef):void"/>
    <method name="CFNumberFormatterSetProperty(CFNumberFormatterRef;CFStringRef;CFTypeRef):void"/>
    <method name="CFNumberGetByteSize(CFNumberRef):CFIndex"/>
    <method name="CFNumberGetType(CFNumberRef):CFNumberType"/>
    <method name="CFNumberGetTypeID():CFTypeID"/>
    <method name="CFNumberGetValue(CFNumberRef;CFNumberType;void*):Boolean"/>
    <method name="CFNumberIsFloatType(CFNumberRef):Boolean"/>
    <method name="CFPlugInAddInstanceForFactory(CFUUIDRef):void"/>
    <method name="CFPlugInCreate(CFAllocatorRef;CFURLRef):CFPlugInRef"/>
    <method name="CFPlugInFindFactoriesForPlugInType(CFUUIDRef):CFArrayRef"/>
    <method name="CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef;CFPlugInRef):CFArrayRef"/>
    <method name="CFPlugInGetBundle(CFPlugInRef):CFBundleRef"/>
    <method name="CFPlugInGetTypeID():CFTypeID"/>
    <method name="CFPlugInInstanceCreate(CFAllocatorRef;CFUUIDRef;CFUUIDRef):void*"/>
    <method name="CFPlugInInstanceCreateWithInstanceDataSize(CFAllocatorRef;CFIndex;CFPlugInInstanceDeallocateInstanceDataFunction;CFStringRef;CFPlugInInstanceGetInterfaceFunction):CFPlugInInstanceRef"/>
    <method name="CFPlugInInstanceGetFactoryName(CFPlugInInstanceRef):CFStringRef"/>
    <method name="CFPlugInInstanceGetInstanceData(CFPlugInInstanceRef):void*"/>
    <method name="CFPlugInInstanceGetInterfaceFunctionTable(CFPlugInInstanceRef;CFStringRef;void**):Boolean"/>
    <method name="CFPlugInInstanceGetTypeID():CFTypeID"/>
    <method name="CFPlugInIsLoadOnDemand(CFPlugInRef):Boolean"/>
    <method name="CFPlugInRegisterFactoryFunction(CFUUIDRef;CFPlugInFactoryFunction):Boolean"/>
    <method name="CFPlugInRegisterFactoryFunctionByName(CFUUIDRef;CFPlugInRef;CFStringRef):Boolean"/>
    <method name="CFPlugInRegisterPlugInType(CFUUIDRef;CFUUIDRef):Boolean"/>
    <method name="CFPlugInRemoveInstanceForFactory(CFUUIDRef):void"/>
    <method name="CFPlugInSetLoadOnDemand(CFPlugInRef;Boolean):void"/>
    <method name="CFPlugInUnregisterFactory(CFUUIDRef):Boolean"/>
    <method name="CFPlugInUnregisterPlugInType(CFUUIDRef;CFUUIDRef):Boolean"/>
    <method name="CFPreferencesAddSuitePreferencesToApp(CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesAppSynchronize(CFStringRef):Boolean"/>
    <method name="CFPreferencesAppValueIsForced(CFStringRef;CFStringRef):Boolean"/>
    <method name="CFPreferencesCopyAppValue(CFStringRef;CFStringRef):CFPropertyListRef"/>
    <method name="CFPreferencesCopyApplicationList(CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFPreferencesCopyKeyList(CFStringRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFPreferencesCopyMultiple(CFArrayRef;CFStringRef;CFStringRef;CFStringRef):CFDictionaryRef"/>
    <method name="CFPreferencesCopyValue(CFStringRef;CFStringRef;CFStringRef;CFStringRef):CFPropertyListRef"/>
    <method name="CFPreferencesGetAppBooleanValue(CFStringRef;CFStringRef;Boolean*):Boolean"/>
    <method name="CFPreferencesGetAppIntegerValue(CFStringRef;CFStringRef;Boolean*):CFIndex"/>
    <method name="CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesSetAppValue(CFStringRef;CFPropertyListRef;CFStringRef):void"/>
    <method name="CFPreferencesSetMultiple(CFDictionaryRef;CFArrayRef;CFStringRef;CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesSetValue(CFStringRef;CFPropertyListRef;CFStringRef;CFStringRef;CFStringRef):void"/>
    <method name="CFPreferencesSynchronize(CFStringRef;CFStringRef;CFStringRef):Boolean"/>
    <method name="CFPropertyListCreateData(CFAllocatorRef;CFPropertyListRef;CFPropertyListFormat;CFOptionFlags;CFErrorRef*):CFDataRef"/>
    <method name="CFPropertyListCreateDeepCopy(CFAllocatorRef;CFPropertyListRef;CFOptionFlags):CFPropertyListRef"/>
    <method name="CFPropertyListCreateFromStream(CFAllocatorRef;CFReadStreamRef;CFIndex;CFOptionFlags;CFPropertyListFormat*;CFStringRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateFromXMLData(CFAllocatorRef;CFDataRef;CFOptionFlags;CFStringRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateWithData(CFAllocatorRef;CFDataRef;CFOptionFlags;CFPropertyListFormat*;CFErrorRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateWithStream(CFAllocatorRef;CFReadStreamRef;CFIndex;CFOptionFlags;CFPropertyListFormat*;CFErrorRef*):CFPropertyListRef"/>
    <method name="CFPropertyListCreateXMLData(CFAllocatorRef;CFPropertyListRef):CFDataRef"/>
    <method name="CFPropertyListIsValid(CFPropertyListRef;CFPropertyListFormat):Boolean"/>
    <method name="CFPropertyListWrite(CFPropertyListRef;CFWriteStreamRef;CFPropertyListFormat;CFOptionFlags;CFErrorRef*):CFIndex"/>
    <method name="CFPropertyListWriteToStream(CFPropertyListRef;CFWriteStreamRef;CFPropertyListFormat;CFStringRef*):CFIndex"/>
    <method name="CFRangeMake(CFIndex;CFIndex):CFRange"/>
    <method name="CFReadStreamClose(CFReadStreamRef):void"/>
    <method name="CFReadStreamCopyError(CFReadStreamRef):CFErrorRef"/>
    <method name="CFReadStreamCopyProperty(CFReadStreamRef;CFStringRef):CFTypeRef"/>
    <method name="CFReadStreamCreateForHTTPRequest(CFAllocatorRef;CFHTTPMessageRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateForStreamedHTTPRequest(CFAllocatorRef;CFHTTPMessageRef;CFReadStreamRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef;const UInt8*;CFIndex;CFAllocatorRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateWithFTPURL(CFAllocatorRef;CFURLRef):CFReadStreamRef"/>
    <method name="CFReadStreamCreateWithFile(CFAllocatorRef;CFURLRef):CFReadStreamRef"/>
    <method name="CFReadStreamGetBuffer(CFReadStreamRef;CFIndex;CFIndex*):const UInt8*"/>
    <method name="CFReadStreamGetError(CFReadStreamRef):CFStreamError"/>
    <method name="CFReadStreamGetStatus(CFReadStreamRef):CFStreamStatus"/>
    <method name="CFReadStreamGetTypeID():CFTypeID"/>
    <method name="CFReadStreamHasBytesAvailable(CFReadStreamRef):Boolean"/>
    <method name="CFReadStreamOpen(CFReadStreamRef):Boolean"/>
    <method name="CFReadStreamRead(CFReadStreamRef;UInt8*;CFIndex):CFIndex"/>
    <method name="CFReadStreamScheduleWithRunLoop(CFReadStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFReadStreamSetClient(CFReadStreamRef;CFOptionFlags;CFReadStreamClientCallBack;CFStreamClientContext*):Boolean"/>
    <method name="CFReadStreamSetProperty(CFReadStreamRef;CFStringRef;CFTypeRef):Boolean"/>
    <method name="CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFRelease(CFTypeRef):void"/>
    <method name="CFRetain(CFTypeRef):CFTypeRef"/>
    <method name="CFRunLoopAddCommonMode(CFRunLoopRef;CFStringRef):void"/>
    <method name="CFRunLoopAddObserver(CFRunLoopRef;CFRunLoopObserverRef;CFStringRef):void"/>
    <method name="CFRunLoopAddSource(CFRunLoopRef;CFRunLoopSourceRef;CFStringRef):void"/>
    <method name="CFRunLoopAddTimer(CFRunLoopRef;CFRunLoopTimerRef;CFStringRef):void"/>
    <method name="CFRunLoopContainsObserver(CFRunLoopRef;CFRunLoopObserverRef;CFStringRef):Boolean"/>
    <method name="CFRunLoopContainsSource(CFRunLoopRef;CFRunLoopSourceRef;CFStringRef):Boolean"/>
    <method name="CFRunLoopContainsTimer(CFRunLoopRef;CFRunLoopTimerRef;CFStringRef):Boolean"/>
    <method name="CFRunLoopCopyAllModes(CFRunLoopRef):CFArrayRef"/>
    <method name="CFRunLoopCopyCurrentMode(CFRunLoopRef):CFStringRef"/>
    <method name="CFRunLoopGetCurrent():CFRunLoopRef"/>
    <method name="CFRunLoopGetMain():CFRunLoopRef"/>
    <method name="CFRunLoopGetNextTimerFireDate(CFRunLoopRef;CFStringRef):CFAbsoluteTime"/>
    <method name="CFRunLoopGetTypeID():CFTypeID"/>
    <method name="CFRunLoopIsWaiting(CFRunLoopRef):Boolean"/>
    <method name="CFRunLoopObserverCreate(CFAllocatorRef;CFOptionFlags;Boolean;CFIndex;CFRunLoopObserverCallBack;CFRunLoopObserverContext*):CFRunLoopObserverRef"/>
    <method name="CFRunLoopObserverCreateWithHandler(CFAllocatorRef;CFOptionFlags;Boolean;CFIndex;(^)(CFRunLoopObserverRef;CFRunLoopActivity):void):CFRunLoopObserverRef"/>
    <method name="CFRunLoopObserverDoesRepeat(CFRunLoopObserverRef):Boolean"/>
    <method name="CFRunLoopObserverGetActivities(CFRunLoopObserverRef):CFOptionFlags"/>
    <method name="CFRunLoopObserverGetContext(CFRunLoopObserverRef;CFRunLoopObserverContext*):void"/>
    <method name="CFRunLoopObserverGetOrder(CFRunLoopObserverRef):CFIndex"/>
    <method name="CFRunLoopObserverGetTypeID():CFTypeID"/>
    <method name="CFRunLoopObserverInvalidate(CFRunLoopObserverRef):void"/>
    <method name="CFRunLoopObserverIsValid(CFRunLoopObserverRef):Boolean"/>
    <method name="CFRunLoopPerformBlock(CFRunLoopRef;CFTypeRef;(^)():void):void"/>
    <method name="CFRunLoopRemoveObserver(CFRunLoopRef;CFRunLoopObserverRef;CFStringRef):void"/>
    <method name="CFRunLoopRemoveSource(CFRunLoopRef;CFRunLoopSourceRef;CFStringRef):void"/>
    <method name="CFRunLoopRemoveTimer(CFRunLoopRef;CFRunLoopTimerRef;CFStringRef):void"/>
    <method name="CFRunLoopRun():void"/>
    <method name="CFRunLoopRunInMode(CFStringRef;CFTimeInterval;Boolean):SInt32"/>
    <method name="CFRunLoopSourceCreate(CFAllocatorRef;CFIndex;CFRunLoopSourceContext*):CFRunLoopSourceRef"/>
    <method name="CFRunLoopSourceGetContext(CFRunLoopSourceRef;CFRunLoopSourceContext*):void"/>
    <method name="CFRunLoopSourceGetOrder(CFRunLoopSourceRef):CFIndex"/>
    <method name="CFRunLoopSourceGetTypeID():CFTypeID"/>
    <method name="CFRunLoopSourceInvalidate(CFRunLoopSourceRef):void"/>
    <method name="CFRunLoopSourceIsValid(CFRunLoopSourceRef):Boolean"/>
    <method name="CFRunLoopSourceSignal(CFRunLoopSourceRef):void"/>
    <method name="CFRunLoopStop(CFRunLoopRef):void"/>
    <method name="CFRunLoopTimerCreate(CFAllocatorRef;CFAbsoluteTime;CFTimeInterval;CFOptionFlags;CFIndex;CFRunLoopTimerCallBack;CFRunLoopTimerContext*):CFRunLoopTimerRef"/>
    <method name="CFRunLoopTimerCreateWithHandler(CFAllocatorRef;CFAbsoluteTime;CFTimeInterval;CFOptionFlags;CFIndex;(^)(CFRunLoopTimerRef):void):CFRunLoopTimerRef"/>
    <method name="CFRunLoopTimerDoesRepeat(CFRunLoopTimerRef):Boolean"/>
    <method name="CFRunLoopTimerGetContext(CFRunLoopTimerRef;CFRunLoopTimerContext*):void"/>
    <method name="CFRunLoopTimerGetInterval(CFRunLoopTimerRef):CFTimeInterval"/>
    <method name="CFRunLoopTimerGetNextFireDate(CFRunLoopTimerRef):CFAbsoluteTime"/>
    <method name="CFRunLoopTimerGetOrder(CFRunLoopTimerRef):CFIndex"/>
    <method name="CFRunLoopTimerGetTypeID():CFTypeID"/>
    <method name="CFRunLoopTimerInvalidate(CFRunLoopTimerRef):void"/>
    <method name="CFRunLoopTimerIsValid(CFRunLoopTimerRef):Boolean"/>
    <method name="CFRunLoopTimerSetNextFireDate(CFRunLoopTimerRef;CFAbsoluteTime):void"/>
    <method name="CFRunLoopWakeUp(CFRunLoopRef):void"/>
    <method name="CFSetAddValue(CFMutableSetRef;const void*):void"/>
    <method name="CFSetApplyFunction(CFSetRef;CFSetApplierFunction;void*):void"/>
    <method name="CFSetContainsValue(CFSetRef;const void*):Boolean"/>
    <method name="CFSetCreate(CFAllocatorRef;const void**;CFIndex;const CFSetCallBacks*):CFSetRef"/>
    <method name="CFSetCreateCopy(CFAllocatorRef;CFSetRef):CFSetRef"/>
    <method name="CFSetCreateMutable(CFAllocatorRef;CFIndex;const CFSetCallBacks*):CFMutableSetRef"/>
    <method name="CFSetCreateMutableCopy(CFAllocatorRef;CFIndex;CFSetRef):CFMutableSetRef"/>
    <method name="CFSetGetCount(CFSetRef):CFIndex"/>
    <method name="CFSetGetCountOfValue(CFSetRef;const void*):CFIndex"/>
    <method name="CFSetGetTypeID():CFTypeID"/>
    <method name="CFSetGetValue(CFSetRef;const void*):const void*"/>
    <method name="CFSetGetValueIfPresent(CFSetRef;const void*;const void**):Boolean"/>
    <method name="CFSetGetValues(CFSetRef;const void**):void"/>
    <method name="CFSetRemoveAllValues(CFMutableSetRef):void"/>
    <method name="CFSetRemoveValue(CFMutableSetRef;const void*):void"/>
    <method name="CFSetReplaceValue(CFMutableSetRef;const void*):void"/>
    <method name="CFSetSetValue(CFMutableSetRef;const void*):void"/>
    <method name="CFShow(CFTypeRef):void"/>
    <method name="CFShowStr(CFStringRef):void"/>
    <method name="CFSocketConnectToAddress(CFSocketRef;CFDataRef;CFTimeInterval):CFSocketError"/>
    <method name="CFSocketCopyAddress(CFSocketRef):CFDataRef"/>
    <method name="CFSocketCopyPeerAddress(CFSocketRef):CFDataRef"/>
    <method name="CFSocketCopyRegisteredSocketSignature(const CFSocketSignature*;CFTimeInterval;CFStringRef;CFSocketSignature*;CFDataRef*):CFSocketError"/>
    <method name="CFSocketCopyRegisteredValue(const CFSocketSignature*;CFTimeInterval;CFStringRef;CFPropertyListRef*;CFDataRef*):CFSocketError"/>
    <method name="CFSocketCreate(CFAllocatorRef;SInt32;SInt32;SInt32;CFOptionFlags;CFSocketCallBack;const CFSocketContext*):CFSocketRef"/>
    <method name="CFSocketCreateConnectedToSocketSignature(CFAllocatorRef;const CFSocketSignature*;CFOptionFlags;CFSocketCallBack;const CFSocketContext*;CFTimeInterval):CFSocketRef"/>
    <method name="CFSocketCreateRunLoopSource(CFAllocatorRef;CFSocketRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="CFSocketCreateWithNative(CFAllocatorRef;CFSocketNativeHandle;CFOptionFlags;CFSocketCallBack;const CFSocketContext*):CFSocketRef"/>
    <method name="CFSocketCreateWithSocketSignature(CFAllocatorRef;const CFSocketSignature*;CFOptionFlags;CFSocketCallBack;const CFSocketContext*):CFSocketRef"/>
    <method name="CFSocketDisableCallBacks(CFSocketRef;CFOptionFlags):void"/>
    <method name="CFSocketEnableCallBacks(CFSocketRef;CFOptionFlags):void"/>
    <method name="CFSocketGetContext(CFSocketRef;CFSocketContext*):void"/>
    <method name="CFSocketGetDefaultNameRegistryPortNumber():UInt16"/>
    <method name="CFSocketGetNative(CFSocketRef):CFSocketNativeHandle"/>
    <method name="CFSocketGetSocketFlags(CFSocketRef):CFOptionFlags"/>
    <method name="CFSocketGetTypeID():CFTypeID"/>
    <method name="CFSocketInvalidate(CFSocketRef):void"/>
    <method name="CFSocketIsValid(CFSocketRef):Boolean"/>
    <method name="CFSocketRegisterSocketSignature(const CFSocketSignature*;CFTimeInterval;CFStringRef;const CFSocketSignature*):CFSocketError"/>
    <method name="CFSocketRegisterValue(const CFSocketSignature*;CFTimeInterval;CFStringRef;CFPropertyListRef):CFSocketError"/>
    <method name="CFSocketSendData(CFSocketRef;CFDataRef;CFDataRef;CFTimeInterval):CFSocketError"/>
    <method name="CFSocketSetAddress(CFSocketRef;CFDataRef):CFSocketError"/>
    <method name="CFSocketSetDefaultNameRegistryPortNumber(UInt16):void"/>
    <method name="CFSocketSetSocketFlags(CFSocketRef;CFOptionFlags):void"/>
    <method name="CFSocketStreamPairSetSecurityProtocol(CFReadStreamRef;CFWriteStreamRef;CFStreamSocketSecurityProtocol):Boolean"/>
    <method name="CFSocketStreamSOCKSGetError(const CFStreamError*):SInt32"/>
    <method name="CFSocketStreamSOCKSGetErrorSubdomain(const CFStreamError*):SInt32"/>
    <method name="CFSocketUnregister(const CFSocketSignature*;CFTimeInterval;CFStringRef):CFSocketError"/>
    <method name="CFStreamCreateBoundPair(CFAllocatorRef;CFReadStreamRef*;CFWriteStreamRef*;CFIndex):void"/>
    <method name="CFStreamCreatePairWithPeerSocketSignature(CFAllocatorRef;const CFSocketSignature*;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocket(CFAllocatorRef;CFSocketNativeHandle;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocketToCFHost(CFAllocatorRef;CFHostRef;SInt32;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocketToHost(CFAllocatorRef;CFStringRef;UInt32;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStreamCreatePairWithSocketToNetService(CFAllocatorRef;CFNetServiceRef;CFReadStreamRef*;CFWriteStreamRef*):void"/>
    <method name="CFStringAppend(CFMutableStringRef;CFStringRef):void"/>
    <method name="CFStringAppendCString(CFMutableStringRef;const char*;CFStringEncoding):void"/>
    <method name="CFStringAppendCharacters(CFMutableStringRef;const UniChar*;CFIndex):void"/>
    <method name="CFStringAppendFormat(CFMutableStringRef;CFDictionaryRef;CFStringRef, ...):void"/>
    <method name="CFStringAppendFormatAndArguments(CFMutableStringRef;CFDictionaryRef;CFStringRef;va_list):void"/>
    <method name="CFStringAppendPascalString(CFMutableStringRef;ConstStr255Param;CFStringEncoding):void"/>
    <method name="CFStringCapitalize(CFMutableStringRef;CFLocaleRef):void"/>
    <method name="CFStringCompare(CFStringRef;CFStringRef;CFStringCompareFlags):CFComparisonResult"/>
    <method name="CFStringCompareWithOptions(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags):CFComparisonResult"/>
    <method name="CFStringCompareWithOptionsAndLocale(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags;CFLocaleRef):CFComparisonResult"/>
    <method name="CFStringConvertEncodingToIANACharSetName(CFStringEncoding):CFStringRef"/>
    <method name="CFStringConvertEncodingToNSStringEncoding(CFStringEncoding):unsigned long"/>
    <method name="CFStringConvertEncodingToWindowsCodepage(CFStringEncoding):UInt32"/>
    <method name="CFStringConvertIANACharSetNameToEncoding(CFStringRef):CFStringEncoding"/>
    <method name="CFStringConvertNSStringEncodingToEncoding(unsigned long):CFStringEncoding"/>
    <method name="CFStringConvertWindowsCodepageToEncoding(UInt32):CFStringEncoding"/>
    <method name="CFStringCreateArrayBySeparatingStrings(CFAllocatorRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="CFStringCreateArrayWithFindResults(CFAllocatorRef;CFStringRef;CFStringRef;CFRange;CFStringCompareFlags):CFArrayRef"/>
    <method name="CFStringCreateByCombiningStrings(CFAllocatorRef;CFArrayRef;CFStringRef):CFStringRef"/>
    <method name="CFStringCreateCopy(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="CFStringCreateExternalRepresentation(CFAllocatorRef;CFStringRef;CFStringEncoding;UInt8):CFDataRef"/>
    <method name="CFStringCreateFromExternalRepresentation(CFAllocatorRef;CFDataRef;CFStringEncoding):CFStringRef"/>
    <method name="CFStringCreateMutable(CFAllocatorRef;CFIndex):CFMutableStringRef"/>
    <method name="CFStringCreateMutableCopy(CFAllocatorRef;CFIndex;CFStringRef):CFMutableStringRef"/>
    <method name="CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef;UniChar*;CFIndex;CFIndex;CFAllocatorRef):CFMutableStringRef"/>
    <method name="CFStringCreateWithBytes(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;Boolean):CFStringRef"/>
    <method name="CFStringCreateWithBytesNoCopy(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;Boolean;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithCString(CFAllocatorRef;const char*;CFStringEncoding):CFStringRef"/>
    <method name="CFStringCreateWithCStringNoCopy(CFAllocatorRef;const char*;CFStringEncoding;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithCharacters(CFAllocatorRef;const UniChar*;CFIndex):CFStringRef"/>
    <method name="CFStringCreateWithCharactersNoCopy(CFAllocatorRef;const UniChar*;CFIndex;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithFileSystemRepresentation(CFAllocatorRef;const char*):CFStringRef"/>
    <method name="CFStringCreateWithFormat(CFAllocatorRef;CFDictionaryRef;CFStringRef, ...):CFStringRef"/>
    <method name="CFStringCreateWithFormatAndArguments(CFAllocatorRef;CFDictionaryRef;CFStringRef;va_list):CFStringRef"/>
    <method name="CFStringCreateWithPascalString(CFAllocatorRef;ConstStr255Param;CFStringEncoding):CFStringRef"/>
    <method name="CFStringCreateWithPascalStringNoCopy(CFAllocatorRef;ConstStr255Param;CFStringEncoding;CFAllocatorRef):CFStringRef"/>
    <method name="CFStringCreateWithSubstring(CFAllocatorRef;CFStringRef;CFRange):CFStringRef"/>
    <method name="CFStringDelete(CFMutableStringRef;CFRange):void"/>
    <method name="CFStringFind(CFStringRef;CFStringRef;CFStringCompareFlags):CFRange"/>
    <method name="CFStringFindAndReplace(CFMutableStringRef;CFStringRef;CFStringRef;CFRange;CFStringCompareFlags):CFIndex"/>
    <method name="CFStringFindCharacterFromSet(CFStringRef;CFCharacterSetRef;CFRange;CFStringCompareFlags;CFRange*):Boolean"/>
    <method name="CFStringFindWithOptions(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags;CFRange*):Boolean"/>
    <method name="CFStringFindWithOptionsAndLocale(CFStringRef;CFStringRef;CFRange;CFStringCompareFlags;CFLocaleRef;CFRange*):Boolean"/>
    <method name="CFStringFold(CFMutableStringRef;CFOptionFlags;CFLocaleRef):void"/>
    <method name="CFStringGetBytes(CFStringRef;CFRange;CFStringEncoding;UInt8;Boolean;UInt8*;CFIndex;CFIndex*):CFIndex"/>
    <method name="CFStringGetCString(CFStringRef;char*;CFIndex;CFStringEncoding):Boolean"/>
    <method name="CFStringGetCStringPtr(CFStringRef;CFStringEncoding):const char*"/>
    <method name="CFStringGetCharacterAtIndex(CFStringRef;CFIndex):UniChar"/>
    <method name="CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer*;CFIndex):UniChar"/>
    <method name="CFStringGetCharacters(CFStringRef;CFRange;UniChar*):void"/>
    <method name="CFStringGetCharactersPtr(CFStringRef):const UniChar*"/>
    <method name="CFStringGetDoubleValue(CFStringRef):double"/>
    <method name="CFStringGetFastestEncoding(CFStringRef):CFStringEncoding"/>
    <method name="CFStringGetFileSystemRepresentation(CFStringRef;char*;CFIndex):Boolean"/>
    <method name="CFStringGetHyphenationLocationBeforeIndex(CFStringRef;CFIndex;CFRange;CFOptionFlags;CFLocaleRef;UTF32Char*):CFIndex"/>
    <method name="CFStringGetIntValue(CFStringRef):SInt32"/>
    <method name="CFStringGetLength(CFStringRef):CFIndex"/>
    <method name="CFStringGetLineBounds(CFStringRef;CFRange;CFIndex*;CFIndex*;CFIndex*):void"/>
    <method name="CFStringGetListOfAvailableEncodings():const CFStringEncoding*"/>
    <method name="CFStringGetLongCharacterForSurrogatePair(UniChar;UniChar):UTF32Char"/>
    <method name="CFStringGetMaximumSizeForEncoding(CFIndex;CFStringEncoding):CFIndex"/>
    <method name="CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef):CFIndex"/>
    <method name="CFStringGetMostCompatibleMacStringEncoding(CFStringEncoding):CFStringEncoding"/>
    <method name="CFStringGetNameOfEncoding(CFStringEncoding):CFStringRef"/>
    <method name="CFStringGetParagraphBounds(CFStringRef;CFRange;CFIndex*;CFIndex*;CFIndex*):void"/>
    <method name="CFStringGetPascalString(CFStringRef;StringPtr;CFIndex;CFStringEncoding):Boolean"/>
    <method name="CFStringGetPascalStringPtr(CFStringRef;CFStringEncoding):ConstStringPtr"/>
    <method name="CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef;CFIndex):CFRange"/>
    <method name="CFStringGetSmallestEncoding(CFStringRef):CFStringEncoding"/>
    <method name="CFStringGetSurrogatePairForLongCharacter(UTF32Char;UniChar*):Boolean"/>
    <method name="CFStringGetSystemEncoding():CFStringEncoding"/>
    <method name="CFStringGetTypeID():CFTypeID"/>
    <method name="CFStringHasPrefix(CFStringRef;CFStringRef):Boolean"/>
    <method name="CFStringHasSuffix(CFStringRef;CFStringRef):Boolean"/>
    <method name="CFStringInitInlineBuffer(CFStringRef;CFStringInlineBuffer*;CFRange):void"/>
    <method name="CFStringInsert(CFMutableStringRef;CFIndex;CFStringRef):void"/>
    <method name="CFStringIsEncodingAvailable(CFStringEncoding):Boolean"/>
    <method name="CFStringIsHyphenationAvailableForLocale(CFLocaleRef):Boolean"/>
    <method name="CFStringIsSurrogateHighCharacter(UniChar):Boolean"/>
    <method name="CFStringIsSurrogateLowCharacter(UniChar):Boolean"/>
    <method name="CFStringLowercase(CFMutableStringRef;CFLocaleRef):void"/>
    <method name="CFStringNormalize(CFMutableStringRef;CFStringNormalizationForm):void"/>
    <method name="CFStringPad(CFMutableStringRef;CFStringRef;CFIndex;CFIndex):void"/>
    <method name="CFStringReplace(CFMutableStringRef;CFRange;CFStringRef):void"/>
    <method name="CFStringReplaceAll(CFMutableStringRef;CFStringRef):void"/>
    <method name="CFStringSetExternalCharactersNoCopy(CFMutableStringRef;UniChar*;CFIndex;CFIndex):void"/>
    <method name="CFStringTokenizerAdvanceToNextToken(CFStringTokenizerRef):CFStringTokenizerTokenType"/>
    <method name="CFStringTokenizerCopyBestStringLanguage(CFStringRef;CFRange):CFStringRef"/>
    <method name="CFStringTokenizerCopyCurrentTokenAttribute(CFStringTokenizerRef;CFOptionFlags):CFTypeRef"/>
    <method name="CFStringTokenizerCreate(CFAllocatorRef;CFStringRef;CFRange;CFOptionFlags;CFLocaleRef):CFStringTokenizerRef"/>
    <method name="CFStringTokenizerGetCurrentSubTokens(CFStringTokenizerRef;CFRange*;CFIndex;CFMutableArrayRef):CFIndex"/>
    <method name="CFStringTokenizerGetCurrentTokenRange(CFStringTokenizerRef):CFRange"/>
    <method name="CFStringTokenizerGetTypeID():CFTypeID"/>
    <method name="CFStringTokenizerGoToTokenAtIndex(CFStringTokenizerRef;CFIndex):CFStringTokenizerTokenType"/>
    <method name="CFStringTokenizerSetString(CFStringTokenizerRef;CFStringRef;CFRange):void"/>
    <method name="CFStringTransform(CFMutableStringRef;CFRange*;CFStringRef;Boolean):Boolean"/>
    <method name="CFStringTrim(CFMutableStringRef;CFStringRef):void"/>
    <method name="CFStringTrimWhitespace(CFMutableStringRef):void"/>
    <method name="CFStringUppercase(CFMutableStringRef;CFLocaleRef):void"/>
    <method name="CFSwapInt16(uint16_t):uint16_t"/>
    <method name="CFSwapInt16BigToHost(uint16_t):uint16_t"/>
    <method name="CFSwapInt16HostToBig(uint16_t):uint16_t"/>
    <method name="CFSwapInt16HostToLittle(uint16_t):uint16_t"/>
    <method name="CFSwapInt16LittleToHost(uint16_t):uint16_t"/>
    <method name="CFSwapInt32(uint32_t):uint32_t"/>
    <method name="CFSwapInt32BigToHost(uint32_t):uint32_t"/>
    <method name="CFSwapInt32HostToBig(uint32_t):uint32_t"/>
    <method name="CFSwapInt32HostToLittle(uint32_t):uint32_t"/>
    <method name="CFSwapInt32LittleToHost(uint32_t):uint32_t"/>
    <method name="CFSwapInt64(uint64_t):uint64_t"/>
    <method name="CFSwapInt64BigToHost(uint64_t):uint64_t"/>
    <method name="CFSwapInt64HostToBig(uint64_t):uint64_t"/>
    <method name="CFSwapInt64HostToLittle(uint64_t):uint64_t"/>
    <method name="CFSwapInt64LittleToHost(uint64_t):uint64_t"/>
    <method name="CFTimeZoneCopyAbbreviation(CFTimeZoneRef;CFAbsoluteTime):CFStringRef"/>
    <method name="CFTimeZoneCopyAbbreviationDictionary():CFDictionaryRef"/>
    <method name="CFTimeZoneCopyDefault():CFTimeZoneRef"/>
    <method name="CFTimeZoneCopyKnownNames():CFArrayRef"/>
    <method name="CFTimeZoneCopyLocalizedName(CFTimeZoneRef;CFTimeZoneNameStyle;CFLocaleRef):CFStringRef"/>
    <method name="CFTimeZoneCopySystem():CFTimeZoneRef"/>
    <method name="CFTimeZoneCreate(CFAllocatorRef;CFStringRef;CFDataRef):CFTimeZoneRef"/>
    <method name="CFTimeZoneCreateWithName(CFAllocatorRef;CFStringRef;Boolean):CFTimeZoneRef"/>
    <method name="CFTimeZoneCreateWithTimeIntervalFromGMT(CFAllocatorRef;CFTimeInterval):CFTimeZoneRef"/>
    <method name="CFTimeZoneGetData(CFTimeZoneRef):CFDataRef"/>
    <method name="CFTimeZoneGetDaylightSavingTimeOffset(CFTimeZoneRef;CFAbsoluteTime):CFTimeInterval"/>
    <method name="CFTimeZoneGetName(CFTimeZoneRef):CFStringRef"/>
    <method name="CFTimeZoneGetNextDaylightSavingTimeTransition(CFTimeZoneRef;CFAbsoluteTime):CFAbsoluteTime"/>
    <method name="CFTimeZoneGetSecondsFromGMT(CFTimeZoneRef;CFAbsoluteTime):CFTimeInterval"/>
    <method name="CFTimeZoneGetTypeID():CFTypeID"/>
    <method name="CFTimeZoneIsDaylightSavingTime(CFTimeZoneRef;CFAbsoluteTime):Boolean"/>
    <method name="CFTimeZoneResetSystem():void"/>
    <method name="CFTimeZoneSetAbbreviationDictionary(CFDictionaryRef):void"/>
    <method name="CFTimeZoneSetDefault(CFTimeZoneRef):void"/>
    <method name="CFTreeAppendChild(CFTreeRef;CFTreeRef):void"/>
    <method name="CFTreeApplyFunctionToChildren(CFTreeRef;CFTreeApplierFunction;void*):void"/>
    <method name="CFTreeCreate(CFAllocatorRef;const CFTreeContext*):CFTreeRef"/>
    <method name="CFTreeFindRoot(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetChildAtIndex(CFTreeRef;CFIndex):CFTreeRef"/>
    <method name="CFTreeGetChildCount(CFTreeRef):CFIndex"/>
    <method name="CFTreeGetChildren(CFTreeRef;CFTreeRef*):void"/>
    <method name="CFTreeGetContext(CFTreeRef;CFTreeContext*):void"/>
    <method name="CFTreeGetFirstChild(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetNextSibling(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetParent(CFTreeRef):CFTreeRef"/>
    <method name="CFTreeGetTypeID():CFTypeID"/>
    <method name="CFTreeInsertSibling(CFTreeRef;CFTreeRef):void"/>
    <method name="CFTreePrependChild(CFTreeRef;CFTreeRef):void"/>
    <method name="CFTreeRemove(CFTreeRef):void"/>
    <method name="CFTreeRemoveAllChildren(CFTreeRef):void"/>
    <method name="CFTreeSetContext(CFTreeRef;const CFTreeContext*):void"/>
    <method name="CFTreeSortChildren(CFTreeRef;CFComparatorFunction;void*):void"/>
    <method name="CFURLCanBeDecomposed(CFURLRef):Boolean"/>
    <method name="CFURLClearResourcePropertyCache(CFURLRef):void"/>
    <method name="CFURLClearResourcePropertyCacheForKey(CFURLRef;CFStringRef):void"/>
    <method name="CFURLCopyAbsoluteURL(CFURLRef):CFURLRef"/>
    <method name="CFURLCopyFileSystemPath(CFURLRef;CFURLPathStyle):CFStringRef"/>
    <method name="CFURLCopyFragment(CFURLRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCopyHostName(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyLastPathComponent(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyNetLocation(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyParameterString(CFURLRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCopyPassword(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyPath(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyPathExtension(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyQueryString(CFURLRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCopyResourcePropertiesForKeys(CFURLRef;CFArrayRef;CFErrorRef*):CFDictionaryRef"/>
    <method name="CFURLCopyResourcePropertyForKey(CFURLRef;CFStringRef;void*;CFErrorRef*):Boolean"/>
    <method name="CFURLCopyResourceSpecifier(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyScheme(CFURLRef):CFStringRef"/>
    <method name="CFURLCopyStrictPath(CFURLRef;Boolean*):CFStringRef"/>
    <method name="CFURLCopyUserName(CFURLRef):CFStringRef"/>
    <method name="CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;CFURLRef;Boolean):CFURLRef"/>
    <method name="CFURLCreateBookmarkData(CFAllocatorRef;CFURLRef;CFURLBookmarkCreationOptions;CFArrayRef;CFURLRef;CFErrorRef*):CFDataRef"/>
    <method name="CFURLCreateBookmarkDataFromAliasRecord(CFAllocatorRef;CFDataRef):CFDataRef"/>
    <method name="CFURLCreateBookmarkDataFromFile(CFAllocatorRef;CFURLRef;CFErrorRef*):CFDataRef"/>
    <method name="CFURLCreateByResolvingBookmarkData(CFAllocatorRef;CFDataRef;CFURLBookmarkResolutionOptions;CFURLRef;CFArrayRef;Boolean*;CFErrorRef*):CFURLRef"/>
    <method name="CFURLCreateCopyAppendingPathComponent(CFAllocatorRef;CFURLRef;CFStringRef;Boolean):CFURLRef"/>
    <method name="CFURLCreateCopyAppendingPathExtension(CFAllocatorRef;CFURLRef;CFStringRef):CFURLRef"/>
    <method name="CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateCopyDeletingPathExtension(CFAllocatorRef;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateData(CFAllocatorRef;CFURLRef;CFStringEncoding;Boolean):CFDataRef"/>
    <method name="CFURLCreateDataAndPropertiesFromResource(CFAllocatorRef;CFURLRef;CFDataRef*;CFDictionaryRef*;CFArrayRef;SInt32*):Boolean"/>
    <method name="CFURLCreateFilePathURL(CFAllocatorRef;CFURLRef;CFErrorRef*):CFURLRef"/>
    <method name="CFURLCreateFileReferenceURL(CFAllocatorRef;CFURLRef;CFErrorRef*):CFURLRef"/>
    <method name="CFURLCreateFromFSRef(CFAllocatorRef;const struct FSRef*):CFURLRef"/>
    <method name="CFURLCreateFromFileSystemRepresentation(CFAllocatorRef;const UInt8*;CFIndex;Boolean):CFURLRef"/>
    <method name="CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef;const UInt8*;CFIndex;Boolean;CFURLRef):CFURLRef"/>
    <method name="CFURLCreatePropertyFromResource(CFAllocatorRef;CFURLRef;CFStringRef;SInt32*):CFTypeRef"/>
    <method name="CFURLCreateResourcePropertiesForKeysFromBookmarkData(CFAllocatorRef;CFArrayRef;CFDataRef):CFDictionaryRef"/>
    <method name="CFURLCreateResourcePropertyForKeyFromBookmarkData(CFAllocatorRef;CFStringRef;CFDataRef):CFTypeRef"/>
    <method name="CFURLCreateStringByAddingPercentEscapes(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef;CFStringEncoding):CFStringRef"/>
    <method name="CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="CFURLCreateStringByReplacingPercentEscapesUsingEncoding(CFAllocatorRef;CFStringRef;CFStringRef;CFStringEncoding):CFStringRef"/>
    <method name="CFURLCreateWithBytes(CFAllocatorRef;const UInt8*;CFIndex;CFStringEncoding;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateWithFileSystemPath(CFAllocatorRef;CFStringRef;CFURLPathStyle;Boolean):CFURLRef"/>
    <method name="CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef;CFStringRef;CFURLPathStyle;Boolean;CFURLRef):CFURLRef"/>
    <method name="CFURLCreateWithString(CFAllocatorRef;CFStringRef;CFURLRef):CFURLRef"/>
    <method name="CFURLDestroyResource(CFURLRef;SInt32*):Boolean"/>
    <method name="CFURLGetBaseURL(CFURLRef):CFURLRef"/>
    <method name="CFURLGetByteRangeForComponent(CFURLRef;CFURLComponentType;CFRange*):CFRange"/>
    <method name="CFURLGetBytes(CFURLRef;UInt8*;CFIndex):CFIndex"/>
    <method name="CFURLGetFSRef(CFURLRef;struct FSRef*):Boolean"/>
    <method name="CFURLGetFileSystemRepresentation(CFURLRef;Boolean;UInt8*;CFIndex):Boolean"/>
    <method name="CFURLGetPortNumber(CFURLRef):SInt32"/>
    <method name="CFURLGetString(CFURLRef):CFStringRef"/>
    <method name="CFURLGetTypeID():CFTypeID"/>
    <method name="CFURLHasDirectoryPath(CFURLRef):Boolean"/>
    <method name="CFURLResourceIsReachable(CFURLRef;CFErrorRef*):Boolean"/>
    <method name="CFURLSetResourcePropertiesForKeys(CFURLRef;CFDictionaryRef;CFErrorRef*):Boolean"/>
    <method name="CFURLSetResourcePropertyForKey(CFURLRef;CFStringRef;CFTypeRef;CFErrorRef*):Boolean"/>
    <method name="CFURLSetTemporaryResourcePropertyForKey(CFURLRef;CFStringRef;CFTypeRef):void"/>
    <method name="CFURLStartAccessingSecurityScopedResource(CFURLRef):Boolean"/>
    <method name="CFURLStopAccessingSecurityScopedResource(CFURLRef):void"/>
    <method name="CFURLWriteBookmarkDataToFile(CFDataRef;CFURLRef;CFURLBookmarkFileCreationOptions;CFErrorRef*):Boolean"/>
    <method name="CFURLWriteDataAndPropertiesToResource(CFURLRef;CFDataRef;CFDictionaryRef;SInt32*):Boolean"/>
    <method name="CFUUIDCreate(CFAllocatorRef):CFUUIDRef"/>
    <method name="CFUUIDCreateFromString(CFAllocatorRef;CFStringRef):CFUUIDRef"/>
    <method name="CFUUIDCreateFromUUIDBytes(CFAllocatorRef;CFUUIDBytes):CFUUIDRef"/>
    <method name="CFUUIDCreateString(CFAllocatorRef;CFUUIDRef):CFStringRef"/>
    <method name="CFUUIDCreateWithBytes(CFAllocatorRef;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8):CFUUIDRef"/>
    <method name="CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8;UInt8):CFUUIDRef"/>
    <method name="CFUUIDGetTypeID():CFTypeID"/>
    <method name="CFUUIDGetUUIDBytes(CFUUIDRef):CFUUIDBytes"/>
    <method name="CFWriteStreamCanAcceptBytes(CFWriteStreamRef):Boolean"/>
    <method name="CFWriteStreamClose(CFWriteStreamRef):void"/>
    <method name="CFWriteStreamCopyError(CFWriteStreamRef):CFErrorRef"/>
    <method name="CFWriteStreamCopyProperty(CFWriteStreamRef;CFStringRef):CFTypeRef"/>
    <method name="CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef;CFAllocatorRef):CFWriteStreamRef"/>
    <method name="CFWriteStreamCreateWithBuffer(CFAllocatorRef;UInt8*;CFIndex):CFWriteStreamRef"/>
    <method name="CFWriteStreamCreateWithFTPURL(CFAllocatorRef;CFURLRef):CFWriteStreamRef"/>
    <method name="CFWriteStreamCreateWithFile(CFAllocatorRef;CFURLRef):CFWriteStreamRef"/>
    <method name="CFWriteStreamGetError(CFWriteStreamRef):CFStreamError"/>
    <method name="CFWriteStreamGetStatus(CFWriteStreamRef):CFStreamStatus"/>
    <method name="CFWriteStreamGetTypeID():CFTypeID"/>
    <method name="CFWriteStreamOpen(CFWriteStreamRef):Boolean"/>
    <method name="CFWriteStreamScheduleWithRunLoop(CFWriteStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFWriteStreamSetClient(CFWriteStreamRef;CFOptionFlags;CFWriteStreamClientCallBack;CFStreamClientContext*):Boolean"/>
    <method name="CFWriteStreamSetProperty(CFWriteStreamRef;CFStringRef;CFTypeRef):Boolean"/>
    <method name="CFWriteStreamUnscheduleFromRunLoop(CFWriteStreamRef;CFRunLoopRef;CFStringRef):void"/>
    <method name="CFWriteStreamWrite(CFWriteStreamRef;const UInt8*;CFIndex):CFIndex"/>
    <method name="CGAffineTransformConcat(CGAffineTransform;CGAffineTransform):CGAffineTransform"/>
    <method name="CGAffineTransformEqualToTransform(CGAffineTransform;CGAffineTransform):_Bool"/>
    <method name="CGAffineTransformFromString(NSString*):CGAffineTransform"/>
    <method name="CGAffineTransformInvert(CGAffineTransform):CGAffineTransform"/>
    <method name="CGAffineTransformIsIdentity(CGAffineTransform):_Bool"/>
    <method name="CGAffineTransformMake(CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformMakeRotation(CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformMakeScale(CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformMakeTranslation(CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformRotate(CGAffineTransform;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformScale(CGAffineTransform;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGAffineTransformTranslate(CGAffineTransform;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="CGBitmapContextCreate(void*;size_t;size_t;size_t;size_t;CGColorSpaceRef;CGBitmapInfo):CGContextRef"/>
    <method name="CGBitmapContextCreateImage(CGContextRef):CGImageRef"/>
    <method name="CGBitmapContextCreateWithData(void*;size_t;size_t;size_t;size_t;CGColorSpaceRef;CGBitmapInfo;CGBitmapContextReleaseDataCallback;void*):CGContextRef"/>
    <method name="CGBitmapContextGetAlphaInfo(CGContextRef):CGImageAlphaInfo"/>
    <method name="CGBitmapContextGetBitmapInfo(CGContextRef):CGBitmapInfo"/>
    <method name="CGBitmapContextGetBitsPerComponent(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetBitsPerPixel(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetBytesPerRow(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetColorSpace(CGContextRef):CGColorSpaceRef"/>
    <method name="CGBitmapContextGetData(CGContextRef):void*"/>
    <method name="CGBitmapContextGetHeight(CGContextRef):size_t"/>
    <method name="CGBitmapContextGetWidth(CGContextRef):size_t"/>
    <method name="CGColorCreate(CGColorSpaceRef;const CGFloat*):CGColorRef"/>
    <method name="CGColorCreateCopy(CGColorRef):CGColorRef"/>
    <method name="CGColorCreateCopyWithAlpha(CGColorRef;CGFloat):CGColorRef"/>
    <method name="CGColorCreateGenericCMYK(CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):CGColorRef"/>
    <method name="CGColorCreateGenericGray(CGFloat;CGFloat):CGColorRef"/>
    <method name="CGColorCreateGenericRGB(CGFloat;CGFloat;CGFloat;CGFloat):CGColorRef"/>
    <method name="CGColorCreateWithPattern(CGColorSpaceRef;CGPatternRef;const CGFloat*):CGColorRef"/>
    <method name="CGColorEqualToColor(CGColorRef;CGColorRef):_Bool"/>
    <method name="CGColorGetAlpha(CGColorRef):CGFloat"/>
    <method name="CGColorGetColorSpace(CGColorRef):CGColorSpaceRef"/>
    <method name="CGColorGetComponents(CGColorRef):const CGFloat*"/>
    <method name="CGColorGetConstantColor(CFStringRef):CGColorRef"/>
    <method name="CGColorGetNumberOfComponents(CGColorRef):size_t"/>
    <method name="CGColorGetPattern(CGColorRef):CGPatternRef"/>
    <method name="CGColorGetTypeID():CFTypeID"/>
    <method name="CGColorRelease(CGColorRef):void"/>
    <method name="CGColorRetain(CGColorRef):CGColorRef"/>
    <method name="CGColorSpaceCopyICCProfile(CGColorSpaceRef):CFDataRef"/>
    <method name="CGColorSpaceCopyName(CGColorSpaceRef):CFStringRef"/>
    <method name="CGColorSpaceCreateCalibratedGray(const CGFloat*;const CGFloat*;CGFloat):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateCalibratedRGB(const CGFloat*;const CGFloat*;const CGFloat*;const CGFloat*):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateDeviceCMYK():CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateDeviceGray():CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateDeviceRGB():CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateICCBased(size_t;const CGFloat*;CGDataProviderRef;CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateIndexed(CGColorSpaceRef;size_t;const unsigned char*):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateLab(const CGFloat*;const CGFloat*;const CGFloat*):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreatePattern(CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateWithICCProfile(CFDataRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateWithName(CFStringRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceCreateWithPlatformColorSpace(const void*):CGColorSpaceRef"/>
    <method name="CGColorSpaceGetBaseColorSpace(CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGColorSpaceGetColorTable(CGColorSpaceRef;uint8_t*):void"/>
    <method name="CGColorSpaceGetColorTableCount(CGColorSpaceRef):size_t"/>
    <method name="CGColorSpaceGetModel(CGColorSpaceRef):CGColorSpaceModel"/>
    <method name="CGColorSpaceGetNumberOfComponents(CGColorSpaceRef):size_t"/>
    <method name="CGColorSpaceGetTypeID():CFTypeID"/>
    <method name="CGColorSpaceRelease(CGColorSpaceRef):void"/>
    <method name="CGColorSpaceRetain(CGColorSpaceRef):CGColorSpaceRef"/>
    <method name="CGContextAddArc(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;int):void"/>
    <method name="CGContextAddArcToPoint(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextAddCurveToPoint(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextAddEllipseInRect(CGContextRef;CGRect):void"/>
    <method name="CGContextAddLineToPoint(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextAddLines(CGContextRef;const CGPoint*;size_t):void"/>
    <method name="CGContextAddPath(CGContextRef;CGPathRef):void"/>
    <method name="CGContextAddQuadCurveToPoint(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextAddRect(CGContextRef;CGRect):void"/>
    <method name="CGContextAddRects(CGContextRef;const CGRect*;size_t):void"/>
    <method name="CGContextBeginPage(CGContextRef;const CGRect*):void"/>
    <method name="CGContextBeginPath(CGContextRef):void"/>
    <method name="CGContextBeginTransparencyLayer(CGContextRef;CFDictionaryRef):void"/>
    <method name="CGContextBeginTransparencyLayerWithRect(CGContextRef;CGRect;CFDictionaryRef):void"/>
    <method name="CGContextClearRect(CGContextRef;CGRect):void"/>
    <method name="CGContextClip(CGContextRef):void"/>
    <method name="CGContextClipToMask(CGContextRef;CGRect;CGImageRef):void"/>
    <method name="CGContextClipToRect(CGContextRef;CGRect):void"/>
    <method name="CGContextClipToRects(CGContextRef;const CGRect*;size_t):void"/>
    <method name="CGContextClosePath(CGContextRef):void"/>
    <method name="CGContextConcatCTM(CGContextRef;CGAffineTransform):void"/>
    <method name="CGContextConvertPointToDeviceSpace(CGContextRef;CGPoint):CGPoint"/>
    <method name="CGContextConvertPointToUserSpace(CGContextRef;CGPoint):CGPoint"/>
    <method name="CGContextConvertRectToDeviceSpace(CGContextRef;CGRect):CGRect"/>
    <method name="CGContextConvertRectToUserSpace(CGContextRef;CGRect):CGRect"/>
    <method name="CGContextConvertSizeToDeviceSpace(CGContextRef;CGSize):CGSize"/>
    <method name="CGContextConvertSizeToUserSpace(CGContextRef;CGSize):CGSize"/>
    <method name="CGContextCopyPath(CGContextRef):CGPathRef"/>
    <method name="CGContextDrawImage(CGContextRef;CGRect;CGImageRef):void"/>
    <method name="CGContextDrawLayerAtPoint(CGContextRef;CGPoint;CGLayerRef):void"/>
    <method name="CGContextDrawLayerInRect(CGContextRef;CGRect;CGLayerRef):void"/>
    <method name="CGContextDrawLinearGradient(CGContextRef;CGGradientRef;CGPoint;CGPoint;CGGradientDrawingOptions):void"/>
    <method name="CGContextDrawPDFDocument(CGContextRef;CGRect;CGPDFDocumentRef;int):void"/>
    <method name="CGContextDrawPDFPage(CGContextRef;CGPDFPageRef):void"/>
    <method name="CGContextDrawPath(CGContextRef;CGPathDrawingMode):void"/>
    <method name="CGContextDrawRadialGradient(CGContextRef;CGGradientRef;CGPoint;CGFloat;CGPoint;CGFloat;CGGradientDrawingOptions):void"/>
    <method name="CGContextDrawShading(CGContextRef;CGShadingRef):void"/>
    <method name="CGContextDrawTiledImage(CGContextRef;CGRect;CGImageRef):void"/>
    <method name="CGContextEOClip(CGContextRef):void"/>
    <method name="CGContextEOFillPath(CGContextRef):void"/>
    <method name="CGContextEndPage(CGContextRef):void"/>
    <method name="CGContextEndTransparencyLayer(CGContextRef):void"/>
    <method name="CGContextFillEllipseInRect(CGContextRef;CGRect):void"/>
    <method name="CGContextFillPath(CGContextRef):void"/>
    <method name="CGContextFillRect(CGContextRef;CGRect):void"/>
    <method name="CGContextFillRects(CGContextRef;const CGRect*;size_t):void"/>
    <method name="CGContextFlush(CGContextRef):void"/>
    <method name="CGContextGetCTM(CGContextRef):CGAffineTransform"/>
    <method name="CGContextGetClipBoundingBox(CGContextRef):CGRect"/>
    <method name="CGContextGetInterpolationQuality(CGContextRef):CGInterpolationQuality"/>
    <method name="CGContextGetPathBoundingBox(CGContextRef):CGRect"/>
    <method name="CGContextGetPathCurrentPoint(CGContextRef):CGPoint"/>
    <method name="CGContextGetTextMatrix(CGContextRef):CGAffineTransform"/>
    <method name="CGContextGetTextPosition(CGContextRef):CGPoint"/>
    <method name="CGContextGetTypeID():CFTypeID"/>
    <method name="CGContextGetUserSpaceToDeviceSpaceTransform(CGContextRef):CGAffineTransform"/>
    <method name="CGContextIsPathEmpty(CGContextRef):_Bool"/>
    <method name="CGContextMoveToPoint(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextPathContainsPoint(CGContextRef;CGPoint;CGPathDrawingMode):_Bool"/>
    <method name="CGContextRelease(CGContextRef):void"/>
    <method name="CGContextReplacePathWithStrokedPath(CGContextRef):void"/>
    <method name="CGContextRestoreGState(CGContextRef):void"/>
    <method name="CGContextRetain(CGContextRef):CGContextRef"/>
    <method name="CGContextRotateCTM(CGContextRef;CGFloat):void"/>
    <method name="CGContextSaveGState(CGContextRef):void"/>
    <method name="CGContextScaleCTM(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextSelectFont(CGContextRef;const char*;CGFloat;CGTextEncoding):void"/>
    <method name="CGContextSetAllowsAntialiasing(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAllowsFontSmoothing(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAllowsFontSubpixelPositioning(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAllowsFontSubpixelQuantization(CGContextRef;_Bool):void"/>
    <method name="CGContextSetAlpha(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetBlendMode(CGContextRef;CGBlendMode):void"/>
    <method name="CGContextSetCMYKFillColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetCMYKStrokeColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetCharacterSpacing(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetFillColor(CGContextRef;const CGFloat*):void"/>
    <method name="CGContextSetFillColorSpace(CGContextRef;CGColorSpaceRef):void"/>
    <method name="CGContextSetFillColorWithColor(CGContextRef;CGColorRef):void"/>
    <method name="CGContextSetFillPattern(CGContextRef;CGPatternRef;const CGFloat*):void"/>
    <method name="CGContextSetFlatness(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetFont(CGContextRef;CGFontRef):void"/>
    <method name="CGContextSetFontSize(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetGrayFillColor(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextSetGrayStrokeColor(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextSetInterpolationQuality(CGContextRef;CGInterpolationQuality):void"/>
    <method name="CGContextSetLineCap(CGContextRef;CGLineCap):void"/>
    <method name="CGContextSetLineDash(CGContextRef;CGFloat;const CGFloat*;size_t):void"/>
    <method name="CGContextSetLineJoin(CGContextRef;CGLineJoin):void"/>
    <method name="CGContextSetLineWidth(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetMiterLimit(CGContextRef;CGFloat):void"/>
    <method name="CGContextSetPatternPhase(CGContextRef;CGSize):void"/>
    <method name="CGContextSetRGBFillColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetRGBStrokeColor(CGContextRef;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGContextSetRenderingIntent(CGContextRef;CGColorRenderingIntent):void"/>
    <method name="CGContextSetShadow(CGContextRef;CGSize;CGFloat):void"/>
    <method name="CGContextSetShadowWithColor(CGContextRef;CGSize;CGFloat;CGColorRef):void"/>
    <method name="CGContextSetShouldAntialias(CGContextRef;_Bool):void"/>
    <method name="CGContextSetShouldSmoothFonts(CGContextRef;_Bool):void"/>
    <method name="CGContextSetShouldSubpixelPositionFonts(CGContextRef;_Bool):void"/>
    <method name="CGContextSetShouldSubpixelQuantizeFonts(CGContextRef;_Bool):void"/>
    <method name="CGContextSetStrokeColor(CGContextRef;const CGFloat*):void"/>
    <method name="CGContextSetStrokeColorSpace(CGContextRef;CGColorSpaceRef):void"/>
    <method name="CGContextSetStrokeColorWithColor(CGContextRef;CGColorRef):void"/>
    <method name="CGContextSetStrokePattern(CGContextRef;CGPatternRef;const CGFloat*):void"/>
    <method name="CGContextSetTextDrawingMode(CGContextRef;CGTextDrawingMode):void"/>
    <method name="CGContextSetTextMatrix(CGContextRef;CGAffineTransform):void"/>
    <method name="CGContextSetTextPosition(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGContextShowGlyphs(CGContextRef;const CGGlyph*;size_t):void"/>
    <method name="CGContextShowGlyphsAtPoint(CGContextRef;CGFloat;CGFloat;const CGGlyph*;size_t):void"/>
    <method name="CGContextShowGlyphsAtPositions(CGContextRef;const CGGlyph*;const CGPoint*;size_t):void"/>
    <method name="CGContextShowGlyphsWithAdvances(CGContextRef;const CGGlyph*;const CGSize*;size_t):void"/>
    <method name="CGContextShowText(CGContextRef;const char*;size_t):void"/>
    <method name="CGContextShowTextAtPoint(CGContextRef;CGFloat;CGFloat;const char*;size_t):void"/>
    <method name="CGContextStrokeEllipseInRect(CGContextRef;CGRect):void"/>
    <method name="CGContextStrokeLineSegments(CGContextRef;const CGPoint*;size_t):void"/>
    <method name="CGContextStrokePath(CGContextRef):void"/>
    <method name="CGContextStrokeRect(CGContextRef;CGRect):void"/>
    <method name="CGContextStrokeRectWithWidth(CGContextRef;CGRect;CGFloat):void"/>
    <method name="CGContextSynchronize(CGContextRef):void"/>
    <method name="CGContextTranslateCTM(CGContextRef;CGFloat;CGFloat):void"/>
    <method name="CGDataConsumerCreate(void*;const CGDataConsumerCallbacks*):CGDataConsumerRef"/>
    <method name="CGDataConsumerCreateWithCFData(CFMutableDataRef):CGDataConsumerRef"/>
    <method name="CGDataConsumerCreateWithURL(CFURLRef):CGDataConsumerRef"/>
    <method name="CGDataConsumerGetTypeID():CFTypeID"/>
    <method name="CGDataConsumerRelease(CGDataConsumerRef):void"/>
    <method name="CGDataConsumerRetain(CGDataConsumerRef):CGDataConsumerRef"/>
    <method name="CGDataProviderCopyData(CGDataProviderRef):CFDataRef"/>
    <method name="CGDataProviderCreateDirect(void*;off_t;const CGDataProviderDirectCallbacks*):CGDataProviderRef"/>
    <method name="CGDataProviderCreateSequential(void*;const CGDataProviderSequentialCallbacks*):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithCFData(CFDataRef):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithData(void*;const void*;size_t;CGDataProviderReleaseDataCallback):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithFilename(const char*):CGDataProviderRef"/>
    <method name="CGDataProviderCreateWithURL(CFURLRef):CGDataProviderRef"/>
    <method name="CGDataProviderGetTypeID():CFTypeID"/>
    <method name="CGDataProviderRelease(CGDataProviderRef):void"/>
    <method name="CGDataProviderRetain(CGDataProviderRef):CGDataProviderRef"/>
    <method name="CGFontCanCreatePostScriptSubset(CGFontRef;CGFontPostScriptFormat):_Bool"/>
    <method name="CGFontCopyFullName(CGFontRef):CFStringRef"/>
    <method name="CGFontCopyGlyphNameForGlyph(CGFontRef;CGGlyph):CFStringRef"/>
    <method name="CGFontCopyPostScriptName(CGFontRef):CFStringRef"/>
    <method name="CGFontCopyTableForTag(CGFontRef;uint32_t):CFDataRef"/>
    <method name="CGFontCopyTableTags(CGFontRef):CFArrayRef"/>
    <method name="CGFontCopyVariationAxes(CGFontRef):CFArrayRef"/>
    <method name="CGFontCopyVariations(CGFontRef):CFDictionaryRef"/>
    <method name="CGFontCreateCopyWithVariations(CGFontRef;CFDictionaryRef):CGFontRef"/>
    <method name="CGFontCreatePostScriptEncoding(CGFontRef;const CGGlyph*):CFDataRef"/>
    <method name="CGFontCreatePostScriptSubset(CGFontRef;CFStringRef;CGFontPostScriptFormat;const CGGlyph*;size_t;const CGGlyph*):CFDataRef"/>
    <method name="CGFontCreateWithDataProvider(CGDataProviderRef):CGFontRef"/>
    <method name="CGFontCreateWithFontName(CFStringRef):CGFontRef"/>
    <method name="CGFontCreateWithPlatformFont(void*):CGFontRef"/>
    <method name="CGFontGetAscent(CGFontRef):int"/>
    <method name="CGFontGetCapHeight(CGFontRef):int"/>
    <method name="CGFontGetDescent(CGFontRef):int"/>
    <method name="CGFontGetFontBBox(CGFontRef):CGRect"/>
    <method name="CGFontGetGlyphAdvances(CGFontRef;const CGGlyph*;size_t;int*):_Bool"/>
    <method name="CGFontGetGlyphBBoxes(CGFontRef;const CGGlyph*;size_t;CGRect*):_Bool"/>
    <method name="CGFontGetGlyphWithGlyphName(CGFontRef;CFStringRef):CGGlyph"/>
    <method name="CGFontGetItalicAngle(CGFontRef):CGFloat"/>
    <method name="CGFontGetLeading(CGFontRef):int"/>
    <method name="CGFontGetNumberOfGlyphs(CGFontRef):size_t"/>
    <method name="CGFontGetStemV(CGFontRef):CGFloat"/>
    <method name="CGFontGetTypeID():CFTypeID"/>
    <method name="CGFontGetUnitsPerEm(CGFontRef):int"/>
    <method name="CGFontGetXHeight(CGFontRef):int"/>
    <method name="CGFontRelease(CGFontRef):void"/>
    <method name="CGFontRetain(CGFontRef):CGFontRef"/>
    <method name="CGFunctionCreate(void*;size_t;const CGFloat*;size_t;const CGFloat*;const CGFunctionCallbacks*):CGFunctionRef"/>
    <method name="CGFunctionGetTypeID():CFTypeID"/>
    <method name="CGFunctionRelease(CGFunctionRef):void"/>
    <method name="CGFunctionRetain(CGFunctionRef):CGFunctionRef"/>
    <method name="CGGradientCreateWithColorComponents(CGColorSpaceRef;const CGFloat*;const CGFloat*;size_t):CGGradientRef"/>
    <method name="CGGradientCreateWithColors(CGColorSpaceRef;CFArrayRef;const CGFloat*):CGGradientRef"/>
    <method name="CGGradientGetTypeID():CFTypeID"/>
    <method name="CGGradientRelease(CGGradientRef):void"/>
    <method name="CGGradientRetain(CGGradientRef):CGGradientRef"/>
    <method name="CGImageCreate(size_t;size_t;size_t;size_t;size_t;CGColorSpaceRef;CGBitmapInfo;CGDataProviderRef;const CGFloat*;_Bool;CGColorRenderingIntent):CGImageRef"/>
    <method name="CGImageCreateCopy(CGImageRef):CGImageRef"/>
    <method name="CGImageCreateCopyWithColorSpace(CGImageRef;CGColorSpaceRef):CGImageRef"/>
    <method name="CGImageCreateWithImageInRect(CGImageRef;CGRect):CGImageRef"/>
    <method name="CGImageCreateWithJPEGDataProvider(CGDataProviderRef;const CGFloat*;_Bool;CGColorRenderingIntent):CGImageRef"/>
    <method name="CGImageCreateWithMask(CGImageRef;CGImageRef):CGImageRef"/>
    <method name="CGImageCreateWithMaskingColors(CGImageRef;const CGFloat*):CGImageRef"/>
    <method name="CGImageCreateWithPNGDataProvider(CGDataProviderRef;const CGFloat*;_Bool;CGColorRenderingIntent):CGImageRef"/>
    <method name="CGImageDestinationAddImage(CGImageDestinationRef;CGImageRef;CFDictionaryRef):void"/>
    <method name="CGImageDestinationAddImageFromSource(CGImageDestinationRef;CGImageSourceRef;size_t;CFDictionaryRef):void"/>
    <method name="CGImageDestinationCopyTypeIdentifiers():CFArrayRef"/>
    <method name="CGImageDestinationCreateWithData(CFMutableDataRef;CFStringRef;size_t;CFDictionaryRef):CGImageDestinationRef"/>
    <method name="CGImageDestinationCreateWithDataConsumer(CGDataConsumerRef;CFStringRef;size_t;CFDictionaryRef):CGImageDestinationRef"/>
    <method name="CGImageDestinationCreateWithURL(CFURLRef;CFStringRef;size_t;CFDictionaryRef):CGImageDestinationRef"/>
    <method name="CGImageDestinationFinalize(CGImageDestinationRef):_Bool"/>
    <method name="CGImageDestinationGetTypeID():CFTypeID"/>
    <method name="CGImageDestinationSetProperties(CGImageDestinationRef;CFDictionaryRef):void"/>
    <method name="CGImageGetAlphaInfo(CGImageRef):CGImageAlphaInfo"/>
    <method name="CGImageGetBitmapInfo(CGImageRef):CGBitmapInfo"/>
    <method name="CGImageGetBitsPerComponent(CGImageRef):size_t"/>
    <method name="CGImageGetBitsPerPixel(CGImageRef):size_t"/>
    <method name="CGImageGetBytesPerRow(CGImageRef):size_t"/>
    <method name="CGImageGetColorSpace(CGImageRef):CGColorSpaceRef"/>
    <method name="CGImageGetDataProvider(CGImageRef):CGDataProviderRef"/>
    <method name="CGImageGetDecode(CGImageRef):const CGFloat*"/>
    <method name="CGImageGetHeight(CGImageRef):size_t"/>
    <method name="CGImageGetRenderingIntent(CGImageRef):CGColorRenderingIntent"/>
    <method name="CGImageGetShouldInterpolate(CGImageRef):_Bool"/>
    <method name="CGImageGetTypeID():CFTypeID"/>
    <method name="CGImageGetWidth(CGImageRef):size_t"/>
    <method name="CGImageIsMask(CGImageRef):_Bool"/>
    <method name="CGImageMaskCreate(size_t;size_t;size_t;size_t;size_t;CGDataProviderRef;const CGFloat*;_Bool):CGImageRef"/>
    <method name="CGImageRelease(CGImageRef):void"/>
    <method name="CGImageRetain(CGImageRef):CGImageRef"/>
    <method name="CGImageSourceCopyProperties(CGImageSourceRef;CFDictionaryRef):CFDictionaryRef"/>
    <method name="CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef;size_t;CFDictionaryRef):CFDictionaryRef"/>
    <method name="CGImageSourceCopyTypeIdentifiers():CFArrayRef"/>
    <method name="CGImageSourceCreateImageAtIndex(CGImageSourceRef;size_t;CFDictionaryRef):CGImageRef"/>
    <method name="CGImageSourceCreateIncremental(CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef;size_t;CFDictionaryRef):CGImageRef"/>
    <method name="CGImageSourceCreateWithData(CFDataRef;CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceCreateWithDataProvider(CGDataProviderRef;CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceCreateWithURL(CFURLRef;CFDictionaryRef):CGImageSourceRef"/>
    <method name="CGImageSourceGetCount(CGImageSourceRef):size_t"/>
    <method name="CGImageSourceGetStatus(CGImageSourceRef):CGImageSourceStatus"/>
    <method name="CGImageSourceGetStatusAtIndex(CGImageSourceRef;size_t):CGImageSourceStatus"/>
    <method name="CGImageSourceGetType(CGImageSourceRef):CFStringRef"/>
    <method name="CGImageSourceGetTypeID():CFTypeID"/>
    <method name="CGImageSourceUpdateData(CGImageSourceRef;CFDataRef;_Bool):void"/>
    <method name="CGImageSourceUpdateDataProvider(CGImageSourceRef;CGDataProviderRef;_Bool):void"/>
    <method name="CGLayerCreateWithContext(CGContextRef;CGSize;CFDictionaryRef):CGLayerRef"/>
    <method name="CGLayerGetContext(CGLayerRef):CGContextRef"/>
    <method name="CGLayerGetSize(CGLayerRef):CGSize"/>
    <method name="CGLayerGetTypeID():CFTypeID"/>
    <method name="CGLayerRelease(CGLayerRef):void"/>
    <method name="CGLayerRetain(CGLayerRef):CGLayerRef"/>
    <method name="CGPDFArrayGetArray(CGPDFArrayRef;size_t;CGPDFArrayRef*):_Bool"/>
    <method name="CGPDFArrayGetBoolean(CGPDFArrayRef;size_t;CGPDFBoolean*):_Bool"/>
    <method name="CGPDFArrayGetCount(CGPDFArrayRef):size_t"/>
    <method name="CGPDFArrayGetDictionary(CGPDFArrayRef;size_t;CGPDFDictionaryRef*):_Bool"/>
    <method name="CGPDFArrayGetInteger(CGPDFArrayRef;size_t;CGPDFInteger*):_Bool"/>
    <method name="CGPDFArrayGetName(CGPDFArrayRef;size_t;const char**):_Bool"/>
    <method name="CGPDFArrayGetNull(CGPDFArrayRef;size_t):_Bool"/>
    <method name="CGPDFArrayGetNumber(CGPDFArrayRef;size_t;CGPDFReal*):_Bool"/>
    <method name="CGPDFArrayGetObject(CGPDFArrayRef;size_t;CGPDFObjectRef*):_Bool"/>
    <method name="CGPDFArrayGetStream(CGPDFArrayRef;size_t;CGPDFStreamRef*):_Bool"/>
    <method name="CGPDFArrayGetString(CGPDFArrayRef;size_t;CGPDFStringRef*):_Bool"/>
    <method name="CGPDFContentStreamCreateWithPage(CGPDFPageRef):CGPDFContentStreamRef"/>
    <method name="CGPDFContentStreamCreateWithStream(CGPDFStreamRef;CGPDFDictionaryRef;CGPDFContentStreamRef):CGPDFContentStreamRef"/>
    <method name="CGPDFContentStreamGetResource(CGPDFContentStreamRef;const char*;const char*):CGPDFObjectRef"/>
    <method name="CGPDFContentStreamGetStreams(CGPDFContentStreamRef):CFArrayRef"/>
    <method name="CGPDFContentStreamRelease(CGPDFContentStreamRef):void"/>
    <method name="CGPDFContentStreamRetain(CGPDFContentStreamRef):CGPDFContentStreamRef"/>
    <method name="CGPDFContextAddDestinationAtPoint(CGContextRef;CFStringRef;CGPoint):void"/>
    <method name="CGPDFContextAddDocumentMetadata(CGContextRef;CFDataRef):void"/>
    <method name="CGPDFContextBeginPage(CGContextRef;CFDictionaryRef):void"/>
    <method name="CGPDFContextClose(CGContextRef):void"/>
    <method name="CGPDFContextCreate(CGDataConsumerRef;const CGRect*;CFDictionaryRef):CGContextRef"/>
    <method name="CGPDFContextCreateWithURL(CFURLRef;const CGRect*;CFDictionaryRef):CGContextRef"/>
    <method name="CGPDFContextEndPage(CGContextRef):void"/>
    <method name="CGPDFContextSetDestinationForRect(CGContextRef;CFStringRef;CGRect):void"/>
    <method name="CGPDFContextSetURLForRect(CGContextRef;CFURLRef;CGRect):void"/>
    <method name="CGPDFDictionaryApplyFunction(CGPDFDictionaryRef;CGPDFDictionaryApplierFunction;void*):void"/>
    <method name="CGPDFDictionaryGetArray(CGPDFDictionaryRef;const char*;CGPDFArrayRef*):_Bool"/>
    <method name="CGPDFDictionaryGetBoolean(CGPDFDictionaryRef;const char*;CGPDFBoolean*):_Bool"/>
    <method name="CGPDFDictionaryGetCount(CGPDFDictionaryRef):size_t"/>
    <method name="CGPDFDictionaryGetDictionary(CGPDFDictionaryRef;const char*;CGPDFDictionaryRef*):_Bool"/>
    <method name="CGPDFDictionaryGetInteger(CGPDFDictionaryRef;const char*;CGPDFInteger*):_Bool"/>
    <method name="CGPDFDictionaryGetName(CGPDFDictionaryRef;const char*;const char**):_Bool"/>
    <method name="CGPDFDictionaryGetNumber(CGPDFDictionaryRef;const char*;CGPDFReal*):_Bool"/>
    <method name="CGPDFDictionaryGetObject(CGPDFDictionaryRef;const char*;CGPDFObjectRef*):_Bool"/>
    <method name="CGPDFDictionaryGetStream(CGPDFDictionaryRef;const char*;CGPDFStreamRef*):_Bool"/>
    <method name="CGPDFDictionaryGetString(CGPDFDictionaryRef;const char*;CGPDFStringRef*):_Bool"/>
    <method name="CGPDFDocumentAllowsCopying(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentAllowsPrinting(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentCreateWithProvider(CGDataProviderRef):CGPDFDocumentRef"/>
    <method name="CGPDFDocumentCreateWithURL(CFURLRef):CGPDFDocumentRef"/>
    <method name="CGPDFDocumentGetArtBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetBleedBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetCatalog(CGPDFDocumentRef):CGPDFDictionaryRef"/>
    <method name="CGPDFDocumentGetCropBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetID(CGPDFDocumentRef):CGPDFArrayRef"/>
    <method name="CGPDFDocumentGetInfo(CGPDFDocumentRef):CGPDFDictionaryRef"/>
    <method name="CGPDFDocumentGetMediaBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetNumberOfPages(CGPDFDocumentRef):size_t"/>
    <method name="CGPDFDocumentGetPage(CGPDFDocumentRef;size_t):CGPDFPageRef"/>
    <method name="CGPDFDocumentGetRotationAngle(CGPDFDocumentRef;int):int"/>
    <method name="CGPDFDocumentGetTrimBox(CGPDFDocumentRef;int):CGRect"/>
    <method name="CGPDFDocumentGetTypeID():CFTypeID"/>
    <method name="CGPDFDocumentGetVersion(CGPDFDocumentRef;int*;int*):void"/>
    <method name="CGPDFDocumentIsEncrypted(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentIsUnlocked(CGPDFDocumentRef):_Bool"/>
    <method name="CGPDFDocumentRelease(CGPDFDocumentRef):void"/>
    <method name="CGPDFDocumentRetain(CGPDFDocumentRef):CGPDFDocumentRef"/>
    <method name="CGPDFDocumentUnlockWithPassword(CGPDFDocumentRef;const char*):_Bool"/>
    <method name="CGPDFObjectGetType(CGPDFObjectRef):CGPDFObjectType"/>
    <method name="CGPDFObjectGetValue(CGPDFObjectRef;CGPDFObjectType;void*):_Bool"/>
    <method name="CGPDFOperatorTableCreate():CGPDFOperatorTableRef"/>
    <method name="CGPDFOperatorTableRelease(CGPDFOperatorTableRef):void"/>
    <method name="CGPDFOperatorTableRetain(CGPDFOperatorTableRef):CGPDFOperatorTableRef"/>
    <method name="CGPDFOperatorTableSetCallback(CGPDFOperatorTableRef;const char*;CGPDFOperatorCallback):void"/>
    <method name="CGPDFPageGetBoxRect(CGPDFPageRef;CGPDFBox):CGRect"/>
    <method name="CGPDFPageGetDictionary(CGPDFPageRef):CGPDFDictionaryRef"/>
    <method name="CGPDFPageGetDocument(CGPDFPageRef):CGPDFDocumentRef"/>
    <method name="CGPDFPageGetDrawingTransform(CGPDFPageRef;CGPDFBox;CGRect;int;_Bool):CGAffineTransform"/>
    <method name="CGPDFPageGetPageNumber(CGPDFPageRef):size_t"/>
    <method name="CGPDFPageGetRotationAngle(CGPDFPageRef):int"/>
    <method name="CGPDFPageGetTypeID():CFTypeID"/>
    <method name="CGPDFPageRelease(CGPDFPageRef):void"/>
    <method name="CGPDFPageRetain(CGPDFPageRef):CGPDFPageRef"/>
    <method name="CGPDFScannerCreate(CGPDFContentStreamRef;CGPDFOperatorTableRef;void*):CGPDFScannerRef"/>
    <method name="CGPDFScannerGetContentStream(CGPDFScannerRef):CGPDFContentStreamRef"/>
    <method name="CGPDFScannerPopArray(CGPDFScannerRef;CGPDFArrayRef*):_Bool"/>
    <method name="CGPDFScannerPopBoolean(CGPDFScannerRef;CGPDFBoolean*):_Bool"/>
    <method name="CGPDFScannerPopDictionary(CGPDFScannerRef;CGPDFDictionaryRef*):_Bool"/>
    <method name="CGPDFScannerPopInteger(CGPDFScannerRef;CGPDFInteger*):_Bool"/>
    <method name="CGPDFScannerPopName(CGPDFScannerRef;const char**):_Bool"/>
    <method name="CGPDFScannerPopNumber(CGPDFScannerRef;CGPDFReal*):_Bool"/>
    <method name="CGPDFScannerPopObject(CGPDFScannerRef;CGPDFObjectRef*):_Bool"/>
    <method name="CGPDFScannerPopStream(CGPDFScannerRef;CGPDFStreamRef*):_Bool"/>
    <method name="CGPDFScannerPopString(CGPDFScannerRef;CGPDFStringRef*):_Bool"/>
    <method name="CGPDFScannerRelease(CGPDFScannerRef):void"/>
    <method name="CGPDFScannerRetain(CGPDFScannerRef):CGPDFScannerRef"/>
    <method name="CGPDFScannerScan(CGPDFScannerRef):_Bool"/>
    <method name="CGPDFStreamCopyData(CGPDFStreamRef;CGPDFDataFormat*):CFDataRef"/>
    <method name="CGPDFStreamGetDictionary(CGPDFStreamRef):CGPDFDictionaryRef"/>
    <method name="CGPDFStringCopyDate(CGPDFStringRef):CFDateRef"/>
    <method name="CGPDFStringCopyTextString(CGPDFStringRef):CFStringRef"/>
    <method name="CGPDFStringGetBytePtr(CGPDFStringRef):const unsigned char*"/>
    <method name="CGPDFStringGetLength(CGPDFStringRef):size_t"/>
    <method name="CGPathAddArc(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;_Bool):void"/>
    <method name="CGPathAddArcToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathAddCurveToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathAddEllipseInRect(CGMutablePathRef;const CGAffineTransform*;CGRect):void"/>
    <method name="CGPathAddLineToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat):void"/>
    <method name="CGPathAddLines(CGMutablePathRef;const CGAffineTransform*;const CGPoint*;size_t):void"/>
    <method name="CGPathAddPath(CGMutablePathRef;const CGAffineTransform*;CGPathRef):void"/>
    <method name="CGPathAddQuadCurveToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathAddRect(CGMutablePathRef;const CGAffineTransform*;CGRect):void"/>
    <method name="CGPathAddRects(CGMutablePathRef;const CGAffineTransform*;const CGRect*;size_t):void"/>
    <method name="CGPathAddRelativeArc(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):void"/>
    <method name="CGPathApply(CGPathRef;void*;CGPathApplierFunction):void"/>
    <method name="CGPathCloseSubpath(CGMutablePathRef):void"/>
    <method name="CGPathContainsPoint(CGPathRef;const CGAffineTransform*;CGPoint;_Bool):_Bool"/>
    <method name="CGPathCreateCopy(CGPathRef):CGPathRef"/>
    <method name="CGPathCreateCopyByDashingPath(CGPathRef;const CGAffineTransform*;CGFloat;const CGFloat*;size_t):CGPathRef"/>
    <method name="CGPathCreateCopyByStrokingPath(CGPathRef;const CGAffineTransform*;CGFloat;CGLineCap;CGLineJoin;CGFloat):CGPathRef"/>
    <method name="CGPathCreateCopyByTransformingPath(CGPathRef;const CGAffineTransform*):CGPathRef"/>
    <method name="CGPathCreateMutable():CGMutablePathRef"/>
    <method name="CGPathCreateMutableCopy(CGPathRef):CGMutablePathRef"/>
    <method name="CGPathCreateMutableCopyByTransformingPath(CGPathRef;const CGAffineTransform*):CGMutablePathRef"/>
    <method name="CGPathCreateWithEllipseInRect(CGRect;const CGAffineTransform*):CGPathRef"/>
    <method name="CGPathCreateWithRect(CGRect;const CGAffineTransform*):CGPathRef"/>
    <method name="CGPathEqualToPath(CGPathRef;CGPathRef):_Bool"/>
    <method name="CGPathGetBoundingBox(CGPathRef):CGRect"/>
    <method name="CGPathGetCurrentPoint(CGPathRef):CGPoint"/>
    <method name="CGPathGetPathBoundingBox(CGPathRef):CGRect"/>
    <method name="CGPathGetTypeID():CFTypeID"/>
    <method name="CGPathIsEmpty(CGPathRef):_Bool"/>
    <method name="CGPathIsRect(CGPathRef;CGRect*):_Bool"/>
    <method name="CGPathMoveToPoint(CGMutablePathRef;const CGAffineTransform*;CGFloat;CGFloat):void"/>
    <method name="CGPathRelease(CGPathRef):void"/>
    <method name="CGPathRetain(CGPathRef):CGPathRef"/>
    <method name="CGPatternCreate(void*;CGRect;CGAffineTransform;CGFloat;CGFloat;CGPatternTiling;_Bool;const CGPatternCallbacks*):CGPatternRef"/>
    <method name="CGPatternGetTypeID():CFTypeID"/>
    <method name="CGPatternRelease(CGPatternRef):void"/>
    <method name="CGPatternRetain(CGPatternRef):CGPatternRef"/>
    <method name="CGPointApplyAffineTransform(CGPoint;CGAffineTransform):CGPoint"/>
    <method name="CGPointCreateDictionaryRepresentation(CGPoint):CFDictionaryRef"/>
    <method name="CGPointEqualToPoint(CGPoint;CGPoint):_Bool"/>
    <method name="CGPointFromString(NSString*):CGPoint"/>
    <method name="CGPointMake(CGFloat;CGFloat):CGPoint"/>
    <method name="CGPointMakeWithDictionaryRepresentation(CFDictionaryRef;CGPoint*):_Bool"/>
    <method name="CGRectApplyAffineTransform(CGRect;CGAffineTransform):CGRect"/>
    <method name="CGRectContainsPoint(CGRect;CGPoint):_Bool"/>
    <method name="CGRectContainsRect(CGRect;CGRect):_Bool"/>
    <method name="CGRectCreateDictionaryRepresentation(CGRect):CFDictionaryRef"/>
    <method name="CGRectDivide(CGRect;CGRect*;CGRect*;CGFloat;CGRectEdge):void"/>
    <method name="CGRectEqualToRect(CGRect;CGRect):_Bool"/>
    <method name="CGRectFromString(NSString*):CGRect"/>
    <method name="CGRectGetHeight(CGRect):CGFloat"/>
    <method name="CGRectGetMaxX(CGRect):CGFloat"/>
    <method name="CGRectGetMaxY(CGRect):CGFloat"/>
    <method name="CGRectGetMidX(CGRect):CGFloat"/>
    <method name="CGRectGetMidY(CGRect):CGFloat"/>
    <method name="CGRectGetMinX(CGRect):CGFloat"/>
    <method name="CGRectGetMinY(CGRect):CGFloat"/>
    <method name="CGRectGetWidth(CGRect):CGFloat"/>
    <method name="CGRectInset(CGRect;CGFloat;CGFloat):CGRect"/>
    <method name="CGRectIntegral(CGRect):CGRect"/>
    <method name="CGRectIntersection(CGRect;CGRect):CGRect"/>
    <method name="CGRectIntersectsRect(CGRect;CGRect):_Bool"/>
    <method name="CGRectIsEmpty(CGRect):_Bool"/>
    <method name="CGRectIsInfinite(CGRect):_Bool"/>
    <method name="CGRectIsNull(CGRect):_Bool"/>
    <method name="CGRectMake(CGFloat;CGFloat;CGFloat;CGFloat):CGRect"/>
    <method name="CGRectMakeWithDictionaryRepresentation(CFDictionaryRef;CGRect*):_Bool"/>
    <method name="CGRectOffset(CGRect;CGFloat;CGFloat):CGRect"/>
    <method name="CGRectStandardize(CGRect):CGRect"/>
    <method name="CGRectUnion(CGRect;CGRect):CGRect"/>
    <method name="CGShadingCreateAxial(CGColorSpaceRef;CGPoint;CGPoint;CGFunctionRef;_Bool;_Bool):CGShadingRef"/>
    <method name="CGShadingCreateRadial(CGColorSpaceRef;CGPoint;CGFloat;CGPoint;CGFloat;CGFunctionRef;_Bool;_Bool):CGShadingRef"/>
    <method name="CGShadingGetTypeID():CFTypeID"/>
    <method name="CGShadingRelease(CGShadingRef):void"/>
    <method name="CGShadingRetain(CGShadingRef):CGShadingRef"/>
    <method name="CGSizeApplyAffineTransform(CGSize;CGAffineTransform):CGSize"/>
    <method name="CGSizeCreateDictionaryRepresentation(CGSize):CFDictionaryRef"/>
    <method name="CGSizeEqualToSize(CGSize;CGSize):_Bool"/>
    <method name="CGSizeFromString(NSString*):CGSize"/>
    <method name="CGSizeMake(CGFloat;CGFloat):CGSize"/>
    <method name="CGSizeMakeWithDictionaryRepresentation(CFDictionaryRef;CGSize*):_Bool"/>
    <method name="CLLocationCoordinate2DIsValid(CLLocationCoordinate2D):BOOL"/>
    <method name="CLLocationCoordinate2DMake(CLLocationDegrees;CLLocationDegrees):CLLocationCoordinate2D"/>
    <method name="CMAudioClockCreate(CFAllocatorRef;CMClockRef*):OSStatus"/>
    <method name="CMAudioFormatDescriptionCreate(CFAllocatorRef;const AudioStreamBasicDescription*;size_t;const AudioChannelLayout*;size_t;const void*;CFDictionaryRef;CMAudioFormatDescriptionRef*):OSStatus"/>
    <method name="CMAudioFormatDescriptionCreateSummary(CFAllocatorRef;CFArrayRef;uint32_t;CMAudioFormatDescriptionRef*):OSStatus"/>
    <method name="CMAudioFormatDescriptionEqual(CMAudioFormatDescriptionRef;CMAudioFormatDescriptionRef;CMAudioFormatDescriptionMask;CMAudioFormatDescriptionMask*):Boolean"/>
    <method name="CMAudioFormatDescriptionGetChannelLayout(CMAudioFormatDescriptionRef;size_t*):const AudioChannelLayout*"/>
    <method name="CMAudioFormatDescriptionGetFormatList(CMAudioFormatDescriptionRef;size_t*):const AudioFormatListItem*"/>
    <method name="CMAudioFormatDescriptionGetMagicCookie(CMAudioFormatDescriptionRef;size_t*):const void*"/>
    <method name="CMAudioFormatDescriptionGetMostCompatibleFormat(CMAudioFormatDescriptionRef):const AudioFormatListItem*"/>
    <method name="CMAudioFormatDescriptionGetRichestDecodableFormat(CMAudioFormatDescriptionRef):const AudioFormatListItem*"/>
    <method name="CMAudioFormatDescriptionGetStreamBasicDescription(CMAudioFormatDescriptionRef):const AudioStreamBasicDescription*"/>
    <method name="CMAudioSampleBufferCreateWithPacketDescriptions(CFAllocatorRef;CMBlockBufferRef;Boolean;CMSampleBufferMakeDataReadyCallback;void*;CMFormatDescriptionRef;CMItemCount;CMTime;const AudioStreamPacketDescription*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMBlockBufferAccessDataBytes(CMBlockBufferRef;size_t;size_t;void*;char**):OSStatus"/>
    <method name="CMBlockBufferAppendBufferReference(CMBlockBufferRef;CMBlockBufferRef;size_t;size_t;CMBlockBufferFlags):OSStatus"/>
    <method name="CMBlockBufferAppendMemoryBlock(CMBlockBufferRef;void*;size_t;CFAllocatorRef;const CMBlockBufferCustomBlockSource*;size_t;size_t;CMBlockBufferFlags):OSStatus"/>
    <method name="CMBlockBufferAssureBlockMemory(CMBlockBufferRef):OSStatus"/>
    <method name="CMBlockBufferCopyDataBytes(CMBlockBufferRef;size_t;size_t;void*):OSStatus"/>
    <method name="CMBlockBufferCreateContiguous(CFAllocatorRef;CMBlockBufferRef;CFAllocatorRef;const CMBlockBufferCustomBlockSource*;size_t;size_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferCreateEmpty(CFAllocatorRef;uint32_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferCreateWithBufferReference(CFAllocatorRef;CMBlockBufferRef;size_t;size_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferCreateWithMemoryBlock(CFAllocatorRef;void*;size_t;CFAllocatorRef;const CMBlockBufferCustomBlockSource*;size_t;size_t;CMBlockBufferFlags;CMBlockBufferRef*):OSStatus"/>
    <method name="CMBlockBufferFillDataBytes(char;CMBlockBufferRef;size_t;size_t):OSStatus"/>
    <method name="CMBlockBufferGetDataLength(CMBlockBufferRef):size_t"/>
    <method name="CMBlockBufferGetDataPointer(CMBlockBufferRef;size_t;size_t*;size_t*;char**):OSStatus"/>
    <method name="CMBlockBufferGetTypeID():CFTypeID"/>
    <method name="CMBlockBufferIsEmpty(CMBlockBufferRef):Boolean"/>
    <method name="CMBlockBufferIsRangeContiguous(CMBlockBufferRef;size_t;size_t):Boolean"/>
    <method name="CMBlockBufferReplaceDataBytes(const void*;CMBlockBufferRef;size_t;size_t):OSStatus"/>
    <method name="CMBufferQueueCallForEachBuffer(CMBufferQueueRef;(*)(CMBufferRef;void*):OSStatus;void*):OSStatus"/>
    <method name="CMBufferQueueContainsEndOfData(CMBufferQueueRef):Boolean"/>
    <method name="CMBufferQueueCreate(CFAllocatorRef;CMItemCount;const CMBufferCallbacks*;CMBufferQueueRef*):OSStatus"/>
    <method name="CMBufferQueueDequeueAndRetain(CMBufferQueueRef):CMBufferRef"/>
    <method name="CMBufferQueueDequeueIfDataReadyAndRetain(CMBufferQueueRef):CMBufferRef"/>
    <method name="CMBufferQueueEnqueue(CMBufferQueueRef;CMBufferRef):OSStatus"/>
    <method name="CMBufferQueueGetBufferCount(CMBufferQueueRef):CMItemCount"/>
    <method name="CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS():const CMBufferCallbacks*"/>
    <method name="CMBufferQueueGetCallbacksForUnsortedSampleBuffers():const CMBufferCallbacks*"/>
    <method name="CMBufferQueueGetDuration(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetEndPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetFirstDecodeTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetFirstPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetHead(CMBufferQueueRef):CMBufferRef"/>
    <method name="CMBufferQueueGetMaxPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetMinDecodeTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetMinPresentationTimeStamp(CMBufferQueueRef):CMTime"/>
    <method name="CMBufferQueueGetTypeID():CFTypeID"/>
    <method name="CMBufferQueueInstallTrigger(CMBufferQueueRef;CMBufferQueueTriggerCallback;void*;CMBufferQueueTriggerCondition;CMTime;CMBufferQueueTriggerToken*):OSStatus"/>
    <method name="CMBufferQueueInstallTriggerWithIntegerThreshold(CMBufferQueueRef;CMBufferQueueTriggerCallback;void*;CMBufferQueueTriggerCondition;CMItemCount;CMBufferQueueTriggerToken*):OSStatus"/>
    <method name="CMBufferQueueIsAtEndOfData(CMBufferQueueRef):Boolean"/>
    <method name="CMBufferQueueIsEmpty(CMBufferQueueRef):Boolean"/>
    <method name="CMBufferQueueMarkEndOfData(CMBufferQueueRef):OSStatus"/>
    <method name="CMBufferQueueRemoveTrigger(CMBufferQueueRef;CMBufferQueueTriggerToken):OSStatus"/>
    <method name="CMBufferQueueReset(CMBufferQueueRef):OSStatus"/>
    <method name="CMBufferQueueResetWithCallback(CMBufferQueueRef;(*)(CMBufferRef;void*):void;void*):OSStatus"/>
    <method name="CMBufferQueueSetValidationCallback(CMBufferQueueRef;CMBufferValidationCallback;void*):OSStatus"/>
    <method name="CMBufferQueueTestTrigger(CMBufferQueueRef;CMBufferQueueTriggerToken):Boolean"/>
    <method name="CMClockConvertHostTimeToSystemUnits(CMTime):uint64_t"/>
    <method name="CMClockGetAnchorTime(CMClockRef;CMTime*;CMTime*):OSStatus"/>
    <method name="CMClockGetHostTimeClock():CMClockRef"/>
    <method name="CMClockGetTime(CMClockRef):CMTime"/>
    <method name="CMClockGetTypeID():CFTypeID"/>
    <method name="CMClockInvalidate(CMClockRef):void"/>
    <method name="CMClockMakeHostTimeFromSystemUnits(uint64_t):CMTime"/>
    <method name="CMClockMightDrift(CMClockRef;CMClockRef):Boolean"/>
    <method name="CMCopyDictionaryOfAttachments(CFAllocatorRef;CMAttachmentBearerRef;CMAttachmentMode):CFDictionaryRef"/>
    <method name="CMFormatDescriptionCreate(CFAllocatorRef;CMMediaType;FourCharCode;CFDictionaryRef;CMFormatDescriptionRef*):OSStatus"/>
    <method name="CMFormatDescriptionEqual(CMFormatDescriptionRef;CMFormatDescriptionRef):Boolean"/>
    <method name="CMFormatDescriptionEqualIgnoringExtensionKeys(CMFormatDescriptionRef;CMFormatDescriptionRef;CFTypeRef;CFTypeRef):Boolean"/>
    <method name="CMFormatDescriptionGetExtension(CMFormatDescriptionRef;CFStringRef):CFPropertyListRef"/>
    <method name="CMFormatDescriptionGetExtensions(CMFormatDescriptionRef):CFDictionaryRef"/>
    <method name="CMFormatDescriptionGetMediaSubType(CMFormatDescriptionRef):FourCharCode"/>
    <method name="CMFormatDescriptionGetMediaType(CMFormatDescriptionRef):CMMediaType"/>
    <method name="CMFormatDescriptionGetTypeID():CFTypeID"/>
    <method name="CMGetAttachment(CMAttachmentBearerRef;CFStringRef;CMAttachmentMode*):CFTypeRef"/>
    <method name="CMMemoryPoolCreate(CFDictionaryRef):CMMemoryPoolRef"/>
    <method name="CMMemoryPoolFlush(CMMemoryPoolRef):void"/>
    <method name="CMMemoryPoolGetAllocator(CMMemoryPoolRef):CFAllocatorRef"/>
    <method name="CMMemoryPoolGetTypeID():CFTypeID"/>
    <method name="CMMemoryPoolInvalidate(CMMemoryPoolRef):void"/>
    <method name="CMMetadataFormatDescriptionCreateWithKeys(CFAllocatorRef;CMMetadataFormatType;CFArrayRef;CMMetadataFormatDescriptionRef*):OSStatus"/>
    <method name="CMMetadataFormatDescriptionGetKeyWithLocalID(CMMetadataFormatDescriptionRef;OSType):CFDictionaryRef"/>
    <method name="CMMuxedFormatDescriptionCreate(CFAllocatorRef;CMMuxedStreamType;CFDictionaryRef;CMMuxedFormatDescriptionRef*):OSStatus"/>
    <method name="CMPropagateAttachments(CMAttachmentBearerRef;CMAttachmentBearerRef):void"/>
    <method name="CMRemoveAllAttachments(CMAttachmentBearerRef):void"/>
    <method name="CMRemoveAttachment(CMAttachmentBearerRef;CFStringRef):void"/>
    <method name="CMSampleBufferCallForEachSample(CMSampleBufferRef;(*)(CMSampleBufferRef;CMItemCount;void*):OSStatus;void*):OSStatus"/>
    <method name="CMSampleBufferCopySampleBufferForRange(CFAllocatorRef;CMSampleBufferRef;CFRange;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreate(CFAllocatorRef;CMBlockBufferRef;Boolean;CMSampleBufferMakeDataReadyCallback;void*;CMFormatDescriptionRef;CMItemCount;CMItemCount;const CMSampleTimingInfo*;CMItemCount;const size_t*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreateCopy(CFAllocatorRef;CMSampleBufferRef;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreateCopyWithNewTiming(CFAllocatorRef;CMSampleBufferRef;CMItemCount;const CMSampleTimingInfo*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferCreateForImageBuffer(CFAllocatorRef;CVImageBufferRef;Boolean;CMSampleBufferMakeDataReadyCallback;void*;CMVideoFormatDescriptionRef;const CMSampleTimingInfo*;CMSampleBufferRef*):OSStatus"/>
    <method name="CMSampleBufferDataIsReady(CMSampleBufferRef):Boolean"/>
    <method name="CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(CMSampleBufferRef;size_t*;AudioBufferList*;size_t;CFAllocatorRef;CFAllocatorRef;uint32_t;CMBlockBufferRef*):OSStatus"/>
    <method name="CMSampleBufferGetAudioStreamPacketDescriptions(CMSampleBufferRef;size_t;AudioStreamPacketDescription*;size_t*):OSStatus"/>
    <method name="CMSampleBufferGetAudioStreamPacketDescriptionsPtr(CMSampleBufferRef;const AudioStreamPacketDescription**;size_t*):OSStatus"/>
    <method name="CMSampleBufferGetDataBuffer(CMSampleBufferRef):CMBlockBufferRef"/>
    <method name="CMSampleBufferGetDecodeTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetDuration(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetFormatDescription(CMSampleBufferRef):CMFormatDescriptionRef"/>
    <method name="CMSampleBufferGetImageBuffer(CMSampleBufferRef):CVImageBufferRef"/>
    <method name="CMSampleBufferGetNumSamples(CMSampleBufferRef):CMItemCount"/>
    <method name="CMSampleBufferGetOutputDecodeTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetOutputDuration(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetOutputPresentationTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetOutputSampleTimingInfoArray(CMSampleBufferRef;CMItemCount;CMSampleTimingInfo*;CMItemCount*):OSStatus"/>
    <method name="CMSampleBufferGetPresentationTimeStamp(CMSampleBufferRef):CMTime"/>
    <method name="CMSampleBufferGetSampleAttachmentsArray(CMSampleBufferRef;Boolean):CFArrayRef"/>
    <method name="CMSampleBufferGetSampleSize(CMSampleBufferRef;CMItemIndex):size_t"/>
    <method name="CMSampleBufferGetSampleSizeArray(CMSampleBufferRef;CMItemCount;size_t*;CMItemCount*):OSStatus"/>
    <method name="CMSampleBufferGetSampleTimingInfo(CMSampleBufferRef;CMItemIndex;CMSampleTimingInfo*):OSStatus"/>
    <method name="CMSampleBufferGetSampleTimingInfoArray(CMSampleBufferRef;CMItemCount;CMSampleTimingInfo*;CMItemCount*):OSStatus"/>
    <method name="CMSampleBufferGetTotalSampleSize(CMSampleBufferRef):size_t"/>
    <method name="CMSampleBufferGetTypeID():CFTypeID"/>
    <method name="CMSampleBufferInvalidate(CMSampleBufferRef):OSStatus"/>
    <method name="CMSampleBufferIsValid(CMSampleBufferRef):Boolean"/>
    <method name="CMSampleBufferMakeDataReady(CMSampleBufferRef):OSStatus"/>
    <method name="CMSampleBufferSetDataBuffer(CMSampleBufferRef;CMBlockBufferRef):OSStatus"/>
    <method name="CMSampleBufferSetDataBufferFromAudioBufferList(CMSampleBufferRef;CFAllocatorRef;CFAllocatorRef;uint32_t;const AudioBufferList*):OSStatus"/>
    <method name="CMSampleBufferSetDataReady(CMSampleBufferRef):OSStatus"/>
    <method name="CMSampleBufferSetInvalidateCallback(CMSampleBufferRef;CMSampleBufferInvalidateCallback;uint64_t):OSStatus"/>
    <method name="CMSampleBufferSetOutputPresentationTimeStamp(CMSampleBufferRef;CMTime):OSStatus"/>
    <method name="CMSampleBufferTrackDataReadiness(CMSampleBufferRef;CMSampleBufferRef):OSStatus"/>
    <method name="CMSetAttachment(CMAttachmentBearerRef;CFStringRef;CFTypeRef;CMAttachmentMode):void"/>
    <method name="CMSetAttachments(CMAttachmentBearerRef;CFDictionaryRef;CMAttachmentMode):void"/>
    <method name="CMSimpleQueueCreate(CFAllocatorRef;int32_t;CMSimpleQueueRef*):OSStatus"/>
    <method name="CMSimpleQueueDequeue(CMSimpleQueueRef):const void*"/>
    <method name="CMSimpleQueueEnqueue(CMSimpleQueueRef;const void*):OSStatus"/>
    <method name="CMSimpleQueueGetCapacity(CMSimpleQueueRef):int32_t"/>
    <method name="CMSimpleQueueGetCount(CMSimpleQueueRef):int32_t"/>
    <method name="CMSimpleQueueGetHead(CMSimpleQueueRef):const void*"/>
    <method name="CMSimpleQueueGetTypeID():CFTypeID"/>
    <method name="CMSimpleQueueReset(CMSimpleQueueRef):OSStatus"/>
    <method name="CMSyncConvertTime(CMTime;CMClockOrTimebaseRef;CMClockOrTimebaseRef):CMTime"/>
    <method name="CMSyncGetRelativeRate(CMClockOrTimebaseRef;CMClockOrTimebaseRef):Float64"/>
    <method name="CMSyncGetRelativeRateAndAnchorTime(CMClockOrTimebaseRef;CMClockOrTimebaseRef;Float64*;CMTime*;CMTime*):OSStatus"/>
    <method name="CMSyncGetTime(CMClockOrTimebaseRef):CMTime"/>
    <method name="CMSyncMightDrift(CMClockOrTimebaseRef;CMClockOrTimebaseRef):Boolean"/>
    <method name="CMTextFormatDescriptionGetDefaultStyle(CMFormatDescriptionRef;uint16_t*;Boolean*;Boolean*;Boolean*;CGFloat*;CGFloat*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetDefaultTextBox(CMFormatDescriptionRef;Boolean;CGFloat;CGRect*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetDisplayFlags(CMFormatDescriptionRef;CMTextDisplayFlags*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetFontName(CMFormatDescriptionRef;uint16_t;CFStringRef*):OSStatus"/>
    <method name="CMTextFormatDescriptionGetJustification(CMFormatDescriptionRef;CMTextJustificationValue*;CMTextJustificationValue*):OSStatus"/>
    <method name="CMTimeAbsoluteValue(CMTime):CMTime"/>
    <method name="CMTimeAdd(CMTime;CMTime):CMTime"/>
    <method name="CMTimeClampToRange(CMTime;CMTimeRange):CMTime"/>
    <method name="CMTimeCodeFormatDescriptionCreate(CFAllocatorRef;CMTimeCodeFormatType;CMTime;uint32_t;uint32_t;CFDictionaryRef;CMTimeCodeFormatDescriptionRef*):OSStatus"/>
    <method name="CMTimeCodeFormatDescriptionGetFrameDuration(CMTimeCodeFormatDescriptionRef):CMTime"/>
    <method name="CMTimeCodeFormatDescriptionGetFrameQuanta(CMTimeCodeFormatDescriptionRef):uint32_t"/>
    <method name="CMTimeCodeFormatDescriptionGetTimeCodeFlags(CMTimeCodeFormatDescriptionRef):uint32_t"/>
    <method name="CMTimeCompare(CMTime;CMTime):int32_t"/>
    <method name="CMTimeConvertScale(CMTime;int32_t;CMTimeRoundingMethod):CMTime"/>
    <method name="CMTimeCopyAsDictionary(CMTime;CFAllocatorRef):CFDictionaryRef"/>
    <method name="CMTimeCopyDescription(CFAllocatorRef;CMTime):CFStringRef"/>
    <method name="CMTimeGetSeconds(CMTime):Float64"/>
    <method name="CMTimeMake(int64_t;int32_t):CMTime"/>
    <method name="CMTimeMakeFromDictionary(CFDictionaryRef):CMTime"/>
    <method name="CMTimeMakeWithEpoch(int64_t;int32_t;int64_t):CMTime"/>
    <method name="CMTimeMakeWithSeconds(Float64;int32_t):CMTime"/>
    <method name="CMTimeMapDurationFromRangeToRange(CMTime;CMTimeRange;CMTimeRange):CMTime"/>
    <method name="CMTimeMapTimeFromRangeToRange(CMTime;CMTimeRange;CMTimeRange):CMTime"/>
    <method name="CMTimeMaximum(CMTime;CMTime):CMTime"/>
    <method name="CMTimeMinimum(CMTime;CMTime):CMTime"/>
    <method name="CMTimeMultiply(CMTime;int32_t):CMTime"/>
    <method name="CMTimeMultiplyByFloat64(CMTime;Float64):CMTime"/>
    <method name="CMTimeRangeContainsTime(CMTimeRange;CMTime):Boolean"/>
    <method name="CMTimeRangeContainsTimeRange(CMTimeRange;CMTimeRange):Boolean"/>
    <method name="CMTimeRangeCopyAsDictionary(CMTimeRange;CFAllocatorRef):CFDictionaryRef"/>
    <method name="CMTimeRangeCopyDescription(CFAllocatorRef;CMTimeRange):CFStringRef"/>
    <method name="CMTimeRangeEqual(CMTimeRange;CMTimeRange):Boolean"/>
    <method name="CMTimeRangeFromTimeToTime(CMTime;CMTime):CMTimeRange"/>
    <method name="CMTimeRangeGetEnd(CMTimeRange):CMTime"/>
    <method name="CMTimeRangeGetIntersection(CMTimeRange;CMTimeRange):CMTimeRange"/>
    <method name="CMTimeRangeGetUnion(CMTimeRange;CMTimeRange):CMTimeRange"/>
    <method name="CMTimeRangeMake(CMTime;CMTime):CMTimeRange"/>
    <method name="CMTimeRangeMakeFromDictionary(CFDictionaryRef):CMTimeRange"/>
    <method name="CMTimeRangeShow(CMTimeRange):void"/>
    <method name="CMTimeShow(CMTime):void"/>
    <method name="CMTimeSubtract(CMTime;CMTime):CMTime"/>
    <method name="CMTimebaseAddTimer(CMTimebaseRef;CFRunLoopTimerRef;CFRunLoopRef):OSStatus"/>
    <method name="CMTimebaseAddTimerDispatchSource(CMTimebaseRef;dispatch_source_t):OSStatus"/>
    <method name="CMTimebaseCreateWithMasterClock(CFAllocatorRef;CMClockRef;CMTimebaseRef*):OSStatus"/>
    <method name="CMTimebaseCreateWithMasterTimebase(CFAllocatorRef;CMTimebaseRef;CMTimebaseRef*):OSStatus"/>
    <method name="CMTimebaseGetEffectiveRate(CMTimebaseRef):Float64"/>
    <method name="CMTimebaseGetMaster(CMTimebaseRef):CMClockOrTimebaseRef"/>
    <method name="CMTimebaseGetMasterClock(CMTimebaseRef):CMClockRef"/>
    <method name="CMTimebaseGetMasterTimebase(CMTimebaseRef):CMTimebaseRef"/>
    <method name="CMTimebaseGetRate(CMTimebaseRef):Float64"/>
    <method name="CMTimebaseGetTime(CMTimebaseRef):CMTime"/>
    <method name="CMTimebaseGetTimeAndRate(CMTimebaseRef;CMTime*;Float64*):OSStatus"/>
    <method name="CMTimebaseGetTimeWithTimeScale(CMTimebaseRef;CMTimeScale;CMTimeRoundingMethod):CMTime"/>
    <method name="CMTimebaseGetTypeID():CFTypeID"/>
    <method name="CMTimebaseGetUltimateMasterClock(CMTimebaseRef):CMClockRef"/>
    <method name="CMTimebaseNotificationBarrier(CMTimebaseRef):OSStatus"/>
    <method name="CMTimebaseRemoveTimer(CMTimebaseRef;CFRunLoopTimerRef):OSStatus"/>
    <method name="CMTimebaseRemoveTimerDispatchSource(CMTimebaseRef;dispatch_source_t):OSStatus"/>
    <method name="CMTimebaseSetAnchorTime(CMTimebaseRef;CMTime;CMTime):OSStatus"/>
    <method name="CMTimebaseSetRate(CMTimebaseRef;Float64):OSStatus"/>
    <method name="CMTimebaseSetRateAndAnchorTime(CMTimebaseRef;Float64;CMTime;CMTime):OSStatus"/>
    <method name="CMTimebaseSetTime(CMTimebaseRef;CMTime):OSStatus"/>
    <method name="CMTimebaseSetTimerDispatchSourceNextFireTime(CMTimebaseRef;dispatch_source_t;CMTime;uint32_t):OSStatus"/>
    <method name="CMTimebaseSetTimerDispatchSourceToFireImmediately(CMTimebaseRef;dispatch_source_t):OSStatus"/>
    <method name="CMTimebaseSetTimerNextFireTime(CMTimebaseRef;CFRunLoopTimerRef;CMTime;uint32_t):OSStatus"/>
    <method name="CMTimebaseSetTimerToFireImmediately(CMTimebaseRef;CFRunLoopTimerRef):OSStatus"/>
    <method name="CMVideoFormatDescriptionCreate(CFAllocatorRef;CMVideoCodecType;int32_t;int32_t;CFDictionaryRef;CMVideoFormatDescriptionRef*):OSStatus"/>
    <method name="CMVideoFormatDescriptionCreateForImageBuffer(CFAllocatorRef;CVImageBufferRef;CMVideoFormatDescriptionRef*):OSStatus"/>
    <method name="CMVideoFormatDescriptionGetCleanAperture(CMVideoFormatDescriptionRef;Boolean):CGRect"/>
    <method name="CMVideoFormatDescriptionGetDimensions(CMVideoFormatDescriptionRef):CMVideoDimensions"/>
    <method name="CMVideoFormatDescriptionGetExtensionKeysCommonWithImageBuffers():CFArrayRef"/>
    <method name="CMVideoFormatDescriptionGetPresentationDimensions(CMVideoFormatDescriptionRef;Boolean;Boolean):CGSize"/>
    <method name="CMVideoFormatDescriptionMatchesImageBuffer(CMVideoFormatDescriptionRef;CVImageBufferRef):Boolean"/>
    <method name="CNCopyCurrentNetworkInfo(CFStringRef):CFDictionaryRef"/>
    <method name="CNCopySupportedInterfaces():CFArrayRef"/>
    <method name="CNMarkPortalOffline(CFStringRef):Boolean"/>
    <method name="CNMarkPortalOnline(CFStringRef):Boolean"/>
    <method name="CNSetSupportedSSIDs(CFArrayRef):Boolean"/>
    <method name="COMP_CTX_free(COMP_CTX*):void"/>
    <method name="COMP_CTX_new(COMP_METHOD*):COMP_CTX*"/>
    <method name="COMP_compress_block(COMP_CTX*;unsigned char*;int;unsigned char*;int):int"/>
    <method name="COMP_expand_block(COMP_CTX*;unsigned char*;int;unsigned char*;int):int"/>
    <method name="COMP_rle():COMP_METHOD*"/>
    <method name="COMP_zlib():COMP_METHOD*"/>
    <method name="CONF_dump_bio(LHASH*;BIO*):int"/>
    <method name="CONF_dump_fp(LHASH*;FILE*):int"/>
    <method name="CONF_free(LHASH*):void"/>
    <method name="CONF_get1_default_config_file():char*"/>
    <method name="CONF_get_number(LHASH*;const char*;const char*):long"/>
    <method name="CONF_get_section(LHASH*;const char*):STACK*"/>
    <method name="CONF_get_string(LHASH*;const char*;const char*):char*"/>
    <method name="CONF_imodule_get_flags(const CONF_IMODULE*):unsigned long"/>
    <method name="CONF_imodule_get_module(const CONF_IMODULE*):CONF_MODULE*"/>
    <method name="CONF_imodule_get_name(const CONF_IMODULE*):const char*"/>
    <method name="CONF_imodule_get_usr_data(const CONF_IMODULE*):void*"/>
    <method name="CONF_imodule_get_value(const CONF_IMODULE*):const char*"/>
    <method name="CONF_imodule_set_flags(CONF_IMODULE*;unsigned long):void"/>
    <method name="CONF_imodule_set_usr_data(CONF_IMODULE*;void*):void"/>
    <method name="CONF_load(LHASH*;const char*;long*):LHASH*"/>
    <method name="CONF_load_bio(LHASH*;BIO*;long*):LHASH*"/>
    <method name="CONF_load_fp(LHASH*;FILE*;long*):LHASH*"/>
    <method name="CONF_module_add(const char*;conf_init_func*;conf_finish_func*):int"/>
    <method name="CONF_module_get_usr_data(CONF_MODULE*):void*"/>
    <method name="CONF_module_set_usr_data(CONF_MODULE*;void*):void"/>
    <method name="CONF_modules_finish():void"/>
    <method name="CONF_modules_free():void"/>
    <method name="CONF_modules_load(const CONF*;const char*;unsigned long):int"/>
    <method name="CONF_modules_load_file(const char*;const char*;unsigned long):int"/>
    <method name="CONF_modules_unload(int):void"/>
    <method name="CONF_parse_list(const char*;int;int;(*)(const char*;int;void*):int*;void*):int"/>
    <method name="CONF_set_default_method(CONF_METHOD*):int"/>
    <method name="CONF_set_nconf(CONF*;LHASH*):void"/>
    <method name="CRL_DIST_POINTS_free(CRL_DIST_POINTS*):void"/>
    <method name="CRL_DIST_POINTS_new():CRL_DIST_POINTS*"/>
    <method name="CRYPTO_add_lock(int*;int;int;const char*;int):int"/>
    <method name="CRYPTO_cleanup_all_ex_data():void"/>
    <method name="CRYPTO_dbg_free(void*;int):void"/>
    <method name="CRYPTO_dbg_get_options():long"/>
    <method name="CRYPTO_dbg_malloc(void*;int;const char*;int;int):void"/>
    <method name="CRYPTO_dbg_realloc(void*;void*;int;const char*;int;int):void"/>
    <method name="CRYPTO_dbg_set_options(long):void"/>
    <method name="CRYPTO_destroy_dynlockid(int):void"/>
    <method name="CRYPTO_dup_ex_data(int;CRYPTO_EX_DATA*;CRYPTO_EX_DATA*):int"/>
    <method name="CRYPTO_ex_data_new_class():int"/>
    <method name="CRYPTO_free(void*):void"/>
    <method name="CRYPTO_free_ex_data(int;void*;CRYPTO_EX_DATA*):void"/>
    <method name="CRYPTO_free_locked(void*):void"/>
    <method name="CRYPTO_get_add_lock_callback():(*)(int*;int;int;const char*;int):int*"/>
    <method name="CRYPTO_get_dynlock_create_callback():(*)(const char*;int):CRYPTO_dynlock_value**"/>
    <method name="CRYPTO_get_dynlock_destroy_callback():(*)(CRYPTO_dynlock_value*;const char*;int):void*"/>
    <method name="CRYPTO_get_dynlock_lock_callback():(*)(int;CRYPTO_dynlock_value*;const char*;int):void*"/>
    <method name="CRYPTO_get_dynlock_value(int):CRYPTO_dynlock_value*"/>
    <method name="CRYPTO_get_ex_data(const CRYPTO_EX_DATA*;int):void*"/>
    <method name="CRYPTO_get_ex_data_implementation():const CRYPTO_EX_DATA_IMPL*"/>
    <method name="CRYPTO_get_ex_new_index(int;long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="CRYPTO_get_id_callback():(*)():unsigned long*"/>
    <method name="CRYPTO_get_lock_name(int):const char*"/>
    <method name="CRYPTO_get_locked_mem_ex_functions((*)(size_t;const char*;int):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_locked_mem_functions((*)(size_t):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_locking_callback():(*)(int;int;const char*;int):void*"/>
    <method name="CRYPTO_get_mem_debug_functions((*)(void*;int;const char*;int;int):void**;(*)(void*;void*;int;const char*;int;int):void**;(*)(void*;int):void**;(*)(long):void**;(*)():long**):void"/>
    <method name="CRYPTO_get_mem_debug_options():long"/>
    <method name="CRYPTO_get_mem_ex_functions((*)(size_t;const char*;int):void***;(*)(void*;size_t;const char*;int):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_mem_functions((*)(size_t):void***;(*)(void*;size_t):void***;(*)(void*):void**):void"/>
    <method name="CRYPTO_get_new_dynlockid():int"/>
    <method name="CRYPTO_get_new_lockid(char*):int"/>
    <method name="CRYPTO_is_mem_check_on():int"/>
    <method name="CRYPTO_lock(int;int;const char*;int):void"/>
    <method name="CRYPTO_malloc(int;const char*;int):void*"/>
    <method name="CRYPTO_malloc_locked(int;const char*;int):void*"/>
    <method name="CRYPTO_mem_ctrl(int):int"/>
    <method name="CRYPTO_mem_leaks(bio_st*):void"/>
    <method name="CRYPTO_mem_leaks_cb(CRYPTO_MEM_LEAK_CB*):void"/>
    <method name="CRYPTO_mem_leaks_fp(FILE*):void"/>
    <method name="CRYPTO_new_ex_data(int;void*;CRYPTO_EX_DATA*):int"/>
    <method name="CRYPTO_num_locks():int"/>
    <method name="CRYPTO_pop_info():int"/>
    <method name="CRYPTO_push_info_(const char*;const char*;int):int"/>
    <method name="CRYPTO_realloc(void*;int;const char*;int):void*"/>
    <method name="CRYPTO_realloc_clean(void*;int;int;const char*;int):void*"/>
    <method name="CRYPTO_remalloc(void*;int;const char*;int):void*"/>
    <method name="CRYPTO_remove_all_info():int"/>
    <method name="CRYPTO_set_add_lock_callback((*)(int*;int;int;const char*;int):int*):void"/>
    <method name="CRYPTO_set_dynlock_create_callback((*)(const char*;int):CRYPTO_dynlock_value**):void"/>
    <method name="CRYPTO_set_dynlock_destroy_callback((*)(CRYPTO_dynlock_value*;const char*;int):void*):void"/>
    <method name="CRYPTO_set_dynlock_lock_callback((*)(int;CRYPTO_dynlock_value*;const char*;int):void*):void"/>
    <method name="CRYPTO_set_ex_data(CRYPTO_EX_DATA*;int;void*):int"/>
    <method name="CRYPTO_set_ex_data_implementation(const CRYPTO_EX_DATA_IMPL*):int"/>
    <method name="CRYPTO_set_id_callback((*)():unsigned long*):void"/>
    <method name="CRYPTO_set_locked_mem_ex_functions((*)(size_t;const char*;int):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_set_locked_mem_functions((*)(size_t):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_set_locking_callback((*)(int;int;const char*;int):void*):void"/>
    <method name="CRYPTO_set_mem_debug_functions((*)(void*;int;const char*;int;int):void*;(*)(void*;void*;int;const char*;int;int):void*;(*)(void*;int):void*;(*)(long):void*;(*)():long*):int"/>
    <method name="CRYPTO_set_mem_debug_options(long):void"/>
    <method name="CRYPTO_set_mem_ex_functions((*)(size_t;const char*;int):void**;(*)(void*;size_t;const char*;int):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_set_mem_functions((*)(size_t):void**;(*)(void*;size_t):void**;(*)(void*):void*):int"/>
    <method name="CRYPTO_thread_id():unsigned long"/>
    <method name="CTFontCollectionCopyExclusionDescriptors(CTFontCollectionRef):CFArrayRef"/>
    <method name="CTFontCollectionCopyFontAttribute(CTFontCollectionRef;CFStringRef;CTFontCollectionCopyOptions):CFArrayRef"/>
    <method name="CTFontCollectionCopyFontAttributes(CTFontCollectionRef;CFSetRef;CTFontCollectionCopyOptions):CFArrayRef"/>
    <method name="CTFontCollectionCopyQueryDescriptors(CTFontCollectionRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateCopyWithFontDescriptors(CTFontCollectionRef;CFArrayRef;CFDictionaryRef):CTFontCollectionRef"/>
    <method name="CTFontCollectionCreateFromAvailableFonts(CFDictionaryRef):CTFontCollectionRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptors(CTFontCollectionRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptorsForFamily(CTFontCollectionRef;CFStringRef;CFDictionaryRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(CTFontCollectionRef;CTFontCollectionSortDescriptorsCallback;void*):CFArrayRef"/>
    <method name="CTFontCollectionCreateMatchingFontDescriptorsWithOptions(CTFontCollectionRef;CFDictionaryRef):CFArrayRef"/>
    <method name="CTFontCollectionCreateMutableCopy(CTFontCollectionRef):CTMutableFontCollectionRef"/>
    <method name="CTFontCollectionCreateWithFontDescriptors(CFArrayRef;CFDictionaryRef):CTFontCollectionRef"/>
    <method name="CTFontCollectionGetTypeID():CFTypeID"/>
    <method name="CTFontCollectionSetExclusionDescriptors(CTMutableFontCollectionRef;CFArrayRef):void"/>
    <method name="CTFontCollectionSetQueryDescriptors(CTMutableFontCollectionRef;CFArrayRef):void"/>
    <method name="CTFontCopyAttribute(CTFontRef;CFStringRef):CFTypeRef"/>
    <method name="CTFontCopyAvailableTables(CTFontRef;CTFontTableOptions):CFArrayRef"/>
    <method name="CTFontCopyCharacterSet(CTFontRef):CFCharacterSetRef"/>
    <method name="CTFontCopyDefaultCascadeListForLanguages(CTFontRef;CFArrayRef):CFArrayRef"/>
    <method name="CTFontCopyDisplayName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopyFamilyName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopyFeatureSettings(CTFontRef):CFArrayRef"/>
    <method name="CTFontCopyFeatures(CTFontRef):CFArrayRef"/>
    <method name="CTFontCopyFontDescriptor(CTFontRef):CTFontDescriptorRef"/>
    <method name="CTFontCopyFullName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopyGraphicsFont(CTFontRef;CTFontDescriptorRef*):CGFontRef"/>
    <method name="CTFontCopyLocalizedName(CTFontRef;CFStringRef;CFStringRef*):CFStringRef"/>
    <method name="CTFontCopyName(CTFontRef;CFStringRef):CFStringRef"/>
    <method name="CTFontCopyPostScriptName(CTFontRef):CFStringRef"/>
    <method name="CTFontCopySupportedLanguages(CTFontRef):CFArrayRef"/>
    <method name="CTFontCopyTable(CTFontRef;CTFontTableTag;CTFontTableOptions):CFDataRef"/>
    <method name="CTFontCopyTraits(CTFontRef):CFDictionaryRef"/>
    <method name="CTFontCopyVariation(CTFontRef):CFDictionaryRef"/>
    <method name="CTFontCopyVariationAxes(CTFontRef):CFArrayRef"/>
    <method name="CTFontCreateCopyWithAttributes(CTFontRef;CGFloat;const CGAffineTransform*;CTFontDescriptorRef):CTFontRef"/>
    <method name="CTFontCreateCopyWithFamily(CTFontRef;CGFloat;const CGAffineTransform*;CFStringRef):CTFontRef"/>
    <method name="CTFontCreateCopyWithSymbolicTraits(CTFontRef;CGFloat;const CGAffineTransform*;CTFontSymbolicTraits;CTFontSymbolicTraits):CTFontRef"/>
    <method name="CTFontCreateForString(CTFontRef;CFStringRef;CFRange):CTFontRef"/>
    <method name="CTFontCreatePathForGlyph(CTFontRef;CGGlyph;const CGAffineTransform*):CGPathRef"/>
    <method name="CTFontCreateUIFontForLanguage(CTFontUIFontType;CGFloat;CFStringRef):CTFontRef"/>
    <method name="CTFontCreateWithFontDescriptor(CTFontDescriptorRef;CGFloat;const CGAffineTransform*):CTFontRef"/>
    <method name="CTFontCreateWithFontDescriptorAndOptions(CTFontDescriptorRef;CGFloat;const CGAffineTransform*;CTFontOptions):CTFontRef"/>
    <method name="CTFontCreateWithGraphicsFont(CGFontRef;CGFloat;const CGAffineTransform*;CTFontDescriptorRef):CTFontRef"/>
    <method name="CTFontCreateWithName(CFStringRef;CGFloat;const CGAffineTransform*):CTFontRef"/>
    <method name="CTFontCreateWithNameAndOptions(CFStringRef;CGFloat;const CGAffineTransform*;CTFontOptions):CTFontRef"/>
    <method name="CTFontDescriptorCopyAttribute(CTFontDescriptorRef;CFStringRef):CFTypeRef"/>
    <method name="CTFontDescriptorCopyAttributes(CTFontDescriptorRef):CFDictionaryRef"/>
    <method name="CTFontDescriptorCopyLocalizedAttribute(CTFontDescriptorRef;CFStringRef;CFStringRef*):CFTypeRef"/>
    <method name="CTFontDescriptorCreateCopyWithAttributes(CTFontDescriptorRef;CFDictionaryRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateCopyWithFeature(CTFontDescriptorRef;CFNumberRef;CFNumberRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateCopyWithVariation(CTFontDescriptorRef;CFNumberRef;CGFloat):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef;CFSetRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateMatchingFontDescriptors(CTFontDescriptorRef;CFSetRef):CFArrayRef"/>
    <method name="CTFontDescriptorCreateWithAttributes(CFDictionaryRef):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorCreateWithNameAndSize(CFStringRef;CGFloat):CTFontDescriptorRef"/>
    <method name="CTFontDescriptorGetTypeID():CFTypeID"/>
    <method name="CTFontDescriptorMatchFontDescriptorsWithProgressHandler(CFArrayRef;CFSetRef;(^)(CTFontDescriptorMatchingState;CFDictionaryRef):_Bool):_Bool"/>
    <method name="CTFontDrawGlyphs(CTFontRef;const CGGlyph*;const CGPoint*;size_t;CGContextRef):void"/>
    <method name="CTFontGetAdvancesForGlyphs(CTFontRef;CTFontOrientation;const CGGlyph*;CGSize*;CFIndex):double"/>
    <method name="CTFontGetAscent(CTFontRef):CGFloat"/>
    <method name="CTFontGetBoundingBox(CTFontRef):CGRect"/>
    <method name="CTFontGetBoundingRectsForGlyphs(CTFontRef;CTFontOrientation;const CGGlyph*;CGRect*;CFIndex):CGRect"/>
    <method name="CTFontGetCapHeight(CTFontRef):CGFloat"/>
    <method name="CTFontGetDescent(CTFontRef):CGFloat"/>
    <method name="CTFontGetGlyphCount(CTFontRef):CFIndex"/>
    <method name="CTFontGetGlyphWithName(CTFontRef;CFStringRef):CGGlyph"/>
    <method name="CTFontGetGlyphsForCharacters(CTFontRef;const UniChar*;CGGlyph*;CFIndex):_Bool"/>
    <method name="CTFontGetLeading(CTFontRef):CGFloat"/>
    <method name="CTFontGetLigatureCaretPositions(CTFontRef;CGGlyph;CGFloat*;CFIndex):CFIndex"/>
    <method name="CTFontGetMatrix(CTFontRef):CGAffineTransform"/>
    <method name="CTFontGetOpticalBoundsForGlyphs(CTFontRef;const CGGlyph*;CGRect*;CFIndex;CFOptionFlags):CGRect"/>
    <method name="CTFontGetSize(CTFontRef):CGFloat"/>
    <method name="CTFontGetSlantAngle(CTFontRef):CGFloat"/>
    <method name="CTFontGetStringEncoding(CTFontRef):CFStringEncoding"/>
    <method name="CTFontGetSymbolicTraits(CTFontRef):CTFontSymbolicTraits"/>
    <method name="CTFontGetTypeID():CFTypeID"/>
    <method name="CTFontGetUnderlinePosition(CTFontRef):CGFloat"/>
    <method name="CTFontGetUnderlineThickness(CTFontRef):CGFloat"/>
    <method name="CTFontGetUnitsPerEm(CTFontRef):unsigned int"/>
    <method name="CTFontGetVerticalTranslationsForGlyphs(CTFontRef;const CGGlyph*;CGSize*;CFIndex):void"/>
    <method name="CTFontGetXHeight(CTFontRef):CGFloat"/>
    <method name="CTFontManagerCompareFontFamilyNames(const void*;const void*;void*):CFComparisonResult"/>
    <method name="CTFontManagerCopyAvailableFontFamilyNames():CFArrayRef"/>
    <method name="CTFontManagerCopyAvailableFontURLs():CFArrayRef"/>
    <method name="CTFontManagerCopyAvailablePostScriptNames():CFArrayRef"/>
    <method name="CTFontManagerCreateFontDescriptorFromData(CFDataRef):CTFontDescriptorRef"/>
    <method name="CTFontManagerCreateFontDescriptorsFromURL(CFURLRef):CFArrayRef"/>
    <method name="CTFontManagerCreateFontRequestRunLoopSource(CFIndex;(^)(CFDictionaryRef;pid_t):CFArrayRef):CFRunLoopSourceRef"/>
    <method name="CTFontManagerEnableFontDescriptors(CFArrayRef;_Bool):void"/>
    <method name="CTFontManagerGetAutoActivationSetting(CFStringRef):CTFontManagerAutoActivationSetting"/>
    <method name="CTFontManagerGetScopeForURL(CFURLRef):CTFontManagerScope"/>
    <method name="CTFontManagerIsSupportedFont(CFURLRef):_Bool"/>
    <method name="CTFontManagerRegisterFontsForURL(CFURLRef;CTFontManagerScope;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerRegisterFontsForURLs(CFArrayRef;CTFontManagerScope;CFArrayRef*):_Bool"/>
    <method name="CTFontManagerRegisterGraphicsFont(CFSetRef;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerRegisterGraphicsFont(CGFontRef;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerSetAutoActivationSetting(CFStringRef;CTFontManagerAutoActivationSetting):void"/>
    <method name="CTFontManagerUnregisterFontsForURL(CFURLRef;CTFontManagerScope;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerUnregisterFontsForURLs(CFArrayRef;CTFontManagerScope;CFArrayRef*):_Bool"/>
    <method name="CTFontManagerUnregisterGraphicsFont(CFSetRef;CFErrorRef*):_Bool"/>
    <method name="CTFontManagerUnregisterGraphicsFont(CGFontRef;CFErrorRef*):_Bool"/>
    <method name="CTFrameDraw(CTFrameRef;CGContextRef):void"/>
    <method name="CTFrameGetFrameAttributes(CTFrameRef):CFDictionaryRef"/>
    <method name="CTFrameGetLineOrigins(CTFrameRef;CFRange;CGPoint*):void"/>
    <method name="CTFrameGetLines(CTFrameRef):CFArrayRef"/>
    <method name="CTFrameGetPath(CTFrameRef):CGPathRef"/>
    <method name="CTFrameGetStringRange(CTFrameRef):CFRange"/>
    <method name="CTFrameGetTypeID():CFTypeID"/>
    <method name="CTFrameGetVisibleStringRange(CTFrameRef):CFRange"/>
    <method name="CTFramesetterCreateFrame(CTFramesetterRef;CFRange;CGPathRef;CFDictionaryRef):CTFrameRef"/>
    <method name="CTFramesetterCreateWithAttributedString(CFAttributedStringRef):CTFramesetterRef"/>
    <method name="CTFramesetterGetTypeID():CFTypeID"/>
    <method name="CTFramesetterGetTypesetter(CTFramesetterRef):CTTypesetterRef"/>
    <method name="CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef;CFRange;CFDictionaryRef;CGSize;CFRange*):CGSize"/>
    <method name="CTGetCoreTextVersion():uint32_t"/>
    <method name="CTGlyphInfoCreateWithCharacterIdentifier(CGFontIndex;CTCharacterCollection;CFStringRef):CTGlyphInfoRef"/>
    <method name="CTGlyphInfoCreateWithGlyph(CGGlyph;CTFontRef;CFStringRef):CTGlyphInfoRef"/>
    <method name="CTGlyphInfoCreateWithGlyphName(CFStringRef;CTFontRef;CFStringRef):CTGlyphInfoRef"/>
    <method name="CTGlyphInfoGetCharacterCollection(CTGlyphInfoRef):CTCharacterCollection"/>
    <method name="CTGlyphInfoGetCharacterIdentifier(CTGlyphInfoRef):CGFontIndex"/>
    <method name="CTGlyphInfoGetGlyphName(CTGlyphInfoRef):CFStringRef"/>
    <method name="CTGlyphInfoGetTypeID():CFTypeID"/>
    <method name="CTLineCreateJustifiedLine(CTLineRef;CGFloat;double):CTLineRef"/>
    <method name="CTLineCreateTruncatedLine(CTLineRef;double;CTLineTruncationType;CTLineRef):CTLineRef"/>
    <method name="CTLineCreateWithAttributedString(CFAttributedStringRef):CTLineRef"/>
    <method name="CTLineDraw(CTLineRef;CGContextRef):void"/>
    <method name="CTLineGetBoundsWithOptions(CTLineRef;CTLineBoundsOptions):CGRect"/>
    <method name="CTLineGetGlyphCount(CTLineRef):CFIndex"/>
    <method name="CTLineGetGlyphRuns(CTLineRef):CFArrayRef"/>
    <method name="CTLineGetImageBounds(CTLineRef;CGContextRef):CGRect"/>
    <method name="CTLineGetOffsetForStringIndex(CTLineRef;CFIndex;CGFloat*):CGFloat"/>
    <method name="CTLineGetPenOffsetForFlush(CTLineRef;CGFloat;double):double"/>
    <method name="CTLineGetStringIndexForPosition(CTLineRef;CGPoint):CFIndex"/>
    <method name="CTLineGetStringRange(CTLineRef):CFRange"/>
    <method name="CTLineGetTrailingWhitespaceWidth(CTLineRef):double"/>
    <method name="CTLineGetTypeID():CFTypeID"/>
    <method name="CTLineGetTypographicBounds(CTLineRef;CGFloat*;CGFloat*;CGFloat*):double"/>
    <method name="CTParagraphStyleCreate(const CTParagraphStyleSetting*;size_t):CTParagraphStyleRef"/>
    <method name="CTParagraphStyleCreateCopy(CTParagraphStyleRef):CTParagraphStyleRef"/>
    <method name="CTParagraphStyleGetTypeID():CFTypeID"/>
    <method name="CTParagraphStyleGetValueForSpecifier(CTParagraphStyleRef;CTParagraphStyleSpecifier;size_t;void*):_Bool"/>
    <method name="CTRunDraw(CTRunRef;CGContextRef;CFRange):void"/>
    <method name="CTRunGetAdvances(CTRunRef;CFRange;CGSize*):void"/>
    <method name="CTRunGetAdvancesPtr(CTRunRef):const CGSize*"/>
    <method name="CTRunGetAttributes(CTRunRef):CFDictionaryRef"/>
    <method name="CTRunGetGlyphCount(CTRunRef):CFIndex"/>
    <method name="CTRunGetGlyphs(CTRunRef;CFRange;CGGlyph*):void"/>
    <method name="CTRunGetGlyphsPtr(CTRunRef):const CGGlyph*"/>
    <method name="CTRunGetImageBounds(CTRunRef;CGContextRef;CFRange):CGRect"/>
    <method name="CTRunGetPositions(CTRunRef;CFRange;CGPoint*):void"/>
    <method name="CTRunGetPositionsPtr(CTRunRef):const CGPoint*"/>
    <method name="CTRunGetStatus(CTRunRef):CTRunStatus"/>
    <method name="CTRunGetStringIndices(CTRunRef;CFRange;CFIndex*):void"/>
    <method name="CTRunGetStringIndicesPtr(CTRunRef):const CFIndex*"/>
    <method name="CTRunGetStringRange(CTRunRef):CFRange"/>
    <method name="CTRunGetTextMatrix(CTRunRef):CGAffineTransform"/>
    <method name="CTRunGetTypeID():CFTypeID"/>
    <method name="CTRunGetTypographicBounds(CTRunRef;CFRange;CGFloat*;CGFloat*;CGFloat*):double"/>
    <method name="CTTextTabCreate(CTTextAlignment;double;CFDictionaryRef):CTTextTabRef"/>
    <method name="CTTextTabGetAlignment(CTTextTabRef):CTTextAlignment"/>
    <method name="CTTextTabGetLocation(CTTextTabRef):double"/>
    <method name="CTTextTabGetOptions(CTTextTabRef):CFDictionaryRef"/>
    <method name="CTTextTabGetTypeID():CFTypeID"/>
    <method name="CTTypesetterCreateLine(CTTypesetterRef;CFRange):CTLineRef"/>
    <method name="CTTypesetterCreateLineWithOffset(CTTypesetterRef;CFRange;double):CTLineRef"/>
    <method name="CTTypesetterCreateWithAttributedString(CFAttributedStringRef):CTTypesetterRef"/>
    <method name="CTTypesetterCreateWithAttributedStringAndOptions(CFAttributedStringRef;CFDictionaryRef):CTTypesetterRef"/>
    <method name="CTTypesetterGetTypeID():CFTypeID"/>
    <method name="CTTypesetterSuggestClusterBreak(CTTypesetterRef;CFIndex;double):CFIndex"/>
    <method name="CTTypesetterSuggestClusterBreakWithOffset(CTTypesetterRef;CFIndex;double;double):CFIndex"/>
    <method name="CTTypesetterSuggestLineBreak(CTTypesetterRef;CFIndex;double):CFIndex"/>
    <method name="CTTypesetterSuggestLineBreakWithOffset(CTTypesetterRef;CFIndex;double;double):CFIndex"/>
    <method name="CVBufferGetAttachment(CVBufferRef;CFStringRef;CVAttachmentMode*):CFTypeRef"/>
    <method name="CVBufferGetAttachments(CVBufferRef;CVAttachmentMode):CFDictionaryRef"/>
    <method name="CVBufferPropagateAttachments(CVBufferRef;CVBufferRef):void"/>
    <method name="CVBufferRelease(CVBufferRef):void"/>
    <method name="CVBufferRemoveAllAttachments(CVBufferRef):void"/>
    <method name="CVBufferRemoveAttachment(CVBufferRef;CFStringRef):void"/>
    <method name="CVBufferRetain(CVBufferRef):CVBufferRef"/>
    <method name="CVBufferSetAttachment(CVBufferRef;CFStringRef;CFTypeRef;CVAttachmentMode):void"/>
    <method name="CVBufferSetAttachments(CVBufferRef;CFDictionaryRef;CVAttachmentMode):void"/>
    <method name="CVGetCurrentHostTime():uint64_t"/>
    <method name="CVGetHostClockFrequency():double"/>
    <method name="CVGetHostClockMinimumTimeDelta():uint32_t"/>
    <method name="CVImageBufferGetCleanRect(CVImageBufferRef):CGRect"/>
    <method name="CVImageBufferGetDisplaySize(CVImageBufferRef):CGSize"/>
    <method name="CVImageBufferGetEncodedSize(CVImageBufferRef):CGSize"/>
    <method name="CVImageBufferIsFlipped(CVImageBufferRef):Boolean"/>
    <method name="CVOpenGLESTextureCacheCreate(CFAllocatorRef;CFDictionaryRef;EAGLContext*;CFDictionaryRef;CVOpenGLESTextureCacheRef*):CVReturn"/>
    <method name="CVOpenGLESTextureCacheCreateTextureFromImage(CFAllocatorRef;CVOpenGLESTextureCacheRef;CVImageBufferRef;CFDictionaryRef;GLenum;GLint;GLsizei;GLsizei;GLenum;GLenum;size_t;CVOpenGLESTextureRef*):CVReturn"/>
    <method name="CVOpenGLESTextureCacheFlush(CVOpenGLESTextureCacheRef;CVOptionFlags):void"/>
    <method name="CVOpenGLESTextureCacheGetTypeID():CFTypeID"/>
    <method name="CVOpenGLESTextureGetCleanTexCoords(CVOpenGLESTextureRef;GLfloat*;GLfloat*;GLfloat*;GLfloat*):void"/>
    <method name="CVOpenGLESTextureGetName(CVOpenGLESTextureRef):GLuint"/>
    <method name="CVOpenGLESTextureGetTarget(CVOpenGLESTextureRef):GLenum"/>
    <method name="CVOpenGLESTextureGetTypeID():CFTypeID"/>
    <method name="CVOpenGLESTextureIsFlipped(CVOpenGLESTextureRef):Boolean"/>
    <method name="CVPixelBufferCreate(CFAllocatorRef;size_t;size_t;OSType;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferCreateResolvedAttributesDictionary(CFAllocatorRef;CFArrayRef;CFDictionaryRef*):CVReturn"/>
    <method name="CVPixelBufferCreateWithBytes(CFAllocatorRef;size_t;size_t;OSType;void*;size_t;CVPixelBufferReleaseBytesCallback;void*;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef;size_t;size_t;OSType;void*;size_t;size_t;void**;size_t*;size_t*;size_t*;CVPixelBufferReleasePlanarBytesCallback;void*;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferFillExtendedPixels(CVPixelBufferRef):CVReturn"/>
    <method name="CVPixelBufferGetBaseAddress(CVPixelBufferRef):void*"/>
    <method name="CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef;size_t):void*"/>
    <method name="CVPixelBufferGetBytesPerRow(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef;size_t):size_t"/>
    <method name="CVPixelBufferGetDataSize(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetExtendedPixels(CVPixelBufferRef;size_t*;size_t*;size_t*;size_t*):void"/>
    <method name="CVPixelBufferGetHeight(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetHeightOfPlane(CVPixelBufferRef;size_t):size_t"/>
    <method name="CVPixelBufferGetPixelFormatType(CVPixelBufferRef):OSType"/>
    <method name="CVPixelBufferGetPlaneCount(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetTypeID():CFTypeID"/>
    <method name="CVPixelBufferGetWidth(CVPixelBufferRef):size_t"/>
    <method name="CVPixelBufferGetWidthOfPlane(CVPixelBufferRef;size_t):size_t"/>
    <method name="CVPixelBufferIsPlanar(CVPixelBufferRef):Boolean"/>
    <method name="CVPixelBufferLockBaseAddress(CVPixelBufferRef;CVOptionFlags):CVReturn"/>
    <method name="CVPixelBufferPoolCreate(CFAllocatorRef;CFDictionaryRef;CFDictionaryRef;CVPixelBufferPoolRef*):CVReturn"/>
    <method name="CVPixelBufferPoolCreatePixelBuffer(CFAllocatorRef;CVPixelBufferPoolRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferPoolCreatePixelBufferWithAuxAttributes(CFAllocatorRef;CVPixelBufferPoolRef;CFDictionaryRef;CVPixelBufferRef*):CVReturn"/>
    <method name="CVPixelBufferPoolGetAttributes(CVPixelBufferPoolRef):CFDictionaryRef"/>
    <method name="CVPixelBufferPoolGetPixelBufferAttributes(CVPixelBufferPoolRef):CFDictionaryRef"/>
    <method name="CVPixelBufferPoolGetTypeID():CFTypeID"/>
    <method name="CVPixelBufferPoolRelease(CVPixelBufferPoolRef):void"/>
    <method name="CVPixelBufferPoolRetain(CVPixelBufferPoolRef):CVPixelBufferPoolRef"/>
    <method name="CVPixelBufferRelease(CVPixelBufferRef):void"/>
    <method name="CVPixelBufferRetain(CVPixelBufferRef):CVPixelBufferRef"/>
    <method name="CVPixelBufferUnlockBaseAddress(CVPixelBufferRef;CVOptionFlags):CVReturn"/>
    <method name="CVPixelFormatDescriptionArrayCreateWithAllPixelFormatTypes(CFAllocatorRef):CFArrayRef"/>
    <method name="CVPixelFormatDescriptionCreateWithPixelFormatType(CFAllocatorRef;OSType):CFDictionaryRef"/>
    <method name="CVPixelFormatDescriptionRegisterDescriptionWithPixelFormatType(CFDictionaryRef;OSType):void"/>
    <method name="CertAddCRLContextToStore(HCERTSTORE;PCCRL_CONTEXT;DWORD;PCCRL_CONTEXT*):BOOL"/>
    <method name="CertAddCTLContextToStore(HCERTSTORE;PCCTL_CONTEXT;DWORD;PCCTL_CONTEXT*):BOOL"/>
    <method name="CertAddCTLLinkToStore(HCERTSTORE;PCCTL_CONTEXT;DWORD;PCCTL_CONTEXT*):BOOL"/>
    <method name="CertAddCertificateContextToStore(HCERTSTORE;PCCERT_CONTEXT;DWORD;PCCERT_CONTEXT*):BOOL"/>
    <method name="CertAddCertificateLinkToStore(HCERTSTORE;PCCERT_CONTEXT;DWORD;PCCERT_CONTEXT*):BOOL"/>
    <method name="CertAddEncodedCertificateToStore(HCERTSTORE;DWORD;const BYTE*;DWORD;DWORD;PCCERT_CONTEXT*):BOOL"/>
    <method name="CertAddEnhancedKeyUsageIdentifier(PCCERT_CONTEXT;LPCSTR):BOOL"/>
    <method name="CertAddSerializedElementToStore(HCERTSTORE;const BYTE*;DWORD;DWORD;DWORD;DWORD;DWORD*;constvoid**):BOOL"/>
    <method name="CertAddStoreToCollection(HCERTSTORE;HCERTSTORE;DWORD;DWORD):BOOL"/>
    <method name="CertAlgIdToOID(DWORD):LPCSTR"/>
    <method name="CertCloseStore(HCERTSTORE;DWORD):BOOL"/>
    <method name="CertCompareCertificate(DWORD;PCERT_INFO;PCERT_INFO):BOOL"/>
    <method name="CertCompareCertificateName(DWORD;PCERT_NAME_BLOB;PCERT_NAME_BLOB):BOOL"/>
    <method name="CertCompareIntegerBlob(PCRYPT_INTEGER_BLOB;PCRYPT_INTEGER_BLOB):BOOL"/>
    <method name="CertComparePublicKeyInfo(DWORD;PCERT_PUBLIC_KEY_INFO;PCERT_PUBLIC_KEY_INFO):BOOL"/>
    <method name="CertControlStore(HCERTSTORE;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertCreateCRLContext(DWORD;const BYTE*;DWORD):PCCRL_CONTEXT"/>
    <method name="CertCreateCTLContext(DWORD;const BYTE*;DWORD):PCCTL_CONTEXT"/>
    <method name="CertCreateCTLEntryFromCertificateContextProperties(PCCERT_CONTEXT;DWORD;PCRYPT_ATTRIBUTE;DWORD;void*;PCTL_ENTRY;DWORD*):BOOL"/>
    <method name="CertCreateCertificateChainEngine(PCERT_CHAIN_ENGINE_CONFIG;HCERTCHAINENGINE*):BOOL"/>
    <method name="CertCreateCertificateContext(DWORD;const BYTE*;DWORD):PCCERT_CONTEXT"/>
    <method name="CertCreateContext(DWORD;DWORD;const BYTE*;DWORD;DWORD;PCERT_CREATE_CONTEXT_PARA):constvoid*"/>
    <method name="CertCreateSelfSignCertificate(HCRYPTPROV;PCERT_NAME_BLOB;DWORD;PCRYPT_KEY_PROV_INFO;PCRYPT_ALGORITHM_IDENTIFIER;PSYSTEMTIME;PSYSTEMTIME;PCERT_EXTENSIONS):PCCERT_CONTEXT"/>
    <method name="CertDeleteCRLFromStore(PCCRL_CONTEXT):BOOL"/>
    <method name="CertDeleteCTLFromStore(PCCTL_CONTEXT):BOOL"/>
    <method name="CertDeleteCertificateFromStore(PCCERT_CONTEXT):BOOL"/>
    <method name="CertDuplicateCRLContext(PCCRL_CONTEXT):PCCRL_CONTEXT"/>
    <method name="CertDuplicateCTLContext(PCCTL_CONTEXT):PCCTL_CONTEXT"/>
    <method name="CertDuplicateCertificateChain(PCCERT_CHAIN_CONTEXT):PCCERT_CHAIN_CONTEXT"/>
    <method name="CertDuplicateCertificateContext(PCCERT_CONTEXT):PCCERT_CONTEXT"/>
    <method name="CertDuplicateStore(HCERTSTORE):HCERTSTORE"/>
    <method name="CertEnumCRLContextProperties(PCCRL_CONTEXT;DWORD):DWORD"/>
    <method name="CertEnumCRLsInStore(HCERTSTORE;PCCRL_CONTEXT):PCCRL_CONTEXT"/>
    <method name="CertEnumCTLContextProperties(PCCTL_CONTEXT;DWORD):DWORD"/>
    <method name="CertEnumCTLsInStore(HCERTSTORE;PCCTL_CONTEXT):PCCTL_CONTEXT"/>
    <method name="CertEnumCertificateContextProperties(PCCERT_CONTEXT;DWORD):DWORD"/>
    <method name="CertEnumPhysicalStore(const void*;DWORD;void*;PFN_CERT_ENUM_PHYSICAL_STORE):BOOL"/>
    <method name="CertEnumSubjectInSortedCTL(PCCTL_CONTEXT;void**;PCRYPT_DER_BLOB;PCRYPT_DER_BLOB):BOOL"/>
    <method name="CertEnumSystemStore(DWORD;void*;void*;PFN_CERT_ENUM_SYSTEM_STORE):BOOL"/>
    <method name="CertEnumSystemStoreLocation(DWORD;void*;PFN_CERT_ENUM_SYSTEM_STORE_LOCATION):BOOL"/>
    <method name="CertFindAttribute(LPCSTR;DWORD;CRYPT_ATTRIBUTE*):PCRYPT_ATTRIBUTE"/>
    <method name="CertFindCRLInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCRL_CONTEXT):PCCRL_CONTEXT"/>
    <method name="CertFindCTLInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCTL_CONTEXT):PCCTL_CONTEXT"/>
    <method name="CertFindCertificateInCRL(PCCERT_CONTEXT;PCCRL_CONTEXT;DWORD;void*;PCRL_ENTRY*):BOOL"/>
    <method name="CertFindCertificateInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCERT_CONTEXT):PCCERT_CONTEXT"/>
    <method name="CertFindChainInStore(HCERTSTORE;DWORD;DWORD;DWORD;const void*;PCCERT_CHAIN_CONTEXT):PCCERT_CHAIN_CONTEXT"/>
    <method name="CertFindExtension(LPCSTR;DWORD;CERT_EXTENSION*):PCERT_EXTENSION"/>
    <method name="CertFindRDNAttr(LPCSTR;PCERT_NAME_INFO):PCERT_RDN_ATTR"/>
    <method name="CertFindSubjectInCTL(DWORD;DWORD;void*;PCCTL_CONTEXT;DWORD):PCTL_ENTRY"/>
    <method name="CertFindSubjectInSortedCTL(PCRYPT_DATA_BLOB;PCCTL_CONTEXT;DWORD;void*;PCRYPT_DER_BLOB):BOOL"/>
    <method name="CertFreeCRLContext(PCCRL_CONTEXT):BOOL"/>
    <method name="CertFreeCTLContext(PCCTL_CONTEXT):BOOL"/>
    <method name="CertFreeCertificateChain(PCCERT_CHAIN_CONTEXT):void"/>
    <method name="CertFreeCertificateChainEngine(HCERTCHAINENGINE):void"/>
    <method name="CertFreeCertificateContext(PCCERT_CONTEXT):BOOL"/>
    <method name="CertGetCRLContextProperty(PCCRL_CONTEXT;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetCRLFromStore(HCERTSTORE;PCCERT_CONTEXT;PCCRL_CONTEXT;DWORD*):PCCRL_CONTEXT"/>
    <method name="CertGetCTLContextProperty(PCCTL_CONTEXT;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetCertificateChain(HCERTCHAINENGINE;PCCERT_CONTEXT;LPFILETIME;HCERTSTORE;PCERT_CHAIN_PARA;DWORD;LPVOID;PCCERT_CHAIN_CONTEXT*):BOOL"/>
    <method name="CertGetCertificateContextProperty(PCCERT_CONTEXT;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetEnhancedKeyUsage(PCCERT_CONTEXT;DWORD;PCERT_ENHKEY_USAGE;DWORD*):BOOL"/>
    <method name="CertGetIntendedKeyUsage(DWORD;PCERT_INFO;BYTE*;DWORD):BOOL"/>
    <method name="CertGetIssuerCertificateFromStore(HCERTSTORE;PCCERT_CONTEXT;PCCERT_CONTEXT;DWORD*):PCCERT_CONTEXT"/>
    <method name="CertGetNameStringA(PCCERT_CONTEXT;DWORD;DWORD;void*;LPSTR;DWORD):DWORD"/>
    <method name="CertGetNameStringW(PCCERT_CONTEXT;DWORD;DWORD;void*;LPWSTR;DWORD):DWORD"/>
    <method name="CertGetPublicKeyLength(DWORD;PCERT_PUBLIC_KEY_INFO):DWORD"/>
    <method name="CertGetStoreProperty(HCERTSTORE;DWORD;void*;DWORD*):BOOL"/>
    <method name="CertGetSubjectCertificateFromStore(HCERTSTORE;DWORD;PCERT_INFO):PCCERT_CONTEXT"/>
    <method name="CertGetValidUsages(DWORD;PCCERT_CONTEXT*;int*;LPSTR*;DWORD*):BOOL"/>
    <method name="CertIsRDNAttrsInCertificateName(DWORD;DWORD;PCERT_NAME_BLOB;PCERT_RDN):BOOL"/>
    <method name="CertIsValidCRLForCertificate(PCCERT_CONTEXT;PCCRL_CONTEXT;DWORD;void*):BOOL"/>
    <method name="CertNameToStrA(DWORD;PCERT_NAME_BLOB;DWORD;LPSTR;DWORD):DWORD"/>
    <method name="CertNameToStrW(DWORD;PCERT_NAME_BLOB;DWORD;LPWSTR;DWORD):DWORD"/>
    <method name="CertOIDToAlgId(LPCSTR):DWORD"/>
    <method name="CertOpenStore(LPCSTR;DWORD;HCRYPTPROV;DWORD;const void*):HCERTSTORE"/>
    <method name="CertOpenSystemStoreA(HCRYPTPROV;LPCSTR):HCERTSTORE"/>
    <method name="CertOpenSystemStoreW(HCRYPTPROV;LPCWSTR):HCERTSTORE"/>
    <method name="CertRDNValueToStrA(DWORD;PCERT_RDN_VALUE_BLOB;LPSTR;DWORD):DWORD"/>
    <method name="CertRDNValueToStrW(DWORD;PCERT_RDN_VALUE_BLOB;LPWSTR;DWORD):DWORD"/>
    <method name="CertRegisterPhysicalStore(const void*;DWORD;LPCWSTR;PCERT_PHYSICAL_STORE_INFO;void*):BOOL"/>
    <method name="CertRegisterSystemStore(const void*;DWORD;PCERT_SYSTEM_STORE_INFO;void*):BOOL"/>
    <method name="CertRemoveEnhancedKeyUsageIdentifier(PCCERT_CONTEXT;LPCSTR):BOOL"/>
    <method name="CertRemoveStoreFromCollection(HCERTSTORE;HCERTSTORE):void"/>
    <method name="CertSaveStore(HCERTSTORE;DWORD;DWORD;DWORD;void*;DWORD):BOOL"/>
    <method name="CertSerializeCRLStoreElement(PCCRL_CONTEXT;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CertSerializeCTLStoreElement(PCCTL_CONTEXT;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CertSerializeCertificateStoreElement(PCCERT_CONTEXT;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CertSetCRLContextProperty(PCCRL_CONTEXT;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSetCTLContextProperty(PCCTL_CONTEXT;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSetCertificateContextPropertiesFromCTLEntry(PCCERT_CONTEXT;PCTL_ENTRY;DWORD):BOOL"/>
    <method name="CertSetCertificateContextProperty(PCCERT_CONTEXT;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSetEnhancedKeyUsage(PCCERT_CONTEXT;PCERT_ENHKEY_USAGE):BOOL"/>
    <method name="CertSetStoreProperty(HCERTSTORE;DWORD;DWORD;const void*):BOOL"/>
    <method name="CertSrvBackupClose(HCSBC):HRESULT"/>
    <method name="CertSrvBackupEnd(HCSBC):HRESULT"/>
    <method name="CertSrvBackupRead(HCSBC;void*;DWORD;DWORD*):HRESULT"/>
    <method name="CertSrvBackupTruncateLogs(HCSBC):HRESULT"/>
    <method name="CertSrvRestoreEnd(HCSBC):HRESULT"/>
    <method name="CertSrvRestoreRegisterComplete(HCSBC;HRESULT):HRESULT"/>
    <method name="CertSrvRestoreRegisterThroughFile(HCSBC;const WCHAR*;const WCHAR*;CSEDB_RSTMAPW*;LONG;constWCHAR*;ULONG;ULONG):HRESULT"/>
    <method name="CertStrToNameA(DWORD;LPCSTR;DWORD;void*;BYTE*;DWORD*;LPCSTR*):BOOL"/>
    <method name="CertStrToNameW(DWORD;LPCWSTR;DWORD;void*;BYTE*;DWORD*;LPCWSTR*):BOOL"/>
    <method name="CertUnregisterPhysicalStore(const void*;DWORD;LPCWSTR):BOOL"/>
    <method name="CertUnregisterSystemStore(const void*;DWORD):BOOL"/>
    <method name="CertVerifyCRLRevocation(DWORD;PCERT_INFO;DWORD;PCRL_INFO*):BOOL"/>
    <method name="CertVerifyCRLTimeValidity(LPFILETIME;PCRL_INFO):LONG"/>
    <method name="CertVerifyCTLUsage(DWORD;DWORD;void*;PCTL_USAGE;DWORD;PCTL_VERIFY_USAGE_PARA;PCTL_VERIFY_USAGE_STATUS):BOOL"/>
    <method name="CertVerifyCertificateChainPolicy(LPCSTR;PCCERT_CHAIN_CONTEXT;PCERT_CHAIN_POLICY_PARA;PCERT_CHAIN_POLICY_STATUS):BOOL"/>
    <method name="CertVerifyRevocation(DWORD;DWORD;DWORD;PVOID*;DWORD;PCERT_REVOCATION_PARA;PCERT_REVOCATION_STATUS):BOOL"/>
    <method name="CertVerifySubjectCertificateContext(PCCERT_CONTEXT;PCCERT_CONTEXT;DWORD*):BOOL"/>
    <method name="CertVerifyTimeValidity(LPFILETIME;PCERT_INFO):LONG"/>
    <method name="CertVerifyValidityNesting(PCERT_INFO;PCERT_INFO):BOOL"/>
    <method name="CoImpersonateClient():HRESULT"/>
    <method name="CopyFile(LPCTSTR; LPCTSTR; BOOL): BOOL"/>
    <method name="CopyMemory(void *; const void *; size_t): void"/>
    <method name="CoreEndianFlipData(OSType;OSType;SInt16;void*;ByteCount;Boolean):OSStatus"/>
    <method name="CoreEndianGetFlipper(OSType;OSType;CoreEndianFlipProc*;void**):OSStatus"/>
    <method name="CoreEndianInstallFlipper(OSType;OSType;CoreEndianFlipProc;void*):OSStatus"/>
    <method name="CreateDirectory(LPCTSTR; LPSECURITY_ATTRIBUTES): BOOL"/>
    <method name="CreateDirectoryA(LPCSTR;LPSECURITY_ATTRIBUTES):BOOL"/>
    <method name="CreateDirectoryW(LPCWSTR;LPSECURITY_ATTRIBUTES):BOOL"/>
    <method name="CreateEvent(LPSECURITY_ATTRIBUTES; BOOL; BOOL; LPCSTR): HANDLE"/>
    <method name="CreateEventA(LPSECURITY_ATTRIBUTES;BOOL;BOOL;LPCSTR):HANDLE"/>
    <method name="CreateEventW(LPSECURITY_ATTRIBUTES;BOOL;BOOL;LPCWSTR):HANDLE"/>
    <method name="CreateFile(LPCTSTR; Double Word; Double Word; LPSECURITY_ATTRIBUTES; Double Word; Double Word; HANDLE): HANDLE"/>
    <method name="CreateFileA(LPCSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES;DWORD;DWORD;HANDLE):HANDLE"/>
    <method name="CreateFileMapping(HANDLE; LPSECURITY_ATTRIBUTES; Double Word; Double Word; Double Word; LPCTSTR): HANDLE"/>
    <method name="CreateFileMappingA(HANDLE;LPSECURITY_ATTRIBUTES;DWORD;DWORD;DWORD;LPCSTR):HANDLE"/>
    <method name="CreateFileMappingW(HANDLE;LPSECURITY_ATTRIBUTES;DWORD;DWORD;DWORD;LPCWSTR):HANDLE"/>
    <method name="CreateFileW(LPCWSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES;DWORD;DWORD;HANDLE):HANDLE"/>
    <method name="CreateHardLink(LPCTSTR; LPCTSTR; LPSECURITY_ATTRIBUTES): BOOL"/>
    <method name="CreateJobObject(LPSECURITY_ATTRIBUTES; LPCSTR): HANDLE"/>
    <method name="CreateJobObjectA(LPSECURITY_ATTRIBUTES;LPCSTR):HANDLE"/>
    <method name="CreateJobObjectW(LPSECURITY_ATTRIBUTES;LPCWSTR):HANDLE"/>
    <method name="CreateMailslot(LPCSTR; Double Word; Double Word; LPSECURITY_ATTRIBUTES): HANDLE"/>
    <method name="CreateMailslotA(LPCSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateMailslotW(LPCWSTR;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateMutex(LPSECURITY_ATTRIBUTES; BOOL; LPCTSTR): HANDLE"/>
    <method name="CreateMutexA(LPSECURITY_ATTRIBUTES;BOOL;LPCSTR):HANDLE"/>
    <method name="CreateMutexW(LPSECURITY_ATTRIBUTES;BOOL;LPCWSTR):HANDLE"/>
    <method name="CreateNamedPipe(LPCTSTR; Double Word; Double Word; Double Word; Double Word; Double Word; Double Word; LPSECURITY_ATTRIBUTES): HANDLE"/>
    <method name="CreateNamedPipeA(LPCSTR;DWORD;DWORD;DWORD;DWORD;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateNamedPipeW(LPCWSTR;DWORD;DWORD;DWORD;DWORD;DWORD;DWORD;LPSECURITY_ATTRIBUTES):HANDLE"/>
    <method name="CreateProcess(LPCTSTR; LPTSTR; LPSECURITY_ATTRIBUTES; LPSECURITY_ATTRIBUTES; BOOL; Double Word; LPVOID; LPCTSTR; LPSTARTUPINFO; LPPROCESS_INFORMATION): BOOL"/>
    <method name="CreateProcessA(LPCSTR;LPSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCSTR;LPSTARTUPINFOA;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessAsUser(HANDLE; LPCTSTR; LPTSTR; LPSECURITY_ATTRIBUTES; LPSECURITY_ATTRIBUTES; BOOL; Double Word; LPVOID; LPCTSTR; LPSTARTUPINFO; LPPROCESS_INFORMATION): BOOL"/>
    <method name="CreateProcessAsUserA(HANDLE;LPCSTR;LPSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCSTR;LPSTARTUPINFOA;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessAsUserW(HANDLE;LPCWSTR;LPWSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCWSTR;LPSTARTUPINFOW;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessW(LPCWSTR;LPWSTR;LPSECURITY_ATTRIBUTES;LPSECURITY_ATTRIBUTES;BOOL;DWORD;LPVOID;LPCWSTR;LPSTARTUPINFOW;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateProcessWithLogonW(LPCWSTR;LPCWSTR;LPCWSTR;DWORD;LPCWSTR;LPWSTR;DWORD;LPVOID;LPCWSTR;LPSTARTUPINFOW;LPPROCESS_INFORMATION):BOOL"/>
    <method name="CreateSemaphore(LPSECURITY_ATTRIBUTES; LONG; LONG; LPCTSTR): HANDLE"/>
    <method name="CreateSemaphoreA(LPSECURITY_ATTRIBUTES;LONG;LONG;LPCSTR):HANDLE"/>
    <method name="CreateSemaphoreW(LPSECURITY_ATTRIBUTES;LONG;LONG;LPCWSTR):HANDLE"/>
    <method name="CreateWaitableTimer(LPSECURITY_ATTRIBUTES; BOOL; LPCTSTR): HANDLE"/>
    <method name="CreateWaitableTimerA(LPSECURITY_ATTRIBUTES;BOOL;LPCSTR):HANDLE"/>
    <method name="CreateWaitableTimerW(LPSECURITY_ATTRIBUTES;BOOL;LPCWSTR):HANDLE"/>
    <method name="CryptAcquireCertificatePrivateKey(PCCERT_CONTEXT;DWORD;void*;HCRYPTPROV*;DWORD*;BOOL*):BOOL"/>
    <method name="CryptAcquireContextA(HCRYPTPROV*;LPCSTR;LPCSTR;DWORD;DWORD):BOOL"/>
    <method name="CryptAcquireContextW(HCRYPTPROV*;LPCWSTR;LPCWSTR;DWORD;DWORD):BOOL"/>
    <method name="CryptBinaryToStringA(const BYTE*;DWORD;DWORD;LPSTR;DWORD*):BOOL"/>
    <method name="CryptBinaryToStringW(const BYTE*;DWORD;DWORD;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptContextAddRef(HCRYPTPROV;DWORD*;DWORD):BOOL"/>
    <method name="CryptCreateHash(HCRYPTPROV;ALG_ID;HCRYPTKEY;DWORD;HCRYPTHASH*):BOOL"/>
    <method name="CryptCreateKeyIdentifierFromCSP(DWORD;LPCSTR;const PUBLICKEYSTRUC*;DWORD;DWORD;void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptDecodeMessage(DWORD;PCRYPT_DECRYPT_MESSAGE_PARA;PCRYPT_VERIFY_MESSAGE_PARA;DWORD;constBYTE*;DWORD;DWORD;DWORD*;DWORD*;BYTE*;DWORD*;PCCERT_CONTEXT*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptDecodeObject(DWORD;LPCSTR;const BYTE*;DWORD;DWORD;void*;DWORD*):BOOL"/>
    <method name="CryptDecodeObjectEx(DWORD;LPCSTR;const BYTE*;DWORD;DWORD;PCRYPT_DECODE_PARA;void*;DWORD*):BOOL"/>
    <method name="CryptDecrypt(HCRYPTKEY;HCRYPTHASH;BOOL;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptDecryptAndVerifyMessageSignature(PCRYPT_DECRYPT_MESSAGE_PARA;PCRYPT_VERIFY_MESSAGE_PARA;DWORD;constBYTE*;DWORD;BYTE*;DWORD*;PCCERT_CONTEXT*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptDecryptMessage(PCRYPT_DECRYPT_MESSAGE_PARA;const BYTE*;DWORD;BYTE*;DWORD*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptDeriveKey(HCRYPTPROV;ALG_ID;HCRYPTHASH;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptDestroyHash(HCRYPTHASH):BOOL"/>
    <method name="CryptDestroyKey(HCRYPTKEY):BOOL"/>
    <method name="CryptDuplicateHash(HCRYPTHASH;DWORD*;DWORD;HCRYPTHASH*):BOOL"/>
    <method name="CryptDuplicateKey(HCRYPTKEY;DWORD*;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptEncodeObject(DWORD;LPCSTR;const void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptEncodeObjectEx(DWORD;LPCSTR;const void*;DWORD;PCRYPT_ENCODE_PARA;void*;DWORD*):BOOL"/>
    <method name="CryptEncrypt(HCRYPTKEY;HCRYPTHASH;BOOL;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptEncryptMessage(PCRYPT_ENCRYPT_MESSAGE_PARA;DWORD;PCCERT_CONTEXT*;constBYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptEnumKeyIdentifierProperties(const CRYPT_HASH_BLOB*;DWORD;DWORD;LPCWSTR;void*;void*;PFN_CRYPT_ENUM_KEYID_PROP):BOOL"/>
    <method name="CryptEnumOIDFunction(DWORD;LPCSTR;LPCSTR;DWORD;void*;PFN_CRYPT_ENUM_OID_FUNC):BOOL"/>
    <method name="CryptEnumOIDInfo(DWORD;DWORD;void*;PFN_CRYPT_ENUM_OID_INFO):BOOL"/>
    <method name="CryptEnumProviderTypesA(DWORD;DWORD*;DWORD;DWORD*;LPSTR;DWORD*):BOOL"/>
    <method name="CryptEnumProviderTypesW(DWORD;DWORD*;DWORD;DWORD*;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptEnumProvidersA(DWORD;DWORD*;DWORD;DWORD*;LPSTR;DWORD*):BOOL"/>
    <method name="CryptEnumProvidersW(DWORD;DWORD*;DWORD;DWORD*;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptExportKey(HCRYPTKEY;HCRYPTKEY;DWORD;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptExportPKCS8(HCRYPTPROV;DWORD;LPSTR;DWORD;void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptExportPKCS8Ex(CRYPT_PKCS8_EXPORT_PARAMS*;DWORD;void*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptExportPublicKeyInfo(HCRYPTPROV;DWORD;DWORD;PCERT_PUBLIC_KEY_INFO;DWORD*):BOOL"/>
    <method name="CryptExportPublicKeyInfoEx(HCRYPTPROV;DWORD;DWORD;LPSTR;DWORD;void*;PCERT_PUBLIC_KEY_INFO;DWORD*):BOOL"/>
    <method name="CryptFindCertificateKeyProvInfo(PCCERT_CONTEXT;DWORD;void*):BOOL"/>
    <method name="CryptFindLocalizedName(LPCWSTR):LPCWSTR"/>
    <method name="CryptFindOIDInfo(DWORD;void*;DWORD):PCCRYPT_OID_INFO"/>
    <method name="CryptFormatObject(DWORD;DWORD;DWORD;void*;LPCSTR;const BYTE*;DWORD;void*;DWORD*):BOOL"/>
    <method name="CryptFreeOIDFunctionAddress(HCRYPTOIDFUNCADDR;DWORD):BOOL"/>
    <method name="CryptGenKey(HCRYPTPROV;ALG_ID;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptGenRandom(HCRYPTPROV;DWORD;BYTE*):BOOL"/>
    <method name="CryptGetDefaultOIDDllList(HCRYPTOIDFUNCSET;DWORD;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptGetDefaultOIDFunctionAddress(HCRYPTOIDFUNCSET;DWORD;LPCWSTR;DWORD;void**;HCRYPTOIDFUNCADDR*):BOOL"/>
    <method name="CryptGetDefaultProviderA(DWORD;DWORD*;DWORD;LPSTR;DWORD*):BOOL"/>
    <method name="CryptGetDefaultProviderW(DWORD;DWORD*;DWORD;LPWSTR;DWORD*):BOOL"/>
    <method name="CryptGetHashParam(HCRYPTHASH;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptGetKeyIdentifierProperty(const CRYPT_HASH_BLOB*;DWORD;DWORD;LPCWSTR;void*;void*;DWORD*):BOOL"/>
    <method name="CryptGetKeyParam(HCRYPTKEY;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptGetMessageCertificates(DWORD;HCRYPTPROV;DWORD;const BYTE*;DWORD):HCERTSTORE"/>
    <method name="CryptGetMessageSignerCount(DWORD;const BYTE*;DWORD):LONG"/>
    <method name="CryptGetOIDFunctionAddress(HCRYPTOIDFUNCSET;DWORD;LPCSTR;DWORD;void**;HCRYPTOIDFUNCADDR*):BOOL"/>
    <method name="CryptGetOIDFunctionValue(DWORD;LPCSTR;LPCSTR;LPCWSTR;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptGetObjectUrl(LPCSTR;LPVOID;DWORD;PCRYPT_URL_ARRAY;DWORD*;PCRYPT_URL_INFO;DWORD*;LPVOID):BOOL"/>
    <method name="CryptGetProvParam(HCRYPTPROV;DWORD;BYTE*;DWORD*;DWORD):BOOL"/>
    <method name="CryptGetUserKey(HCRYPTPROV;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptHashCertificate(HCRYPTPROV;ALG_ID;DWORD;const BYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptHashData(HCRYPTHASH;const BYTE*;DWORD;DWORD):BOOL"/>
    <method name="CryptHashMessage(PCRYPT_HASH_MESSAGE_PARA;BOOL;DWORD;const BYTE**;DWORD*;BYTE*;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptHashPublicKeyInfo(HCRYPTPROV;ALG_ID;DWORD;DWORD;PCERT_PUBLIC_KEY_INFO;BYTE*;DWORD*):BOOL"/>
    <method name="CryptHashSessionKey(HCRYPTHASH;HCRYPTKEY;DWORD):BOOL"/>
    <method name="CryptHashToBeSigned(HCRYPTPROV;DWORD;const BYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptImportKey(HCRYPTPROV;const BYTE*;DWORD;HCRYPTKEY;DWORD;HCRYPTKEY*):BOOL"/>
    <method name="CryptImportPKCS8(CRYPT_PKCS8_IMPORT_PARAMS;DWORD;HCRYPTPROV*;void*):BOOL"/>
    <method name="CryptImportPublicKeyInfo(HCRYPTPROV;DWORD;PCERT_PUBLIC_KEY_INFO;HCRYPTKEY*):BOOL"/>
    <method name="CryptImportPublicKeyInfoEx(HCRYPTPROV;DWORD;PCERT_PUBLIC_KEY_INFO;ALG_ID;DWORD;void*;HCRYPTKEY*):BOOL"/>
    <method name="CryptInitOIDFunctionSet(LPCSTR;DWORD):HCRYPTOIDFUNCSET"/>
    <method name="CryptInstallDefaultContext(HCRYPTPROV;DWORD;const void*;DWORD;void*;HCRYPTDEFAULTCONTEXT*):BOOL"/>
    <method name="CryptInstallOIDFunctionAddress(HMODULE;DWORD;LPCSTR;DWORD;const CRYPT_OID_FUNC_ENTRY*;DWORD):BOOL"/>
    <method name="CryptMemFree(LPVOID):void"/>
    <method name="CryptMsgCalculateEncodedLength(DWORD;DWORD;DWORD;const void*;LPSTR;DWORD):DWORD"/>
    <method name="CryptMsgClose(HCRYPTMSG):BOOL"/>
    <method name="CryptMsgControl(HCRYPTMSG;DWORD;DWORD;const void*):BOOL"/>
    <method name="CryptMsgCountersign(HCRYPTMSG;DWORD;DWORD;PCMSG_SIGNER_ENCODE_INFO):BOOL"/>
    <method name="CryptMsgCountersignEncoded(DWORD;PBYTE;DWORD;DWORD;PCMSG_SIGNER_ENCODE_INFO;PBYTE;PDWORD):BOOL"/>
    <method name="CryptMsgDuplicate(HCRYPTMSG):HCRYPTMSG"/>
    <method name="CryptMsgEncodeAndSignCTL(DWORD;PCTL_INFO;PCMSG_SIGNED_ENCODE_INFO;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptMsgGetAndVerifySigner(HCRYPTMSG;DWORD;HCERTSTORE*;DWORD;PCCERT_CONTEXT*;DWORD*):BOOL"/>
    <method name="CryptMsgGetParam(HCRYPTMSG;DWORD;DWORD;void*;DWORD*):BOOL"/>
    <method name="CryptMsgOpenToDecode(DWORD;DWORD;DWORD;HCRYPTPROV;PCERT_INFO;PCMSG_STREAM_INFO):HCRYPTMSG"/>
    <method name="CryptMsgOpenToEncode(DWORD;DWORD;DWORD;const void*;LPSTR;PCMSG_STREAM_INFO):HCRYPTMSG"/>
    <method name="CryptMsgSignCTL(DWORD;BYTE*;DWORD;PCMSG_SIGNED_ENCODE_INFO;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptMsgUpdate(HCRYPTMSG;const BYTE*;DWORD;BOOL):BOOL"/>
    <method name="CryptMsgVerifyCountersignatureEncoded(HCRYPTPROV;DWORD;PBYTE;DWORD;PBYTE;DWORD;PCERT_INFO):BOOL"/>
    <method name="CryptMsgVerifyCountersignatureEncodedEx(HCRYPTPROV;DWORD;PBYTE;DWORD;PBYTE;DWORD;DWORD;void*;DWORD;void*):BOOL"/>
    <method name="CryptProtectData(DATA_BLOB*;LPCWSTR;DATA_BLOB*;PVOID;CRYPTPROTECT_PROMPTSTRUCT*;DWORD;DATA_BLOB*):BOOL"/>
    <method name="CryptProtectMemory(LPVOID;DWORD;DWORD):BOOL"/>
    <method name="CryptQueryObject(DWORD;const void*;DWORD;DWORD;DWORD;DWORD*;DWORD*;DWORD*;HCERTSTORE*;HCRYPTMSG*;constvoid**):BOOL"/>
    <method name="CryptRegisterDefaultOIDFunction(DWORD;LPCSTR;DWORD;LPCWSTR):BOOL"/>
    <method name="CryptRegisterOIDFunction(DWORD;LPCSTR;LPCSTR;LPCWSTR;LPCSTR):BOOL"/>
    <method name="CryptRegisterOIDInfo(PCCRYPT_OID_INFO;DWORD):BOOL"/>
    <method name="CryptReleaseContext(HCRYPTPROV;DWORD):BOOL"/>
    <method name="CryptRetrieveObjectByUrlA(LPCSTR;LPCSTR;DWORD;DWORD;LPVOID*;HCRYPTASYNC;PCRYPT_CREDENTIALS;LPVOID;PCRYPT_RETRIEVE_AUX_INFO):BOOL"/>
    <method name="CryptRetrieveObjectByUrlW(LPCWSTR;LPCSTR;DWORD;DWORD;LPVOID*;HCRYPTASYNC;PCRYPT_CREDENTIALS;LPVOID;PCRYPT_RETRIEVE_AUX_INFO):BOOL"/>
    <method name="CryptSIPAddProvider(SIP_ADD_NEWPROVIDER*):BOOL"/>
    <method name="CryptSIPRemoveProvider(GUID*):BOOL"/>
    <method name="CryptSetHashParam(HCRYPTHASH;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetKeyIdentifierProperty(const CRYPT_HASH_BLOB*;DWORD;DWORD;LPCWSTR;void*;constvoid*):BOOL"/>
    <method name="CryptSetKeyParam(HCRYPTKEY;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetOIDFunctionValue(DWORD;LPCSTR;LPCSTR;LPCWSTR;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetProvParam(HCRYPTPROV;DWORD;const BYTE*;DWORD):BOOL"/>
    <method name="CryptSetProviderA(LPCSTR;DWORD):BOOL"/>
    <method name="CryptSetProviderExA(LPCSTR;DWORD;DWORD*;DWORD):BOOL"/>
    <method name="CryptSetProviderExW(LPCWSTR;DWORD;DWORD*;DWORD):BOOL"/>
    <method name="CryptSetProviderW(LPCWSTR;DWORD):BOOL"/>
    <method name="CryptSignAndEncodeCertificate(HCRYPTPROV;DWORD;DWORD;LPCSTR;const void*;PCRYPT_ALGORITHM_IDENTIFIER;constvoid*;PBYTE;DWORD*):BOOL"/>
    <method name="CryptSignAndEncryptMessage(PCRYPT_SIGN_MESSAGE_PARA;PCRYPT_ENCRYPT_MESSAGE_PARA;DWORD;PCCERT_CONTEXT*;constBYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignCertificate(HCRYPTPROV;DWORD;DWORD;const BYTE*;DWORD;PCRYPT_ALGORITHM_IDENTIFIER;constvoid*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignHashA(HCRYPTHASH;DWORD;LPCSTR;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignHashW(HCRYPTHASH;DWORD;LPCWSTR;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignMessage(PCRYPT_SIGN_MESSAGE_PARA;BOOL;DWORD;const BYTE**;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptSignMessageWithKey(PCRYPT_KEY_SIGN_MESSAGE_PARA;const BYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptStringToBinaryA(LPCSTR;DWORD;DWORD;BYTE*;DWORD*;DWORD*;DWORD*):BOOL"/>
    <method name="CryptStringToBinaryW(LPCWSTR;DWORD;DWORD;BYTE*;DWORD*;DWORD*;DWORD*):BOOL"/>
    <method name="CryptUIDlgCertMgr(PCCRYPTUI_CERT_MGR_STRUCT):BOOL"/>
    <method name="CryptUIDlgSelectCertificateFromStore(HCERTSTORE;HWND;LPCWSTR;LPCWSTR;DWORD;DWORD;void*):PCCERT_CONTEXT"/>
    <method name="CryptUIDlgViewContext(DWORD;const void*;HWND;LPCWSTR;DWORD;void*):BOOL"/>
    <method name="CryptUIWizDigitalSign(DWORD;HWND;LPCWSTR;PCCRYPTUI_WIZ_DIGITAL_SIGN_INFO;PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT*):BOOL"/>
    <method name="CryptUIWizExport(DWORD;HWND;LPCWSTR;PCCRYPTUI_WIZ_EXPORT_INFO;void*):BOOL"/>
    <method name="CryptUIWizFreeDigitalSignContext(PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT):BOOL"/>
    <method name="CryptUIWizImport(DWORD;HWND;LPCWSTR;PCCRYPTUI_WIZ_IMPORT_SRC_INFO;HCERTSTORE):BOOL"/>
    <method name="CryptUninstallDefaultContext(HCRYPTDEFAULTCONTEXT;DWORD;void*):BOOL"/>
    <method name="CryptUnprotectData(DATA_BLOB*;LPWSTR*;DATA_BLOB*;PVOID;CRYPTPROTECT_PROMPTSTRUCT*;DWORD;DATA_BLOB*):BOOL"/>
    <method name="CryptUnprotectMemory(LPVOID;DWORD;DWORD):BOOL"/>
    <method name="CryptUnregisterDefaultOIDFunction(DWORD;LPCSTR;LPCWSTR):BOOL"/>
    <method name="CryptUnregisterOIDFunction(DWORD;LPCSTR;LPCSTR):BOOL"/>
    <method name="CryptUnregisterOIDInfo(PCCRYPT_OID_INFO):BOOL"/>
    <method name="CryptVerifyCertificateSignature(HCRYPTPROV;DWORD;const BYTE*;DWORD;PCERT_PUBLIC_KEY_INFO):BOOL"/>
    <method name="CryptVerifyCertificateSignatureEx(HCRYPTPROV;DWORD;DWORD;void*;DWORD;void*;DWORD;void*):BOOL"/>
    <method name="CryptVerifyDetachedMessageHash(PCRYPT_HASH_MESSAGE_PARA;BYTE*;DWORD;DWORD;constBYTE**;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptVerifyDetachedMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA;DWORD;constBYTE*;DWORD;DWORD;const BYTE**;DWORD*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptVerifyMessageHash(PCRYPT_HASH_MESSAGE_PARA;BYTE*;DWORD;BYTE*;DWORD*;BYTE*;DWORD*):BOOL"/>
    <method name="CryptVerifyMessageSignature(PCRYPT_VERIFY_MESSAGE_PARA;DWORD;const BYTE*;DWORD;BYTE*;DWORD*;PCCERT_CONTEXT*):BOOL"/>
    <method name="CryptVerifyMessageSignatureWithKey(PCRYPT_KEY_VERIFY_MESSAGE_PARA;PCERT_PUBLIC_KEY_INFO;constBYTE*;DWORD;BYTE*;DWORD*):BOOL"/>
    <method name="CryptVerifySignatureA(HCRYPTHASH;const BYTE*;DWORD;HCRYPTKEY;LPCSTR;DWORD):BOOL"/>
    <method name="CryptVerifySignatureW(HCRYPTHASH;const BYTE*;DWORD;HCRYPTKEY;LPCWSTR;DWORD):BOOL"/>
    <method name="DES_cbc_cksum(const unsigned char*;DES_cblock*;long;DES_key_schedule*;const_DES_cblock*):unsigned long"/>
    <method name="DES_cbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_cfb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int*;int):void"/>
    <method name="DES_cfb_encrypt(const unsigned char*;unsigned char*;int;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_check_key_parity(const_DES_cblock*):int"/>
    <method name="DES_crypt(const char*;const char*):char*"/>
    <method name="DES_decrypt3(unsigned long*;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*):void"/>
    <method name="DES_ecb3_encrypt(const_DES_cblock*;DES_cblock*;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;int):void"/>
    <method name="DES_ecb_encrypt(const_DES_cblock*;DES_cblock*;DES_key_schedule*;int):void"/>
    <method name="DES_ede3_cbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_ede3_cbcm_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;DES_cblock*;int):void"/>
    <method name="DES_ede3_cfb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int*;int):void"/>
    <method name="DES_ede3_cfb_encrypt(const unsigned char*;unsigned char*;int;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_ede3_ofb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*;DES_cblock*;int*):void"/>
    <method name="DES_enc_read(int;void*;int;DES_key_schedule*;DES_cblock*):int"/>
    <method name="DES_enc_write(int;const void*;int;DES_key_schedule*;DES_cblock*):int"/>
    <method name="DES_encrypt1(unsigned long*;DES_key_schedule*;int):void"/>
    <method name="DES_encrypt2(unsigned long*;DES_key_schedule*;int):void"/>
    <method name="DES_encrypt3(unsigned long*;DES_key_schedule*;DES_key_schedule*;DES_key_schedule*):void"/>
    <method name="DES_fcrypt(const char*;const char*;char*):char*"/>
    <method name="DES_is_weak_key(const_DES_cblock*):int"/>
    <method name="DES_key_sched(const_DES_cblock*;DES_key_schedule*):int"/>
    <method name="DES_ncbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_ofb64_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int*):void"/>
    <method name="DES_ofb_encrypt(const unsigned char*;unsigned char*;int;long;DES_key_schedule*;DES_cblock*):void"/>
    <method name="DES_options():const char*"/>
    <method name="DES_pcbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;int):void"/>
    <method name="DES_quad_cksum(const unsigned char*;DES_cblock*;long;int;DES_cblock*):unsigned long"/>
    <method name="DES_random_key(DES_cblock*):int"/>
    <method name="DES_read_2passwords(DES_cblock*;DES_cblock*;const char*;int):int"/>
    <method name="DES_read_password(DES_cblock*;const char*;int):int"/>
    <method name="DES_set_key(const_DES_cblock*;DES_key_schedule*):int"/>
    <method name="DES_set_key_checked(const_DES_cblock*;DES_key_schedule*):int"/>
    <method name="DES_set_key_unchecked(const_DES_cblock*;DES_key_schedule*):void"/>
    <method name="DES_set_odd_parity(DES_cblock*):void"/>
    <method name="DES_string_to_2keys(const char*;DES_cblock*;DES_cblock*):void"/>
    <method name="DES_string_to_key(const char*;DES_cblock*):void"/>
    <method name="DES_xcbc_encrypt(const unsigned char*;unsigned char*;long;DES_key_schedule*;DES_cblock*;const_DES_cblock*;const_DES_cblock*;int):void"/>
    <method name="DES_xwhite_in2out(const_DES_cblock*;const_DES_cblock*;DES_cblock*):void"/>
    <method name="DHCPClientPreferencesCopyApplicationOptions(CFStringRef;CFIndex*):UInt8*"/>
    <method name="DHCPClientPreferencesSetApplicationOptions(CFStringRef;UInt8*;CFIndex):Boolean"/>
    <method name="DHCPInfoGetLeaseExpirationTime(CFDictionaryRef):CFDateRef"/>
    <method name="DHCPInfoGetLeaseStartTime(CFDictionaryRef):CFDateRef"/>
    <method name="DHCPInfoGetOptionData(CFDictionaryRef;UInt8):CFDataRef"/>
    <method name="DH_OpenSSL():const DH_METHOD*"/>
    <method name="DH_check(const DH*;int*):int"/>
    <method name="DH_check_pub_key(const DH*;const BIGNUM*;int*):int"/>
    <method name="DH_compute_key(unsigned char*;const BIGNUM*;DH*):int"/>
    <method name="DH_free(DH*):void"/>
    <method name="DH_generate_key(DH*):int"/>
    <method name="DH_generate_parameters(int;int;(*)(int;int;void*):void*;void*):DH*"/>
    <method name="DH_generate_parameters_ex(DH*;int;int;BN_GENCB*):int"/>
    <method name="DH_get_default_method():const DH_METHOD*"/>
    <method name="DH_get_ex_data(DH*;int):void*"/>
    <method name="DH_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="DH_new():DH*"/>
    <method name="DH_new_method(ENGINE*):DH*"/>
    <method name="DH_set_default_method(const DH_METHOD*):void"/>
    <method name="DH_set_ex_data(DH*;int;void*):int"/>
    <method name="DH_set_method(DH*;const DH_METHOD*):int"/>
    <method name="DH_size(const DH*):int"/>
    <method name="DH_up_ref(DH*):int"/>
    <method name="DHparams_print(BIO*;const DH*):int"/>
    <method name="DHparams_print_fp(FILE*;const DH*):int"/>
    <method name="DIRECTORYSTRING_free(ASN1_STRING*):void"/>
    <method name="DIRECTORYSTRING_new():ASN1_STRING*"/>
    <method name="DISPLAYTEXT_free(ASN1_STRING*):void"/>
    <method name="DISPLAYTEXT_new():ASN1_STRING*"/>
    <method name="DIST_POINT_NAME_free(DIST_POINT_NAME*):void"/>
    <method name="DIST_POINT_NAME_new():DIST_POINT_NAME*"/>
    <method name="DIST_POINT_free(DIST_POINT*):void"/>
    <method name="DIST_POINT_new():DIST_POINT*"/>
    <method name="DNSServiceAddRecord(DNSServiceRef;DNSRecordRef*;DNSServiceFlags;uint16_t;uint16_t;const void*;uint32_t):DNSServiceErrorType"/>
    <method name="DNSServiceBrowse(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;const char*;DNSServiceBrowseReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceConstructFullName(const char*;const const char*;const const char*;const const char*):DNSServiceErrorType"/>
    <method name="DNSServiceCreateConnection(DNSServiceRef*):DNSServiceErrorType"/>
    <method name="DNSServiceEnumerateDomains(DNSServiceRef*;DNSServiceFlags;uint32_t;DNSServiceDomainEnumReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceGetAddrInfo(DNSServiceRef*;DNSServiceFlags;uint32_t;DNSServiceProtocol;const char*;DNSServiceGetAddrInfoReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceGetPID(uint16_t;int32_t*):DNSServiceErrorType"/>
    <method name="DNSServiceGetProperty(const char*;void*;uint32_t*):DNSServiceErrorType"/>
    <method name="DNSServiceNATPortMappingCreate(DNSServiceRef*;DNSServiceFlags;uint32_t;DNSServiceProtocol;uint16_t;uint16_t;uint32_t;DNSServiceNATPortMappingReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceProcessResult(DNSServiceRef):DNSServiceErrorType"/>
    <method name="DNSServiceQueryRecord(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;uint16_t;uint16_t;DNSServiceQueryRecordReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceReconfirmRecord(DNSServiceFlags;uint32_t;const char*;uint16_t;uint16_t;uint16_t;const void*):DNSServiceErrorType"/>
    <method name="DNSServiceRefDeallocate(DNSServiceRef):void"/>
    <method name="DNSServiceRefSockFD(DNSServiceRef):int"/>
    <method name="DNSServiceRegister(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;const char*;const char*;const char*;uint16_t;uint16_t;const void*;DNSServiceRegisterReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceRegisterRecord(DNSServiceRef;DNSRecordRef*;DNSServiceFlags;uint32_t;const char*;uint16_t;uint16_t;uint16_t;const void*;uint32_t;DNSServiceRegisterRecordReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceRemoveRecord(DNSServiceRef;DNSRecordRef;DNSServiceFlags):DNSServiceErrorType"/>
    <method name="DNSServiceResolve(DNSServiceRef*;DNSServiceFlags;uint32_t;const char*;const char*;const char*;DNSServiceResolveReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceSetDispatchQueue(DNSServiceRef;dispatch_queue_t):DNSServiceErrorType"/>
    <method name="DNSServiceSleepKeepalive(DNSServiceRef*;DNSServiceFlags;int;unsigned int;DNSServiceSleepKeepaliveReply;void*):DNSServiceErrorType"/>
    <method name="DNSServiceUpdateRecord(DNSServiceRef;DNSRecordRef;DNSServiceFlags;uint16_t;const void*;uint32_t):DNSServiceErrorType"/>
    <method name="DSA_OpenSSL():const DSA_METHOD*"/>
    <method name="DSA_SIG_free(DSA_SIG*):void"/>
    <method name="DSA_SIG_new():DSA_SIG*"/>
    <method name="DSA_do_sign(const unsigned char*;int;DSA*):DSA_SIG*"/>
    <method name="DSA_do_verify(const unsigned char*;int;DSA_SIG*;DSA*):int"/>
    <method name="DSA_dup_DH(const DSA*):DH*"/>
    <method name="DSA_free(DSA*):void"/>
    <method name="DSA_generate_key(DSA*):int"/>
    <method name="DSA_generate_parameters(int;unsigned char*;int;int*;unsigned long*;(*)(int;int;void*):void*;void*):DSA*"/>
    <method name="DSA_generate_parameters_ex(DSA*;int;unsigned char*;int;int*;unsigned long*;BN_GENCB*):int"/>
    <method name="DSA_get_default_method():const DSA_METHOD*"/>
    <method name="DSA_get_ex_data(DSA*;int):void*"/>
    <method name="DSA_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="DSA_new():DSA*"/>
    <method name="DSA_new_method(ENGINE*):DSA*"/>
    <method name="DSA_print(BIO*;const DSA*;int):int"/>
    <method name="DSA_print_fp(FILE*;const DSA*;int):int"/>
    <method name="DSA_set_default_method(const DSA_METHOD*):void"/>
    <method name="DSA_set_ex_data(DSA*;int;void*):int"/>
    <method name="DSA_set_method(DSA*;const DSA_METHOD*):int"/>
    <method name="DSA_sign(int;const unsigned char*;int;unsigned char*;unsigned int*;DSA*):int"/>
    <method name="DSA_sign_setup(DSA*;BN_CTX*;BIGNUM**;BIGNUM**):int"/>
    <method name="DSA_size(const DSA*):int"/>
    <method name="DSA_up_ref(DSA*):int"/>
    <method name="DSA_verify(int;const unsigned char*;int;const unsigned char*;int;DSA*):int"/>
    <method name="DSAparams_print(BIO*;const DSA*):int"/>
    <method name="DSAparams_print_fp(FILE*;const DSA*):int"/>
    <method name="DSO_METHOD_dl():DSO_METHOD*"/>
    <method name="DSO_METHOD_dlfcn():DSO_METHOD*"/>
    <method name="DSO_METHOD_null():DSO_METHOD*"/>
    <method name="DSO_METHOD_openssl():DSO_METHOD*"/>
    <method name="DSO_METHOD_vms():DSO_METHOD*"/>
    <method name="DSO_METHOD_win32():DSO_METHOD*"/>
    <method name="DSO_bind_func(DSO*;const char*):DSO_FUNC_TYPE"/>
    <method name="DSO_bind_var(DSO*;const char*):void*"/>
    <method name="DSO_convert_filename(DSO*;const char*):char*"/>
    <method name="DSO_ctrl(DSO*;int;long;void*):long"/>
    <method name="DSO_flags(DSO*):int"/>
    <method name="DSO_free(DSO*):int"/>
    <method name="DSO_get_default_method():DSO_METHOD*"/>
    <method name="DSO_get_filename(DSO*):const char*"/>
    <method name="DSO_get_loaded_filename(DSO*):const char*"/>
    <method name="DSO_get_method(DSO*):DSO_METHOD*"/>
    <method name="DSO_load(DSO*;const char*;DSO_METHOD*;int):DSO*"/>
    <method name="DSO_merge(DSO*;const char*;const char*):char*"/>
    <method name="DSO_new():DSO*"/>
    <method name="DSO_new_method(DSO_METHOD*):DSO*"/>
    <method name="DSO_set_default_method(DSO_METHOD*):void"/>
    <method name="DSO_set_filename(DSO*;const char*):int"/>
    <method name="DSO_set_method(DSO*;DSO_METHOD*):DSO_METHOD*"/>
    <method name="DSO_set_name_converter(DSO*;DSO_NAME_CONVERTER_FUNC;DSO_NAME_CONVERTER_FUNC*):int"/>
    <method name="DSO_up_ref(DSO*):int"/>
    <method name="DTLSv1_client_method():SSL_METHOD*"/>
    <method name="DTLSv1_method():SSL_METHOD*"/>
    <method name="DTLSv1_server_method():SSL_METHOD*"/>
    <method name="DebugStr(ConstStr255Param):void"/>
    <method name="Debugger():void"/>
    <method name="DisposeAUGraph(AUGraph):OSStatus"/>
    <method name="DisposeMusicEventIterator(MusicEventIterator):OSStatus"/>
    <method name="DisposeMusicPlayer(MusicPlayer):OSStatus"/>
    <method name="DisposeMusicSequence(MusicSequence):OSStatus"/>
    <method name="EAGLGetVersion(unsigned int*;unsigned int*):void"/>
    <method name="ECDH_OpenSSL():const ECDH_METHOD*"/>
    <method name="ECDH_compute_key(void*;size_t;const EC_POINT*;EC_KEY*;(*)(const void*;size_t;void*;size_t*):void**):int"/>
    <method name="ECDH_get_default_method():const ECDH_METHOD*"/>
    <method name="ECDH_get_ex_data(EC_KEY*;int):void*"/>
    <method name="ECDH_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="ECDH_set_default_method(const ECDH_METHOD*):void"/>
    <method name="ECDH_set_ex_data(EC_KEY*;int;void*):int"/>
    <method name="ECDH_set_method(EC_KEY*;const ECDH_METHOD*):int"/>
    <method name="ECDSA_OpenSSL():const ECDSA_METHOD*"/>
    <method name="ECDSA_SIG_free(ECDSA_SIG*):void"/>
    <method name="ECDSA_SIG_new():ECDSA_SIG*"/>
    <method name="ECDSA_do_sign(const unsigned char*;int;EC_KEY*):ECDSA_SIG*"/>
    <method name="ECDSA_do_sign_ex(const unsigned char*;int;const BIGNUM*;const BIGNUM*;EC_KEY*):ECDSA_SIG*"/>
    <method name="ECDSA_do_verify(const unsigned char*;int;const ECDSA_SIG*;EC_KEY*):int"/>
    <method name="ECDSA_get_default_method():const ECDSA_METHOD*"/>
    <method name="ECDSA_get_ex_data(EC_KEY*;int):void*"/>
    <method name="ECDSA_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="ECDSA_set_default_method(const ECDSA_METHOD*):void"/>
    <method name="ECDSA_set_ex_data(EC_KEY*;int;void*):int"/>
    <method name="ECDSA_set_method(EC_KEY*;const ECDSA_METHOD*):int"/>
    <method name="ECDSA_sign(int;const unsigned char*;int;unsigned char*;unsigned int*;EC_KEY*):int"/>
    <method name="ECDSA_sign_ex(int;const unsigned char*;int;unsigned char*;unsigned int*;const BIGNUM*;const BIGNUM*;EC_KEY*):int"/>
    <method name="ECDSA_sign_setup(EC_KEY*;BN_CTX*;BIGNUM**;BIGNUM**):int"/>
    <method name="ECDSA_size(const EC_KEY*):int"/>
    <method name="ECDSA_verify(int;const unsigned char*;int;const unsigned char*;int;EC_KEY*):int"/>
    <method name="ECPKParameters_print(BIO*;const EC_GROUP*;int):int"/>
    <method name="ECPKParameters_print_fp(FILE*;const EC_GROUP*;int):int"/>
    <method name="ECParameters_print(BIO*;const EC_KEY*):int"/>
    <method name="ECParameters_print_fp(FILE*;const EC_KEY*):int"/>
    <method name="EC_GF2m_simple_method():const EC_METHOD*"/>
    <method name="EC_GFp_mont_method():const EC_METHOD*"/>
    <method name="EC_GFp_nist_method():const EC_METHOD*"/>
    <method name="EC_GFp_simple_method():const EC_METHOD*"/>
    <method name="EC_GROUP_check(const EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_check_discriminant(const EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_clear_free(EC_GROUP*):void"/>
    <method name="EC_GROUP_cmp(const EC_GROUP*;const EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_copy(EC_GROUP*;const EC_GROUP*):int"/>
    <method name="EC_GROUP_dup(const EC_GROUP*):EC_GROUP*"/>
    <method name="EC_GROUP_free(EC_GROUP*):void"/>
    <method name="EC_GROUP_get0_generator(const EC_GROUP*):const EC_POINT*"/>
    <method name="EC_GROUP_get0_seed(const EC_GROUP*):unsigned char*"/>
    <method name="EC_GROUP_get_asn1_flag(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_basis_type(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_cofactor(const EC_GROUP*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_curve_GF2m(const EC_GROUP*;BIGNUM*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_curve_GFp(const EC_GROUP*;BIGNUM*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_curve_name(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_degree(const EC_GROUP*):int"/>
    <method name="EC_GROUP_get_order(const EC_GROUP*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_get_pentanomial_basis(const EC_GROUP*;unsigned int*;unsigned int*;unsigned int*):int"/>
    <method name="EC_GROUP_get_point_conversion_form(const EC_GROUP*):point_conversion_form_t"/>
    <method name="EC_GROUP_get_seed_len(const EC_GROUP*):size_t"/>
    <method name="EC_GROUP_get_trinomial_basis(const EC_GROUP*;unsigned int*):int"/>
    <method name="EC_GROUP_have_precompute_mult(const EC_GROUP*):int"/>
    <method name="EC_GROUP_method_of(const EC_GROUP*):const EC_METHOD*"/>
    <method name="EC_GROUP_new(const EC_METHOD*):EC_GROUP*"/>
    <method name="EC_GROUP_new_by_curve_name(int):EC_GROUP*"/>
    <method name="EC_GROUP_new_curve_GF2m(const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):EC_GROUP*"/>
    <method name="EC_GROUP_new_curve_GFp(const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):EC_GROUP*"/>
    <method name="EC_GROUP_precompute_mult(EC_GROUP*;BN_CTX*):int"/>
    <method name="EC_GROUP_set_asn1_flag(EC_GROUP*;int):void"/>
    <method name="EC_GROUP_set_curve_GF2m(EC_GROUP*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_set_curve_GFp(EC_GROUP*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_GROUP_set_curve_name(EC_GROUP*;int):void"/>
    <method name="EC_GROUP_set_generator(EC_GROUP*;const EC_POINT*;const BIGNUM*;const BIGNUM*):int"/>
    <method name="EC_GROUP_set_point_conversion_form(EC_GROUP*;point_conversion_form_t):void"/>
    <method name="EC_GROUP_set_seed(EC_GROUP*;const unsigned char*;size_t):size_t"/>
    <method name="EC_KEY_check_key(const EC_KEY*):int"/>
    <method name="EC_KEY_copy(EC_KEY*;const EC_KEY*):EC_KEY*"/>
    <method name="EC_KEY_dup(const EC_KEY*):EC_KEY*"/>
    <method name="EC_KEY_free(EC_KEY*):void"/>
    <method name="EC_KEY_generate_key(EC_KEY*):int"/>
    <method name="EC_KEY_get0_group(const EC_KEY*):const EC_GROUP*"/>
    <method name="EC_KEY_get0_private_key(const EC_KEY*):const BIGNUM*"/>
    <method name="EC_KEY_get0_public_key(const EC_KEY*):const EC_POINT*"/>
    <method name="EC_KEY_get_conv_form(const EC_KEY*):point_conversion_form_t"/>
    <method name="EC_KEY_get_enc_flags(const EC_KEY*):unsigned int"/>
    <method name="EC_KEY_get_key_method_data(EC_KEY*;(*)(void*):void**;(*)(void*):void*;(*)(void*):void*):void*"/>
    <method name="EC_KEY_insert_key_method_data(EC_KEY*;void*;(*)(void*):void**;(*)(void*):void*;(*)(void*):void*):void"/>
    <method name="EC_KEY_new():EC_KEY*"/>
    <method name="EC_KEY_new_by_curve_name(int):EC_KEY*"/>
    <method name="EC_KEY_precompute_mult(EC_KEY*;BN_CTX*):int"/>
    <method name="EC_KEY_print(BIO*;const EC_KEY*;int):int"/>
    <method name="EC_KEY_print_fp(FILE*;const EC_KEY*;int):int"/>
    <method name="EC_KEY_set_asn1_flag(EC_KEY*;int):void"/>
    <method name="EC_KEY_set_conv_form(EC_KEY*;point_conversion_form_t):void"/>
    <method name="EC_KEY_set_enc_flags(EC_KEY*;unsigned int):void"/>
    <method name="EC_KEY_set_group(EC_KEY*;const EC_GROUP*):int"/>
    <method name="EC_KEY_set_private_key(EC_KEY*;const BIGNUM*):int"/>
    <method name="EC_KEY_set_public_key(EC_KEY*;const EC_POINT*):int"/>
    <method name="EC_KEY_up_ref(EC_KEY*):int"/>
    <method name="EC_METHOD_get_field_type(const EC_METHOD*):int"/>
    <method name="EC_POINT_add(const EC_GROUP*;EC_POINT*;const EC_POINT*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_bn2point(const EC_GROUP*;const BIGNUM*;EC_POINT*;BN_CTX*):EC_POINT*"/>
    <method name="EC_POINT_clear_free(EC_POINT*):void"/>
    <method name="EC_POINT_cmp(const EC_GROUP*;const EC_POINT*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_copy(EC_POINT*;const EC_POINT*):int"/>
    <method name="EC_POINT_dbl(const EC_GROUP*;EC_POINT*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_dup(const EC_POINT*;const EC_GROUP*):EC_POINT*"/>
    <method name="EC_POINT_free(EC_POINT*):void"/>
    <method name="EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP*;const EC_POINT*;BIGNUM*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP*;const EC_POINT*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_get_affine_coordinates_GFp(const EC_GROUP*;const EC_POINT*;BIGNUM*;BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_hex2point(const EC_GROUP*;const char*;EC_POINT*;BN_CTX*):EC_POINT*"/>
    <method name="EC_POINT_invert(const EC_GROUP*;EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_is_at_infinity(const EC_GROUP*;const EC_POINT*):int"/>
    <method name="EC_POINT_is_on_curve(const EC_GROUP*;const EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_make_affine(const EC_GROUP*;EC_POINT*;BN_CTX*):int"/>
    <method name="EC_POINT_method_of(const EC_POINT*):const EC_METHOD*"/>
    <method name="EC_POINT_mul(const EC_GROUP*;EC_POINT*;const BIGNUM*;const EC_POINT*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_new(const EC_GROUP*):EC_POINT*"/>
    <method name="EC_POINT_oct2point(const EC_GROUP*;EC_POINT*;const unsigned char*;size_t;BN_CTX*):int"/>
    <method name="EC_POINT_point2bn(const EC_GROUP*;const EC_POINT*;point_conversion_form_t;BIGNUM*;BN_CTX*):BIGNUM*"/>
    <method name="EC_POINT_point2hex(const EC_GROUP*;const EC_POINT*;point_conversion_form_t;BN_CTX*):char*"/>
    <method name="EC_POINT_point2oct(const EC_GROUP*;const EC_POINT*;point_conversion_form_t;unsigned char*;size_t;BN_CTX*):size_t"/>
    <method name="EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP*;EC_POINT*;const BIGNUM*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP*;EC_POINT*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_set_affine_coordinates_GFp(const EC_GROUP*;EC_POINT*;const BIGNUM*;const BIGNUM*;BN_CTX*):int"/>
    <method name="EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP*;EC_POINT*;const BIGNUM*;int;BN_CTX*):int"/>
    <method name="EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP*;EC_POINT*;const BIGNUM*;int;BN_CTX*):int"/>
    <method name="EC_POINT_set_to_infinity(const EC_GROUP*;EC_POINT*):int"/>
    <method name="EC_POINTs_make_affine(const EC_GROUP*;size_t;EC_POINT**;BN_CTX*):int"/>
    <method name="EC_POINTs_mul(const EC_GROUP*;EC_POINT*;const BIGNUM*;size_t;const EC_POINT**;const BIGNUM**;BN_CTX*):int"/>
    <method name="EC_get_builtin_curves(EC_builtin_curve*;size_t):size_t"/>
    <method name="EDIPARTYNAME_free(EDIPARTYNAME*):void"/>
    <method name="EDIPARTYNAME_new():EDIPARTYNAME*"/>
    <method name="ENGINE_add(ENGINE*):int"/>
    <method name="ENGINE_add_conf_module():void"/>
    <method name="ENGINE_by_id(const char*):ENGINE*"/>
    <method name="ENGINE_cleanup():void"/>
    <method name="ENGINE_cmd_is_executable(ENGINE*;int):int"/>
    <method name="ENGINE_ctrl(ENGINE*;int;long;void*;(*)():void*):int"/>
    <method name="ENGINE_ctrl_cmd(ENGINE*;const char*;long;void*;(*)():void*;int):int"/>
    <method name="ENGINE_ctrl_cmd_string(ENGINE*;const char*;const char*;int):int"/>
    <method name="ENGINE_finish(ENGINE*):int"/>
    <method name="ENGINE_free(ENGINE*):int"/>
    <method name="ENGINE_get_DH(const ENGINE*):const DH_METHOD*"/>
    <method name="ENGINE_get_DSA(const ENGINE*):const DSA_METHOD*"/>
    <method name="ENGINE_get_ECDH(const ENGINE*):const ECDH_METHOD*"/>
    <method name="ENGINE_get_ECDSA(const ENGINE*):const ECDSA_METHOD*"/>
    <method name="ENGINE_get_RAND(const ENGINE*):const RAND_METHOD*"/>
    <method name="ENGINE_get_RSA(const ENGINE*):const RSA_METHOD*"/>
    <method name="ENGINE_get_STORE(const ENGINE*):const STORE_METHOD*"/>
    <method name="ENGINE_get_cipher(ENGINE*;int):const EVP_CIPHER*"/>
    <method name="ENGINE_get_cipher_engine(int):ENGINE*"/>
    <method name="ENGINE_get_ciphers(const ENGINE*):ENGINE_CIPHERS_PTR"/>
    <method name="ENGINE_get_cmd_defns(const ENGINE*):const ENGINE_CMD_DEFN*"/>
    <method name="ENGINE_get_ctrl_function(const ENGINE*):ENGINE_CTRL_FUNC_PTR"/>
    <method name="ENGINE_get_default_DH():ENGINE*"/>
    <method name="ENGINE_get_default_DSA():ENGINE*"/>
    <method name="ENGINE_get_default_ECDH():ENGINE*"/>
    <method name="ENGINE_get_default_ECDSA():ENGINE*"/>
    <method name="ENGINE_get_default_RAND():ENGINE*"/>
    <method name="ENGINE_get_default_RSA():ENGINE*"/>
    <method name="ENGINE_get_destroy_function(const ENGINE*):ENGINE_GEN_INT_FUNC_PTR"/>
    <method name="ENGINE_get_digest(ENGINE*;int):const EVP_MD*"/>
    <method name="ENGINE_get_digest_engine(int):ENGINE*"/>
    <method name="ENGINE_get_digests(const ENGINE*):ENGINE_DIGESTS_PTR"/>
    <method name="ENGINE_get_ex_data(const ENGINE*;int):void*"/>
    <method name="ENGINE_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="ENGINE_get_finish_function(const ENGINE*):ENGINE_GEN_INT_FUNC_PTR"/>
    <method name="ENGINE_get_first():ENGINE*"/>
    <method name="ENGINE_get_flags(const ENGINE*):int"/>
    <method name="ENGINE_get_id(const ENGINE*):const char*"/>
    <method name="ENGINE_get_init_function(const ENGINE*):ENGINE_GEN_INT_FUNC_PTR"/>
    <method name="ENGINE_get_last():ENGINE*"/>
    <method name="ENGINE_get_load_privkey_function(const ENGINE*):ENGINE_LOAD_KEY_PTR"/>
    <method name="ENGINE_get_load_pubkey_function(const ENGINE*):ENGINE_LOAD_KEY_PTR"/>
    <method name="ENGINE_get_name(const ENGINE*):const char*"/>
    <method name="ENGINE_get_next(ENGINE*):ENGINE*"/>
    <method name="ENGINE_get_prev(ENGINE*):ENGINE*"/>
    <method name="ENGINE_get_static_state():void*"/>
    <method name="ENGINE_get_table_flags():unsigned int"/>
    <method name="ENGINE_init(ENGINE*):int"/>
    <method name="ENGINE_load_4758cca():void"/>
    <method name="ENGINE_load_aep():void"/>
    <method name="ENGINE_load_atalla():void"/>
    <method name="ENGINE_load_builtin_engines():void"/>
    <method name="ENGINE_load_chil():void"/>
    <method name="ENGINE_load_cryptodev():void"/>
    <method name="ENGINE_load_cswift():void"/>
    <method name="ENGINE_load_dynamic():void"/>
    <method name="ENGINE_load_nuron():void"/>
    <method name="ENGINE_load_openssl():void"/>
    <method name="ENGINE_load_padlock():void"/>
    <method name="ENGINE_load_private_key(ENGINE*;const char*;UI_METHOD*;void*):EVP_PKEY*"/>
    <method name="ENGINE_load_public_key(ENGINE*;const char*;UI_METHOD*;void*):EVP_PKEY*"/>
    <method name="ENGINE_load_sureware():void"/>
    <method name="ENGINE_load_ubsec():void"/>
    <method name="ENGINE_new():ENGINE*"/>
    <method name="ENGINE_register_DH(ENGINE*):int"/>
    <method name="ENGINE_register_DSA(ENGINE*):int"/>
    <method name="ENGINE_register_ECDH(ENGINE*):int"/>
    <method name="ENGINE_register_ECDSA(ENGINE*):int"/>
    <method name="ENGINE_register_RAND(ENGINE*):int"/>
    <method name="ENGINE_register_RSA(ENGINE*):int"/>
    <method name="ENGINE_register_STORE(ENGINE*):int"/>
    <method name="ENGINE_register_all_DH():void"/>
    <method name="ENGINE_register_all_DSA():void"/>
    <method name="ENGINE_register_all_ECDH():void"/>
    <method name="ENGINE_register_all_ECDSA():void"/>
    <method name="ENGINE_register_all_RAND():void"/>
    <method name="ENGINE_register_all_RSA():void"/>
    <method name="ENGINE_register_all_STORE():void"/>
    <method name="ENGINE_register_all_ciphers():void"/>
    <method name="ENGINE_register_all_complete():int"/>
    <method name="ENGINE_register_all_digests():void"/>
    <method name="ENGINE_register_ciphers(ENGINE*):int"/>
    <method name="ENGINE_register_complete(ENGINE*):int"/>
    <method name="ENGINE_register_digests(ENGINE*):int"/>
    <method name="ENGINE_remove(ENGINE*):int"/>
    <method name="ENGINE_set_DH(ENGINE*;const DH_METHOD*):int"/>
    <method name="ENGINE_set_DSA(ENGINE*;const DSA_METHOD*):int"/>
    <method name="ENGINE_set_ECDH(ENGINE*;const ECDH_METHOD*):int"/>
    <method name="ENGINE_set_ECDSA(ENGINE*;const ECDSA_METHOD*):int"/>
    <method name="ENGINE_set_RAND(ENGINE*;const RAND_METHOD*):int"/>
    <method name="ENGINE_set_RSA(ENGINE*;const RSA_METHOD*):int"/>
    <method name="ENGINE_set_STORE(ENGINE*;const STORE_METHOD*):int"/>
    <method name="ENGINE_set_ciphers(ENGINE*;ENGINE_CIPHERS_PTR):int"/>
    <method name="ENGINE_set_cmd_defns(ENGINE*;const ENGINE_CMD_DEFN*):int"/>
    <method name="ENGINE_set_ctrl_function(ENGINE*;ENGINE_CTRL_FUNC_PTR):int"/>
    <method name="ENGINE_set_default(ENGINE*;unsigned int):int"/>
    <method name="ENGINE_set_default_DH(ENGINE*):int"/>
    <method name="ENGINE_set_default_DSA(ENGINE*):int"/>
    <method name="ENGINE_set_default_ECDH(ENGINE*):int"/>
    <method name="ENGINE_set_default_ECDSA(ENGINE*):int"/>
    <method name="ENGINE_set_default_RAND(ENGINE*):int"/>
    <method name="ENGINE_set_default_RSA(ENGINE*):int"/>
    <method name="ENGINE_set_default_ciphers(ENGINE*):int"/>
    <method name="ENGINE_set_default_digests(ENGINE*):int"/>
    <method name="ENGINE_set_default_string(ENGINE*;const char*):int"/>
    <method name="ENGINE_set_destroy_function(ENGINE*;ENGINE_GEN_INT_FUNC_PTR):int"/>
    <method name="ENGINE_set_digests(ENGINE*;ENGINE_DIGESTS_PTR):int"/>
    <method name="ENGINE_set_ex_data(ENGINE*;int;void*):int"/>
    <method name="ENGINE_set_finish_function(ENGINE*;ENGINE_GEN_INT_FUNC_PTR):int"/>
    <method name="ENGINE_set_flags(ENGINE*;int):int"/>
    <method name="ENGINE_set_id(ENGINE*;const char*):int"/>
    <method name="ENGINE_set_init_function(ENGINE*;ENGINE_GEN_INT_FUNC_PTR):int"/>
    <method name="ENGINE_set_load_privkey_function(ENGINE*;ENGINE_LOAD_KEY_PTR):int"/>
    <method name="ENGINE_set_load_pubkey_function(ENGINE*;ENGINE_LOAD_KEY_PTR):int"/>
    <method name="ENGINE_set_name(ENGINE*;const char*):int"/>
    <method name="ENGINE_set_table_flags(unsigned int):void"/>
    <method name="ENGINE_unregister_DH(ENGINE*):void"/>
    <method name="ENGINE_unregister_DSA(ENGINE*):void"/>
    <method name="ENGINE_unregister_ECDH(ENGINE*):void"/>
    <method name="ENGINE_unregister_ECDSA(ENGINE*):void"/>
    <method name="ENGINE_unregister_RAND(ENGINE*):void"/>
    <method name="ENGINE_unregister_RSA(ENGINE*):void"/>
    <method name="ENGINE_unregister_STORE(ENGINE*):void"/>
    <method name="ENGINE_unregister_ciphers(ENGINE*):void"/>
    <method name="ENGINE_unregister_digests(ENGINE*):void"/>
    <method name="ENGINE_up_ref(ENGINE*):int"/>
    <method name="ERR_add_error_data(int, ...):void"/>
    <method name="ERR_clear_error():void"/>
    <method name="ERR_error_string(unsigned long;char*):char*"/>
    <method name="ERR_error_string_n(unsigned long;char*;size_t):void"/>
    <method name="ERR_free_strings():void"/>
    <method name="ERR_func_error_string(unsigned long):const char*"/>
    <method name="ERR_get_err_state_table():LHASH*"/>
    <method name="ERR_get_error():unsigned long"/>
    <method name="ERR_get_error_line(const char**;int*):unsigned long"/>
    <method name="ERR_get_error_line_data(const char**;int*;const char**;int*):unsigned long"/>
    <method name="ERR_get_implementation():const ERR_FNS*"/>
    <method name="ERR_get_next_error_library():int"/>
    <method name="ERR_get_state():ERR_STATE*"/>
    <method name="ERR_get_string_table():LHASH*"/>
    <method name="ERR_lib_error_string(unsigned long):const char*"/>
    <method name="ERR_load_ASN1_strings():void"/>
    <method name="ERR_load_BIO_strings():void"/>
    <method name="ERR_load_BN_strings():void"/>
    <method name="ERR_load_BUF_strings():void"/>
    <method name="ERR_load_COMP_strings():void"/>
    <method name="ERR_load_CONF_strings():void"/>
    <method name="ERR_load_CRYPTO_strings():void"/>
    <method name="ERR_load_DH_strings():void"/>
    <method name="ERR_load_DSA_strings():void"/>
    <method name="ERR_load_DSO_strings():void"/>
    <method name="ERR_load_ECDH_strings():void"/>
    <method name="ERR_load_ECDSA_strings():void"/>
    <method name="ERR_load_EC_strings():void"/>
    <method name="ERR_load_ENGINE_strings():void"/>
    <method name="ERR_load_ERR_strings():void"/>
    <method name="ERR_load_EVP_strings():void"/>
    <method name="ERR_load_OBJ_strings():void"/>
    <method name="ERR_load_OCSP_strings():void"/>
    <method name="ERR_load_PEM_strings():void"/>
    <method name="ERR_load_PKCS12_strings():void"/>
    <method name="ERR_load_PKCS7_strings():void"/>
    <method name="ERR_load_RAND_strings():void"/>
    <method name="ERR_load_RSA_strings():void"/>
    <method name="ERR_load_SSL_strings():void"/>
    <method name="ERR_load_STORE_strings():void"/>
    <method name="ERR_load_UI_strings():void"/>
    <method name="ERR_load_X509V3_strings():void"/>
    <method name="ERR_load_X509_strings():void"/>
    <method name="ERR_load_crypto_strings():void"/>
    <method name="ERR_load_strings(int;ERR_STRING_DATA*):void"/>
    <method name="ERR_peek_error():unsigned long"/>
    <method name="ERR_peek_error_line(const char**;int*):unsigned long"/>
    <method name="ERR_peek_error_line_data(const char**;int*;const char**;int*):unsigned long"/>
    <method name="ERR_peek_last_error():unsigned long"/>
    <method name="ERR_peek_last_error_line(const char**;int*):unsigned long"/>
    <method name="ERR_peek_last_error_line_data(const char**;int*;const char**;int*):unsigned long"/>
    <method name="ERR_pop_to_mark():int"/>
    <method name="ERR_print_errors(BIO*):void"/>
    <method name="ERR_print_errors_cb((*)(const char*;size_t;void*):int*;void*):void"/>
    <method name="ERR_print_errors_fp(FILE*):void"/>
    <method name="ERR_put_error(int;int;int;const char*;int):void"/>
    <method name="ERR_reason_error_string(unsigned long):const char*"/>
    <method name="ERR_release_err_state_table(LHASH**):void"/>
    <method name="ERR_remove_state(unsigned long):void"/>
    <method name="ERR_set_error_data(char*;int):void"/>
    <method name="ERR_set_implementation(const ERR_FNS*):int"/>
    <method name="ERR_set_mark():int"/>
    <method name="ERR_unload_strings(int;ERR_STRING_DATA*):void"/>
    <method name="EVP_BytesToKey(const EVP_CIPHER*;const EVP_MD*;const unsigned char*;const unsigned char*;int;int;unsigned char*;unsigned char*):int"/>
    <method name="EVP_CIPHER_CTX_cleanup(EVP_CIPHER_CTX*):int"/>
    <method name="EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX*;int;int;void*):int"/>
    <method name="EVP_CIPHER_CTX_free(EVP_CIPHER_CTX*):void"/>
    <method name="EVP_CIPHER_CTX_init(EVP_CIPHER_CTX*):void"/>
    <method name="EVP_CIPHER_CTX_new():EVP_CIPHER_CTX*"/>
    <method name="EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX*;unsigned char*):int"/>
    <method name="EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX*;int):int"/>
    <method name="EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX*;int):int"/>
    <method name="EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX*;ASN1_TYPE*):int"/>
    <method name="EVP_CIPHER_type(const EVP_CIPHER*):int"/>
    <method name="EVP_CipherFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_CipherFinal_ex(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_CipherInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_CipherInit_ex(EVP_CIPHER_CTX*;const EVP_CIPHER*;ENGINE*;const unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_CipherUpdate(EVP_CIPHER_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_DecodeBlock(unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_DecodeFinal(EVP_ENCODE_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_DecodeInit(EVP_ENCODE_CTX*):void"/>
    <method name="EVP_DecodeUpdate(EVP_ENCODE_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_DecryptFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_DecryptFinal_ex(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_DecryptInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_DecryptInit_ex(EVP_CIPHER_CTX*;const EVP_CIPHER*;ENGINE*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_DecryptUpdate(EVP_CIPHER_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_Digest(const void*;size_t;unsigned char*;unsigned int*;const EVP_MD*;ENGINE*):int"/>
    <method name="EVP_DigestFinal(EVP_MD_CTX*;unsigned char*;unsigned int*):int"/>
    <method name="EVP_DigestFinal_ex(EVP_MD_CTX*;unsigned char*;unsigned int*):int"/>
    <method name="EVP_DigestInit(EVP_MD_CTX*;const EVP_MD*):int"/>
    <method name="EVP_DigestInit_ex(EVP_MD_CTX*;const EVP_MD*;ENGINE*):int"/>
    <method name="EVP_DigestUpdate(EVP_MD_CTX*;const void*;size_t):int"/>
    <method name="EVP_EncodeBlock(unsigned char*;const unsigned char*;int):int"/>
    <method name="EVP_EncodeFinal(EVP_ENCODE_CTX*;unsigned char*;int*):void"/>
    <method name="EVP_EncodeInit(EVP_ENCODE_CTX*):void"/>
    <method name="EVP_EncodeUpdate(EVP_ENCODE_CTX*;unsigned char*;int*;const unsigned char*;int):void"/>
    <method name="EVP_EncryptFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_EncryptFinal_ex(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_EncryptInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_EncryptInit_ex(EVP_CIPHER_CTX*;const EVP_CIPHER*;ENGINE*;const unsigned char*;const unsigned char*):int"/>
    <method name="EVP_EncryptUpdate(EVP_CIPHER_CTX*;unsigned char*;int*;const unsigned char*;int):int"/>
    <method name="EVP_MD_CTX_cleanup(EVP_MD_CTX*):int"/>
    <method name="EVP_MD_CTX_copy(EVP_MD_CTX*;const EVP_MD_CTX*):int"/>
    <method name="EVP_MD_CTX_copy_ex(EVP_MD_CTX*;const EVP_MD_CTX*):int"/>
    <method name="EVP_MD_CTX_create():EVP_MD_CTX*"/>
    <method name="EVP_MD_CTX_destroy(EVP_MD_CTX*):void"/>
    <method name="EVP_MD_CTX_init(EVP_MD_CTX*):void"/>
    <method name="EVP_OpenFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_OpenInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;const unsigned char*;int;const unsigned char*;EVP_PKEY*):int"/>
    <method name="EVP_PBE_CipherInit(ASN1_OBJECT*;const char*;int;ASN1_TYPE*;EVP_CIPHER_CTX*;int):int"/>
    <method name="EVP_PBE_alg_add(int;const EVP_CIPHER*;const EVP_MD*;EVP_PBE_KEYGEN*):int"/>
    <method name="EVP_PBE_cleanup():void"/>
    <method name="EVP_PKCS82PKEY(PKCS8_PRIV_KEY_INFO*):EVP_PKEY*"/>
    <method name="EVP_PKEY2PKCS8(EVP_PKEY*):PKCS8_PRIV_KEY_INFO*"/>
    <method name="EVP_PKEY2PKCS8_broken(EVP_PKEY*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="EVP_PKEY_add1_attr(EVP_PKEY*;X509_ATTRIBUTE*):int"/>
    <method name="EVP_PKEY_add1_attr_by_NID(EVP_PKEY*;int;int;const unsigned char*;int):int"/>
    <method name="EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY*;const ASN1_OBJECT*;int;const unsigned char*;int):int"/>
    <method name="EVP_PKEY_add1_attr_by_txt(EVP_PKEY*;const char*;int;const unsigned char*;int):int"/>
    <method name="EVP_PKEY_assign(EVP_PKEY*;int;char*):int"/>
    <method name="EVP_PKEY_bits(EVP_PKEY*):int"/>
    <method name="EVP_PKEY_cmp(const EVP_PKEY*;const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_cmp_parameters(const EVP_PKEY*;const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_copy_parameters(EVP_PKEY*;const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_decrypt(unsigned char*;const unsigned char*;int;EVP_PKEY*):int"/>
    <method name="EVP_PKEY_delete_attr(EVP_PKEY*;int):X509_ATTRIBUTE*"/>
    <method name="EVP_PKEY_encrypt(unsigned char*;const unsigned char*;int;EVP_PKEY*):int"/>
    <method name="EVP_PKEY_free(EVP_PKEY*):void"/>
    <method name="EVP_PKEY_get1_DH(EVP_PKEY*):dh_st*"/>
    <method name="EVP_PKEY_get1_DSA(EVP_PKEY*):dsa_st*"/>
    <method name="EVP_PKEY_get1_EC_KEY(EVP_PKEY*):ec_key_st*"/>
    <method name="EVP_PKEY_get1_RSA(EVP_PKEY*):rsa_st*"/>
    <method name="EVP_PKEY_get_attr(const EVP_PKEY*;int):X509_ATTRIBUTE*"/>
    <method name="EVP_PKEY_get_attr_by_NID(const EVP_PKEY*;int;int):int"/>
    <method name="EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY*;ASN1_OBJECT*;int):int"/>
    <method name="EVP_PKEY_get_attr_count(const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_missing_parameters(const EVP_PKEY*):int"/>
    <method name="EVP_PKEY_new():EVP_PKEY*"/>
    <method name="EVP_PKEY_save_parameters(EVP_PKEY*;int):int"/>
    <method name="EVP_PKEY_set1_DH(EVP_PKEY*;dh_st*):int"/>
    <method name="EVP_PKEY_set1_DSA(EVP_PKEY*;dsa_st*):int"/>
    <method name="EVP_PKEY_set1_EC_KEY(EVP_PKEY*;ec_key_st*):int"/>
    <method name="EVP_PKEY_set1_RSA(EVP_PKEY*;rsa_st*):int"/>
    <method name="EVP_PKEY_size(EVP_PKEY*):int"/>
    <method name="EVP_PKEY_type(int):int"/>
    <method name="EVP_SealFinal(EVP_CIPHER_CTX*;unsigned char*;int*):int"/>
    <method name="EVP_SealInit(EVP_CIPHER_CTX*;const EVP_CIPHER*;unsigned char**;int*;unsigned char*;EVP_PKEY**;int):int"/>
    <method name="EVP_SignFinal(EVP_MD_CTX*;unsigned char*;unsigned int*;EVP_PKEY*):int"/>
    <method name="EVP_VerifyFinal(EVP_MD_CTX*;const unsigned char*;unsigned int;EVP_PKEY*):int"/>
    <method name="EVP_add_cipher(const EVP_CIPHER*):int"/>
    <method name="EVP_add_digest(const EVP_MD*):int"/>
    <method name="EVP_aes_128_cbc():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_cfb128():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_ecb():const EVP_CIPHER*"/>
    <method name="EVP_aes_128_ofb():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cbc():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cfb128():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_ecb():const EVP_CIPHER*"/>
    <method name="EVP_aes_192_ofb():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cbc():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cfb128():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_ecb():const EVP_CIPHER*"/>
    <method name="EVP_aes_256_ofb():const EVP_CIPHER*"/>
    <method name="EVP_bf_cbc():const EVP_CIPHER*"/>
    <method name="EVP_bf_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_bf_ecb():const EVP_CIPHER*"/>
    <method name="EVP_bf_ofb():const EVP_CIPHER*"/>
    <method name="EVP_cast5_cbc():const EVP_CIPHER*"/>
    <method name="EVP_cast5_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_cast5_ecb():const EVP_CIPHER*"/>
    <method name="EVP_cast5_ofb():const EVP_CIPHER*"/>
    <method name="EVP_cleanup():void"/>
    <method name="EVP_des_cbc():const EVP_CIPHER*"/>
    <method name="EVP_des_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_des_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_des_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_des_ecb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cbc():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cfb1():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_cfb8():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_ecb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede3_ofb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_cbc():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_ecb():const EVP_CIPHER*"/>
    <method name="EVP_des_ede_ofb():const EVP_CIPHER*"/>
    <method name="EVP_des_ofb():const EVP_CIPHER*"/>
    <method name="EVP_desx_cbc():const EVP_CIPHER*"/>
    <method name="EVP_dss():const EVP_MD*"/>
    <method name="EVP_dss1():const EVP_MD*"/>
    <method name="EVP_ecdsa():const EVP_MD*"/>
    <method name="EVP_enc_null():const EVP_CIPHER*"/>
    <method name="EVP_get_cipherbyname(const char*):const EVP_CIPHER*"/>
    <method name="EVP_get_digestbyname(const char*):const EVP_MD*"/>
    <method name="EVP_get_pw_prompt():char*"/>
    <method name="EVP_idea_cbc():const EVP_CIPHER*"/>
    <method name="EVP_idea_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_idea_ecb():const EVP_CIPHER*"/>
    <method name="EVP_idea_ofb():const EVP_CIPHER*"/>
    <method name="EVP_md2():const EVP_MD*"/>
    <method name="EVP_md4():const EVP_MD*"/>
    <method name="EVP_md5():const EVP_MD*"/>
    <method name="EVP_md_null():const EVP_MD*"/>
    <method name="EVP_rc2_40_cbc():const EVP_CIPHER*"/>
    <method name="EVP_rc2_64_cbc():const EVP_CIPHER*"/>
    <method name="EVP_rc2_cbc():const EVP_CIPHER*"/>
    <method name="EVP_rc2_cfb64():const EVP_CIPHER*"/>
    <method name="EVP_rc2_ecb():const EVP_CIPHER*"/>
    <method name="EVP_rc2_ofb():const EVP_CIPHER*"/>
    <method name="EVP_rc4():const EVP_CIPHER*"/>
    <method name="EVP_rc4_40():const EVP_CIPHER*"/>
    <method name="EVP_read_pw_string(char*;int;const char*;int):int"/>
    <method name="EVP_ripemd160():const EVP_MD*"/>
    <method name="EVP_set_pw_prompt(const char*):void"/>
    <method name="EVP_sha():const EVP_MD*"/>
    <method name="EVP_sha1():const EVP_MD*"/>
    <method name="EVP_sha224():const EVP_MD*"/>
    <method name="EVP_sha256():const EVP_MD*"/>
    <method name="EVP_sha384():const EVP_MD*"/>
    <method name="EVP_sha512():const EVP_MD*"/>
    <method name="EXTENDED_KEY_USAGE_free(EXTENDED_KEY_USAGE*):void"/>
    <method name="EXTENDED_KEY_USAGE_new():EXTENDED_KEY_USAGE*"/>
    <method name="EnumProtocolsA(LPINT;LPVOID;LPDWORD):INT"/>
    <method name="EnumProtocolsW(LPINT;LPVOID;LPDWORD):INT"/>
    <method name="ExtAudioFileCreateWithURL(CFURLRef;AudioFileTypeID;const AudioStreamBasicDescription*;const AudioChannelLayout*;UInt32;ExtAudioFileRef*):OSStatus"/>
    <method name="ExtAudioFileDispose(ExtAudioFileRef):OSStatus"/>
    <method name="ExtAudioFileGetProperty(ExtAudioFileRef;ExtAudioFilePropertyID;UInt32*;void*):OSStatus"/>
    <method name="ExtAudioFileGetPropertyInfo(ExtAudioFileRef;ExtAudioFilePropertyID;UInt32*;Boolean*):OSStatus"/>
    <method name="ExtAudioFileOpenURL(CFURLRef;ExtAudioFileRef*):OSStatus"/>
    <method name="ExtAudioFileRead(ExtAudioFileRef;UInt32*;AudioBufferList*):OSStatus"/>
    <method name="ExtAudioFileSeek(ExtAudioFileRef;SInt64):OSStatus"/>
    <method name="ExtAudioFileSetProperty(ExtAudioFileRef;ExtAudioFilePropertyID;UInt32;const void*):OSStatus"/>
    <method name="ExtAudioFileTell(ExtAudioFileRef;SInt64*):OSStatus"/>
    <method name="ExtAudioFileWrapAudioFileID(AudioFileID;Boolean;ExtAudioFileRef*):OSStatus"/>
    <method name="ExtAudioFileWrite(ExtAudioFileRef;UInt32;const AudioBufferList*):OSStatus"/>
    <method name="ExtAudioFileWriteAsync(ExtAudioFileRef;UInt32;const AudioBufferList*):OSStatus"/>
    <method name="FBCreateNonRetainingArray():NSMutableArray*"/>
    <method name="FBIsDeviceIPad():BOOL"/>
    <method name="FMDBBlockSQLiteCallBackFunction(sqlite3_context*;int;sqlite3_value**):void"/>
    <method name="GENERAL_NAMES_free(GENERAL_NAMES*):void"/>
    <method name="GENERAL_NAMES_new():GENERAL_NAMES*"/>
    <method name="GENERAL_NAME_free(GENERAL_NAME*):void"/>
    <method name="GENERAL_NAME_new():GENERAL_NAME*"/>
    <method name="GENERAL_NAME_print(BIO*;GENERAL_NAME*):int"/>
    <method name="GENERAL_SUBTREE_free(GENERAL_SUBTREE*):void"/>
    <method name="GENERAL_SUBTREE_new():GENERAL_SUBTREE*"/>
    <method name="GLKMathDegreesToRadians(float):float"/>
    <method name="GLKMathProject(GLKVector3;GLKMatrix4;GLKMatrix4;int*):GLKVector3"/>
    <method name="GLKMathRadiansToDegrees(float):float"/>
    <method name="GLKMathUnproject(GLKVector3;GLKMatrix4;GLKMatrix4;int*;_Bool*):GLKVector3"/>
    <method name="GLKMatrix3Add(GLKMatrix3;GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix3GetColumn(GLKMatrix3;int):GLKVector3"/>
    <method name="GLKMatrix3GetMatrix2(GLKMatrix3):GLKMatrix2"/>
    <method name="GLKMatrix3GetRow(GLKMatrix3;int):GLKVector3"/>
    <method name="GLKMatrix3Invert(GLKMatrix3;_Bool*):GLKMatrix3"/>
    <method name="GLKMatrix3InvertAndTranspose(GLKMatrix3;_Bool*):GLKMatrix3"/>
    <method name="GLKMatrix3Make(float;float;float;float;float;float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeAndTranspose(float;float;float;float;float;float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeRotation(float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeScale(float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithArray(float*):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithArrayAndTranspose(float*):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithColumns(GLKVector3;GLKVector3;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithQuaternion(GLKQuaternion):GLKMatrix3"/>
    <method name="GLKMatrix3MakeWithRows(GLKVector3;GLKVector3;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3MakeXRotation(float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeYRotation(float):GLKMatrix3"/>
    <method name="GLKMatrix3MakeZRotation(float):GLKMatrix3"/>
    <method name="GLKMatrix3Multiply(GLKMatrix3;GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix3MultiplyVector3(GLKMatrix3;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix3MultiplyVector3Array(GLKMatrix3;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix3Rotate(GLKMatrix3;float;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3RotateWithVector3(GLKMatrix3;float;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3RotateWithVector4(GLKMatrix3;float;GLKVector4):GLKMatrix3"/>
    <method name="GLKMatrix3RotateX(GLKMatrix3;float):GLKMatrix3"/>
    <method name="GLKMatrix3RotateY(GLKMatrix3;float):GLKMatrix3"/>
    <method name="GLKMatrix3RotateZ(GLKMatrix3;float):GLKMatrix3"/>
    <method name="GLKMatrix3Scale(GLKMatrix3;float;float;float):GLKMatrix3"/>
    <method name="GLKMatrix3ScaleWithVector3(GLKMatrix3;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3ScaleWithVector4(GLKMatrix3;GLKVector4):GLKMatrix3"/>
    <method name="GLKMatrix3SetColumn(GLKMatrix3;int;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3SetRow(GLKMatrix3;int;GLKVector3):GLKMatrix3"/>
    <method name="GLKMatrix3Subtract(GLKMatrix3;GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix3Transpose(GLKMatrix3):GLKMatrix3"/>
    <method name="GLKMatrix4Add(GLKMatrix4;GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrix4GetColumn(GLKMatrix4;int):GLKVector4"/>
    <method name="GLKMatrix4GetMatrix2(GLKMatrix4):GLKMatrix2"/>
    <method name="GLKMatrix4GetMatrix3(GLKMatrix4):GLKMatrix3"/>
    <method name="GLKMatrix4GetRow(GLKMatrix4;int):GLKVector4"/>
    <method name="GLKMatrix4Invert(GLKMatrix4;_Bool*):GLKMatrix4"/>
    <method name="GLKMatrix4InvertAndTranspose(GLKMatrix4;_Bool*):GLKMatrix4"/>
    <method name="GLKMatrix4Make(float;float;float;float;float;float;float;float;float;float;float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeAndTranspose(float;float;float;float;float;float;float;float;float;float;float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeFrustum(float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeLookAt(float;float;float;float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeOrtho(float;float;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakePerspective(float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeRotation(float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeScale(float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeTranslation(float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithArray(float*):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithArrayAndTranspose(float*):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithColumns(GLKVector4;GLKVector4;GLKVector4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithQuaternion(GLKQuaternion):GLKMatrix4"/>
    <method name="GLKMatrix4MakeWithRows(GLKVector4;GLKVector4;GLKVector4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4MakeXRotation(float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeYRotation(float):GLKMatrix4"/>
    <method name="GLKMatrix4MakeZRotation(float):GLKMatrix4"/>
    <method name="GLKMatrix4Multiply(GLKMatrix4;GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrix4MultiplyAndProjectVector3(GLKMatrix4;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix4MultiplyAndProjectVector3Array(GLKMatrix4;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix4MultiplyVector3(GLKMatrix4;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix4MultiplyVector3Array(GLKMatrix4;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix4MultiplyVector3ArrayWithTranslation(GLKMatrix4;GLKVector3*;size_t):void"/>
    <method name="GLKMatrix4MultiplyVector3WithTranslation(GLKMatrix4;GLKVector3):GLKVector3"/>
    <method name="GLKMatrix4MultiplyVector4(GLKMatrix4;GLKVector4):GLKVector4"/>
    <method name="GLKMatrix4MultiplyVector4Array(GLKMatrix4;GLKVector4*;size_t):void"/>
    <method name="GLKMatrix4Rotate(GLKMatrix4;float;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4RotateWithVector3(GLKMatrix4;float;GLKVector3):GLKMatrix4"/>
    <method name="GLKMatrix4RotateWithVector4(GLKMatrix4;float;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4RotateX(GLKMatrix4;float):GLKMatrix4"/>
    <method name="GLKMatrix4RotateY(GLKMatrix4;float):GLKMatrix4"/>
    <method name="GLKMatrix4RotateZ(GLKMatrix4;float):GLKMatrix4"/>
    <method name="GLKMatrix4Scale(GLKMatrix4;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4ScaleWithVector3(GLKMatrix4;GLKVector3):GLKMatrix4"/>
    <method name="GLKMatrix4ScaleWithVector4(GLKMatrix4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4SetColumn(GLKMatrix4;int;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4SetRow(GLKMatrix4;int;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4Subtract(GLKMatrix4;GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrix4Translate(GLKMatrix4;float;float;float):GLKMatrix4"/>
    <method name="GLKMatrix4TranslateWithVector3(GLKMatrix4;GLKVector3):GLKMatrix4"/>
    <method name="GLKMatrix4TranslateWithVector4(GLKMatrix4;GLKVector4):GLKMatrix4"/>
    <method name="GLKMatrix4Transpose(GLKMatrix4):GLKMatrix4"/>
    <method name="GLKMatrixStackCreate(CFAllocatorRef):GLKMatrixStackRef"/>
    <method name="GLKMatrixStackGetMatrix2(GLKMatrixStackRef):GLKMatrix2"/>
    <method name="GLKMatrixStackGetMatrix3(GLKMatrixStackRef):GLKMatrix3"/>
    <method name="GLKMatrixStackGetMatrix3Inverse(GLKMatrixStackRef):GLKMatrix3"/>
    <method name="GLKMatrixStackGetMatrix3InverseTranspose(GLKMatrixStackRef):GLKMatrix3"/>
    <method name="GLKMatrixStackGetMatrix4(GLKMatrixStackRef):GLKMatrix4"/>
    <method name="GLKMatrixStackGetMatrix4Inverse(GLKMatrixStackRef):GLKMatrix4"/>
    <method name="GLKMatrixStackGetMatrix4InverseTranspose(GLKMatrixStackRef):GLKMatrix4"/>
    <method name="GLKMatrixStackGetTypeID():CFTypeID"/>
    <method name="GLKMatrixStackLoadMatrix4(GLKMatrixStackRef;GLKMatrix4):void"/>
    <method name="GLKMatrixStackMultiplyMatrix4(GLKMatrixStackRef;GLKMatrix4):void"/>
    <method name="GLKMatrixStackMultiplyMatrixStack(GLKMatrixStackRef;GLKMatrixStackRef):void"/>
    <method name="GLKMatrixStackPop(GLKMatrixStackRef):void"/>
    <method name="GLKMatrixStackPush(GLKMatrixStackRef):void"/>
    <method name="GLKMatrixStackRotate(GLKMatrixStackRef;float;float;float;float):void"/>
    <method name="GLKMatrixStackRotateWithVector3(GLKMatrixStackRef;float;GLKVector3):void"/>
    <method name="GLKMatrixStackRotateWithVector4(GLKMatrixStackRef;float;GLKVector4):void"/>
    <method name="GLKMatrixStackRotateX(GLKMatrixStackRef;float):void"/>
    <method name="GLKMatrixStackRotateY(GLKMatrixStackRef;float):void"/>
    <method name="GLKMatrixStackRotateZ(GLKMatrixStackRef;float):void"/>
    <method name="GLKMatrixStackScale(GLKMatrixStackRef;float;float;float):void"/>
    <method name="GLKMatrixStackScaleWithVector3(GLKMatrixStackRef;GLKVector3):void"/>
    <method name="GLKMatrixStackScaleWithVector4(GLKMatrixStackRef;GLKVector4):void"/>
    <method name="GLKMatrixStackSize(GLKMatrixStackRef):int"/>
    <method name="GLKMatrixStackTranslate(GLKMatrixStackRef;float;float;float):void"/>
    <method name="GLKMatrixStackTranslateWithVector3(GLKMatrixStackRef;GLKVector3):void"/>
    <method name="GLKMatrixStackTranslateWithVector4(GLKMatrixStackRef;GLKVector4):void"/>
    <method name="GLKQuaternionAdd(GLKQuaternion;GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionAngle(GLKQuaternion):float"/>
    <method name="GLKQuaternionAxis(GLKQuaternion):GLKVector3"/>
    <method name="GLKQuaternionConjugate(GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionInvert(GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionLength(GLKQuaternion):float"/>
    <method name="GLKQuaternionMake(float;float;float;float):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithAngleAndAxis(float;float;float;float):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithAngleAndVector3Axis(float;GLKVector3):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithArray(float*):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithMatrix3(GLKMatrix3):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithMatrix4(GLKMatrix4):GLKQuaternion"/>
    <method name="GLKQuaternionMakeWithVector3(GLKVector3;float):GLKQuaternion"/>
    <method name="GLKQuaternionMultiply(GLKQuaternion;GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionNormalize(GLKQuaternion):GLKQuaternion"/>
    <method name="GLKQuaternionRotateVector3(GLKQuaternion;GLKVector3):GLKVector3"/>
    <method name="GLKQuaternionRotateVector3Array(GLKQuaternion;GLKVector3*;size_t):void"/>
    <method name="GLKQuaternionRotateVector4(GLKQuaternion;GLKVector4):GLKVector4"/>
    <method name="GLKQuaternionRotateVector4Array(GLKQuaternion;GLKVector4*;size_t):void"/>
    <method name="GLKQuaternionSlerp(GLKQuaternion;GLKQuaternion;float):GLKQuaternion"/>
    <method name="GLKQuaternionSubtract(GLKQuaternion;GLKQuaternion):GLKQuaternion"/>
    <method name="GLKVector2Add(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2AddScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2AllEqualToScalar(GLKVector2;float):_Bool"/>
    <method name="GLKVector2AllEqualToVector2(GLKVector2;GLKVector2):_Bool"/>
    <method name="GLKVector2AllGreaterThanOrEqualToScalar(GLKVector2;float):_Bool"/>
    <method name="GLKVector2AllGreaterThanOrEqualToVector2(GLKVector2;GLKVector2):_Bool"/>
    <method name="GLKVector2AllGreaterThanScalar(GLKVector2;float):_Bool"/>
    <method name="GLKVector2AllGreaterThanVector2(GLKVector2;GLKVector2):_Bool"/>
    <method name="GLKVector2Distance(GLKVector2;GLKVector2):float"/>
    <method name="GLKVector2Divide(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2DivideScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2DotProduct(GLKVector2;GLKVector2):float"/>
    <method name="GLKVector2Length(GLKVector2):float"/>
    <method name="GLKVector2Lerp(GLKVector2;GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2Make(float;float):GLKVector2"/>
    <method name="GLKVector2MakeWithArray(float*):GLKVector2"/>
    <method name="GLKVector2Maximum(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2Minimum(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2Multiply(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2MultiplyScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector2Negate(GLKVector2):GLKVector2"/>
    <method name="GLKVector2Normalize(GLKVector2):GLKVector2"/>
    <method name="GLKVector2Project(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2Subtract(GLKVector2;GLKVector2):GLKVector2"/>
    <method name="GLKVector2SubtractScalar(GLKVector2;float):GLKVector2"/>
    <method name="GLKVector3Add(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3AddScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3AllEqualToScalar(GLKVector3;float):_Bool"/>
    <method name="GLKVector3AllEqualToVector3(GLKVector3;GLKVector3):_Bool"/>
    <method name="GLKVector3AllGreaterThanOrEqualToScalar(GLKVector3;float):_Bool"/>
    <method name="GLKVector3AllGreaterThanOrEqualToVector3(GLKVector3;GLKVector3):_Bool"/>
    <method name="GLKVector3AllGreaterThanScalar(GLKVector3;float):_Bool"/>
    <method name="GLKVector3AllGreaterThanVector3(GLKVector3;GLKVector3):_Bool"/>
    <method name="GLKVector3CrossProduct(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Distance(GLKVector3;GLKVector3):float"/>
    <method name="GLKVector3Divide(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3DivideScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3DotProduct(GLKVector3;GLKVector3):float"/>
    <method name="GLKVector3Length(GLKVector3):float"/>
    <method name="GLKVector3Lerp(GLKVector3;GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3Make(float;float;float):GLKVector3"/>
    <method name="GLKVector3MakeWithArray(float*):GLKVector3"/>
    <method name="GLKVector3Maximum(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Minimum(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Multiply(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3MultiplyScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector3Negate(GLKVector3):GLKVector3"/>
    <method name="GLKVector3Normalize(GLKVector3):GLKVector3"/>
    <method name="GLKVector3Project(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3Subtract(GLKVector3;GLKVector3):GLKVector3"/>
    <method name="GLKVector3SubtractScalar(GLKVector3;float):GLKVector3"/>
    <method name="GLKVector4Add(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4AddScalar(GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4AllEqualToScalar(GLKVector4;float):_Bool"/>
    <method name="GLKVector4AllEqualToVector4(GLKVector4;GLKVector4):_Bool"/>
    <method name="GLKVector4AllGreaterThanOrEqualToScalar(GLKVector4;float):_Bool"/>
    <method name="GLKVector4AllGreaterThanOrEqualToVector4(GLKVector4;GLKVector4):_Bool"/>
    <method name="GLKVector4AllGreaterThanScalar(GLKVector4;float):_Bool"/>
    <method name="GLKVector4AllGreaterThanVector4(GLKVector4;GLKVector4):_Bool"/>
    <method name="GLKVector4CrossProduct(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Distance(GLKVector4;GLKVector4):float"/>
    <method name="GLKVector4Divide(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4DivideScalar(GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4DotProduct(GLKVector4;GLKVector4):float"/>
    <method name="GLKVector4Length(GLKVector4):float"/>
    <method name="GLKVector4Lerp(GLKVector4;GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4Make(float;float;float;float):GLKVector4"/>
    <method name="GLKVector4MakeWithArray(float*):GLKVector4"/>
    <method name="GLKVector4MakeWithVector3(GLKVector3;float):GLKVector4"/>
    <method name="GLKVector4Maximum(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Minimum(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Multiply(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4MultiplyScalar(GLKVector4;float):GLKVector4"/>
    <method name="GLKVector4Negate(GLKVector4):GLKVector4"/>
    <method name="GLKVector4Normalize(GLKVector4):GLKVector4"/>
    <method name="GLKVector4Project(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4Subtract(GLKVector4;GLKVector4):GLKVector4"/>
    <method name="GLKVector4SubtractScalar(GLKVector4;float):GLKVector4"/>
    <method name="GetAcceptExSockaddrs(PVOID;DWORD;DWORD;DWORD;sockaddr**;LPINT;sockaddr**;LPINT):void"/>
    <method name="GetAddressByNameA(DWORD;LPGUID;LPSTR;LPINT;DWORD;LPSERVICE_ASYNC_INFO;LPVOID;LPDWORD;LPSTR;LPDWORD):INT"/>
    <method name="GetAddressByNameW(DWORD;LPGUID;LPWSTR;LPINT;DWORD;LPSERVICE_ASYNC_INFO;LPVOID;LPDWORD;LPWSTR;LPDWORD):INT"/>
    <method name="GetEncSChannel(BYTE**;DWORD*):BOOL"/>
    <method name="GetNameByTypeA(LPGUID;LPSTR;DWORD):INT"/>
    <method name="GetNameByTypeW(LPGUID;LPWSTR;DWORD):INT"/>
    <method name="GetServiceDisplayNameA(SC_HANDLE;LPCSTR;LPSTR;LPDWORD):BOOL"/>
    <method name="GetTypeByNameA(LPSTR;LPGUID):INT"/>
    <method name="GetTypeByNameW(LPWSTR;LPGUID):INT"/>
    <method name="HMAC(const EVP_MD*;const void*;int;const unsigned char*;size_t;unsigned char*;unsigned int*):unsigned char*"/>
    <method name="HMAC_CTX_cleanup(HMAC_CTX*):void"/>
    <method name="HMAC_CTX_init(HMAC_CTX*):void"/>
    <method name="HMAC_Final(HMAC_CTX*;unsigned char*;unsigned int*):void"/>
    <method name="HMAC_Init(HMAC_CTX*;const void*;int;const EVP_MD*):void"/>
    <method name="HMAC_Init_ex(HMAC_CTX*;const void*;int;const EVP_MD*;ENGINE*):void"/>
    <method name="HMAC_Update(HMAC_CTX*;const unsigned char*;size_t):void"/>
    <method name="ICEnroll.acceptFilePKCS7(BSTR):HRESULT"/>
    <method name="ICEnroll.acceptPKCS7(BSTR):HRESULT"/>
    <method name="ICEnroll.createFilePKCS10(BSTR;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll.createPKCS10(BSTR;BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll.enumContainers(LONG;BSTR*):HRESULT"/>
    <method name="ICEnroll.enumProviders(LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICEnroll.freeRequestInfo(BSTR):HRESULT"/>
    <method name="ICEnroll.getCertFromPKCS7(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll.get_CAStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_CAStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_CAStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_ContainerName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_DeleteRequestCert(BOOL*):HRESULT"/>
    <method name="ICEnroll.get_GenKeyFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_HashAlgorithm(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_KeySpec(LONG*):HRESULT"/>
    <method name="ICEnroll.get_MyStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_MyStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_MyStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_PVKFileName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_ProviderFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_ProviderName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_ProviderType(LONG*):HRESULT"/>
    <method name="ICEnroll.get_RequestStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_RequestStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_RequestStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_RootStoreFlags(LONG*):HRESULT"/>
    <method name="ICEnroll.get_RootStoreName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_RootStoreType(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_SPCFileName(BSTR*):HRESULT"/>
    <method name="ICEnroll.get_UseExistingKeySet(BOOL*):HRESULT"/>
    <method name="ICEnroll.get_WriteCertToCSP(BOOL*):HRESULT"/>
    <method name="ICEnroll.put_CAStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_CAStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_CAStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_ContainerName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_DeleteRequestCert(BOOL):HRESULT"/>
    <method name="ICEnroll.put_GenKeyFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_HashAlgorithm(BSTR):HRESULT"/>
    <method name="ICEnroll.put_KeySpec(LONG):HRESULT"/>
    <method name="ICEnroll.put_MyStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_MyStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_MyStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_PVKFileName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_ProviderFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_ProviderName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_ProviderType(LONG):HRESULT"/>
    <method name="ICEnroll.put_RequestStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_RequestStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_RequestStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_RootStoreFlags(LONG):HRESULT"/>
    <method name="ICEnroll.put_RootStoreName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_RootStoreType(BSTR):HRESULT"/>
    <method name="ICEnroll.put_SPCFileName(BSTR):HRESULT"/>
    <method name="ICEnroll.put_UseExistingKeySet(BOOL):HRESULT"/>
    <method name="ICEnroll.put_WriteCertToCSP(BOOL):HRESULT"/>
    <method name="ICEnroll2.addCertTypeToRequest(BSTR):HRESULT"/>
    <method name="ICEnroll2.addNameValuePairToSignature(BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll2.get_EnableT61DNEncoding(BOOL*):HRESULT"/>
    <method name="ICEnroll2.get_WriteCertToUserDS(BOOL*):HRESULT"/>
    <method name="ICEnroll2.put_EnableT61DNEncoding(BOOL):HRESULT"/>
    <method name="ICEnroll2.put_WriteCertToUserDS(BOOL):HRESULT"/>
    <method name="ICEnroll3.EnumAlgs(LONG;LONG;LONG*):HRESULT"/>
    <method name="ICEnroll3.GetAlgName(LONG;BSTR*):HRESULT"/>
    <method name="ICEnroll3.GetKeyLen(BOOL;BOOL;LONG*):HRESULT"/>
    <method name="ICEnroll3.GetSupportedKeySpec(LONG*):HRESULT"/>
    <method name="ICEnroll3.InstallPKCS7(BSTR):HRESULT"/>
    <method name="ICEnroll3.Reset():HRESULT"/>
    <method name="ICEnroll3.get_EnableSMIMECapabilities(BOOL*):HRESULT"/>
    <method name="ICEnroll3.get_HashAlgID(LONG*):HRESULT"/>
    <method name="ICEnroll3.get_LimitExchangeKeyToEncipherment(BOOL*):HRESULT"/>
    <method name="ICEnroll3.get_ReuseHardwareKeyIfUnableToGenNew(BOOL*):HRESULT"/>
    <method name="ICEnroll3.put_EnableSMIMECapabilities(BOOL):HRESULT"/>
    <method name="ICEnroll3.put_HashAlgID(LONG):HRESULT"/>
    <method name="ICEnroll3.put_LimitExchangeKeyToEncipherment(BOOL):HRESULT"/>
    <method name="ICEnroll3.put_ReuseHardwareKeyIfUnableToGenNew(BOOL):HRESULT"/>
    <method name="ICEnroll4.GetKeyLenEx(LONG;LONG;LONG*):HRESULT"/>
    <method name="ICEnroll4.InstallPKCS7Ex(BSTR;LONG*):HRESULT"/>
    <method name="ICEnroll4.acceptFileResponse(BSTR):HRESULT"/>
    <method name="ICEnroll4.acceptResponse(BSTR):HRESULT"/>
    <method name="ICEnroll4.addAttributeToRequest(LONG;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.addBlobPropertyToCertificate(LONG;LONG;BSTR):HRESULT"/>
    <method name="ICEnroll4.addCertTypeToRequestEx(LONG;BSTR;LONG;BOOL;LONG):HRESULT"/>
    <method name="ICEnroll4.addExtensionToRequest(LONG;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.addNameValuePairToRequest(LONG;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.binaryToString(LONG;BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.createFilePFX(BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.createFileRequest(LONG;BSTR;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.createPFX(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.createRequest(LONG;BSTR;BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.enumPendingRequest(LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICEnroll4.getCertFromFileResponse(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.getCertFromResponse(BSTR;BSTR*):HRESULT"/>
    <method name="ICEnroll4.getProviderType(BSTR;LONG*):HRESULT"/>
    <method name="ICEnroll4.get_ClientId(LONG*):HRESULT"/>
    <method name="ICEnroll4.get_IncludeSubjectKeyID(BOOL*):HRESULT"/>
    <method name="ICEnroll4.get_PrivateKeyArchiveCertificate(BSTR*):HRESULT"/>
    <method name="ICEnroll4.get_ThumbPrint(BSTR*):HRESULT"/>
    <method name="ICEnroll4.put_ClientId(LONG):HRESULT"/>
    <method name="ICEnroll4.put_IncludeSubjectKeyID(BOOL):HRESULT"/>
    <method name="ICEnroll4.put_PrivateKeyArchiveCertificate(BSTR):HRESULT"/>
    <method name="ICEnroll4.put_SignerCertificate(BSTR):HRESULT"/>
    <method name="ICEnroll4.put_ThumbPrint(BSTR):HRESULT"/>
    <method name="ICEnroll4.removePendingRequest(BSTR):HRESULT"/>
    <method name="ICEnroll4.resetAttributes():HRESULT"/>
    <method name="ICEnroll4.resetBlobProperties():HRESULT"/>
    <method name="ICEnroll4.resetExtensions():HRESULT"/>
    <method name="ICEnroll4.setPendingRequestInfo(LONG;BSTR;BSTR;BSTR):HRESULT"/>
    <method name="ICEnroll4.stringToBinary(LONG;BSTR;BSTR*):HRESULT"/>
    <method name="ICertAdmin.DenyRequest(BSTR;LONG):HRESULT"/>
    <method name="ICertAdmin.GetCRL(BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertAdmin.GetRevocationReason(LONG*):HRESULT"/>
    <method name="ICertAdmin.ImportCertificate(BSTR;BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin.IsValidCertificate(BSTR;BSTR;LONG*):HRESULT"/>
    <method name="ICertAdmin.PublishCRL(BSTR;DATE):HRESULT"/>
    <method name="ICertAdmin.ResubmitRequest(BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin.RevokeCertificate(BSTR;BSTR;LONG;DATE):HRESULT"/>
    <method name="ICertAdmin.SetCertificateExtension(BSTR;LONG;BSTR;LONG;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertAdmin.SetRequestAttributes(BSTR;LONG;BSTR):HRESULT"/>
    <method name="ICertAdmin2.DeleteRow(BSTR;LONG;DATE;LONG;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin2.GetArchivedKey(BSTR;LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICertAdmin2.GetCAProperty(BSTR;LONG;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertAdmin2.GetCAPropertyDisplayName(BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertAdmin2.GetCAPropertyFlags(BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertAdmin2.GetConfigEntry(BSTR;BSTR;BSTR;VARIANT*):HRESULT"/>
    <method name="ICertAdmin2.GetMyRoles(BSTR;LONG*):HRESULT"/>
    <method name="ICertAdmin2.ImportKey(BSTR;LONG;BSTR;LONG;BSTR):HRESULT"/>
    <method name="ICertAdmin2.PublishCRLs(BSTR;DATE;LONG):HRESULT"/>
    <method name="ICertAdmin2.SetCAProperty(BSTR;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertAdmin2.SetConfigEntry(BSTR;BSTR;BSTR;VARIANT*):HRESULT"/>
    <method name="ICertConfig.GetConfig(LONG;BSTR*):HRESULT"/>
    <method name="ICertConfig.GetField(BSTR;BSTR*):HRESULT"/>
    <method name="ICertConfig.Next(LONG*):HRESULT"/>
    <method name="ICertConfig.Reset(LONG;LONG*):HRESULT"/>
    <method name="ICertConfig2.SetSharedFolder(BSTR):HRESULT"/>
    <method name="ICertEncodeAltName.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeAltName.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeAltName.GetName(LONG;BSTR*):HRESULT"/>
    <method name="ICertEncodeAltName.GetNameChoice(LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeAltName.GetNameCount(LONG*):HRESULT"/>
    <method name="ICertEncodeAltName.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeAltName.SetNameEntry(LONG;LONG;BSTR):HRESULT"/>
    <method name="ICertEncodeBitString.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeBitString.Encode(LONG;BSTR;BSTR*):HRESULT"/>
    <method name="ICertEncodeBitString.GetBitCount(LONG*):HRESULT"/>
    <method name="ICertEncodeBitString.GetBitString(BSTR*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetDistPointCount(LONG*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetName(LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetNameChoice(LONG;LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.GetNameCount(LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.SetNameCount(LONG;LONG):HRESULT"/>
    <method name="ICertEncodeCRLDistInfo.SetNameEntry(LONG;LONG;LONG;BSTR):HRESULT"/>
    <method name="ICertEncodeDateArray.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeDateArray.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeDateArray.GetCount(LONG*):HRESULT"/>
    <method name="ICertEncodeDateArray.GetValue(LONG;DATE*):HRESULT"/>
    <method name="ICertEncodeDateArray.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeDateArray.SetValue(LONG;DATE):HRESULT"/>
    <method name="ICertEncodeLongArray.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeLongArray.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeLongArray.GetCount(LONG*):HRESULT"/>
    <method name="ICertEncodeLongArray.GetValue(LONG;LONG*):HRESULT"/>
    <method name="ICertEncodeLongArray.Reset(LONG):HRESULT"/>
    <method name="ICertEncodeLongArray.SetValue(LONG;LONG):HRESULT"/>
    <method name="ICertEncodeStringArray.Decode(BSTR):HRESULT"/>
    <method name="ICertEncodeStringArray.Encode(BSTR*):HRESULT"/>
    <method name="ICertEncodeStringArray.GetCount(LONG*):HRESULT"/>
    <method name="ICertEncodeStringArray.GetStringType(LONG*):HRESULT"/>
    <method name="ICertEncodeStringArray.GetValue(LONG;BSTR*):HRESULT"/>
    <method name="ICertEncodeStringArray.Reset(LONG;LONG):HRESULT"/>
    <method name="ICertEncodeStringArray.SetValue(LONG;BSTR):HRESULT"/>
    <method name="ICertExit.GetDescription(BSTR*):HRESULT"/>
    <method name="ICertExit.Initialize(BSTR;LONG*):HRESULT"/>
    <method name="ICertExit.Notify(LONG;LONG):HRESULT"/>
    <method name="ICertExit2.GetManageModule(ICertManageModule**):HRESULT"/>
    <method name="ICertGetConfig.GetConfig(LONG;BSTR*):HRESULT"/>
    <method name="ICertManageModule.Configure(BSTR;BSTR;LONG):HRESULT"/>
    <method name="ICertManageModule.GetProperty(BSTR;BSTR;BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertManageModule.SetProperty(BSTR;BSTR;BSTR;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertPolicy.GetDescription(BSTR*):HRESULT"/>
    <method name="ICertPolicy.Initialize(BSTR):HRESULT"/>
    <method name="ICertPolicy.ShutDown():HRESULT"/>
    <method name="ICertPolicy.VerifyRequest(BSTR;LONG;LONG;LONG;LONG*):HRESULT"/>
    <method name="ICertPolicy2.GetManageModule(ICertManageModule**):HRESULT"/>
    <method name="ICertRequest.GetCACertificate(LONG;BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest.GetCertificate(LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest.GetDispositionMessage(BSTR*):HRESULT"/>
    <method name="ICertRequest.GetLastStatus(LONG*):HRESULT"/>
    <method name="ICertRequest.GetRequestId(LONG*):HRESULT"/>
    <method name="ICertRequest.RetrievePending(LONG;BSTR;LONG*):HRESULT"/>
    <method name="ICertRequest.Submit(LONG;BSTR;BSTR;BSTR;LONG*):HRESULT"/>
    <method name="ICertRequest2.GetCAProperty(BSTR;LONG;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertRequest2.GetCAPropertyDisplayName(BSTR;LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest2.GetCAPropertyFlags(BSTR;LONG;LONG*):HRESULT"/>
    <method name="ICertRequest2.GetErrorMessageText(LONG;LONG;BSTR*):HRESULT"/>
    <method name="ICertRequest2.GetFullResponseProperty(LONG;LONG;LONG;LONG;VARIANT*):HRESULT"/>
    <method name="ICertRequest2.GetIssuedCertificate(BSTR;LONG;BSTR;LONG*):HRESULT"/>
    <method name="ICertServerExit.EnumerateAttributes(BSTR*):HRESULT"/>
    <method name="ICertServerExit.EnumerateAttributesClose():HRESULT"/>
    <method name="ICertServerExit.EnumerateAttributesSetup(LONG):HRESULT"/>
    <method name="ICertServerExit.EnumerateExtensions(BSTR*):HRESULT"/>
    <method name="ICertServerExit.EnumerateExtensionsClose():HRESULT"/>
    <method name="ICertServerExit.EnumerateExtensionsSetup(LONG):HRESULT"/>
    <method name="ICertServerExit.GetCertificateExtension(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerExit.GetCertificateExtensionFlags(LONG*):HRESULT"/>
    <method name="ICertServerExit.GetCertificateProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerExit.GetRequestAttribute(BSTR;BSTR*):HRESULT"/>
    <method name="ICertServerExit.GetRequestProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerExit.SetContext(LONG):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateAttributes(BSTR*):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateAttributesClose():HRESULT"/>
    <method name="ICertServerPolicy.EnumerateAttributesSetup(LONG):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateExtensions(BSTR*):HRESULT"/>
    <method name="ICertServerPolicy.EnumerateExtensionsClose():HRESULT"/>
    <method name="ICertServerPolicy.EnumerateExtensionsSetup(LONG):HRESULT"/>
    <method name="ICertServerPolicy.GetCertificateExtension(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.GetCertificateExtensionFlags(LONG*):HRESULT"/>
    <method name="ICertServerPolicy.GetCertificateProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.GetRequestAttribute(BSTR;BSTR*):HRESULT"/>
    <method name="ICertServerPolicy.GetRequestProperty(BSTR;LONG;VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.SetCertificateExtension(BSTR;LONG;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.SetCertificateProperty(BSTR;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertServerPolicy.SetContext(LONG):HRESULT"/>
    <method name="ICertView.EnumCertViewColumn(LONG;IEnumCERTVIEWCOLUMN**):HRESULT"/>
    <method name="ICertView.GetColumnCount(LONG;LONG*):HRESULT"/>
    <method name="ICertView.GetColumnIndex(LONG;BSTR;LONG*):HRESULT"/>
    <method name="ICertView.OpenConnection(BSTR):HRESULT"/>
    <method name="ICertView.OpenView(IEnumCERTVIEWROW**):HRESULT"/>
    <method name="ICertView.SetRestriction(LONG;LONG;LONG;const VARIANT*):HRESULT"/>
    <method name="ICertView.SetResultColumn(LONG):HRESULT"/>
    <method name="ICertView.SetResultColumnCount(LONG):HRESULT"/>
    <method name="ICertView2.SetTable(LONG):HRESULT"/>
    <method name="IEnroll.AddAuthenticatedAttributesToPKCS7Request(PCRYPT_ATTRIBUTES):HRESULT"/>
    <method name="IEnroll.AddCertTypeToRequestWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.AddExtensionsToRequest(PCERT_EXTENSIONS):HRESULT"/>
    <method name="IEnroll.AddNameValuePairToSignatureWStr(LPWSTR;LPWSTR):HRESULT"/>
    <method name="IEnroll.CreatePKCS7RequestFromRequest(PCRYPT_DATA_BLOB;PCCERT_CONTEXT;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.acceptFilePKCS7WStr(LPCWSTR):HRESULT"/>
    <method name="IEnroll.acceptPKCS7Blob(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.createFilePKCS10WStr(LPCWSTR;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll.createPKCS10WStr(LPCWSTR;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.enumContainersWStr(LONG;LPWSTR*):HRESULT"/>
    <method name="IEnroll.enumProvidersWStr(LONG;LONG;LPWSTR*):HRESULT"/>
    <method name="IEnroll.freeRequestInfoBlob(CRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll.getCAStore():HCERTSTORE"/>
    <method name="IEnroll.getCertContextFromPKCS7(PCRYPT_DATA_BLOB):PCCERT_CONTEXT"/>
    <method name="IEnroll.getMyStore():HCERTSTORE"/>
    <method name="IEnroll.getROOTHStore():HCERTSTORE"/>
    <method name="IEnroll.get_CAStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_CAStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_CAStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_ContainerNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_DeleteRequestCert(BOOL*):HRESULT"/>
    <method name="IEnroll.get_EnableT61DNEncoding(BOOL*):HRESULT"/>
    <method name="IEnroll.get_GenKeyFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_HashAlgorithmWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_KeySpec(LONG*):HRESULT"/>
    <method name="IEnroll.get_MyStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_MyStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_MyStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_PVKFileNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_ProviderFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_ProviderNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_ProviderType(LONG*):HRESULT"/>
    <method name="IEnroll.get_RenewalCertificate(PCCERT_CONTEXT*):HRESULT"/>
    <method name="IEnroll.get_RequestStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_RequestStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_RequestStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_RootStoreFlags(LONG*):HRESULT"/>
    <method name="IEnroll.get_RootStoreNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_RootStoreTypeWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_SPCFileNameWStr(LPWSTR*):HRESULT"/>
    <method name="IEnroll.get_UseExistingKeySet(BOOL*):HRESULT"/>
    <method name="IEnroll.get_WriteCertToCSP(BOOL*):HRESULT"/>
    <method name="IEnroll.get_WriteCertToUserDS(BOOL*):HRESULT"/>
    <method name="IEnroll.put_CAStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_CAStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_CAStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_ContainerNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_DeleteRequestCert(BOOL):HRESULT"/>
    <method name="IEnroll.put_EnableT61DNEncoding(BOOL):HRESULT"/>
    <method name="IEnroll.put_GenKeyFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_HashAlgorithmWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_KeySpec(LONG):HRESULT"/>
    <method name="IEnroll.put_MyStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_MyStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_MyStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_PVKFileNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_ProviderFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_ProviderNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_ProviderType(LONG):HRESULT"/>
    <method name="IEnroll.put_RenewalCertificate(PCCERT_CONTEXT):HRESULT"/>
    <method name="IEnroll.put_RequestStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_RequestStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_RequestStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_RootStoreFlags(LONG):HRESULT"/>
    <method name="IEnroll.put_RootStoreNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_RootStoreTypeWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_SPCFileNameWStr(LPWSTR):HRESULT"/>
    <method name="IEnroll.put_UseExistingKeySet(BOOL):HRESULT"/>
    <method name="IEnroll.put_WriteCertToCSP(BOOL):HRESULT"/>
    <method name="IEnroll.put_WriteCertToUserDS(BOOL):HRESULT"/>
    <method name="IEnroll2.EnumAlgs(LONG;LONG;LONG*):HRESULT"/>
    <method name="IEnroll2.GetAlgNameWStr(LONG;LPWSTR*):HRESULT"/>
    <method name="IEnroll2.GetKeyLen(BOOL;BOOL;LONG*):HRESULT"/>
    <method name="IEnroll2.GetSupportedKeySpec(LONG*):HRESULT"/>
    <method name="IEnroll2.InstallPKCS7Blob(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll2.Reset():HRESULT"/>
    <method name="IEnroll2.SetHStoreCA(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.SetHStoreMy(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.SetHStoreROOT(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.SetHStoreRequest(HCERTSTORE):HRESULT"/>
    <method name="IEnroll2.get_EnableSMIMECapabilities(BOOL*):HRESULT"/>
    <method name="IEnroll2.get_HashAlgID(LONG*):HRESULT"/>
    <method name="IEnroll2.get_LimitExchangeKeyToEncipherment(BOOL*):HRESULT"/>
    <method name="IEnroll2.get_ReuseHardwareKeyIfUnableToGenNew(BOOL*):HRESULT"/>
    <method name="IEnroll2.put_EnableSMIMECapabilities(BOOL):HRESULT"/>
    <method name="IEnroll2.put_HashAlgID(LONG):HRESULT"/>
    <method name="IEnroll2.put_LimitExchangeKeyToEncipherment(BOOL):HRESULT"/>
    <method name="IEnroll2.put_ReuseHardwareKeyIfUnableToGenNew(BOOL):HRESULT"/>
    <method name="IEnroll4.AddCertTypeToRequestWStrEx(LONG;LPCWSTR;LONG;BOOL;LONG):HRESULT"/>
    <method name="IEnroll4.GetKeyLenEx(LONG;LONG;LONG*):HRESULT"/>
    <method name="IEnroll4.GetPrivateKeyArchiveCertificate():PCCERT_CONTEXT"/>
    <method name="IEnroll4.InstallPKCS7BlobEx(PCRYPT_DATA_BLOB;LONG*):HRESULT"/>
    <method name="IEnroll4.SetPrivateKeyArchiveCertificate(PCCERT_CONTEXT):HRESULT"/>
    <method name="IEnroll4.SetSignerCertificate(PCCERT_CONTEXT):HRESULT"/>
    <method name="IEnroll4.acceptFileResponseWStr(LPCWSTR):HRESULT"/>
    <method name="IEnroll4.acceptResponseBlob(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addAttributeToRequestWStr(LONG;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addBlobPropertyToCertificateWStr(LONG;LONG;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addExtensionToRequestWStr(LONG;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.addNameValuePairToRequestWStr(LONG;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.binaryBlobToString(LONG;PCRYPT_DATA_BLOB;LPWSTR*):HRESULT"/>
    <method name="IEnroll4.createFilePFXWStr(LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.createFileRequestWStr(LONG;LPCWSTR;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.createPFXWStr(LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.createRequestWStr(LONG;LPCWSTR;LPCWSTR;PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.enumPendingRequestWStr(LONG;LONG;LPVOID):HRESULT"/>
    <method name="IEnroll4.getCertContextFromFileResponseWStr(LPCWSTR;PCCERT_CONTEXT*):HRESULT"/>
    <method name="IEnroll4.getCertContextFromResponseBlob(PCRYPT_DATA_BLOB;PCCERT_CONTEXT*):HRESULT"/>
    <method name="IEnroll4.getProviderTypeWStr(LPCWSTR;LONG*):HRESULT"/>
    <method name="IEnroll4.get_ClientId(LONG*):HRESULT"/>
    <method name="IEnroll4.get_IncludeSubjectKeyID(BOOL*):HRESULT"/>
    <method name="IEnroll4.get_ThumbPrintWStr(PCRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.put_ClientId(LONG):HRESULT"/>
    <method name="IEnroll4.put_IncludeSubjectKeyID(BOOL):HRESULT"/>
    <method name="IEnroll4.put_ThumbPrintWStr(CRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.removePendingRequestWStr(CRYPT_DATA_BLOB):HRESULT"/>
    <method name="IEnroll4.resetAttributes():HRESULT"/>
    <method name="IEnroll4.resetExtensions():HRESULT"/>
    <method name="IEnroll4.setPendingRequestInfoWStr(LONG;LPCWSTR;LPCWSTR;LPCWSTR):HRESULT"/>
    <method name="IEnroll4.stringToBinaryBlob(LONG;LPCWSTR;PCRYPT_DATA_BLOB;LONG*;LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Clone(IEnumCERTVIEWATTRIBUTE**):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.GetName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.GetValue(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWATTRIBUTE.Skip(LONG):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Clone(IEnumCERTVIEWCOLUMN**):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetDisplayName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetMaxLength(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetType(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.GetValue(LONG;VARIANT*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.IsIndexed(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWCOLUMN.Skip(LONG):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Clone(IEnumCERTVIEWEXTENSION**):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.GetFlags(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.GetName(BSTR*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.GetValue(LONG;LONG;VARIANT*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWEXTENSION.Skip(LONG):HRESULT"/>
    <method name="IEnumCERTVIEWROW.Clone(IEnumCERTVIEWROW**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.EnumCertViewAttribute(LONG;IEnumCERTVIEWATTRIBUTE**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.EnumCertViewColumn(IEnumCERTVIEWCOLUMN**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.EnumCertViewExtension(LONG;IEnumCERTVIEWEXTENSION**):HRESULT"/>
    <method name="IEnumCERTVIEWROW.GetMaxIndex(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWROW.Next(LONG*):HRESULT"/>
    <method name="IEnumCERTVIEWROW.Reset():HRESULT"/>
    <method name="IEnumCERTVIEWROW.Skip(LONG):HRESULT"/>
    <method name="ImpersonateAnonymousToken(HANDLE):BOOL"/>
    <method name="ImpersonateDdeClientWindow(HWND;HWND):BOOL"/>
    <method name="ImpersonateLoggedOnUser(HANDLE):BOOL"/>
    <method name="ImpersonateNamedPipeClient(HANDLE):BOOL"/>
    <method name="ImpersonateSecurityContext(PCtxtHandle):SECURITY_STATUS"/>
    <method name="ImpersonateSelf(SECURITY_IMPERSONATION_LEVEL):BOOL"/>
    <method name="IsBadCodePtr(FARPROC):BOOL"/>
    <method name="IsBadHugeReadPtr(const void*;UINT_PTR):BOOL"/>
    <method name="IsBadHugeWritePtr(LPVOID;UINT_PTR):BOOL"/>
    <method name="IsBadReadPtr(const void*;UINT_PTR):BOOL"/>
    <method name="IsBadStringPtr(LPCTSTR; UINT_PTR): BOOL"/>
    <method name="IsBadStringPtrA(LPCSTR;UINT_PTR):BOOL"/>
    <method name="IsBadStringPtrW(LPCWSTR;UINT_PTR):BOOL"/>
    <method name="IsBadWritePtr(LPVOID;UINT_PTR):BOOL"/>
    <method name="LoadCentralDirectoryRecord(zip64_internal*):int"/>
    <method name="LoadLibrary(LPCTSTR): HMODULE"/>
    <method name="LoadLibraryA(LPCSTR):HMODULE"/>
    <method name="LoadLibraryEx(LPCTSTR; HANDLE; Double Word): HMODULE"/>
    <method name="LoadLibraryEx32W(LPCSTR;DWORD;DWORD):DWORD"/>
    <method name="LoadLibraryExA(LPCSTR;HANDLE;DWORD):HMODULE"/>
    <method name="LoadLibraryExW(LPCWSTR;HANDLE;DWORD):HMODULE"/>
    <method name="LoadLibraryW(LPCWSTR):HMODULE"/>
    <method name="MD2(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="MD2_Final(unsigned char*;MD2_CTX*):int"/>
    <method name="MD2_Init(MD2_CTX*):int"/>
    <method name="MD2_Update(MD2_CTX*;const unsigned char*;size_t):int"/>
    <method name="MD2_options():const char*"/>
    <method name="MD4(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="MD4_Final(unsigned char*;MD4_CTX*):int"/>
    <method name="MD4_Init(MD4_CTX*):int"/>
    <method name="MD4_Transform(MD4_CTX*;const unsigned char*):void"/>
    <method name="MD4_Update(MD4_CTX*;const void*;size_t):int"/>
    <method name="MD5(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="MD5_Final(unsigned char*;MD5_CTX*):int"/>
    <method name="MD5_Init(MD5_CTX*):int"/>
    <method name="MD5_Transform(MD5_CTX*;const unsigned char*):void"/>
    <method name="MD5_Update(MD5_CTX*;const void*;size_t):int"/>
    <method name="MIDIClientCreate(CFStringRef;MIDINotifyProc;void*;MIDIClientRef*):OSStatus"/>
    <method name="MIDIClientDispose(MIDIClientRef):OSStatus"/>
    <method name="MIDIDestinationCreate(MIDIClientRef;CFStringRef;MIDIReadProc;void*;MIDIEndpointRef*):OSStatus"/>
    <method name="MIDIDeviceAddEntity(MIDIDeviceRef;CFStringRef;Boolean;ItemCount;ItemCount;MIDIEntityRef*):OSStatus"/>
    <method name="MIDIDeviceCreate(MIDIDriverRef;CFStringRef;CFStringRef;CFStringRef;MIDIDeviceRef*):OSStatus"/>
    <method name="MIDIDeviceDispose(MIDIDeviceRef):OSStatus"/>
    <method name="MIDIDeviceGetEntity(MIDIDeviceRef;ItemCount):MIDIEntityRef"/>
    <method name="MIDIDeviceGetNumberOfEntities(MIDIDeviceRef):ItemCount"/>
    <method name="MIDIDeviceListAddDevice(MIDIDeviceListRef;MIDIDeviceRef):OSStatus"/>
    <method name="MIDIDeviceListDispose(MIDIDeviceListRef):OSStatus"/>
    <method name="MIDIDeviceListGetDevice(MIDIDeviceListRef;ItemCount):MIDIDeviceRef"/>
    <method name="MIDIDeviceListGetNumberOfDevices(MIDIDeviceListRef):ItemCount"/>
    <method name="MIDIDeviceRemoveEntity(MIDIDeviceRef;MIDIEntityRef):OSStatus"/>
    <method name="MIDIDriverEnableMonitoring(MIDIDriverRef;Boolean):OSStatus"/>
    <method name="MIDIEndpointDispose(MIDIEndpointRef):OSStatus"/>
    <method name="MIDIEndpointGetEntity(MIDIEndpointRef;MIDIEntityRef*):OSStatus"/>
    <method name="MIDIEndpointGetRefCons(MIDIEndpointRef;void**;void**):OSStatus"/>
    <method name="MIDIEndpointSetRefCons(MIDIEndpointRef;void*;void*):OSStatus"/>
    <method name="MIDIEntityAddOrRemoveEndpoints(MIDIEntityRef;ItemCount;ItemCount):OSStatus"/>
    <method name="MIDIEntityGetDestination(MIDIEntityRef;ItemCount):MIDIEndpointRef"/>
    <method name="MIDIEntityGetDevice(MIDIEntityRef;MIDIDeviceRef*):OSStatus"/>
    <method name="MIDIEntityGetNumberOfDestinations(MIDIEntityRef):ItemCount"/>
    <method name="MIDIEntityGetNumberOfSources(MIDIEntityRef):ItemCount"/>
    <method name="MIDIEntityGetSource(MIDIEntityRef;ItemCount):MIDIEndpointRef"/>
    <method name="MIDIExternalDeviceCreate(CFStringRef;CFStringRef;CFStringRef;MIDIDeviceRef*):OSStatus"/>
    <method name="MIDIFlushOutput(MIDIEndpointRef):OSStatus"/>
    <method name="MIDIGetDestination(ItemCount):MIDIEndpointRef"/>
    <method name="MIDIGetDevice(ItemCount):MIDIDeviceRef"/>
    <method name="MIDIGetDriverDeviceList(MIDIDriverRef):MIDIDeviceListRef"/>
    <method name="MIDIGetDriverIORunLoop():CFRunLoopRef"/>
    <method name="MIDIGetExternalDevice(ItemCount):MIDIDeviceRef"/>
    <method name="MIDIGetNumberOfDestinations():ItemCount"/>
    <method name="MIDIGetNumberOfDevices():ItemCount"/>
    <method name="MIDIGetNumberOfExternalDevices():ItemCount"/>
    <method name="MIDIGetNumberOfSources():ItemCount"/>
    <method name="MIDIGetSerialPortDrivers(CFArrayRef*):OSStatus"/>
    <method name="MIDIGetSerialPortOwner(CFStringRef;CFStringRef*):OSStatus"/>
    <method name="MIDIGetSource(ItemCount):MIDIEndpointRef"/>
    <method name="MIDIInputPortCreate(MIDIClientRef;CFStringRef;MIDIReadProc;void*;MIDIPortRef*):OSStatus"/>
    <method name="MIDIObjectFindByUniqueID(MIDIUniqueID;MIDIObjectRef*;MIDIObjectType*):OSStatus"/>
    <method name="MIDIObjectGetDataProperty(MIDIObjectRef;CFStringRef;CFDataRef*):OSStatus"/>
    <method name="MIDIObjectGetDictionaryProperty(MIDIObjectRef;CFStringRef;CFDictionaryRef*):OSStatus"/>
    <method name="MIDIObjectGetIntegerProperty(MIDIObjectRef;CFStringRef;SInt32*):OSStatus"/>
    <method name="MIDIObjectGetProperties(MIDIObjectRef;CFPropertyListRef*;Boolean):OSStatus"/>
    <method name="MIDIObjectGetStringProperty(MIDIObjectRef;CFStringRef;CFStringRef*):OSStatus"/>
    <method name="MIDIObjectRemoveProperty(MIDIObjectRef;CFStringRef):OSStatus"/>
    <method name="MIDIObjectSetDataProperty(MIDIObjectRef;CFStringRef;CFDataRef):OSStatus"/>
    <method name="MIDIObjectSetDictionaryProperty(MIDIObjectRef;CFStringRef;CFDictionaryRef):OSStatus"/>
    <method name="MIDIObjectSetIntegerProperty(MIDIObjectRef;CFStringRef;SInt32):OSStatus"/>
    <method name="MIDIObjectSetStringProperty(MIDIObjectRef;CFStringRef;CFStringRef):OSStatus"/>
    <method name="MIDIOutputPortCreate(MIDIClientRef;CFStringRef;MIDIPortRef*):OSStatus"/>
    <method name="MIDIPacketListAdd(MIDIPacketList*;ByteCount;MIDIPacket*;MIDITimeStamp;ByteCount;const Byte*):MIDIPacket*"/>
    <method name="MIDIPacketListInit(MIDIPacketList*):MIDIPacket*"/>
    <method name="MIDIPortConnectSource(MIDIPortRef;MIDIEndpointRef;void*):OSStatus"/>
    <method name="MIDIPortDisconnectSource(MIDIPortRef;MIDIEndpointRef):OSStatus"/>
    <method name="MIDIPortDispose(MIDIPortRef):OSStatus"/>
    <method name="MIDIReceived(MIDIEndpointRef;const MIDIPacketList*):OSStatus"/>
    <method name="MIDIRestart():OSStatus"/>
    <method name="MIDISend(MIDIPortRef;MIDIEndpointRef;const MIDIPacketList*):OSStatus"/>
    <method name="MIDISendSysex(MIDISysexSendRequest*):OSStatus"/>
    <method name="MIDISetSerialPortOwner(CFStringRef;CFStringRef):OSStatus"/>
    <method name="MIDISetupAddDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupAddExternalDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupCreate(MIDISetupRef*):OSStatus"/>
    <method name="MIDISetupDispose(MIDISetupRef):OSStatus"/>
    <method name="MIDISetupFromData(CFDataRef;MIDISetupRef*):OSStatus"/>
    <method name="MIDISetupGetCurrent(MIDISetupRef*):OSStatus"/>
    <method name="MIDISetupInstall(MIDISetupRef):OSStatus"/>
    <method name="MIDISetupRemoveDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupRemoveExternalDevice(MIDIDeviceRef):OSStatus"/>
    <method name="MIDISetupToData(MIDISetupRef;CFDataRef*):OSStatus"/>
    <method name="MIDISourceCreate(MIDIClientRef;CFStringRef;MIDIEndpointRef*):OSStatus"/>
    <method name="MIDIThruConnectionCreate(CFStringRef;CFDataRef;MIDIThruConnectionRef*):OSStatus"/>
    <method name="MIDIThruConnectionDispose(MIDIThruConnectionRef):OSStatus"/>
    <method name="MIDIThruConnectionFind(CFStringRef;CFDataRef*):OSStatus"/>
    <method name="MIDIThruConnectionGetParams(MIDIThruConnectionRef;CFDataRef*):OSStatus"/>
    <method name="MIDIThruConnectionParamsInitialize(MIDIThruConnectionParams*):void"/>
    <method name="MIDIThruConnectionSetParams(MIDIThruConnectionRef;CFDataRef):OSStatus"/>
    <method name="MKCoordinateForMapPoint(MKMapPoint):CLLocationCoordinate2D"/>
    <method name="MKCoordinateRegionForMapRect(MKMapRect):MKCoordinateRegion"/>
    <method name="MKCoordinateRegionMake(CLLocationCoordinate2D;MKCoordinateSpan):MKCoordinateRegion"/>
    <method name="MKCoordinateRegionMakeWithDistance(CLLocationCoordinate2D;CLLocationDistance;CLLocationDistance):MKCoordinateRegion"/>
    <method name="MKCoordinateSpanMake(CLLocationDegrees;CLLocationDegrees):MKCoordinateSpan"/>
    <method name="MKMapPointEqualToPoint(MKMapPoint;MKMapPoint):BOOL"/>
    <method name="MKMapPointForCoordinate(CLLocationCoordinate2D):MKMapPoint"/>
    <method name="MKMapPointMake(double;double):MKMapPoint"/>
    <method name="MKMapPointsPerMeterAtLatitude(CLLocationDegrees):double"/>
    <method name="MKMapRectContainsPoint(MKMapRect;MKMapPoint):BOOL"/>
    <method name="MKMapRectContainsRect(MKMapRect;MKMapRect):BOOL"/>
    <method name="MKMapRectDivide(MKMapRect;MKMapRect*;MKMapRect*;double;CGRectEdge):void"/>
    <method name="MKMapRectEqualToRect(MKMapRect;MKMapRect):BOOL"/>
    <method name="MKMapRectGetHeight(MKMapRect):double"/>
    <method name="MKMapRectGetMaxX(MKMapRect):double"/>
    <method name="MKMapRectGetMaxY(MKMapRect):double"/>
    <method name="MKMapRectGetMidX(MKMapRect):double"/>
    <method name="MKMapRectGetMidY(MKMapRect):double"/>
    <method name="MKMapRectGetMinX(MKMapRect):double"/>
    <method name="MKMapRectGetMinY(MKMapRect):double"/>
    <method name="MKMapRectGetWidth(MKMapRect):double"/>
    <method name="MKMapRectInset(MKMapRect;double;double):MKMapRect"/>
    <method name="MKMapRectIntersection(MKMapRect;MKMapRect):MKMapRect"/>
    <method name="MKMapRectIntersectsRect(MKMapRect;MKMapRect):BOOL"/>
    <method name="MKMapRectIsEmpty(MKMapRect):BOOL"/>
    <method name="MKMapRectIsNull(MKMapRect):BOOL"/>
    <method name="MKMapRectMake(double;double;double;double):MKMapRect"/>
    <method name="MKMapRectOffset(MKMapRect;double;double):MKMapRect"/>
    <method name="MKMapRectRemainder(MKMapRect):MKMapRect"/>
    <method name="MKMapRectSpans180thMeridian(MKMapRect):BOOL"/>
    <method name="MKMapRectUnion(MKMapRect;MKMapRect):MKMapRect"/>
    <method name="MKMapSizeEqualToSize(MKMapSize;MKMapSize):BOOL"/>
    <method name="MKMapSizeMake(double;double):MKMapSize"/>
    <method name="MKMetersBetweenMapPoints(MKMapPoint;MKMapPoint):CLLocationDistance"/>
    <method name="MKMetersPerMapPointAtLatitude(CLLocationDegrees):CLLocationDistance"/>
    <method name="MKRoadWidthAtZoomScale(MKZoomScale):CGFloat"/>
    <method name="MKStringFromMapPoint(MKMapPoint):NSString*"/>
    <method name="MKStringFromMapRect(MKMapRect):NSString*"/>
    <method name="MKStringFromMapSize(MKMapSize):NSString*"/>
    <method name="MPVolumeSettingsAlertHide():void"/>
    <method name="MPVolumeSettingsAlertIsVisible():BOOL"/>
    <method name="MPVolumeSettingsAlertShow():void"/>
    <method name="MTAudioProcessingTapCreate(CFAllocatorRef;const MTAudioProcessingTapCallbacks*;MTAudioProcessingTapCreationFlags;MTAudioProcessingTapRef*):OSStatus"/>
    <method name="MTAudioProcessingTapGetSourceAudio(MTAudioProcessingTapRef;CMItemCount;AudioBufferList*;MTAudioProcessingTapFlags*;CMTimeRange*;CMItemCount*):OSStatus"/>
    <method name="MTAudioProcessingTapGetStorage(MTAudioProcessingTapRef):void*"/>
    <method name="MTAudioProcessingTapGetTypeID():CFTypeID"/>
    <method name="MoveFile(LPCTSTR; LPCTSTR): BOOL"/>
    <method name="MultiByteToWideChar(UINT;DWORD;LPCSTR;int;LPWSTR;int):int"/>
    <method name="MusicDeviceMIDIEvent(MusicDeviceComponent;UInt32;UInt32;UInt32;UInt32):OSStatus"/>
    <method name="MusicDevicePrepareInstrument(MusicDeviceComponent;MusicDeviceInstrumentID):OSStatus"/>
    <method name="MusicDeviceReleaseInstrument(MusicDeviceComponent;MusicDeviceInstrumentID):OSStatus"/>
    <method name="MusicDeviceStartNote(MusicDeviceComponent;MusicDeviceInstrumentID;MusicDeviceGroupID;NoteInstanceID*;UInt32;const MusicDeviceNoteParams*):OSStatus"/>
    <method name="MusicDeviceStopNote(MusicDeviceComponent;MusicDeviceGroupID;NoteInstanceID;UInt32):OSStatus"/>
    <method name="MusicDeviceSysEx(MusicDeviceComponent;const UInt8*;UInt32):OSStatus"/>
    <method name="MusicEventIteratorDeleteEvent(MusicEventIterator):OSStatus"/>
    <method name="MusicEventIteratorGetEventInfo(MusicEventIterator;MusicTimeStamp*;MusicEventType*;const void**;UInt32*):OSStatus"/>
    <method name="MusicEventIteratorHasCurrentEvent(MusicEventIterator;Boolean*):OSStatus"/>
    <method name="MusicEventIteratorHasNextEvent(MusicEventIterator;Boolean*):OSStatus"/>
    <method name="MusicEventIteratorHasPreviousEvent(MusicEventIterator;Boolean*):OSStatus"/>
    <method name="MusicEventIteratorNextEvent(MusicEventIterator):OSStatus"/>
    <method name="MusicEventIteratorPreviousEvent(MusicEventIterator):OSStatus"/>
    <method name="MusicEventIteratorSeek(MusicEventIterator;MusicTimeStamp):OSStatus"/>
    <method name="MusicEventIteratorSetEventInfo(MusicEventIterator;MusicEventType;const void*):OSStatus"/>
    <method name="MusicEventIteratorSetEventTime(MusicEventIterator;MusicTimeStamp):OSStatus"/>
    <method name="MusicPlayerGetBeatsForHostTime(MusicPlayer;UInt64;MusicTimeStamp*):OSStatus"/>
    <method name="MusicPlayerGetHostTimeForBeats(MusicPlayer;MusicTimeStamp;UInt64*):OSStatus"/>
    <method name="MusicPlayerGetPlayRateScalar(MusicPlayer;Float64*):OSStatus"/>
    <method name="MusicPlayerGetSequence(MusicPlayer;MusicSequence*):OSStatus"/>
    <method name="MusicPlayerGetTime(MusicPlayer;MusicTimeStamp*):OSStatus"/>
    <method name="MusicPlayerIsPlaying(MusicPlayer;Boolean*):OSStatus"/>
    <method name="MusicPlayerPreroll(MusicPlayer):OSStatus"/>
    <method name="MusicPlayerSetPlayRateScalar(MusicPlayer;Float64):OSStatus"/>
    <method name="MusicPlayerSetSequence(MusicPlayer;MusicSequence):OSStatus"/>
    <method name="MusicPlayerSetTime(MusicPlayer;MusicTimeStamp):OSStatus"/>
    <method name="MusicPlayerStart(MusicPlayer):OSStatus"/>
    <method name="MusicPlayerStop(MusicPlayer):OSStatus"/>
    <method name="MusicSequenceBarBeatTimeToBeats(MusicSequence;const CABarBeatTime*;MusicTimeStamp*):OSStatus"/>
    <method name="MusicSequenceBeatsToBarBeatTime(MusicSequence;MusicTimeStamp;UInt32;CABarBeatTime*):OSStatus"/>
    <method name="MusicSequenceDisposeTrack(MusicSequence;MusicTrack):OSStatus"/>
    <method name="MusicSequenceFileCreate(MusicSequence;CFURLRef;MusicSequenceFileTypeID;MusicSequenceFileFlags;SInt16):OSStatus"/>
    <method name="MusicSequenceFileCreateData(MusicSequence;MusicSequenceFileTypeID;MusicSequenceFileFlags;SInt16;CFDataRef*):OSStatus"/>
    <method name="MusicSequenceFileLoad(MusicSequence;CFURLRef;MusicSequenceFileTypeID;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceFileLoadData(MusicSequence;CFDataRef;MusicSequenceFileTypeID;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceGetAUGraph(MusicSequence;AUGraph*):OSStatus"/>
    <method name="MusicSequenceGetBeatsForSeconds(MusicSequence;Float64;MusicTimeStamp*):OSStatus"/>
    <method name="MusicSequenceGetIndTrack(MusicSequence;UInt32;MusicTrack*):OSStatus"/>
    <method name="MusicSequenceGetInfoDictionary(MusicSequence):CFDictionaryRef"/>
    <method name="MusicSequenceGetSMPTEResolution(SInt16;SignedByte*;Byte*):void"/>
    <method name="MusicSequenceGetSecondsForBeats(MusicSequence;MusicTimeStamp;Float64*):OSStatus"/>
    <method name="MusicSequenceGetSequenceType(MusicSequence;MusicSequenceType*):OSStatus"/>
    <method name="MusicSequenceGetTempoTrack(MusicSequence;MusicTrack*):OSStatus"/>
    <method name="MusicSequenceGetTrackCount(MusicSequence;UInt32*):OSStatus"/>
    <method name="MusicSequenceGetTrackIndex(MusicSequence;MusicTrack;UInt32*):OSStatus"/>
    <method name="MusicSequenceLoadSMFData(MusicSequence;CFDataRef):OSStatus"/>
    <method name="MusicSequenceLoadSMFDataWithFlags(MusicSequence;CFDataRef;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceLoadSMFWithFlags(MusicSequence;const struct FSRef*;MusicSequenceLoadFlags):OSStatus"/>
    <method name="MusicSequenceNewTrack(MusicSequence;MusicTrack*):OSStatus"/>
    <method name="MusicSequenceReverse(MusicSequence):OSStatus"/>
    <method name="MusicSequenceSaveMIDIFile(MusicSequence;const struct FSRef*;CFStringRef;UInt16;UInt32):OSStatus"/>
    <method name="MusicSequenceSaveSMFData(MusicSequence;CFDataRef*;UInt16):OSStatus"/>
    <method name="MusicSequenceSetAUGraph(MusicSequence;AUGraph):OSStatus"/>
    <method name="MusicSequenceSetMIDIEndpoint(MusicSequence;MIDIEndpointRef):OSStatus"/>
    <method name="MusicSequenceSetSMPTEResolution(SignedByte;Byte):SInt16"/>
    <method name="MusicSequenceSetSequenceType(MusicSequence;MusicSequenceType):OSStatus"/>
    <method name="MusicSequenceSetUserCallback(MusicSequence;MusicSequenceUserCallback;void*):OSStatus"/>
    <method name="MusicTrackClear(MusicTrack;MusicTimeStamp;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackCopyInsert(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTrack;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackCut(MusicTrack;MusicTimeStamp;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackGetDestMIDIEndpoint(MusicTrack;MIDIEndpointRef*):OSStatus"/>
    <method name="MusicTrackGetDestNode(MusicTrack;AUNode*):OSStatus"/>
    <method name="MusicTrackGetProperty(MusicTrack;UInt32;void*;UInt32*):OSStatus"/>
    <method name="MusicTrackGetSequence(MusicTrack;MusicSequence*):OSStatus"/>
    <method name="MusicTrackMerge(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTrack;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackMoveEvents(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTimeStamp):OSStatus"/>
    <method name="MusicTrackNewAUPresetEvent(MusicTrack;MusicTimeStamp;const AUPresetEvent*):OSStatus"/>
    <method name="MusicTrackNewExtendedNoteEvent(MusicTrack;MusicTimeStamp;const ExtendedNoteOnEvent*):OSStatus"/>
    <method name="MusicTrackNewExtendedTempoEvent(MusicTrack;MusicTimeStamp;Float64):OSStatus"/>
    <method name="MusicTrackNewMIDIChannelEvent(MusicTrack;MusicTimeStamp;const MIDIChannelMessage*):OSStatus"/>
    <method name="MusicTrackNewMIDINoteEvent(MusicTrack;MusicTimeStamp;const MIDINoteMessage*):OSStatus"/>
    <method name="MusicTrackNewMIDIRawDataEvent(MusicTrack;MusicTimeStamp;const MIDIRawData*):OSStatus"/>
    <method name="MusicTrackNewMetaEvent(MusicTrack;MusicTimeStamp;const MIDIMetaEvent*):OSStatus"/>
    <method name="MusicTrackNewParameterEvent(MusicTrack;MusicTimeStamp;const ParameterEvent*):OSStatus"/>
    <method name="MusicTrackNewUserEvent(MusicTrack;MusicTimeStamp;const MusicEventUserData*):OSStatus"/>
    <method name="MusicTrackSetDestMIDIEndpoint(MusicTrack;MIDIEndpointRef):OSStatus"/>
    <method name="MusicTrackSetDestNode(MusicTrack;AUNode):OSStatus"/>
    <method name="MusicTrackSetProperty(MusicTrack;UInt32;void*;UInt32):OSStatus"/>
    <method name="NAME_CONSTRAINTS_free(NAME_CONSTRAINTS*):void"/>
    <method name="NAME_CONSTRAINTS_new():NAME_CONSTRAINTS*"/>
    <method name="NCONF_WIN32():CONF_METHOD*"/>
    <method name="NCONF_default():CONF_METHOD*"/>
    <method name="NCONF_dump_bio(const CONF*;BIO*):int"/>
    <method name="NCONF_dump_fp(const CONF*;FILE*):int"/>
    <method name="NCONF_free(CONF*):void"/>
    <method name="NCONF_free_data(CONF*):void"/>
    <method name="NCONF_get_number_e(const CONF*;const char*;const char*;long*):int"/>
    <method name="NCONF_get_section(const CONF*;const char*):STACK*"/>
    <method name="NCONF_get_string(const CONF*;const char*;const char*):char*"/>
    <method name="NCONF_load(CONF*;const char*;long*):int"/>
    <method name="NCONF_load_bio(CONF*;BIO*;long*):int"/>
    <method name="NCONF_load_fp(CONF*;FILE*;long*):int"/>
    <method name="NCONF_new(CONF_METHOD*):CONF*"/>
    <method name="NETSCAPE_CERT_SEQUENCE_free(NETSCAPE_CERT_SEQUENCE*):void"/>
    <method name="NETSCAPE_CERT_SEQUENCE_new():NETSCAPE_CERT_SEQUENCE*"/>
    <method name="NETSCAPE_SPKAC_free(NETSCAPE_SPKAC*):void"/>
    <method name="NETSCAPE_SPKAC_new():NETSCAPE_SPKAC*"/>
    <method name="NETSCAPE_SPKI_b64_decode(const char*;int):NETSCAPE_SPKI*"/>
    <method name="NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI*):char*"/>
    <method name="NETSCAPE_SPKI_free(NETSCAPE_SPKI*):void"/>
    <method name="NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI*):EVP_PKEY*"/>
    <method name="NETSCAPE_SPKI_new():NETSCAPE_SPKI*"/>
    <method name="NETSCAPE_SPKI_print(BIO*;NETSCAPE_SPKI*):int"/>
    <method name="NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI*;EVP_PKEY*):int"/>
    <method name="NETSCAPE_SPKI_sign(NETSCAPE_SPKI*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="NETSCAPE_SPKI_verify(NETSCAPE_SPKI*;EVP_PKEY*):int"/>
    <method name="NOTICEREF_free(NOTICEREF*):void"/>
    <method name="NOTICEREF_new():NOTICEREF*"/>
    <method name="NSAddImage(const char*;uint32_t):const struct mach_header*"/>
    <method name="NSAddLibrary(const char*):_Bool"/>
    <method name="NSAddLibraryWithSearching(const char*):_Bool"/>
    <method name="NSAddressOfSymbol(NSSymbol):void*"/>
    <method name="NSAllocateMemoryPages(NSUInteger):void*"/>
    <method name="NSAllocateObject(Class*;NSUInteger;NSZone*):id"/>
    <method name="NSClassFromString(NSString*):Class*"/>
    <method name="NSConvertHostDoubleToSwapped(double):NSSwappedDouble"/>
    <method name="NSConvertHostFloatToSwapped(float):NSSwappedFloat"/>
    <method name="NSConvertSwappedDoubleToHost(NSSwappedDouble):double"/>
    <method name="NSConvertSwappedFloatToHost(NSSwappedFloat):float"/>
    <method name="NSCopyMemoryPages(const void*;void*;NSUInteger):void"/>
    <method name="NSCopyObject(id;NSUInteger;NSZone*):id"/>
    <method name="NSCreateObjectFileImageFromFile(const char*;NSObjectFileImage*):NSObjectFileImageReturnCode"/>
    <method name="NSCreateObjectFileImageFromMemory(const void*;size_t;NSObjectFileImage*):NSObjectFileImageReturnCode"/>
    <method name="NSCreateZone(NSUInteger;NSUInteger;BOOL):NSZone*"/>
    <method name="NSDeallocateMemoryPages(void*;NSUInteger):void"/>
    <method name="NSDeallocateObject(id):void"/>
    <method name="NSDecimalAdd(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalCompact(NSDecimal*):void"/>
    <method name="NSDecimalCompare(const NSDecimal*;const NSDecimal*):NSComparisonResult"/>
    <method name="NSDecimalCopy(NSDecimal*;const NSDecimal*):void"/>
    <method name="NSDecimalDivide(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalIsNotANumber(const NSDecimal*):BOOL"/>
    <method name="NSDecimalMultiply(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalMultiplyByPowerOf10(NSDecimal*;const NSDecimal*;short;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalNormalize(NSDecimal*;NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalPower(NSDecimal*;const NSDecimal*;NSUInteger;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecimalRound(NSDecimal*;const NSDecimal*;NSInteger;NSRoundingMode):void"/>
    <method name="NSDecimalString(const NSDecimal*;id):NSString*"/>
    <method name="NSDecimalSubtract(NSDecimal*;const NSDecimal*;const NSDecimal*;NSRoundingMode):NSCalculationError"/>
    <method name="NSDecrementExtraRefCountWasZero(id):BOOL"/>
    <method name="NSDefaultMallocZone():NSZone*"/>
    <method name="NSDestroyObjectFileImage(NSObjectFileImage):_Bool"/>
    <method name="NSEqualRanges(NSRange;NSRange):BOOL"/>
    <method name="NSExtraRefCount(id):NSUInteger"/>
    <method name="NSFullUserName():NSString*"/>
    <method name="NSGetSectionDataInObjectFileImage(NSObjectFileImage;const char*;const char*;size_t*):void*"/>
    <method name="NSGetSizeAndAlignment(const char*;NSUInteger*;NSUInteger*):const char*"/>
    <method name="NSGetUncaughtExceptionHandler():(*)(NSException*):void"/>
    <method name="NSHasModInitObjectFileImage(NSObjectFileImage):_Bool"/>
    <method name="NSHomeDirectory():NSString*"/>
    <method name="NSHomeDirectoryForUser(NSString*):NSString*"/>
    <method name="NSHostByteOrder():long"/>
    <method name="NSIncrementExtraRefCount(id):void"/>
    <method name="NSInstallLinkEditErrorHandlers(const NSLinkEditErrorHandlers*):void"/>
    <method name="NSIntersectionRange(NSRange;NSRange):NSRange"/>
    <method name="NSIsSymbolDefinedInObjectFileImage(NSObjectFileImage;const char*):_Bool"/>
    <method name="NSIsSymbolNameDefined(const char*):_Bool"/>
    <method name="NSIsSymbolNameDefinedInImage(const struct mach_header*;const char*):_Bool"/>
    <method name="NSIsSymbolNameDefinedWithHint(const char*;const char*):_Bool"/>
    <method name="NSLibraryNameForModule(NSModule):const char*"/>
    <method name="NSLinkEditError(NSLinkEditErrors*;int*;const char**;const char**):void"/>
    <method name="NSLinkModule(NSObjectFileImage;const char*;uint32_t):NSModule"/>
    <method name="NSLocationInRange(NSUInteger;NSRange):BOOL"/>
    <method name="NSLog():int"/>
    <method name="NSLog(NSString*, ...):void"/>
    <method name="NSLogPageSize():NSUInteger"/>
    <method name="NSLogv(NSString*;va_list):void"/>
    <method name="NSLookupAndBindSymbol(const char*):NSSymbol"/>
    <method name="NSLookupAndBindSymbolWithHint(const char*;const char*):NSSymbol"/>
    <method name="NSLookupSymbolInImage(const struct mach_header*;const char*;uint32_t):NSSymbol"/>
    <method name="NSLookupSymbolInModule(NSModule;const char*):NSSymbol"/>
    <method name="NSMakeCollectable(CFTypeRef):id"/>
    <method name="NSMakeRange(NSUInteger;NSUInteger):NSRange"/>
    <method name="NSMaxRange(NSRange):NSUInteger"/>
    <method name="NSModuleForSymbol(NSSymbol):NSModule"/>
    <method name="NSNameOfModule(NSModule):const char*"/>
    <method name="NSNameOfSymbol(NSSymbol):const char*"/>
    <method name="NSOpenStepRootDirectory():NSString*"/>
    <method name="NSPStartup(LPGUID;LPNSP_ROUTINE):INT"/>
    <method name="NSPageSize():NSUInteger"/>
    <method name="NSProtocolFromString(NSString*):Protocol*"/>
    <method name="NSRangeFromString(NSString*):NSRange"/>
    <method name="NSRealMemoryAvailable():NSUInteger"/>
    <method name="NSRecycleZone(NSZone*):void"/>
    <method name="NSRoundDownToMultipleOfPageSize(NSUInteger):NSUInteger"/>
    <method name="NSRoundUpToMultipleOfPageSize(NSUInteger):NSUInteger"/>
    <method name="NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory;NSSearchPathDomainMask;BOOL):NSArray*"/>
    <method name="NSSelectorFromString(NSString*):SEL"/>
    <method name="NSSetUncaughtExceptionHandler((*)(NSException*):void):void"/>
    <method name="NSSetZoneName(NSZone*;NSString*):void"/>
    <method name="NSShouldRetainWithZone(id;NSZone*):BOOL"/>
    <method name="NSStringFromCGAffineTransform(CGAffineTransform):NSString*"/>
    <method name="NSStringFromCGPoint(CGPoint):NSString*"/>
    <method name="NSStringFromCGRect(CGRect):NSString*"/>
    <method name="NSStringFromCGSize(CGSize):NSString*"/>
    <method name="NSStringFromClass(Class*):NSString*"/>
    <method name="NSStringFromGLKMatrix2(GLKMatrix2):NSString*"/>
    <method name="NSStringFromGLKMatrix3(GLKMatrix3):NSString*"/>
    <method name="NSStringFromGLKMatrix4(GLKMatrix4):NSString*"/>
    <method name="NSStringFromGLKQuaternion(GLKQuaternion):NSString*"/>
    <method name="NSStringFromGLKVector2(GLKVector2):NSString*"/>
    <method name="NSStringFromGLKVector3(GLKVector3):NSString*"/>
    <method name="NSStringFromGLKVector4(GLKVector4):NSString*"/>
    <method name="NSStringFromProtocol(Protocol*):NSString*"/>
    <method name="NSStringFromRange(NSRange):NSString*"/>
    <method name="NSStringFromSelector(SEL):NSString*"/>
    <method name="NSStringFromUIEdgeInsets(UIEdgeInsets):NSString*"/>
    <method name="NSStringFromUIOffset(UIOffset):NSString*"/>
    <method name="NSSwapBigDoubleToHost(NSSwappedDouble):double"/>
    <method name="NSSwapBigFloatToHost(NSSwappedFloat):float"/>
    <method name="NSSwapBigIntToHost(unsigned int):unsigned int"/>
    <method name="NSSwapBigLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NSSwapBigLongToHost(unsigned long):unsigned long"/>
    <method name="NSSwapBigShortToHost(unsigned short):unsigned short"/>
    <method name="NSSwapDouble(NSSwappedDouble):NSSwappedDouble"/>
    <method name="NSSwapFloat(NSSwappedFloat):NSSwappedFloat"/>
    <method name="NSSwapHostDoubleToBig(double):NSSwappedDouble"/>
    <method name="NSSwapHostDoubleToLittle(double):NSSwappedDouble"/>
    <method name="NSSwapHostFloatToBig(float):NSSwappedFloat"/>
    <method name="NSSwapHostFloatToLittle(float):NSSwappedFloat"/>
    <method name="NSSwapHostIntToBig(unsigned int):unsigned int"/>
    <method name="NSSwapHostIntToLittle(unsigned int):unsigned int"/>
    <method name="NSSwapHostLongLongToBig(unsigned long long):unsigned long long"/>
    <method name="NSSwapHostLongLongToLittle(unsigned long long):unsigned long long"/>
    <method name="NSSwapHostLongToBig(unsigned long):unsigned long"/>
    <method name="NSSwapHostLongToLittle(unsigned long):unsigned long"/>
    <method name="NSSwapHostShortToBig(unsigned short):unsigned short"/>
    <method name="NSSwapHostShortToLittle(unsigned short):unsigned short"/>
    <method name="NSSwapInt(unsigned int):unsigned int"/>
    <method name="NSSwapLittleDoubleToHost(NSSwappedDouble):double"/>
    <method name="NSSwapLittleFloatToHost(NSSwappedFloat):float"/>
    <method name="NSSwapLittleIntToHost(unsigned int):unsigned int"/>
    <method name="NSSwapLittleLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NSSwapLittleLongToHost(unsigned long):unsigned long"/>
    <method name="NSSwapLittleShortToHost(unsigned short):unsigned short"/>
    <method name="NSSwapLong(unsigned long):unsigned long"/>
    <method name="NSSwapLongLong(unsigned long long):unsigned long long"/>
    <method name="NSSwapShort(unsigned short):unsigned short"/>
    <method name="NSSymbolDefinitionCountInObjectFileImage(NSObjectFileImage):uint32_t"/>
    <method name="NSSymbolDefinitionNameInObjectFileImage(NSObjectFileImage;uint32_t):const char*"/>
    <method name="NSSymbolReferenceCountInObjectFileImage(NSObjectFileImage):uint32_t"/>
    <method name="NSSymbolReferenceNameInObjectFileImage(NSObjectFileImage;uint32_t;_Bool*):const char*"/>
    <method name="NSTemporaryDirectory():NSString*"/>
    <method name="NSTextAlignmentFromCTTextAlignment(CTTextAlignment):NSTextAlignment"/>
    <method name="NSTextAlignmentToCTTextAlignment(NSTextAlignment):CTTextAlignment"/>
    <method name="NSUnLinkModule(NSModule;uint32_t):_Bool"/>
    <method name="NSUnionRange(NSRange;NSRange):NSRange"/>
    <method name="NSUserName():NSString*"/>
    <method name="NSVersionOfLinkTimeLibrary(const char*):int32_t"/>
    <method name="NSVersionOfRunTimeLibrary(const char*):int32_t"/>
    <method name="NSZoneCalloc(NSZone*;NSUInteger;NSUInteger):void*"/>
    <method name="NSZoneFree(NSZone*;void*):void"/>
    <method name="NSZoneFromPointer(void*):NSZone*"/>
    <method name="NSZoneMalloc(NSZone*;NSUInteger):void*"/>
    <method name="NSZoneName(NSZone*):NSString*"/>
    <method name="NSZoneRealloc(NSZone*;void*;NSUInteger):void*"/>
    <method name="NXCombineCpuSubtypes(cpu_type_t;cpu_subtype_t;cpu_subtype_t):cpu_subtype_t"/>
    <method name="NXConvertHostDoubleToSwapped(double):NXSwappedDouble"/>
    <method name="NXConvertHostFloatToSwapped(float):NXSwappedFloat"/>
    <method name="NXConvertSwappedDoubleToHost(NXSwappedDouble):double"/>
    <method name="NXConvertSwappedFloatToHost(NXSwappedFloat):float"/>
    <method name="NXFindBestFatArch(cpu_type_t;cpu_subtype_t;struct fat_arch*;uint32_t):struct fat_arch*"/>
    <method name="NXGetAllArchInfos():const NXArchInfo*"/>
    <method name="NXGetArchInfoFromCpuType(cpu_type_t;cpu_subtype_t):const NXArchInfo*"/>
    <method name="NXGetArchInfoFromName(const char*):const NXArchInfo*"/>
    <method name="NXGetLocalArchInfo():const NXArchInfo*"/>
    <method name="NXHostByteOrder():enum NXByteOrder"/>
    <method name="NXSwapBigDoubleToHost(NXSwappedDouble):double"/>
    <method name="NXSwapBigFloatToHost(NXSwappedFloat):float"/>
    <method name="NXSwapBigIntToHost(unsigned int):unsigned int"/>
    <method name="NXSwapBigLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NXSwapBigLongToHost(unsigned long):unsigned long"/>
    <method name="NXSwapBigShortToHost(unsigned short):unsigned short"/>
    <method name="NXSwapDouble(NXSwappedDouble):NXSwappedDouble"/>
    <method name="NXSwapFloat(NXSwappedFloat):NXSwappedFloat"/>
    <method name="NXSwapHostDoubleToBig(double):NXSwappedDouble"/>
    <method name="NXSwapHostDoubleToLittle(double):NXSwappedDouble"/>
    <method name="NXSwapHostFloatToBig(float):NXSwappedFloat"/>
    <method name="NXSwapHostFloatToLittle(float):NXSwappedFloat"/>
    <method name="NXSwapHostIntToBig(unsigned int):unsigned int"/>
    <method name="NXSwapHostIntToLittle(unsigned int):unsigned int"/>
    <method name="NXSwapHostLongLongToBig(unsigned long long):unsigned long long"/>
    <method name="NXSwapHostLongLongToLittle(unsigned long long):unsigned long long"/>
    <method name="NXSwapHostLongToBig(unsigned long):unsigned long"/>
    <method name="NXSwapHostLongToLittle(unsigned long):unsigned long"/>
    <method name="NXSwapHostShortToBig(unsigned short):unsigned short"/>
    <method name="NXSwapHostShortToLittle(unsigned short):unsigned short"/>
    <method name="NXSwapInt(unsigned int):unsigned int"/>
    <method name="NXSwapLittleDoubleToHost(NXSwappedDouble):double"/>
    <method name="NXSwapLittleFloatToHost(NXSwappedFloat):float"/>
    <method name="NXSwapLittleIntToHost(unsigned int):unsigned int"/>
    <method name="NXSwapLittleLongLongToHost(unsigned long long):unsigned long long"/>
    <method name="NXSwapLittleLongToHost(unsigned long):unsigned long"/>
    <method name="NXSwapLittleShortToHost(unsigned short):unsigned short"/>
    <method name="NXSwapLong(unsigned long):unsigned long"/>
    <method name="NXSwapLongLong(unsigned long long):unsigned long long"/>
    <method name="NXSwapShort(unsigned short):unsigned short"/>
    <method name="NewAUGraph(AUGraph*):OSStatus"/>
    <method name="NewBase64Decode(const char*;size_t;size_t*):void*"/>
    <method name="NewBase64Encode(const void*;size_t;_Bool;size_t*):char*"/>
    <method name="NewMusicEventIterator(MusicTrack;MusicEventIterator*):OSStatus"/>
    <method name="NewMusicPlayer(MusicPlayer*):OSStatus"/>
    <method name="NewMusicSequence(MusicSequence*):OSStatus"/>
    <method name="NewMusicTrackFrom(MusicTrack;MusicTimeStamp;MusicTimeStamp;MusicTrack*):OSStatus"/>
    <method name="OBJ_NAME_add(const char*;int;const char*):int"/>
    <method name="OBJ_NAME_cleanup(int):void"/>
    <method name="OBJ_NAME_do_all(int;(*)(const OBJ_NAME*;void*):void*;void*):void"/>
    <method name="OBJ_NAME_do_all_sorted(int;(*)(const OBJ_NAME*;void*):void*;void*):void"/>
    <method name="OBJ_NAME_get(const char*;int):const char*"/>
    <method name="OBJ_NAME_init():int"/>
    <method name="OBJ_NAME_new_index((*)(const char*):unsigned long*;(*)(const char*;const char*):int*;(*)(const char*;int;const char*):void*):int"/>
    <method name="OBJ_NAME_remove(const char*;int):int"/>
    <method name="OBJ_add_object(const ASN1_OBJECT*):int"/>
    <method name="OBJ_bsearch(const char*;const char*;int;int;(*)(const void*;const void*):int*):const char*"/>
    <method name="OBJ_bsearch_ex(const char*;const char*;int;int;(*)(const void*;const void*):int*;int):const char*"/>
    <method name="OBJ_cleanup():void"/>
    <method name="OBJ_cmp(const ASN1_OBJECT*;const ASN1_OBJECT*):int"/>
    <method name="OBJ_create(const char*;const char*;const char*):int"/>
    <method name="OBJ_create_objects(BIO*):int"/>
    <method name="OBJ_dup(const ASN1_OBJECT*):ASN1_OBJECT*"/>
    <method name="OBJ_ln2nid(const char*):int"/>
    <method name="OBJ_new_nid(int):int"/>
    <method name="OBJ_nid2ln(int):const char*"/>
    <method name="OBJ_nid2obj(int):ASN1_OBJECT*"/>
    <method name="OBJ_nid2sn(int):const char*"/>
    <method name="OBJ_obj2nid(const ASN1_OBJECT*):int"/>
    <method name="OBJ_obj2txt(char*;int;const ASN1_OBJECT*;int):int"/>
    <method name="OBJ_sn2nid(const char*):int"/>
    <method name="OBJ_txt2nid(const char*):int"/>
    <method name="OBJ_txt2obj(const char*;int):ASN1_OBJECT*"/>
    <method name="OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_BASICRESP_add_ext(OCSP_BASICRESP*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_BASICRESP_delete_ext(OCSP_BASICRESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_BASICRESP_free(OCSP_BASICRESP*):void"/>
    <method name="OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP*;int;int*;int*):void*"/>
    <method name="OCSP_BASICRESP_get_ext(OCSP_BASICRESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP*;int;int):int"/>
    <method name="OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP*;int;int):int"/>
    <method name="OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP*):int"/>
    <method name="OCSP_BASICRESP_new():OCSP_BASICRESP*"/>
    <method name="OCSP_CERTID_free(OCSP_CERTID*):void"/>
    <method name="OCSP_CERTID_new():OCSP_CERTID*"/>
    <method name="OCSP_CERTSTATUS_free(OCSP_CERTSTATUS*):void"/>
    <method name="OCSP_CERTSTATUS_new():OCSP_CERTSTATUS*"/>
    <method name="OCSP_CRLID_free(OCSP_CRLID*):void"/>
    <method name="OCSP_CRLID_new():OCSP_CRLID*"/>
    <method name="OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_ONEREQ_add_ext(OCSP_ONEREQ*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_ONEREQ_delete_ext(OCSP_ONEREQ*;int):X509_EXTENSION*"/>
    <method name="OCSP_ONEREQ_free(OCSP_ONEREQ*):void"/>
    <method name="OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ*;int;int*;int*):void*"/>
    <method name="OCSP_ONEREQ_get_ext(OCSP_ONEREQ*;int):X509_EXTENSION*"/>
    <method name="OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ*;int;int):int"/>
    <method name="OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ*;int;int):int"/>
    <method name="OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ*):int"/>
    <method name="OCSP_ONEREQ_new():OCSP_ONEREQ*"/>
    <method name="OCSP_REQINFO_free(OCSP_REQINFO*):void"/>
    <method name="OCSP_REQINFO_new():OCSP_REQINFO*"/>
    <method name="OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_REQUEST_add_ext(OCSP_REQUEST*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_REQUEST_delete_ext(OCSP_REQUEST*;int):X509_EXTENSION*"/>
    <method name="OCSP_REQUEST_free(OCSP_REQUEST*):void"/>
    <method name="OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST*;int;int*;int*):void*"/>
    <method name="OCSP_REQUEST_get_ext(OCSP_REQUEST*;int):X509_EXTENSION*"/>
    <method name="OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST*;int;int):int"/>
    <method name="OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST*;int;int):int"/>
    <method name="OCSP_REQUEST_get_ext_count(OCSP_REQUEST*):int"/>
    <method name="OCSP_REQUEST_new():OCSP_REQUEST*"/>
    <method name="OCSP_REQUEST_print(BIO*;OCSP_REQUEST*;unsigned long):int"/>
    <method name="OCSP_RESPBYTES_free(OCSP_RESPBYTES*):void"/>
    <method name="OCSP_RESPBYTES_new():OCSP_RESPBYTES*"/>
    <method name="OCSP_RESPDATA_free(OCSP_RESPDATA*):void"/>
    <method name="OCSP_RESPDATA_new():OCSP_RESPDATA*"/>
    <method name="OCSP_RESPID_free(OCSP_RESPID*):void"/>
    <method name="OCSP_RESPID_new():OCSP_RESPID*"/>
    <method name="OCSP_RESPONSE_free(OCSP_RESPONSE*):void"/>
    <method name="OCSP_RESPONSE_new():OCSP_RESPONSE*"/>
    <method name="OCSP_RESPONSE_print(BIO*;OCSP_RESPONSE*;unsigned long):int"/>
    <method name="OCSP_REVOKEDINFO_free(OCSP_REVOKEDINFO*):void"/>
    <method name="OCSP_REVOKEDINFO_new():OCSP_REVOKEDINFO*"/>
    <method name="OCSP_SERVICELOC_free(OCSP_SERVICELOC*):void"/>
    <method name="OCSP_SERVICELOC_new():OCSP_SERVICELOC*"/>
    <method name="OCSP_SIGNATURE_free(OCSP_SIGNATURE*):void"/>
    <method name="OCSP_SIGNATURE_new():OCSP_SIGNATURE*"/>
    <method name="OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP*;int;void*;int;unsigned long):int"/>
    <method name="OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP*;X509_EXTENSION*;int):int"/>
    <method name="OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_SINGLERESP_free(OCSP_SINGLERESP*):void"/>
    <method name="OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP*;int;int*;int*):void*"/>
    <method name="OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP*;int):X509_EXTENSION*"/>
    <method name="OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP*;int;int):int"/>
    <method name="OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP*;ASN1_OBJECT*;int):int"/>
    <method name="OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP*;int;int):int"/>
    <method name="OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP*):int"/>
    <method name="OCSP_SINGLERESP_new():OCSP_SINGLERESP*"/>
    <method name="OCSP_accept_responses_new(char**):X509_EXTENSION*"/>
    <method name="OCSP_archive_cutoff_new(char*):X509_EXTENSION*"/>
    <method name="OCSP_basic_add1_cert(OCSP_BASICRESP*;X509*):int"/>
    <method name="OCSP_basic_add1_nonce(OCSP_BASICRESP*;unsigned char*;int):int"/>
    <method name="OCSP_basic_add1_status(OCSP_BASICRESP*;OCSP_CERTID*;int;int;ASN1_TIME*;ASN1_TIME*;ASN1_TIME*):OCSP_SINGLERESP*"/>
    <method name="OCSP_basic_sign(OCSP_BASICRESP*;X509*;EVP_PKEY*;const EVP_MD*;STACK*;unsigned long):int"/>
    <method name="OCSP_basic_verify(OCSP_BASICRESP*;STACK*;X509_STORE*;unsigned long):int"/>
    <method name="OCSP_cert_id_new(const EVP_MD*;X509_NAME*;ASN1_BIT_STRING*;ASN1_INTEGER*):OCSP_CERTID*"/>
    <method name="OCSP_cert_status_str(long):char*"/>
    <method name="OCSP_cert_to_id(const EVP_MD*;X509*;X509*):OCSP_CERTID*"/>
    <method name="OCSP_check_nonce(OCSP_REQUEST*;OCSP_BASICRESP*):int"/>
    <method name="OCSP_check_validity(ASN1_GENERALIZEDTIME*;ASN1_GENERALIZEDTIME*;long;long):int"/>
    <method name="OCSP_copy_nonce(OCSP_BASICRESP*;OCSP_REQUEST*):int"/>
    <method name="OCSP_crlID_new(char*;long*;char*):X509_EXTENSION*"/>
    <method name="OCSP_crl_reason_str(long):char*"/>
    <method name="OCSP_id_cmp(OCSP_CERTID*;OCSP_CERTID*):int"/>
    <method name="OCSP_id_get0_info(ASN1_OCTET_STRING**;ASN1_OBJECT**;ASN1_OCTET_STRING**;ASN1_INTEGER**;OCSP_CERTID*):int"/>
    <method name="OCSP_id_issuer_cmp(OCSP_CERTID*;OCSP_CERTID*):int"/>
    <method name="OCSP_onereq_get0_id(OCSP_ONEREQ*):OCSP_CERTID*"/>
    <method name="OCSP_parse_url(char*;char**;char**;char**;int*):int"/>
    <method name="OCSP_request_add0_id(OCSP_REQUEST*;OCSP_CERTID*):OCSP_ONEREQ*"/>
    <method name="OCSP_request_add1_cert(OCSP_REQUEST*;X509*):int"/>
    <method name="OCSP_request_add1_nonce(OCSP_REQUEST*;unsigned char*;int):int"/>
    <method name="OCSP_request_is_signed(OCSP_REQUEST*):int"/>
    <method name="OCSP_request_onereq_count(OCSP_REQUEST*):int"/>
    <method name="OCSP_request_onereq_get0(OCSP_REQUEST*;int):OCSP_ONEREQ*"/>
    <method name="OCSP_request_set1_name(OCSP_REQUEST*;X509_NAME*):int"/>
    <method name="OCSP_request_sign(OCSP_REQUEST*;X509*;EVP_PKEY*;const EVP_MD*;STACK*;unsigned long):int"/>
    <method name="OCSP_request_verify(OCSP_REQUEST*;STACK*;X509_STORE*;unsigned long):int"/>
    <method name="OCSP_resp_count(OCSP_BASICRESP*):int"/>
    <method name="OCSP_resp_find(OCSP_BASICRESP*;OCSP_CERTID*;int):int"/>
    <method name="OCSP_resp_find_status(OCSP_BASICRESP*;OCSP_CERTID*;int*;int*;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**):int"/>
    <method name="OCSP_resp_get0(OCSP_BASICRESP*;int):OCSP_SINGLERESP*"/>
    <method name="OCSP_response_create(int;OCSP_BASICRESP*):OCSP_RESPONSE*"/>
    <method name="OCSP_response_get1_basic(OCSP_RESPONSE*):OCSP_BASICRESP*"/>
    <method name="OCSP_response_status(OCSP_RESPONSE*):int"/>
    <method name="OCSP_response_status_str(long):char*"/>
    <method name="OCSP_sendreq_bio(BIO*;char*;OCSP_REQUEST*):OCSP_RESPONSE*"/>
    <method name="OCSP_single_get0_status(OCSP_SINGLERESP*;int*;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**;ASN1_GENERALIZEDTIME**):int"/>
    <method name="OCSP_url_svcloc_new(X509_NAME*;char**):X509_EXTENSION*"/>
    <method name="OPENSSL_add_all_algorithms_conf():void"/>
    <method name="OPENSSL_add_all_algorithms_noconf():void"/>
    <method name="OPENSSL_cleanse(void*;size_t):void"/>
    <method name="OPENSSL_config(const char*):void"/>
    <method name="OPENSSL_ia32cap_loc():unsigned long*"/>
    <method name="OPENSSL_issetugid():int"/>
    <method name="OPENSSL_load_builtin_modules():void"/>
    <method name="OPENSSL_no_config():void"/>
    <method name="OSAtomicAdd32(int32_t;volatile int32_t*):int32_t"/>
    <method name="OSAtomicAdd32Barrier(int32_t;volatile int32_t*):int32_t"/>
    <method name="OSAtomicAdd64(int64_t;volatile int64_t*):int64_t"/>
    <method name="OSAtomicAdd64Barrier(int64_t;volatile int64_t*):int64_t"/>
    <method name="OSAtomicAnd32(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicAnd32Barrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicAnd32Orig(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicAnd32OrigBarrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicCompareAndSwap32(int32_t;int32_t;volatile int32_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwap32Barrier(int32_t;int32_t;volatile int32_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwap64(int64_t;int64_t;volatile int64_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwap64Barrier(int64_t;int64_t;volatile int64_t*):_Bool"/>
    <method name="OSAtomicCompareAndSwapInt(int;int;volatile int*):_Bool"/>
    <method name="OSAtomicCompareAndSwapIntBarrier(int;int;volatile int*):_Bool"/>
    <method name="OSAtomicCompareAndSwapLong(long;long;volatile long*):_Bool"/>
    <method name="OSAtomicCompareAndSwapLongBarrier(long;long;volatile long*):_Bool"/>
    <method name="OSAtomicCompareAndSwapPtr(void*;void*;volatile void**):_Bool"/>
    <method name="OSAtomicCompareAndSwapPtrBarrier(void*;void*;volatile void**):_Bool"/>
    <method name="OSAtomicDecrement32(volatile int32_t*):int32_t"/>
    <method name="OSAtomicDecrement32Barrier(volatile int32_t*):int32_t"/>
    <method name="OSAtomicDecrement64(volatile int64_t*):int64_t"/>
    <method name="OSAtomicDecrement64Barrier(volatile int64_t*):int64_t"/>
    <method name="OSAtomicDequeue(volatile struct &lt;anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/usr/include/libkern/OSAtomic.h:623:18&gt;*;size_t):void*"/>
    <method name="OSAtomicEnqueue(volatile struct &lt;anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS6.0.sdk/usr/include/libkern/OSAtomic.h:623:18&gt;*;void*;size_t):void"/>
    <method name="OSAtomicIncrement32(volatile int32_t*):int32_t"/>
    <method name="OSAtomicIncrement32Barrier(volatile int32_t*):int32_t"/>
    <method name="OSAtomicIncrement64(volatile int64_t*):int64_t"/>
    <method name="OSAtomicIncrement64Barrier(volatile int64_t*):int64_t"/>
    <method name="OSAtomicOr32(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicOr32Barrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicOr32Orig(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicOr32OrigBarrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicTestAndClear(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicTestAndClearBarrier(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicTestAndSet(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicTestAndSetBarrier(uint32_t;volatile void*):_Bool"/>
    <method name="OSAtomicXor32(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicXor32Barrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicXor32Orig(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSAtomicXor32OrigBarrier(uint32_t;volatile uint32_t*):int32_t"/>
    <method name="OSHostByteOrder():int32_t"/>
    <method name="OSMemoryBarrier():void"/>
    <method name="OSMemoryNotificationCreate(OSMemoryNotificationRef*):int"/>
    <method name="OSMemoryNotificationCurrentLevel():OSMemoryNotificationLevel"/>
    <method name="OSMemoryNotificationDestroy(OSMemoryNotificationRef):int"/>
    <method name="OSMemoryNotificationTimedWait(OSMemoryNotificationRef;OSMemoryNotificationLevel*;const struct timeval*):int"/>
    <method name="OSMemoryNotificationWait(OSMemoryNotificationRef;OSMemoryNotificationLevel*):int"/>
    <method name="OSSpinLockLock(volatile OSSpinLock*):void"/>
    <method name="OSSpinLockTry(volatile OSSpinLock*):_Bool"/>
    <method name="OSSpinLockUnlock(volatile OSSpinLock*):void"/>
    <method name="OTHERNAME_free(OTHERNAME*):void"/>
    <method name="OTHERNAME_new():OTHERNAME*"/>
    <method name="OpenSSLDie(const char*;int;const char*):void"/>
    <method name="OpenSSL_add_all_ciphers():void"/>
    <method name="OpenSSL_add_all_digests():void"/>
    <method name="PBE2PARAM_free(PBE2PARAM*):void"/>
    <method name="PBE2PARAM_new():PBE2PARAM*"/>
    <method name="PBEPARAM_free(PBEPARAM*):void"/>
    <method name="PBEPARAM_new():PBEPARAM*"/>
    <method name="PBKDF2PARAM_free(PBKDF2PARAM*):void"/>
    <method name="PBKDF2PARAM_new():PBKDF2PARAM*"/>
    <method name="PB_DS_CLASS_NAME():int"/>
    <method name="PB_DS_CLASS_NAME(const int):int"/>
    <method name="PEM_ASN1_read(d2i_of_void*;const char*;FILE*;void**;pem_password_cb*;void*):void*"/>
    <method name="PEM_ASN1_read_bio(d2i_of_void*;const char*;BIO*;void**;pem_password_cb*;void*):void*"/>
    <method name="PEM_ASN1_write(i2d_of_void*;const char*;FILE*;char*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_ASN1_write_bio(i2d_of_void*;const char*;BIO*;char*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_SealFinal(PEM_ENCODE_SEAL_CTX*;unsigned char*;int*;unsigned char*;int*;EVP_PKEY*):int"/>
    <method name="PEM_SealInit(PEM_ENCODE_SEAL_CTX*;EVP_CIPHER*;EVP_MD*;unsigned char**;int*;unsigned char*;EVP_PKEY**;int):int"/>
    <method name="PEM_SealUpdate(PEM_ENCODE_SEAL_CTX*;unsigned char*;int*;unsigned char*;int):void"/>
    <method name="PEM_SignFinal(EVP_MD_CTX*;unsigned char*;unsigned int*;EVP_PKEY*):int"/>
    <method name="PEM_SignInit(EVP_MD_CTX*;EVP_MD*):void"/>
    <method name="PEM_SignUpdate(EVP_MD_CTX*;unsigned char*;unsigned int):void"/>
    <method name="PEM_X509_INFO_read(FILE*;STACK*;pem_password_cb*;void*):STACK*"/>
    <method name="PEM_X509_INFO_read_bio(BIO*;STACK*;pem_password_cb*;void*):STACK*"/>
    <method name="PEM_X509_INFO_write_bio(BIO*;X509_INFO*;EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_bytes_read_bio(unsigned char**;long*;char**;const char*;BIO*;pem_password_cb*;void*):int"/>
    <method name="PEM_def_callback(char*;int;int;void*):int"/>
    <method name="PEM_dek_info(char*;const char*;int;char*):void"/>
    <method name="PEM_do_header(EVP_CIPHER_INFO*;unsigned char*;long*;pem_password_cb*;void*):int"/>
    <method name="PEM_get_EVP_CIPHER_INFO(char*;EVP_CIPHER_INFO*):int"/>
    <method name="PEM_proc_type(char*;int):void"/>
    <method name="PEM_read(FILE*;char**;char**;unsigned char**;long*):int"/>
    <method name="PEM_read_DHparams(FILE*;DH**;pem_password_cb*;void*):DH*"/>
    <method name="PEM_read_DSAPrivateKey(FILE*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_DSA_PUBKEY(FILE*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_DSAparams(FILE*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_ECPKParameters(FILE*;EC_GROUP**;pem_password_cb*;void*):EC_GROUP*"/>
    <method name="PEM_read_ECPrivateKey(FILE*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_EC_PUBKEY(FILE*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_NETSCAPE_CERT_SEQUENCE(FILE*;NETSCAPE_CERT_SEQUENCE**;pem_password_cb*;void*):NETSCAPE_CERT_SEQUENCE*"/>
    <method name="PEM_read_PKCS7(FILE*;PKCS7**;pem_password_cb*;void*):PKCS7*"/>
    <method name="PEM_read_PKCS8(FILE*;X509_SIG**;pem_password_cb*;void*):X509_SIG*"/>
    <method name="PEM_read_PKCS8_PRIV_KEY_INFO(FILE*;PKCS8_PRIV_KEY_INFO**;pem_password_cb*;void*):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PEM_read_PUBKEY(FILE*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_PrivateKey(FILE*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_RSAPrivateKey(FILE*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_RSAPublicKey(FILE*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_RSA_PUBKEY(FILE*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_X509(FILE*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_X509_AUX(FILE*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_X509_CERT_PAIR(FILE*;X509_CERT_PAIR**;pem_password_cb*;void*):X509_CERT_PAIR*"/>
    <method name="PEM_read_X509_CRL(FILE*;X509_CRL**;pem_password_cb*;void*):X509_CRL*"/>
    <method name="PEM_read_X509_REQ(FILE*;X509_REQ**;pem_password_cb*;void*):X509_REQ*"/>
    <method name="PEM_read_bio(BIO*;char**;char**;unsigned char**;long*):int"/>
    <method name="PEM_read_bio_DHparams(BIO*;DH**;pem_password_cb*;void*):DH*"/>
    <method name="PEM_read_bio_DSAPrivateKey(BIO*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_bio_DSA_PUBKEY(BIO*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_bio_DSAparams(BIO*;DSA**;pem_password_cb*;void*):DSA*"/>
    <method name="PEM_read_bio_ECPKParameters(BIO*;EC_GROUP**;pem_password_cb*;void*):EC_GROUP*"/>
    <method name="PEM_read_bio_ECPrivateKey(BIO*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_bio_EC_PUBKEY(BIO*;EC_KEY**;pem_password_cb*;void*):EC_KEY*"/>
    <method name="PEM_read_bio_NETSCAPE_CERT_SEQUENCE(BIO*;NETSCAPE_CERT_SEQUENCE**;pem_password_cb*;void*):NETSCAPE_CERT_SEQUENCE*"/>
    <method name="PEM_read_bio_PKCS7(BIO*;PKCS7**;pem_password_cb*;void*):PKCS7*"/>
    <method name="PEM_read_bio_PKCS8(BIO*;X509_SIG**;pem_password_cb*;void*):X509_SIG*"/>
    <method name="PEM_read_bio_PKCS8_PRIV_KEY_INFO(BIO*;PKCS8_PRIV_KEY_INFO**;pem_password_cb*;void*):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PEM_read_bio_PUBKEY(BIO*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_bio_PrivateKey(BIO*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="PEM_read_bio_RSAPrivateKey(BIO*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_bio_RSAPublicKey(BIO*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_bio_RSA_PUBKEY(BIO*;RSA**;pem_password_cb*;void*):RSA*"/>
    <method name="PEM_read_bio_X509(BIO*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_bio_X509_AUX(BIO*;X509**;pem_password_cb*;void*):X509*"/>
    <method name="PEM_read_bio_X509_CERT_PAIR(BIO*;X509_CERT_PAIR**;pem_password_cb*;void*):X509_CERT_PAIR*"/>
    <method name="PEM_read_bio_X509_CRL(BIO*;X509_CRL**;pem_password_cb*;void*):X509_CRL*"/>
    <method name="PEM_read_bio_X509_REQ(BIO*;X509_REQ**;pem_password_cb*;void*):X509_REQ*"/>
    <method name="PEM_write(FILE*;char*;char*;unsigned char*;long):int"/>
    <method name="PEM_write_DHparams(FILE*;const DH*):int"/>
    <method name="PEM_write_DSAPrivateKey(FILE*;DSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_DSA_PUBKEY(FILE*;DSA*):int"/>
    <method name="PEM_write_DSAparams(FILE*;const DSA*):int"/>
    <method name="PEM_write_ECPKParameters(FILE*;const EC_GROUP*):int"/>
    <method name="PEM_write_ECPrivateKey(FILE*;EC_KEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_EC_PUBKEY(FILE*;EC_KEY*):int"/>
    <method name="PEM_write_NETSCAPE_CERT_SEQUENCE(FILE*;NETSCAPE_CERT_SEQUENCE*):int"/>
    <method name="PEM_write_PKCS7(FILE*;PKCS7*):int"/>
    <method name="PEM_write_PKCS8(FILE*;X509_SIG*):int"/>
    <method name="PEM_write_PKCS8PrivateKey(FILE*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_PKCS8PrivateKey_nid(FILE*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_PKCS8_PRIV_KEY_INFO(FILE*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="PEM_write_PUBKEY(FILE*;EVP_PKEY*):int"/>
    <method name="PEM_write_PrivateKey(FILE*;EVP_PKEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_RSAPrivateKey(FILE*;RSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_RSAPublicKey(FILE*;const RSA*):int"/>
    <method name="PEM_write_RSA_PUBKEY(FILE*;RSA*):int"/>
    <method name="PEM_write_X509(FILE*;X509*):int"/>
    <method name="PEM_write_X509_AUX(FILE*;X509*):int"/>
    <method name="PEM_write_X509_CERT_PAIR(FILE*;X509_CERT_PAIR*):int"/>
    <method name="PEM_write_X509_CRL(FILE*;X509_CRL*):int"/>
    <method name="PEM_write_X509_REQ(FILE*;X509_REQ*):int"/>
    <method name="PEM_write_X509_REQ_NEW(FILE*;X509_REQ*):int"/>
    <method name="PEM_write_bio(BIO*;const char*;char*;unsigned char*;long):int"/>
    <method name="PEM_write_bio_DHparams(BIO*;const DH*):int"/>
    <method name="PEM_write_bio_DSAPrivateKey(BIO*;DSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_DSA_PUBKEY(BIO*;DSA*):int"/>
    <method name="PEM_write_bio_DSAparams(BIO*;const DSA*):int"/>
    <method name="PEM_write_bio_ECPKParameters(BIO*;const EC_GROUP*):int"/>
    <method name="PEM_write_bio_ECPrivateKey(BIO*;EC_KEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_EC_PUBKEY(BIO*;EC_KEY*):int"/>
    <method name="PEM_write_bio_NETSCAPE_CERT_SEQUENCE(BIO*;NETSCAPE_CERT_SEQUENCE*):int"/>
    <method name="PEM_write_bio_PKCS7(BIO*;PKCS7*):int"/>
    <method name="PEM_write_bio_PKCS8(BIO*;X509_SIG*):int"/>
    <method name="PEM_write_bio_PKCS8PrivateKey(BIO*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_PKCS8PrivateKey_nid(BIO*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_PKCS8_PRIV_KEY_INFO(BIO*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="PEM_write_bio_PUBKEY(BIO*;EVP_PKEY*):int"/>
    <method name="PEM_write_bio_PrivateKey(BIO*;EVP_PKEY*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_RSAPrivateKey(BIO*;RSA*;const EVP_CIPHER*;unsigned char*;int;pem_password_cb*;void*):int"/>
    <method name="PEM_write_bio_RSAPublicKey(BIO*;const RSA*):int"/>
    <method name="PEM_write_bio_RSA_PUBKEY(BIO*;RSA*):int"/>
    <method name="PEM_write_bio_X509(BIO*;X509*):int"/>
    <method name="PEM_write_bio_X509_AUX(BIO*;X509*):int"/>
    <method name="PEM_write_bio_X509_CERT_PAIR(BIO*;X509_CERT_PAIR*):int"/>
    <method name="PEM_write_bio_X509_CRL(BIO*;X509_CRL*):int"/>
    <method name="PEM_write_bio_X509_REQ(BIO*;X509_REQ*):int"/>
    <method name="PEM_write_bio_X509_REQ_NEW(BIO*;X509_REQ*):int"/>
    <method name="PFXExportCertStore(HCERTSTORE;CRYPT_DATA_BLOB*;LPCWSTR;DWORD):BOOL"/>
    <method name="PFXExportCertStoreEx(HCERTSTORE;CRYPT_DATA_BLOB*;LPCWSTR;void*;DWORD):BOOL"/>
    <method name="PFXImportCertStore(CRYPT_DATA_BLOB*;LPCWSTR;DWORD):HCERTSTORE"/>
    <method name="PFXIsPFXBlob(CRYPT_DATA_BLOB*):BOOL"/>
    <method name="PFXVerifyPassword(CRYPT_DATA_BLOB*;LPCWSTR;DWORD):BOOL"/>
    <method name="PKCS12_BAGS_free(PKCS12_BAGS*):void"/>
    <method name="PKCS12_BAGS_new():PKCS12_BAGS*"/>
    <method name="PKCS12_MAC_DATA_free(PKCS12_MAC_DATA*):void"/>
    <method name="PKCS12_MAC_DATA_new():PKCS12_MAC_DATA*"/>
    <method name="PKCS12_MAKE_KEYBAG(PKCS8_PRIV_KEY_INFO*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_MAKE_SHKEYBAG(int;const char*;int;unsigned char*;int;int;PKCS8_PRIV_KEY_INFO*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_PBE_add():void"/>
    <method name="PKCS12_PBE_keyivgen(EVP_CIPHER_CTX*;const char*;int;ASN1_TYPE*;const EVP_CIPHER*;const EVP_MD*;int):int"/>
    <method name="PKCS12_SAFEBAG_free(PKCS12_SAFEBAG*):void"/>
    <method name="PKCS12_SAFEBAG_new():PKCS12_SAFEBAG*"/>
    <method name="PKCS12_add_CSPName_asc(PKCS12_SAFEBAG*;const char*;int):int"/>
    <method name="PKCS12_add_cert(STACK**;X509*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG*;const char*;int):int"/>
    <method name="PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG*;const unsigned char*;int):int"/>
    <method name="PKCS12_add_key(STACK**;EVP_PKEY*;int;int;int;char*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_add_localkeyid(PKCS12_SAFEBAG*;unsigned char*;int):int"/>
    <method name="PKCS12_add_safe(STACK**;STACK*;int;int;char*):int"/>
    <method name="PKCS12_add_safes(STACK*;int):PKCS12*"/>
    <method name="PKCS12_certbag2x509(PKCS12_SAFEBAG*):X509*"/>
    <method name="PKCS12_certbag2x509crl(PKCS12_SAFEBAG*):X509_CRL*"/>
    <method name="PKCS12_create(char*;char*;EVP_PKEY*;X509*;STACK*;int;int;int;int;int):PKCS12*"/>
    <method name="PKCS12_decrypt_skey(PKCS12_SAFEBAG*;const char*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKCS12_free(PKCS12*):void"/>
    <method name="PKCS12_gen_mac(PKCS12*;const char*;int;unsigned char*;unsigned int*):int"/>
    <method name="PKCS12_get_attr_gen(STACK*;int):ASN1_TYPE*"/>
    <method name="PKCS12_get_friendlyname(PKCS12_SAFEBAG*):char*"/>
    <method name="PKCS12_init(int):PKCS12*"/>
    <method name="PKCS12_item_decrypt_d2i(X509_ALGOR*;const ASN1_ITEM*;const char*;int;ASN1_OCTET_STRING*;int):void*"/>
    <method name="PKCS12_item_i2d_encrypt(X509_ALGOR*;const ASN1_ITEM*;const char*;int;void*;int):ASN1_OCTET_STRING*"/>
    <method name="PKCS12_item_pack_safebag(void*;const ASN1_ITEM*;int;int):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_key_gen_asc(const char*;int;unsigned char*;int;int;int;int;unsigned char*;const EVP_MD*):int"/>
    <method name="PKCS12_key_gen_uni(unsigned char*;int;unsigned char*;int;int;int;int;unsigned char*;const EVP_MD*):int"/>
    <method name="PKCS12_new():PKCS12*"/>
    <method name="PKCS12_newpass(PKCS12*;char*;char*):int"/>
    <method name="PKCS12_pack_authsafes(PKCS12*;STACK*):int"/>
    <method name="PKCS12_pack_p7data(STACK*):PKCS7*"/>
    <method name="PKCS12_pack_p7encdata(int;const char*;int;unsigned char*;int;int;STACK*):PKCS7*"/>
    <method name="PKCS12_parse(PKCS12*;const char*;EVP_PKEY**;X509**;STACK**):int"/>
    <method name="PKCS12_pbe_crypt(X509_ALGOR*;const char*;int;unsigned char*;int;unsigned char**;int*;int):unsigned char*"/>
    <method name="PKCS12_set_mac(PKCS12*;const char*;int;unsigned char*;int;int;const EVP_MD*):int"/>
    <method name="PKCS12_setup_mac(PKCS12*;int;unsigned char*;int;const EVP_MD*):int"/>
    <method name="PKCS12_unpack_authsafes(PKCS12*):STACK*"/>
    <method name="PKCS12_unpack_p7data(PKCS7*):STACK*"/>
    <method name="PKCS12_unpack_p7encdata(PKCS7*;const char*;int):STACK*"/>
    <method name="PKCS12_verify_mac(PKCS12*;const char*;int):int"/>
    <method name="PKCS12_x5092certbag(X509*):PKCS12_SAFEBAG*"/>
    <method name="PKCS12_x509crl2certbag(X509_CRL*):PKCS12_SAFEBAG*"/>
    <method name="PKCS1_MGF1(unsigned char*;long;const unsigned char*;long;const EVP_MD*):int"/>
    <method name="PKCS5_PBE_add():void"/>
    <method name="PKCS5_PBE_keyivgen(EVP_CIPHER_CTX*;const char*;int;ASN1_TYPE*;const EVP_CIPHER*;const EVP_MD*;int):int"/>
    <method name="PKCS5_PBKDF2_HMAC_SHA1(const char*;int;const unsigned char*;int;int;int;unsigned char*):int"/>
    <method name="PKCS5_pbe2_set(const EVP_CIPHER*;int;unsigned char*;int):X509_ALGOR*"/>
    <method name="PKCS5_pbe_set(int;int;unsigned char*;int):X509_ALGOR*"/>
    <method name="PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX*;const char*;int;ASN1_TYPE*;const EVP_CIPHER*;const EVP_MD*;int):int"/>
    <method name="PKCS7_DIGEST_free(PKCS7_DIGEST*):void"/>
    <method name="PKCS7_DIGEST_new():PKCS7_DIGEST*"/>
    <method name="PKCS7_ENCRYPT_free(PKCS7_ENCRYPT*):void"/>
    <method name="PKCS7_ENCRYPT_new():PKCS7_ENCRYPT*"/>
    <method name="PKCS7_ENC_CONTENT_free(PKCS7_ENC_CONTENT*):void"/>
    <method name="PKCS7_ENC_CONTENT_new():PKCS7_ENC_CONTENT*"/>
    <method name="PKCS7_ENVELOPE_free(PKCS7_ENVELOPE*):void"/>
    <method name="PKCS7_ENVELOPE_new():PKCS7_ENVELOPE*"/>
    <method name="PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="PKCS7_ISSUER_AND_SERIAL_free(PKCS7_ISSUER_AND_SERIAL*):void"/>
    <method name="PKCS7_ISSUER_AND_SERIAL_new():PKCS7_ISSUER_AND_SERIAL*"/>
    <method name="PKCS7_RECIP_INFO_free(PKCS7_RECIP_INFO*):void"/>
    <method name="PKCS7_RECIP_INFO_new():PKCS7_RECIP_INFO*"/>
    <method name="PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO*;X509*):int"/>
    <method name="PKCS7_SIGNED_free(PKCS7_SIGNED*):void"/>
    <method name="PKCS7_SIGNED_new():PKCS7_SIGNED*"/>
    <method name="PKCS7_SIGNER_INFO_free(PKCS7_SIGNER_INFO*):void"/>
    <method name="PKCS7_SIGNER_INFO_new():PKCS7_SIGNER_INFO*"/>
    <method name="PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO*;X509*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="PKCS7_SIGN_ENVELOPE_free(PKCS7_SIGN_ENVELOPE*):void"/>
    <method name="PKCS7_SIGN_ENVELOPE_new():PKCS7_SIGN_ENVELOPE*"/>
    <method name="PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO*;STACK*):int"/>
    <method name="PKCS7_add_attribute(PKCS7_SIGNER_INFO*;int;int;void*):int"/>
    <method name="PKCS7_add_certificate(PKCS7*;X509*):int"/>
    <method name="PKCS7_add_crl(PKCS7*;X509_CRL*):int"/>
    <method name="PKCS7_add_recipient(PKCS7*;X509*):PKCS7_RECIP_INFO*"/>
    <method name="PKCS7_add_recipient_info(PKCS7*;PKCS7_RECIP_INFO*):int"/>
    <method name="PKCS7_add_signature(PKCS7*;X509*;EVP_PKEY*;const EVP_MD*):PKCS7_SIGNER_INFO*"/>
    <method name="PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO*;int;int;void*):int"/>
    <method name="PKCS7_add_signer(PKCS7*;PKCS7_SIGNER_INFO*):int"/>
    <method name="PKCS7_cert_from_signer_info(PKCS7*;PKCS7_SIGNER_INFO*):X509*"/>
    <method name="PKCS7_content_new(PKCS7*;int):int"/>
    <method name="PKCS7_ctrl(PKCS7*;int;long;char*):long"/>
    <method name="PKCS7_dataDecode(PKCS7*;EVP_PKEY*;BIO*;X509*):BIO*"/>
    <method name="PKCS7_dataFinal(PKCS7*;BIO*):int"/>
    <method name="PKCS7_dataInit(PKCS7*;BIO*):BIO*"/>
    <method name="PKCS7_dataVerify(X509_STORE*;X509_STORE_CTX*;BIO*;PKCS7*;PKCS7_SIGNER_INFO*):int"/>
    <method name="PKCS7_decrypt(PKCS7*;EVP_PKEY*;X509*;BIO*;int):int"/>
    <method name="PKCS7_digest_from_attributes(STACK*):ASN1_OCTET_STRING*"/>
    <method name="PKCS7_dup(PKCS7*):PKCS7*"/>
    <method name="PKCS7_encrypt(STACK*;BIO*;const EVP_CIPHER*;int):PKCS7*"/>
    <method name="PKCS7_free(PKCS7*):void"/>
    <method name="PKCS7_get0_signers(PKCS7*;STACK*;int):STACK*"/>
    <method name="PKCS7_get_attribute(PKCS7_SIGNER_INFO*;int):ASN1_TYPE*"/>
    <method name="PKCS7_get_issuer_and_serial(PKCS7*;int):PKCS7_ISSUER_AND_SERIAL*"/>
    <method name="PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO*;int):ASN1_TYPE*"/>
    <method name="PKCS7_get_signer_info(PKCS7*):STACK*"/>
    <method name="PKCS7_get_smimecap(PKCS7_SIGNER_INFO*):STACK*"/>
    <method name="PKCS7_new():PKCS7*"/>
    <method name="PKCS7_set0_type_other(PKCS7*;int;ASN1_TYPE*):int"/>
    <method name="PKCS7_set_attributes(PKCS7_SIGNER_INFO*;STACK*):int"/>
    <method name="PKCS7_set_cipher(PKCS7*;const EVP_CIPHER*):int"/>
    <method name="PKCS7_set_content(PKCS7*;PKCS7*):int"/>
    <method name="PKCS7_set_digest(PKCS7*;const EVP_MD*):int"/>
    <method name="PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO*;STACK*):int"/>
    <method name="PKCS7_set_type(PKCS7*;int):int"/>
    <method name="PKCS7_sign(X509*;EVP_PKEY*;STACK*;BIO*;int):PKCS7*"/>
    <method name="PKCS7_signatureVerify(BIO*;PKCS7*;PKCS7_SIGNER_INFO*;X509*):int"/>
    <method name="PKCS7_simple_smimecap(STACK*;int;int):int"/>
    <method name="PKCS7_verify(PKCS7*;STACK*;X509_STORE*;BIO*;BIO*;int):int"/>
    <method name="PKCS8_PRIV_KEY_INFO_free(PKCS8_PRIV_KEY_INFO*):void"/>
    <method name="PKCS8_PRIV_KEY_INFO_new():PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO*;int):int"/>
    <method name="PKCS8_decrypt(X509_SIG*;const char*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKCS8_encrypt(int;const EVP_CIPHER*;const char*;int;unsigned char*;int;int;PKCS8_PRIV_KEY_INFO*):X509_SIG*"/>
    <method name="PKCS8_set_broken(PKCS8_PRIV_KEY_INFO*;int):PKCS8_PRIV_KEY_INFO*"/>
    <method name="PKEY_USAGE_PERIOD_free(PKEY_USAGE_PERIOD*):void"/>
    <method name="PKEY_USAGE_PERIOD_new():PKEY_USAGE_PERIOD*"/>
    <method name="POLICYINFO_free(POLICYINFO*):void"/>
    <method name="POLICYINFO_new():POLICYINFO*"/>
    <method name="POLICYQUALINFO_free(POLICYQUALINFO*):void"/>
    <method name="POLICYQUALINFO_new():POLICYQUALINFO*"/>
    <method name="POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS*):void"/>
    <method name="POLICY_CONSTRAINTS_new():POLICY_CONSTRAINTS*"/>
    <method name="POLICY_MAPPING_free(POLICY_MAPPING*):void"/>
    <method name="POLICY_MAPPING_new():POLICY_MAPPING*"/>
    <method name="PROXY_CERT_INFO_EXTENSION_free(PROXY_CERT_INFO_EXTENSION*):void"/>
    <method name="PROXY_CERT_INFO_EXTENSION_new():PROXY_CERT_INFO_EXTENSION*"/>
    <method name="PROXY_POLICY_free(PROXY_POLICY*):void"/>
    <method name="PROXY_POLICY_new():PROXY_POLICY*"/>
    <method name="PSPDFAlignRectangles(CGRect;CGRect;PSPDFRectAlignment):CGRect"/>
    <method name="PSPDFAlignSizeWithinRectWithOffset(CGSize;CGRect;CGFloat;CGFloat;PSPDFRectAlignment):CGRect"/>
    <method name="PSPDFApplyRotationToRect(CGRect;NSInteger):CGRect"/>
    <method name="PSPDFArrayGetString(CGPDFArrayRef;size_t):NSString*"/>
    <method name="PSPDFCGRectFromPoints(CGPoint;CGPoint):CGRect"/>
    <method name="PSPDFCacheKeyboard():void"/>
    <method name="PSPDFConvertPDFArray(CGPDFArrayRef):NSArray*"/>
    <method name="PSPDFConvertPDFDictionary(CGPDFDictionaryRef):NSDictionary*"/>
    <method name="PSPDFConvertPDFObject(CGPDFObjectRef):id"/>
    <method name="PSPDFConvertPDFObjectAsString(CGPDFObjectRef):NSString*"/>
    <method name="PSPDFConvertPDFPointToViewPoint(CGPoint;CGRect;NSUInteger;CGRect):CGPoint"/>
    <method name="PSPDFConvertPDFRectToViewRect(CGRect;CGRect;NSUInteger;CGRect):CGRect"/>
    <method name="PSPDFConvertViewPointToPDFPoint(CGPoint;CGRect;NSUInteger;CGRect):CGPoint"/>
    <method name="PSPDFConvertViewRectToPDFRect(CGRect;CGRect;NSUInteger;CGRect):CGRect"/>
    <method name="PSPDFDictionaryGetObjectForPath(CGPDFDictionaryRef;NSString*):id"/>
    <method name="PSPDFDictionaryGetString(CGPDFDictionaryRef;NSString*):NSString*"/>
    <method name="PSPDFFadeTransition():CATransition*"/>
    <method name="PSPDFFadeTransitionWithDuration(CGFloat):CATransition*"/>
    <method name="PSPDFGetTransformFromPageRectAndRotation(CGRect;NSInteger):CGAffineTransform"/>
    <method name="PSPDFGetViewInsideView(UIView*;NSString*):UIView*"/>
    <method name="PSPDFHSBtoRGB(float*;float*;float*;float;float;float):void"/>
    <method name="PSPDFIndexSetFromArray(NSArray*):NSIndexSet*"/>
    <method name="PSPDFIsControllerClassInPopover(UIPopoverController*;Class*):BOOL"/>
    <method name="PSPDFIsCrappyDevice():BOOL"/>
    <method name="PSPDFIsRotationLocked():BOOL"/>
    <method name="PSPDFKitBundle():NSBundle*"/>
    <method name="PSPDFLocalize(NSString*):NSString*"/>
    <method name="PSPDFLockRotation():void"/>
    <method name="PSPDFNormalizeRect(CGRect):CGRect"/>
    <method name="PSPDFPerformAndTrackTime((^)():void;BOOL):double"/>
    <method name="PSPDFRGBtoHSB(float;float;float;float*;float*;float*):void"/>
    <method name="PSPDFRGBtoHSV(float;float;float;float*;float*;float*):void"/>
    <method name="PSPDFRectsFromGlyphs(NSArray*;CGAffineTransform;CGRect*):NSArray*"/>
    <method name="PSPDFReplaceMethod(Class*;SEL;SEL;int):void"/>
    <method name="PSPDFResolvePathNames(NSString*;NSString*):NSString*"/>
    <method name="PSPDFResolvePathNamesInMutableString(NSMutableString*;NSString*;(^)(NSString*):NSString*):BOOL"/>
    <method name="PSPDFScaleForSizeWithinSize(CGSize;CGSize):CGFloat"/>
    <method name="PSPDFScaleForSizeWithinSizeWithOptions(CGSize;CGSize;BOOL;BOOL):CGFloat"/>
    <method name="PSPDFSetLocalizationDictionary(NSDictionary*):void"/>
    <method name="PSPDFShouldAnimate():BOOL"/>
    <method name="PSPDFSimulatorAnimationDragCoefficient():CGFloat"/>
    <method name="PSPDFSizeForScale(CGSize;CGFloat):CGSize"/>
    <method name="PSPDFSplinePathFromPoints(CGPoint;CGPoint;CGPoint;CGPoint;int):UIBezierPath*"/>
    <method name="PSPDFSplineWithPointArray(NSArray*;CGFloat):UIBezierPath*"/>
    <method name="PSPDFStripPDFFileType(NSString*):NSString*"/>
    <method name="PSPDFTempFileURLWithPathExtension(NSString*;NSString*):NSURL*"/>
    <method name="PSPDFToolbarHeight(BOOL):CGFloat"/>
    <method name="PSPDFToolbarHeightForOrientation(UIInterfaceOrientation):CGFloat"/>
    <method name="PSPDFTrimString(NSString*):NSString*"/>
    <method name="PSPDFUnlockRotation():void"/>
    <method name="PSPDFVersionString():NSString*"/>
    <method name="PSPDPFActionSheetStyleForBarButtonStyle(UIBarStyle;BOOL):UIActionSheetStyle"/>
    <method name="PeerConnectionRelease(DNSServiceFlags;const char*;const char*;const char*):DNSServiceErrorType"/>
    <method name="PrintReachabilityFlags(SCNetworkReachabilityFlags;const char*):void"/>
    <method name="RAND_SSLeay():RAND_METHOD*"/>
    <method name="RAND_add(const void*;int;double):void"/>
    <method name="RAND_bytes(unsigned char*;int):int"/>
    <method name="RAND_cleanup():void"/>
    <method name="RAND_egd(const char*):int"/>
    <method name="RAND_egd_bytes(const char*;int):int"/>
    <method name="RAND_file_name(char*;size_t):const char*"/>
    <method name="RAND_get_rand_method():const RAND_METHOD*"/>
    <method name="RAND_load_file(const char*;long):int"/>
    <method name="RAND_poll():int"/>
    <method name="RAND_pseudo_bytes(unsigned char*;int):int"/>
    <method name="RAND_query_egd_bytes(const char*;unsigned char*;int):int"/>
    <method name="RAND_seed(const void*;int):void"/>
    <method name="RAND_set_rand_engine(ENGINE*):int"/>
    <method name="RAND_set_rand_method(const RAND_METHOD*):int"/>
    <method name="RAND_status():int"/>
    <method name="RAND_write_file(const char*):int"/>
    <method name="RC2_cbc_encrypt(const unsigned char*;unsigned char*;long;RC2_KEY*;unsigned char*;int):void"/>
    <method name="RC2_cfb64_encrypt(const unsigned char*;unsigned char*;long;RC2_KEY*;unsigned char*;int*;int):void"/>
    <method name="RC2_decrypt(unsigned long*;RC2_KEY*):void"/>
    <method name="RC2_ecb_encrypt(const unsigned char*;unsigned char*;RC2_KEY*;int):void"/>
    <method name="RC2_encrypt(unsigned long*;RC2_KEY*):void"/>
    <method name="RC2_ofb64_encrypt(const unsigned char*;unsigned char*;long;RC2_KEY*;unsigned char*;int*):void"/>
    <method name="RC2_set_key(RC2_KEY*;int;const unsigned char*;int):void"/>
    <method name="RC4(RC4_KEY*;unsigned long;const unsigned char*;unsigned char*):void"/>
    <method name="RC4_options():const char*"/>
    <method name="RC4_set_key(RC4_KEY*;int;const unsigned char*):void"/>
    <method name="RIPEMD160(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="RIPEMD160_Final(unsigned char*;RIPEMD160_CTX*):int"/>
    <method name="RIPEMD160_Init(RIPEMD160_CTX*):int"/>
    <method name="RIPEMD160_Transform(RIPEMD160_CTX*;const unsigned char*):void"/>
    <method name="RIPEMD160_Update(RIPEMD160_CTX*;const void*;size_t):int"/>
    <method name="RKObjectIsValueEqualToValue(id;id):BOOL"/>
    <method name="RSAPrivateKey_asn1_meth():ASN1_METHOD*"/>
    <method name="RSAPrivateKey_dup(RSA*):RSA*"/>
    <method name="RSAPublicKey_dup(RSA*):RSA*"/>
    <method name="RSA_PKCS1_SSLeay():const RSA_METHOD*"/>
    <method name="RSA_X931_hash_id(int):int"/>
    <method name="RSA_blinding_off(RSA*):void"/>
    <method name="RSA_blinding_on(RSA*;BN_CTX*):int"/>
    <method name="RSA_check_key(const RSA*):int"/>
    <method name="RSA_flags(const RSA*):int"/>
    <method name="RSA_free(RSA*):void"/>
    <method name="RSA_generate_key(int;unsigned long;(*)(int;int;void*):void*;void*):RSA*"/>
    <method name="RSA_generate_key_ex(RSA*;int;BIGNUM*;BN_GENCB*):int"/>
    <method name="RSA_get_default_method():const RSA_METHOD*"/>
    <method name="RSA_get_ex_data(const RSA*;int):void*"/>
    <method name="RSA_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="RSA_get_method(const RSA*):const RSA_METHOD*"/>
    <method name="RSA_memory_lock(RSA*):int"/>
    <method name="RSA_new():RSA*"/>
    <method name="RSA_new_method(ENGINE*):RSA*"/>
    <method name="RSA_null_method():const RSA_METHOD*"/>
    <method name="RSA_padding_add_PKCS1_OAEP(unsigned char*;int;const unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_PKCS1_PSS(RSA*;unsigned char*;const unsigned char*;const EVP_MD*;int):int"/>
    <method name="RSA_padding_add_PKCS1_type_1(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_PKCS1_type_2(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_SSLv23(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_X931(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_add_none(unsigned char*;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_check_PKCS1_OAEP(unsigned char*;int;const unsigned char*;int;int;const unsigned char*;int):int"/>
    <method name="RSA_padding_check_PKCS1_type_1(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_PKCS1_type_2(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_SSLv23(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_X931(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_padding_check_none(unsigned char*;int;const unsigned char*;int;int):int"/>
    <method name="RSA_print(BIO*;const RSA*;int):int"/>
    <method name="RSA_print_fp(FILE*;const RSA*;int):int"/>
    <method name="RSA_private_decrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_private_encrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_public_decrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_public_encrypt(int;const unsigned char*;unsigned char*;RSA*;int):int"/>
    <method name="RSA_set_default_method(const RSA_METHOD*):void"/>
    <method name="RSA_set_ex_data(RSA*;int;void*):int"/>
    <method name="RSA_set_method(RSA*;const RSA_METHOD*):int"/>
    <method name="RSA_setup_blinding(RSA*;BN_CTX*):BN_BLINDING*"/>
    <method name="RSA_sign(int;const unsigned char*;unsigned int;unsigned char*;unsigned int*;RSA*):int"/>
    <method name="RSA_sign_ASN1_OCTET_STRING(int;const unsigned char*;unsigned int;unsigned char*;unsigned int*;RSA*):int"/>
    <method name="RSA_size(const RSA*):int"/>
    <method name="RSA_up_ref(RSA*):int"/>
    <method name="RSA_verify(int;const unsigned char*;unsigned int;unsigned char*;unsigned int;RSA*):int"/>
    <method name="RSA_verify_ASN1_OCTET_STRING(int;const unsigned char*;unsigned int;unsigned char*;unsigned int;RSA*):int"/>
    <method name="RSA_verify_PKCS1_PSS(RSA*;const unsigned char*;const EVP_MD*;const char*;int):int"/>
    <method name="ReachabilityCallback(SCNetworkReachabilityRef;SCNetworkReachabilityFlags;void*):void"/>
    <method name="ReadStreamClientCallBack(CFReadStreamRef;CFStreamEventType;void*):void"/>
    <method name="ReleaseNoOp(CFAllocatorRef;const void*):void"/>
    <method name="RetainNoOp(CFAllocatorRef;const void*):const void*"/>
    <method name="RpcImpersonateClient(RPC_BINDING_HANDLE):RPC_STATUS"/>
    <method name="SCBondInterfaceCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCBondInterfaceCopyAvailableMemberInterfaces(SCPreferencesRef):CFArrayRef"/>
    <method name="SCBondInterfaceCopyStatus(SCBondInterfaceRef):SCBondStatusRef"/>
    <method name="SCBondInterfaceCreate(SCPreferencesRef):SCBondInterfaceRef"/>
    <method name="SCBondInterfaceGetMemberInterfaces(SCBondInterfaceRef):CFArrayRef"/>
    <method name="SCBondInterfaceGetOptions(SCBondInterfaceRef):CFDictionaryRef"/>
    <method name="SCBondInterfaceRemove(SCBondInterfaceRef):Boolean"/>
    <method name="SCBondInterfaceSetLocalizedDisplayName(SCBondInterfaceRef;CFStringRef):Boolean"/>
    <method name="SCBondInterfaceSetMemberInterfaces(SCBondInterfaceRef;CFArrayRef):Boolean"/>
    <method name="SCBondInterfaceSetOptions(SCBondInterfaceRef;CFDictionaryRef):Boolean"/>
    <method name="SCBondStatusGetInterfaceStatus(SCBondStatusRef;SCNetworkInterfaceRef):CFDictionaryRef"/>
    <method name="SCBondStatusGetMemberInterfaces(SCBondStatusRef):CFArrayRef"/>
    <method name="SCBondStatusGetTypeID():CFTypeID"/>
    <method name="SCCopyLastError():CFErrorRef"/>
    <method name="SCDynamicStoreAddTemporaryValue(SCDynamicStoreRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCDynamicStoreAddValue(SCDynamicStoreRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCDynamicStoreCopyComputerName(SCDynamicStoreRef;CFStringEncoding*):CFStringRef"/>
    <method name="SCDynamicStoreCopyConsoleUser(SCDynamicStoreRef;uid_t*;gid_t*):CFStringRef"/>
    <method name="SCDynamicStoreCopyDHCPInfo(SCDynamicStoreRef;CFStringRef):CFDictionaryRef"/>
    <method name="SCDynamicStoreCopyKeyList(SCDynamicStoreRef;CFStringRef):CFArrayRef"/>
    <method name="SCDynamicStoreCopyLocalHostName(SCDynamicStoreRef):CFStringRef"/>
    <method name="SCDynamicStoreCopyLocation(SCDynamicStoreRef):CFStringRef"/>
    <method name="SCDynamicStoreCopyMultiple(SCDynamicStoreRef;CFArrayRef;CFArrayRef):CFDictionaryRef"/>
    <method name="SCDynamicStoreCopyNotifiedKeys(SCDynamicStoreRef):CFArrayRef"/>
    <method name="SCDynamicStoreCopyProxies(SCDynamicStoreRef):CFDictionaryRef"/>
    <method name="SCDynamicStoreCopyValue(SCDynamicStoreRef;CFStringRef):CFPropertyListRef"/>
    <method name="SCDynamicStoreCreate(CFAllocatorRef;CFStringRef;SCDynamicStoreCallBack;SCDynamicStoreContext*):SCDynamicStoreRef"/>
    <method name="SCDynamicStoreCreateRunLoopSource(CFAllocatorRef;SCDynamicStoreRef;CFIndex):CFRunLoopSourceRef"/>
    <method name="SCDynamicStoreCreateWithOptions(CFAllocatorRef;CFStringRef;CFDictionaryRef;SCDynamicStoreCallBack;SCDynamicStoreContext*):SCDynamicStoreRef"/>
    <method name="SCDynamicStoreGetTypeID():CFTypeID"/>
    <method name="SCDynamicStoreKeyCreate(CFAllocatorRef;CFStringRef, ...):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateComputerName(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateConsoleUser(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateHostNames(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateLocation(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkGlobalEntity(CFAllocatorRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkInterface(CFAllocatorRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkInterfaceEntity(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateNetworkServiceEntity(CFAllocatorRef;CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="SCDynamicStoreKeyCreateProxies(CFAllocatorRef):CFStringRef"/>
    <method name="SCDynamicStoreNotifyValue(SCDynamicStoreRef;CFStringRef):Boolean"/>
    <method name="SCDynamicStoreRemoveValue(SCDynamicStoreRef;CFStringRef):Boolean"/>
    <method name="SCDynamicStoreSetDispatchQueue(SCDynamicStoreRef;dispatch_queue_t):Boolean"/>
    <method name="SCDynamicStoreSetMultiple(SCDynamicStoreRef;CFDictionaryRef;CFArrayRef;CFArrayRef):Boolean"/>
    <method name="SCDynamicStoreSetNotificationKeys(SCDynamicStoreRef;CFArrayRef;CFArrayRef):Boolean"/>
    <method name="SCDynamicStoreSetValue(SCDynamicStoreRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCError():int"/>
    <method name="SCErrorString(int):const char*"/>
    <method name="SCNetworkCheckReachabilityByAddress(const struct sockaddr*;socklen_t;SCNetworkConnectionFlags*):Boolean"/>
    <method name="SCNetworkCheckReachabilityByName(const char*;SCNetworkConnectionFlags*):Boolean"/>
    <method name="SCNetworkConnectionCopyExtendedStatus(SCNetworkConnectionRef):CFDictionaryRef"/>
    <method name="SCNetworkConnectionCopyServiceID(SCNetworkConnectionRef):CFStringRef"/>
    <method name="SCNetworkConnectionCopyStatistics(SCNetworkConnectionRef):CFDictionaryRef"/>
    <method name="SCNetworkConnectionCopyUserOptions(SCNetworkConnectionRef):CFDictionaryRef"/>
    <method name="SCNetworkConnectionCopyUserPreferences(CFDictionaryRef;CFStringRef*;CFDictionaryRef*):Boolean"/>
    <method name="SCNetworkConnectionCreateWithServiceID(CFAllocatorRef;CFStringRef;SCNetworkConnectionCallBack;SCNetworkConnectionContext*):SCNetworkConnectionRef"/>
    <method name="SCNetworkConnectionGetStatus(SCNetworkConnectionRef):SCNetworkConnectionStatus"/>
    <method name="SCNetworkConnectionGetTypeID():CFTypeID"/>
    <method name="SCNetworkConnectionScheduleWithRunLoop(SCNetworkConnectionRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkConnectionSetDispatchQueue(SCNetworkConnectionRef;dispatch_queue_t):Boolean"/>
    <method name="SCNetworkConnectionStart(SCNetworkConnectionRef;CFDictionaryRef;Boolean):Boolean"/>
    <method name="SCNetworkConnectionStop(SCNetworkConnectionRef;Boolean):Boolean"/>
    <method name="SCNetworkConnectionUnscheduleFromRunLoop(SCNetworkConnectionRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkInterfaceCopyAll():CFArrayRef"/>
    <method name="SCNetworkInterfaceCopyMTU(SCNetworkInterfaceRef;int*;int*;int*):Boolean"/>
    <method name="SCNetworkInterfaceCopyMediaOptions(SCNetworkInterfaceRef;CFDictionaryRef*;CFDictionaryRef*;CFArrayRef*;Boolean):Boolean"/>
    <method name="SCNetworkInterfaceCopyMediaSubTypeOptions(CFArrayRef;CFStringRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceCopyMediaSubTypes(CFArrayRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceCreateWithInterface(SCNetworkInterfaceRef;CFStringRef):SCNetworkInterfaceRef"/>
    <method name="SCNetworkInterfaceForceConfigurationRefresh(SCNetworkInterfaceRef):Boolean"/>
    <method name="SCNetworkInterfaceGetBSDName(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetConfiguration(SCNetworkInterfaceRef):CFDictionaryRef"/>
    <method name="SCNetworkInterfaceGetExtendedConfiguration(SCNetworkInterfaceRef;CFStringRef):CFDictionaryRef"/>
    <method name="SCNetworkInterfaceGetHardwareAddressString(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetInterface(SCNetworkInterfaceRef):SCNetworkInterfaceRef"/>
    <method name="SCNetworkInterfaceGetInterfaceType(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetLocalizedDisplayName(SCNetworkInterfaceRef):CFStringRef"/>
    <method name="SCNetworkInterfaceGetSupportedInterfaceTypes(SCNetworkInterfaceRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceGetSupportedProtocolTypes(SCNetworkInterfaceRef):CFArrayRef"/>
    <method name="SCNetworkInterfaceGetTypeID():CFTypeID"/>
    <method name="SCNetworkInterfaceRefreshConfiguration(CFStringRef):Boolean"/>
    <method name="SCNetworkInterfaceSetConfiguration(SCNetworkInterfaceRef;CFDictionaryRef):Boolean"/>
    <method name="SCNetworkInterfaceSetExtendedConfiguration(SCNetworkInterfaceRef;CFStringRef;CFDictionaryRef):Boolean"/>
    <method name="SCNetworkInterfaceSetMTU(SCNetworkInterfaceRef;int):Boolean"/>
    <method name="SCNetworkInterfaceSetMediaOptions(SCNetworkInterfaceRef;CFStringRef;CFArrayRef):Boolean"/>
    <method name="SCNetworkProtocolGetConfiguration(SCNetworkProtocolRef):CFDictionaryRef"/>
    <method name="SCNetworkProtocolGetEnabled(SCNetworkProtocolRef):Boolean"/>
    <method name="SCNetworkProtocolGetProtocolType(SCNetworkProtocolRef):CFStringRef"/>
    <method name="SCNetworkProtocolGetTypeID():CFTypeID"/>
    <method name="SCNetworkProtocolSetConfiguration(SCNetworkProtocolRef;CFDictionaryRef):Boolean"/>
    <method name="SCNetworkProtocolSetEnabled(SCNetworkProtocolRef;Boolean):Boolean"/>
    <method name="SCNetworkReachabilityCreateWithAddress(CFAllocatorRef;const struct sockaddr*):SCNetworkReachabilityRef"/>
    <method name="SCNetworkReachabilityCreateWithAddressPair(CFAllocatorRef;const struct sockaddr*;const struct sockaddr*):SCNetworkReachabilityRef"/>
    <method name="SCNetworkReachabilityCreateWithName(CFAllocatorRef;const char*):SCNetworkReachabilityRef"/>
    <method name="SCNetworkReachabilityGetFlags(SCNetworkReachabilityRef;SCNetworkReachabilityFlags*):Boolean"/>
    <method name="SCNetworkReachabilityGetTypeID():CFTypeID"/>
    <method name="SCNetworkReachabilityScheduleWithRunLoop(SCNetworkReachabilityRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkReachabilitySetCallback(SCNetworkReachabilityRef;SCNetworkReachabilityCallBack;SCNetworkReachabilityContext*):Boolean"/>
    <method name="SCNetworkReachabilitySetDispatchQueue(SCNetworkReachabilityRef;dispatch_queue_t):Boolean"/>
    <method name="SCNetworkReachabilityUnscheduleFromRunLoop(SCNetworkReachabilityRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCNetworkServiceAddProtocolType(SCNetworkServiceRef;CFStringRef):Boolean"/>
    <method name="SCNetworkServiceCopy(SCPreferencesRef;CFStringRef):SCNetworkServiceRef"/>
    <method name="SCNetworkServiceCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCNetworkServiceCopyProtocol(SCNetworkServiceRef;CFStringRef):SCNetworkProtocolRef"/>
    <method name="SCNetworkServiceCopyProtocols(SCNetworkServiceRef):CFArrayRef"/>
    <method name="SCNetworkServiceCreate(SCPreferencesRef;SCNetworkInterfaceRef):SCNetworkServiceRef"/>
    <method name="SCNetworkServiceEstablishDefaultConfiguration(SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkServiceGetEnabled(SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkServiceGetInterface(SCNetworkServiceRef):SCNetworkInterfaceRef"/>
    <method name="SCNetworkServiceGetName(SCNetworkServiceRef):CFStringRef"/>
    <method name="SCNetworkServiceGetServiceID(SCNetworkServiceRef):CFStringRef"/>
    <method name="SCNetworkServiceGetTypeID():CFTypeID"/>
    <method name="SCNetworkServiceRemove(SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkServiceRemoveProtocolType(SCNetworkServiceRef;CFStringRef):Boolean"/>
    <method name="SCNetworkServiceSetEnabled(SCNetworkServiceRef;Boolean):Boolean"/>
    <method name="SCNetworkServiceSetName(SCNetworkServiceRef;CFStringRef):Boolean"/>
    <method name="SCNetworkSetAddService(SCNetworkSetRef;SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkSetContainsInterface(SCNetworkSetRef;SCNetworkInterfaceRef):Boolean"/>
    <method name="SCNetworkSetCopy(SCPreferencesRef;CFStringRef):SCNetworkSetRef"/>
    <method name="SCNetworkSetCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCNetworkSetCopyCurrent(SCPreferencesRef):SCNetworkSetRef"/>
    <method name="SCNetworkSetCopyServices(SCNetworkSetRef):CFArrayRef"/>
    <method name="SCNetworkSetCreate(SCPreferencesRef):SCNetworkSetRef"/>
    <method name="SCNetworkSetGetName(SCNetworkSetRef):CFStringRef"/>
    <method name="SCNetworkSetGetServiceOrder(SCNetworkSetRef):CFArrayRef"/>
    <method name="SCNetworkSetGetSetID(SCNetworkSetRef):CFStringRef"/>
    <method name="SCNetworkSetGetTypeID():CFTypeID"/>
    <method name="SCNetworkSetRemove(SCNetworkSetRef):Boolean"/>
    <method name="SCNetworkSetRemoveService(SCNetworkSetRef;SCNetworkServiceRef):Boolean"/>
    <method name="SCNetworkSetSetCurrent(SCNetworkSetRef):Boolean"/>
    <method name="SCNetworkSetSetName(SCNetworkSetRef;CFStringRef):Boolean"/>
    <method name="SCNetworkSetSetServiceOrder(SCNetworkSetRef;CFArrayRef):Boolean"/>
    <method name="SCPreferencesAddValue(SCPreferencesRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCPreferencesApplyChanges(SCPreferencesRef):Boolean"/>
    <method name="SCPreferencesCommitChanges(SCPreferencesRef):Boolean"/>
    <method name="SCPreferencesCopyKeyList(SCPreferencesRef):CFArrayRef"/>
    <method name="SCPreferencesCreate(CFAllocatorRef;CFStringRef;CFStringRef):SCPreferencesRef"/>
    <method name="SCPreferencesCreateWithAuthorization(CFAllocatorRef;CFStringRef;CFStringRef;AuthorizationRef):SCPreferencesRef"/>
    <method name="SCPreferencesGetSignature(SCPreferencesRef):CFDataRef"/>
    <method name="SCPreferencesGetTypeID():CFTypeID"/>
    <method name="SCPreferencesGetValue(SCPreferencesRef;CFStringRef):CFPropertyListRef"/>
    <method name="SCPreferencesLock(SCPreferencesRef;Boolean):Boolean"/>
    <method name="SCPreferencesPathCreateUniqueChild(SCPreferencesRef;CFStringRef):CFStringRef"/>
    <method name="SCPreferencesPathGetLink(SCPreferencesRef;CFStringRef):CFStringRef"/>
    <method name="SCPreferencesPathGetValue(SCPreferencesRef;CFStringRef):CFDictionaryRef"/>
    <method name="SCPreferencesPathRemoveValue(SCPreferencesRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesPathSetLink(SCPreferencesRef;CFStringRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesPathSetValue(SCPreferencesRef;CFStringRef;CFDictionaryRef):Boolean"/>
    <method name="SCPreferencesRemoveValue(SCPreferencesRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesScheduleWithRunLoop(SCPreferencesRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesSetCallback(SCPreferencesRef;SCPreferencesCallBack;SCPreferencesContext*):Boolean"/>
    <method name="SCPreferencesSetComputerName(SCPreferencesRef;CFStringRef;CFStringEncoding):Boolean"/>
    <method name="SCPreferencesSetDispatchQueue(SCPreferencesRef;dispatch_queue_t):Boolean"/>
    <method name="SCPreferencesSetLocalHostName(SCPreferencesRef;CFStringRef):Boolean"/>
    <method name="SCPreferencesSetValue(SCPreferencesRef;CFStringRef;CFPropertyListRef):Boolean"/>
    <method name="SCPreferencesSynchronize(SCPreferencesRef):void"/>
    <method name="SCPreferencesUnlock(SCPreferencesRef):Boolean"/>
    <method name="SCPreferencesUnscheduleFromRunLoop(SCPreferencesRef;CFRunLoopRef;CFStringRef):Boolean"/>
    <method name="SCVLANInterfaceCopyAll(SCPreferencesRef):CFArrayRef"/>
    <method name="SCVLANInterfaceCopyAvailablePhysicalInterfaces():CFArrayRef"/>
    <method name="SCVLANInterfaceCreate(SCPreferencesRef;SCNetworkInterfaceRef;CFNumberRef):SCVLANInterfaceRef"/>
    <method name="SCVLANInterfaceGetOptions(SCVLANInterfaceRef):CFDictionaryRef"/>
    <method name="SCVLANInterfaceGetPhysicalInterface(SCVLANInterfaceRef):SCNetworkInterfaceRef"/>
    <method name="SCVLANInterfaceGetTag(SCVLANInterfaceRef):CFNumberRef"/>
    <method name="SCVLANInterfaceRemove(SCVLANInterfaceRef):Boolean"/>
    <method name="SCVLANInterfaceSetLocalizedDisplayName(SCVLANInterfaceRef;CFStringRef):Boolean"/>
    <method name="SCVLANInterfaceSetOptions(SCVLANInterfaceRef;CFDictionaryRef):Boolean"/>
    <method name="SCVLANInterfaceSetPhysicalInterfaceAndTag(SCVLANInterfaceRef;SCNetworkInterfaceRef;CFNumberRef):Boolean"/>
    <method name="SHA(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA1(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA1_Final(unsigned char*;SHA_CTX*):int"/>
    <method name="SHA1_Init(SHA_CTX*):int"/>
    <method name="SHA1_Transform(SHA_CTX*;const unsigned char*):void"/>
    <method name="SHA1_Update(SHA_CTX*;const void*;size_t):int"/>
    <method name="SHA224(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA224_Final(unsigned char*;SHA256_CTX*):int"/>
    <method name="SHA224_Init(SHA256_CTX*):int"/>
    <method name="SHA224_Update(SHA256_CTX*;const void*;size_t):int"/>
    <method name="SHA256(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA256_Final(unsigned char*;SHA256_CTX*):int"/>
    <method name="SHA256_Init(SHA256_CTX*):int"/>
    <method name="SHA256_Transform(SHA256_CTX*;const unsigned char*):void"/>
    <method name="SHA256_Update(SHA256_CTX*;const void*;size_t):int"/>
    <method name="SHA384(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA384_Final(unsigned char*;SHA512_CTX*):int"/>
    <method name="SHA384_Init(SHA512_CTX*):int"/>
    <method name="SHA384_Update(SHA512_CTX*;const void*;size_t):int"/>
    <method name="SHA512(const unsigned char*;size_t;unsigned char*):unsigned char*"/>
    <method name="SHA512_Final(unsigned char*;SHA512_CTX*):int"/>
    <method name="SHA512_Init(SHA512_CTX*):int"/>
    <method name="SHA512_Transform(SHA512_CTX*;const unsigned char*):void"/>
    <method name="SHA512_Update(SHA512_CTX*;const void*;size_t):int"/>
    <method name="SHA_Final(unsigned char*;SHA_CTX*):int"/>
    <method name="SHA_Init(SHA_CTX*):int"/>
    <method name="SHA_Transform(SHA_CTX*;const unsigned char*):void"/>
    <method name="SHA_Update(SHA_CTX*;const void*;size_t):int"/>
    <method name="SINGLETON_IMPLEMENTATION(UAInboxNavUI*):int"/>
    <method name="SMIME_crlf_copy(BIO*;BIO*;int):int"/>
    <method name="SMIME_read_PKCS7(BIO*;BIO**):PKCS7*"/>
    <method name="SMIME_text(BIO*;BIO*):int"/>
    <method name="SMIME_write_PKCS7(BIO*;PKCS7*;BIO*;int):int"/>
    <method name="SSLAddDistinguishedName(SSLContextRef;const void*;size_t):OSStatus"/>
    <method name="SSLClose(SSLContextRef):OSStatus"/>
    <method name="SSLContextGetTypeID():CFTypeID"/>
    <method name="SSLCopyDistinguishedNames(SSLContextRef;CFArrayRef*):OSStatus"/>
    <method name="SSLCopyPeerTrust(SSLContextRef;SecTrustRef*):OSStatus"/>
    <method name="SSLCreateContext(CFAllocatorRef;SSLProtocolSide;SSLConnectionType):SSLContextRef"/>
    <method name="SSLGetBufferedReadSize(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetClientCertificateState(SSLContextRef;SSLClientCertificateState*):OSStatus"/>
    <method name="SSLGetConnection(SSLContextRef;SSLConnectionRef*):OSStatus"/>
    <method name="SSLGetDatagramWriteSize(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetEnabledCiphers(SSLContextRef;SSLCipherSuite*;size_t*):OSStatus"/>
    <method name="SSLGetMaxDatagramRecordSize(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetNegotiatedCipher(SSLContextRef;SSLCipherSuite*):OSStatus"/>
    <method name="SSLGetNegotiatedProtocolVersion(SSLContextRef;SSLProtocol*):OSStatus"/>
    <method name="SSLGetNumberEnabledCiphers(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetNumberSupportedCiphers(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetPeerDomainName(SSLContextRef;char*;size_t*):OSStatus"/>
    <method name="SSLGetPeerDomainNameLength(SSLContextRef;size_t*):OSStatus"/>
    <method name="SSLGetPeerID(SSLContextRef;const void**;size_t*):OSStatus"/>
    <method name="SSLGetProtocolVersionMax(SSLContextRef;SSLProtocol*):OSStatus"/>
    <method name="SSLGetProtocolVersionMin(SSLContextRef;SSLProtocol*):OSStatus"/>
    <method name="SSLGetSessionOption(SSLContextRef;SSLSessionOption;Boolean*):OSStatus"/>
    <method name="SSLGetSessionState(SSLContextRef;SSLSessionState*):OSStatus"/>
    <method name="SSLGetSupportedCiphers(SSLContextRef;SSLCipherSuite*;size_t*):OSStatus"/>
    <method name="SSLHandshake(SSLContextRef):OSStatus"/>
    <method name="SSLRead(SSLContextRef;void*;size_t;size_t*):OSStatus"/>
    <method name="SSLSetCertificate(SSLContextRef;CFArrayRef):OSStatus"/>
    <method name="SSLSetClientSideAuthenticate(SSLContextRef;SSLAuthenticate):OSStatus"/>
    <method name="SSLSetConnection(SSLContextRef;SSLConnectionRef):OSStatus"/>
    <method name="SSLSetDatagramHelloCookie(SSLContextRef;const void*;size_t):OSStatus"/>
    <method name="SSLSetEnabledCiphers(SSLContextRef;const SSLCipherSuite*;size_t):OSStatus"/>
    <method name="SSLSetEncryptionCertificate(SSLContextRef;CFArrayRef):OSStatus"/>
    <method name="SSLSetIOFuncs(SSLContextRef;SSLReadFunc;SSLWriteFunc):OSStatus"/>
    <method name="SSLSetMaxDatagramRecordSize(SSLContextRef;size_t):OSStatus"/>
    <method name="SSLSetPeerDomainName(SSLContextRef;const char*;size_t):OSStatus"/>
    <method name="SSLSetPeerID(SSLContextRef;const void*;size_t):OSStatus"/>
    <method name="SSLSetProtocolVersionMax(SSLContextRef;SSLProtocol):OSStatus"/>
    <method name="SSLSetProtocolVersionMin(SSLContextRef;SSLProtocol):OSStatus"/>
    <method name="SSLSetSessionOption(SSLContextRef;SSLSessionOption;Boolean):OSStatus"/>
    <method name="SSLWrite(SSLContextRef;const void*;size_t;size_t*):OSStatus"/>
    <method name="SSL_CIPHER_description(SSL_CIPHER*;char*;int):char*"/>
    <method name="SSL_CIPHER_get_bits(const SSL_CIPHER*;int*):int"/>
    <method name="SSL_CIPHER_get_name(const SSL_CIPHER*):const char*"/>
    <method name="SSL_CIPHER_get_version(const SSL_CIPHER*):char*"/>
    <method name="SSL_COMP_add_compression_method(int;COMP_METHOD*):int"/>
    <method name="SSL_COMP_get_compression_methods():STACK*"/>
    <method name="SSL_COMP_get_name(const COMP_METHOD*):const char*"/>
    <method name="SSL_CTX_add_client_CA(SSL_CTX*;X509*):int"/>
    <method name="SSL_CTX_add_session(SSL_CTX*;SSL_SESSION*):int"/>
    <method name="SSL_CTX_callback_ctrl(SSL_CTX*;int;(*)():void*):long"/>
    <method name="SSL_CTX_check_private_key(const SSL_CTX*):int"/>
    <method name="SSL_CTX_ctrl(SSL_CTX*;int;long;void*):long"/>
    <method name="SSL_CTX_flush_sessions(SSL_CTX*;long):void"/>
    <method name="SSL_CTX_free(SSL_CTX*):void"/>
    <method name="SSL_CTX_get_cert_store(const SSL_CTX*):X509_STORE*"/>
    <method name="SSL_CTX_get_client_CA_list(const SSL_CTX*):STACK*"/>
    <method name="SSL_CTX_get_ex_data(const SSL_CTX*;int):void*"/>
    <method name="SSL_CTX_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="SSL_CTX_get_quiet_shutdown(const SSL_CTX*):int"/>
    <method name="SSL_CTX_get_timeout(const SSL_CTX*):long"/>
    <method name="SSL_CTX_get_verify_callback(const SSL_CTX*):(*)(int;X509_STORE_CTX*):int*"/>
    <method name="SSL_CTX_get_verify_depth(const SSL_CTX*):int"/>
    <method name="SSL_CTX_get_verify_mode(const SSL_CTX*):int"/>
    <method name="SSL_CTX_load_verify_locations(SSL_CTX*;const char*;const char*):int"/>
    <method name="SSL_CTX_new(SSL_METHOD*):SSL_CTX*"/>
    <method name="SSL_CTX_remove_session(SSL_CTX*;SSL_SESSION*):int"/>
    <method name="SSL_CTX_sessions(SSL_CTX*):lhash_st*"/>
    <method name="SSL_CTX_set_cert_store(SSL_CTX*;X509_STORE*):void"/>
    <method name="SSL_CTX_set_cert_verify_callback(SSL_CTX*;(*)(X509_STORE_CTX*;void*):int*;void*):void"/>
    <method name="SSL_CTX_set_cipher_list(SSL_CTX*;const char*):int"/>
    <method name="SSL_CTX_set_client_CA_list(SSL_CTX*;STACK*):void"/>
    <method name="SSL_CTX_set_default_passwd_cb(SSL_CTX*;pem_password_cb*):void"/>
    <method name="SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX*;void*):void"/>
    <method name="SSL_CTX_set_default_verify_paths(SSL_CTX*):int"/>
    <method name="SSL_CTX_set_ex_data(SSL_CTX*;int;void*):int"/>
    <method name="SSL_CTX_set_generate_session_id(SSL_CTX*;GEN_SESSION_CB):int"/>
    <method name="SSL_CTX_set_msg_callback(SSL_CTX*;(*)(int;int;int;const void*;size_t;SSL*;void*):void*):void"/>
    <method name="SSL_CTX_set_purpose(SSL_CTX*;int):int"/>
    <method name="SSL_CTX_set_quiet_shutdown(SSL_CTX*;int):void"/>
    <method name="SSL_CTX_set_session_id_context(SSL_CTX*;const unsigned char*;unsigned int):int"/>
    <method name="SSL_CTX_set_ssl_version(SSL_CTX*;SSL_METHOD*):int"/>
    <method name="SSL_CTX_set_timeout(SSL_CTX*;long):long"/>
    <method name="SSL_CTX_set_tmp_dh_callback(SSL_CTX*;(*)(SSL*;int;int):DH**):void"/>
    <method name="SSL_CTX_set_tmp_ecdh_callback(SSL_CTX*;(*)(SSL*;int;int):EC_KEY**):void"/>
    <method name="SSL_CTX_set_tmp_rsa_callback(SSL_CTX*;(*)(SSL*;int;int):RSA**):void"/>
    <method name="SSL_CTX_set_trust(SSL_CTX*;int):int"/>
    <method name="SSL_CTX_set_verify(SSL_CTX*;int;(*)(int;X509_STORE_CTX*):int*):void"/>
    <method name="SSL_CTX_set_verify_depth(SSL_CTX*;int):void"/>
    <method name="SSL_CTX_use_PrivateKey(SSL_CTX*;EVP_PKEY*):int"/>
    <method name="SSL_CTX_use_PrivateKey_ASN1(int;SSL_CTX*;const unsigned char*;long):int"/>
    <method name="SSL_CTX_use_PrivateKey_file(SSL_CTX*;const char*;int):int"/>
    <method name="SSL_CTX_use_RSAPrivateKey(SSL_CTX*;RSA*):int"/>
    <method name="SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX*;const unsigned char*;long):int"/>
    <method name="SSL_CTX_use_RSAPrivateKey_file(SSL_CTX*;const char*;int):int"/>
    <method name="SSL_CTX_use_certificate(SSL_CTX*;X509*):int"/>
    <method name="SSL_CTX_use_certificate_ASN1(SSL_CTX*;int;const unsigned char*):int"/>
    <method name="SSL_CTX_use_certificate_chain_file(SSL_CTX*;const char*):int"/>
    <method name="SSL_CTX_use_certificate_file(SSL_CTX*;const char*;int):int"/>
    <method name="SSL_SESSION_cmp(const SSL_SESSION*;const SSL_SESSION*):int"/>
    <method name="SSL_SESSION_free(SSL_SESSION*):void"/>
    <method name="SSL_SESSION_get_ex_data(const SSL_SESSION*;int):void*"/>
    <method name="SSL_SESSION_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="SSL_SESSION_get_id(const SSL_SESSION*;unsigned int*):const unsigned char*"/>
    <method name="SSL_SESSION_get_time(const SSL_SESSION*):long"/>
    <method name="SSL_SESSION_get_timeout(const SSL_SESSION*):long"/>
    <method name="SSL_SESSION_hash(const SSL_SESSION*):unsigned long"/>
    <method name="SSL_SESSION_new():SSL_SESSION*"/>
    <method name="SSL_SESSION_print(BIO*;const SSL_SESSION*):int"/>
    <method name="SSL_SESSION_print_fp(FILE*;const SSL_SESSION*):int"/>
    <method name="SSL_SESSION_set_ex_data(SSL_SESSION*;int;void*):int"/>
    <method name="SSL_SESSION_set_time(SSL_SESSION*;long):long"/>
    <method name="SSL_SESSION_set_timeout(SSL_SESSION*;long):long"/>
    <method name="SSL_accept(SSL*):int"/>
    <method name="SSL_add_client_CA(SSL*;X509*):int"/>
    <method name="SSL_add_dir_cert_subjects_to_stack(STACK*;const char*):int"/>
    <method name="SSL_add_file_cert_subjects_to_stack(STACK*;const char*):int"/>
    <method name="SSL_alert_desc_string(int):const char*"/>
    <method name="SSL_alert_desc_string_long(int):const char*"/>
    <method name="SSL_alert_type_string(int):const char*"/>
    <method name="SSL_alert_type_string_long(int):const char*"/>
    <method name="SSL_callback_ctrl(SSL*;int;(*)():void*):long"/>
    <method name="SSL_check_private_key(const SSL*):int"/>
    <method name="SSL_clear(SSL*):int"/>
    <method name="SSL_connect(SSL*):int"/>
    <method name="SSL_copy_session_id(SSL*;const SSL*):void"/>
    <method name="SSL_ctrl(SSL*;int;long;void*):long"/>
    <method name="SSL_do_handshake(SSL*):int"/>
    <method name="SSL_dup(SSL*):SSL*"/>
    <method name="SSL_dup_CA_list(STACK*):STACK*"/>
    <method name="SSL_free(SSL*):void"/>
    <method name="SSL_get1_session(SSL*):SSL_SESSION*"/>
    <method name="SSL_get_SSL_CTX(const SSL*):SSL_CTX*"/>
    <method name="SSL_get_certificate(const SSL*):X509*"/>
    <method name="SSL_get_cipher_list(const SSL*;int):const char*"/>
    <method name="SSL_get_ciphers(const SSL*):STACK*"/>
    <method name="SSL_get_client_CA_list(const SSL*):STACK*"/>
    <method name="SSL_get_current_cipher(const SSL*):SSL_CIPHER*"/>
    <method name="SSL_get_current_compression(SSL*):const COMP_METHOD*"/>
    <method name="SSL_get_current_expansion(SSL*):const COMP_METHOD*"/>
    <method name="SSL_get_default_timeout(const SSL*):long"/>
    <method name="SSL_get_error(const SSL*;int):int"/>
    <method name="SSL_get_ex_data(const SSL*;int):void*"/>
    <method name="SSL_get_ex_data_X509_STORE_CTX_idx():int"/>
    <method name="SSL_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="SSL_get_fd(const SSL*):int"/>
    <method name="SSL_get_finished(const SSL*;void*;size_t):size_t"/>
    <method name="SSL_get_info_callback(const SSL*):(*)(const SSL*;int;int):void*"/>
    <method name="SSL_get_peer_cert_chain(const SSL*):STACK*"/>
    <method name="SSL_get_peer_certificate(const SSL*):X509*"/>
    <method name="SSL_get_peer_finished(const SSL*;void*;size_t):size_t"/>
    <method name="SSL_get_privatekey(SSL*):evp_pkey_st*"/>
    <method name="SSL_get_quiet_shutdown(const SSL*):int"/>
    <method name="SSL_get_rbio(const SSL*):BIO*"/>
    <method name="SSL_get_read_ahead(const SSL*):int"/>
    <method name="SSL_get_rfd(const SSL*):int"/>
    <method name="SSL_get_session(const SSL*):SSL_SESSION*"/>
    <method name="SSL_get_shared_ciphers(const SSL*;char*;int):char*"/>
    <method name="SSL_get_shutdown(const SSL*):int"/>
    <method name="SSL_get_ssl_method(SSL*):SSL_METHOD*"/>
    <method name="SSL_get_verify_callback(const SSL*):(*)(int;X509_STORE_CTX*):int*"/>
    <method name="SSL_get_verify_depth(const SSL*):int"/>
    <method name="SSL_get_verify_mode(const SSL*):int"/>
    <method name="SSL_get_verify_result(const SSL*):long"/>
    <method name="SSL_get_version(const SSL*):const char*"/>
    <method name="SSL_get_wbio(const SSL*):BIO*"/>
    <method name="SSL_get_wfd(const SSL*):int"/>
    <method name="SSL_has_matching_session_id(const SSL*;const unsigned char*;unsigned int):int"/>
    <method name="SSL_library_init():int"/>
    <method name="SSL_load_client_CA_file(const char*):STACK*"/>
    <method name="SSL_load_error_strings():void"/>
    <method name="SSL_new(SSL_CTX*):SSL*"/>
    <method name="SSL_peek(SSL*;void*;int):int"/>
    <method name="SSL_pending(const SSL*):int"/>
    <method name="SSL_read(SSL*;void*;int):int"/>
    <method name="SSL_renegotiate(SSL*):int"/>
    <method name="SSL_renegotiate_pending(SSL*):int"/>
    <method name="SSL_rstate_string(const SSL*):const char*"/>
    <method name="SSL_rstate_string_long(const SSL*):const char*"/>
    <method name="SSL_set_accept_state(SSL*):void"/>
    <method name="SSL_set_bio(SSL*;BIO*;BIO*):void"/>
    <method name="SSL_set_cipher_list(SSL*;const char*):int"/>
    <method name="SSL_set_client_CA_list(SSL*;STACK*):void"/>
    <method name="SSL_set_connect_state(SSL*):void"/>
    <method name="SSL_set_ex_data(SSL*;int;void*):int"/>
    <method name="SSL_set_fd(SSL*;int):int"/>
    <method name="SSL_set_generate_session_id(SSL*;GEN_SESSION_CB):int"/>
    <method name="SSL_set_info_callback(SSL*;(*)(const SSL*;int;int):void*):void"/>
    <method name="SSL_set_msg_callback(SSL*;(*)(int;int;int;const void*;size_t;SSL*;void*):void*):void"/>
    <method name="SSL_set_purpose(SSL*;int):int"/>
    <method name="SSL_set_quiet_shutdown(SSL*;int):void"/>
    <method name="SSL_set_read_ahead(SSL*;int):void"/>
    <method name="SSL_set_rfd(SSL*;int):int"/>
    <method name="SSL_set_session(SSL*;SSL_SESSION*):int"/>
    <method name="SSL_set_session_id_context(SSL*;const unsigned char*;unsigned int):int"/>
    <method name="SSL_set_shutdown(SSL*;int):void"/>
    <method name="SSL_set_ssl_method(SSL*;SSL_METHOD*):int"/>
    <method name="SSL_set_tmp_dh_callback(SSL*;(*)(SSL*;int;int):DH**):void"/>
    <method name="SSL_set_tmp_ecdh_callback(SSL*;(*)(SSL*;int;int):EC_KEY**):void"/>
    <method name="SSL_set_tmp_rsa_callback(SSL*;(*)(SSL*;int;int):RSA**):void"/>
    <method name="SSL_set_trust(SSL*;int):int"/>
    <method name="SSL_set_verify(SSL*;int;(*)(int;X509_STORE_CTX*):int*):void"/>
    <method name="SSL_set_verify_depth(SSL*;int):void"/>
    <method name="SSL_set_verify_result(SSL*;long):void"/>
    <method name="SSL_set_wfd(SSL*;int):int"/>
    <method name="SSL_shutdown(SSL*):int"/>
    <method name="SSL_state(const SSL*):int"/>
    <method name="SSL_state_string(const SSL*):const char*"/>
    <method name="SSL_state_string_long(const SSL*):const char*"/>
    <method name="SSL_use_PrivateKey(SSL*;EVP_PKEY*):int"/>
    <method name="SSL_use_PrivateKey_ASN1(int;SSL*;const unsigned char*;long):int"/>
    <method name="SSL_use_PrivateKey_file(SSL*;const char*;int):int"/>
    <method name="SSL_use_RSAPrivateKey(SSL*;RSA*):int"/>
    <method name="SSL_use_RSAPrivateKey_ASN1(SSL*;unsigned char*;long):int"/>
    <method name="SSL_use_RSAPrivateKey_file(SSL*;const char*;int):int"/>
    <method name="SSL_use_certificate(SSL*;X509*):int"/>
    <method name="SSL_use_certificate_ASN1(SSL*;const unsigned char*;int):int"/>
    <method name="SSL_use_certificate_file(SSL*;const char*;int):int"/>
    <method name="SSL_version(const SSL*):int"/>
    <method name="SSL_want(const SSL*):int"/>
    <method name="SSL_write(SSL*;const void*;int):int"/>
    <method name="SSLeay():unsigned long"/>
    <method name="SSLeay_version(int):const char*"/>
    <method name="SSLv23_client_method():SSL_METHOD*"/>
    <method name="SSLv23_method():SSL_METHOD*"/>
    <method name="SSLv23_server_method():SSL_METHOD*"/>
    <method name="SSLv2_client_method():SSL_METHOD*"/>
    <method name="SSLv2_method():SSL_METHOD*"/>
    <method name="SSLv2_server_method():SSL_METHOD*"/>
    <method name="SSLv3_client_method():SSL_METHOD*"/>
    <method name="SSLv3_method():SSL_METHOD*"/>
    <method name="SSLv3_server_method():SSL_METHOD*"/>
    <method name="STORE_ATTR_INFO_compare(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_free(STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_get0_cstr(STORE_ATTR_INFO*;STORE_ATTR_TYPES):char*"/>
    <method name="STORE_ATTR_INFO_get0_dn(STORE_ATTR_INFO*;STORE_ATTR_TYPES):X509_NAME*"/>
    <method name="STORE_ATTR_INFO_get0_number(STORE_ATTR_INFO*;STORE_ATTR_TYPES):BIGNUM*"/>
    <method name="STORE_ATTR_INFO_get0_sha1str(STORE_ATTR_INFO*;STORE_ATTR_TYPES):unsigned char*"/>
    <method name="STORE_ATTR_INFO_in(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_in_ex(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_in_range(STORE_ATTR_INFO*;STORE_ATTR_INFO*):int"/>
    <method name="STORE_ATTR_INFO_modify_cstr(STORE_ATTR_INFO*;STORE_ATTR_TYPES;char*;size_t):int"/>
    <method name="STORE_ATTR_INFO_modify_dn(STORE_ATTR_INFO*;STORE_ATTR_TYPES;X509_NAME*):int"/>
    <method name="STORE_ATTR_INFO_modify_number(STORE_ATTR_INFO*;STORE_ATTR_TYPES;BIGNUM*):int"/>
    <method name="STORE_ATTR_INFO_modify_sha1str(STORE_ATTR_INFO*;STORE_ATTR_TYPES;unsigned char*;size_t):int"/>
    <method name="STORE_ATTR_INFO_new():STORE_ATTR_INFO*"/>
    <method name="STORE_ATTR_INFO_set_cstr(STORE_ATTR_INFO*;STORE_ATTR_TYPES;char*;size_t):int"/>
    <method name="STORE_ATTR_INFO_set_dn(STORE_ATTR_INFO*;STORE_ATTR_TYPES;X509_NAME*):int"/>
    <method name="STORE_ATTR_INFO_set_number(STORE_ATTR_INFO*;STORE_ATTR_TYPES;BIGNUM*):int"/>
    <method name="STORE_ATTR_INFO_set_sha1str(STORE_ATTR_INFO*;STORE_ATTR_TYPES;unsigned char*;size_t):int"/>
    <method name="STORE_Memory():const STORE_METHOD*"/>
    <method name="STORE_OBJECT_free(STORE_OBJECT*):void"/>
    <method name="STORE_OBJECT_new():STORE_OBJECT*"/>
    <method name="STORE_create_method(char*):STORE_METHOD*"/>
    <method name="STORE_ctrl(STORE*;int;long;void*;(*)():void*):int"/>
    <method name="STORE_delete_arbitrary(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_number(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_delete_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_destroy_method(STORE_METHOD*):void"/>
    <method name="STORE_free(STORE*):void"/>
    <method name="STORE_generate_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):X509_CRL*"/>
    <method name="STORE_generate_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):EVP_PKEY*"/>
    <method name="STORE_get_arbitrary(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):BUF_MEM*"/>
    <method name="STORE_get_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):X509*"/>
    <method name="STORE_get_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):X509_CRL*"/>
    <method name="STORE_get_ex_data(STORE*;int):void*"/>
    <method name="STORE_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="STORE_get_method(STORE*):const STORE_METHOD*"/>
    <method name="STORE_get_number(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):BIGNUM*"/>
    <method name="STORE_get_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):EVP_PKEY*"/>
    <method name="STORE_get_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):EVP_PKEY*"/>
    <method name="STORE_list_certificate_end(STORE*;void*):int"/>
    <method name="STORE_list_certificate_endp(STORE*;void*):int"/>
    <method name="STORE_list_certificate_next(STORE*;void*):X509*"/>
    <method name="STORE_list_certificate_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_list_crl_end(STORE*;void*):int"/>
    <method name="STORE_list_crl_endp(STORE*;void*):int"/>
    <method name="STORE_list_crl_next(STORE*;void*):X509_CRL*"/>
    <method name="STORE_list_crl_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_list_private_key_end(STORE*;void*):int"/>
    <method name="STORE_list_private_key_endp(STORE*;void*):int"/>
    <method name="STORE_list_private_key_next(STORE*;void*):EVP_PKEY*"/>
    <method name="STORE_list_private_key_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_list_public_key_end(STORE*;void*):int"/>
    <method name="STORE_list_public_key_endp(STORE*;void*):int"/>
    <method name="STORE_list_public_key_next(STORE*;void*):EVP_PKEY*"/>
    <method name="STORE_list_public_key_start(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):void*"/>
    <method name="STORE_method_get_cleanup_function(STORE_METHOD*):STORE_CLEANUP_FUNC_PTR"/>
    <method name="STORE_method_get_ctrl_function(STORE_METHOD*):STORE_CTRL_FUNC_PTR"/>
    <method name="STORE_method_get_delete_function(STORE_METHOD*):STORE_HANDLE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_generate_function(STORE_METHOD*):STORE_GENERATE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_get_function(STORE_METHOD*):STORE_GET_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_initialise_function(STORE_METHOD*):STORE_INITIALISE_FUNC_PTR"/>
    <method name="STORE_method_get_list_end_function(STORE_METHOD*):STORE_END_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_list_next_function(STORE_METHOD*):STORE_NEXT_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_list_start_function(STORE_METHOD*):STORE_START_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_lock_store_function(STORE_METHOD*):STORE_GENERIC_FUNC_PTR"/>
    <method name="STORE_method_get_modify_function(STORE_METHOD*):STORE_MODIFY_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_revoke_function(STORE_METHOD*):STORE_HANDLE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_store_function(STORE_METHOD*):STORE_STORE_OBJECT_FUNC_PTR"/>
    <method name="STORE_method_get_unlock_store_function(STORE_METHOD*):STORE_GENERIC_FUNC_PTR"/>
    <method name="STORE_method_get_update_store_function(STORE_METHOD*):STORE_GENERIC_FUNC_PTR"/>
    <method name="STORE_method_set_cleanup_function(STORE_METHOD*;STORE_CLEANUP_FUNC_PTR):int"/>
    <method name="STORE_method_set_ctrl_function(STORE_METHOD*;STORE_CTRL_FUNC_PTR):int"/>
    <method name="STORE_method_set_delete_function(STORE_METHOD*;STORE_HANDLE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_generate_function(STORE_METHOD*;STORE_GENERATE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_get_function(STORE_METHOD*;STORE_GET_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_initialise_function(STORE_METHOD*;STORE_INITIALISE_FUNC_PTR):int"/>
    <method name="STORE_method_set_list_end_function(STORE_METHOD*;STORE_END_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_list_next_function(STORE_METHOD*;STORE_NEXT_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_list_start_function(STORE_METHOD*;STORE_START_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_lock_store_function(STORE_METHOD*;STORE_GENERIC_FUNC_PTR):int"/>
    <method name="STORE_method_set_modify_function(STORE_METHOD*;STORE_MODIFY_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_revoke_function(STORE_METHOD*;STORE_HANDLE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_store_function(STORE_METHOD*;STORE_STORE_OBJECT_FUNC_PTR):int"/>
    <method name="STORE_method_set_unlock_store_function(STORE_METHOD*;STORE_GENERIC_FUNC_PTR):int"/>
    <method name="STORE_method_set_update_store_function(STORE_METHOD*;STORE_GENERIC_FUNC_PTR):int"/>
    <method name="STORE_modify_arbitrary(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_crl(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_number(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_modify_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_new_engine(ENGINE*):STORE*"/>
    <method name="STORE_new_method(const STORE_METHOD*):STORE*"/>
    <method name="STORE_parse_attrs_end(void*):int"/>
    <method name="STORE_parse_attrs_endp(void*):int"/>
    <method name="STORE_parse_attrs_next(void*):STORE_ATTR_INFO*"/>
    <method name="STORE_parse_attrs_start(OPENSSL_ITEM*):void*"/>
    <method name="STORE_revoke_certificate(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_revoke_private_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_revoke_public_key(STORE*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_set_ex_data(STORE*;int;void*):int"/>
    <method name="STORE_set_method(STORE*;const STORE_METHOD*):const STORE_METHOD*"/>
    <method name="STORE_store_arbitrary(STORE*;BUF_MEM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_certificate(STORE*;X509*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_crl(STORE*;X509_CRL*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_number(STORE*;BIGNUM*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_private_key(STORE*;EVP_PKEY*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="STORE_store_public_key(STORE*;EVP_PKEY*;OPENSSL_ITEM*;OPENSSL_ITEM*):int"/>
    <method name="SXNETID_free(SXNETID*):void"/>
    <method name="SXNETID_new():SXNETID*"/>
    <method name="SXNET_add_id_INTEGER(SXNET**;ASN1_INTEGER*;char*;int):int"/>
    <method name="SXNET_add_id_asc(SXNET**;char*;char*;int):int"/>
    <method name="SXNET_add_id_ulong(SXNET**;unsigned long;char*;int):int"/>
    <method name="SXNET_free(SXNET*):void"/>
    <method name="SXNET_get_id_INTEGER(SXNET*;ASN1_INTEGER*):ASN1_OCTET_STRING*"/>
    <method name="SXNET_get_id_asc(SXNET*;char*):ASN1_OCTET_STRING*"/>
    <method name="SXNET_get_id_ulong(SXNET*;unsigned long):ASN1_OCTET_STRING*"/>
    <method name="SXNET_new():SXNET*"/>
    <method name="SecCertificateCopyData(SecCertificateRef):CFDataRef"/>
    <method name="SecCertificateCopySubjectSummary(SecCertificateRef):CFStringRef"/>
    <method name="SecCertificateCreateWithData(CFAllocatorRef;CFDataRef):SecCertificateRef"/>
    <method name="SecCertificateGetTypeID():CFTypeID"/>
    <method name="SecIdentityCopyCertificate(SecIdentityRef;SecCertificateRef*):OSStatus"/>
    <method name="SecIdentityCopyPrivateKey(SecIdentityRef;SecKeyRef*):OSStatus"/>
    <method name="SecIdentityGetTypeID():CFTypeID"/>
    <method name="SecItemAdd(CFDictionaryRef;CFTypeRef*):OSStatus"/>
    <method name="SecItemCopyMatching(CFDictionaryRef;CFTypeRef*):OSStatus"/>
    <method name="SecItemDelete(CFDictionaryRef):OSStatus"/>
    <method name="SecItemUpdate(CFDictionaryRef;CFDictionaryRef):OSStatus"/>
    <method name="SecKeyDecrypt(SecKeyRef;SecPadding;const uint8_t*;size_t;uint8_t*;size_t*):OSStatus"/>
    <method name="SecKeyEncrypt(SecKeyRef;SecPadding;const uint8_t*;size_t;uint8_t*;size_t*):OSStatus"/>
    <method name="SecKeyGeneratePair(CFDictionaryRef;SecKeyRef*;SecKeyRef*):OSStatus"/>
    <method name="SecKeyGetBlockSize(SecKeyRef):size_t"/>
    <method name="SecKeyGetTypeID():CFTypeID"/>
    <method name="SecKeyRawSign(SecKeyRef;SecPadding;const uint8_t*;size_t;uint8_t*;size_t*):OSStatus"/>
    <method name="SecKeyRawVerify(SecKeyRef;SecPadding;const uint8_t*;size_t;const uint8_t*;size_t):OSStatus"/>
    <method name="SecPKCS12Import(CFDataRef;CFDictionaryRef;CFArrayRef*):OSStatus"/>
    <method name="SecPolicyCreateBasicX509():SecPolicyRef"/>
    <method name="SecPolicyCreateSSL(Boolean;CFStringRef):SecPolicyRef"/>
    <method name="SecPolicyGetTypeID():CFTypeID"/>
    <method name="SecRandomCopyBytes(SecRandomRef;size_t;uint8_t*):int"/>
    <method name="SecTrustCopyExceptions(SecTrustRef):CFDataRef"/>
    <method name="SecTrustCopyPublicKey(SecTrustRef):SecKeyRef"/>
    <method name="SecTrustCreateWithCertificates(CFTypeRef;CFTypeRef;SecTrustRef*):OSStatus"/>
    <method name="SecTrustEvaluate(SecTrustRef;SecTrustResultType*):OSStatus"/>
    <method name="SecTrustGetCertificateAtIndex(SecTrustRef;CFIndex):SecCertificateRef"/>
    <method name="SecTrustGetCertificateCount(SecTrustRef):CFIndex"/>
    <method name="SecTrustGetTypeID():CFTypeID"/>
    <method name="SecTrustGetVerifyTime(SecTrustRef):CFAbsoluteTime"/>
    <method name="SecTrustSetAnchorCertificates(SecTrustRef;CFArrayRef):OSStatus"/>
    <method name="SecTrustSetAnchorCertificatesOnly(SecTrustRef;Boolean):OSStatus"/>
    <method name="SecTrustSetExceptions(SecTrustRef;CFDataRef):_Bool"/>
    <method name="SecTrustSetVerifyDate(SecTrustRef;CFDateRef):OSStatus"/>
    <method name="SendMessage(HWND; unsigned int; WPARAM; LPARAM): LPRESULT"/>
    <method name="SetBLASParamErrorProc(BLASParamErrorProc):void"/>
    <method name="SetSecurityDescriptorDacl(PSECURITY_DESCRIPTOR;BOOL;PACL;BOOL):BOOL"/>
    <method name="SetServiceA(DWORD;DWORD;DWORD;LPSERVICE_INFOA;LPSERVICE_ASYNC_INFO;LPDWORD):INT"/>
    <method name="SetThreadToken(PHANDLE;HANDLE):BOOL"/>
    <method name="ShellExecute(HWND; LPCTSTR; LPCTSTR; LPCTSTR; LPCTSTR; int): HINSTANCE"/>
    <method name="ShellExecuteA(HWND;LPCSTR;LPCSTR;LPCSTR;LPCSTR;INT):HINSTANCE"/>
    <method name="ShellExecuteW(HWND;LPCWSTR;LPCWSTR;LPCWSTR;LPCWSTR;INT):HINSTANCE"/>
    <method name="StrCat(LPTSTR; LPCTSTR): LPTSTR"/>
    <method name="StrCpy(LPTSTR; LPCTSTR): LPTSTR"/>
    <method name="SysBreak():void"/>
    <method name="SysBreakFunc(ConstStr255Param):void"/>
    <method name="SysBreakStr(ConstStr255Param):void"/>
    <method name="TLSv1_client_method():SSL_METHOD*"/>
    <method name="TLSv1_method():SSL_METHOD*"/>
    <method name="TLSv1_server_method():SSL_METHOD*"/>
    <method name="TTAlert(NSString*):void"/>
    <method name="TTAlertNoTitle(NSString*):void"/>
    <method name="TTApplicationFrame():CGRect"/>
    <method name="TTDeviceOrientation():UIDeviceOrientation"/>
    <method name="TTDeviceOrientationIsLandscape():BOOL"/>
    <method name="TTDeviceOrientationIsPortrait():BOOL"/>
    <method name="TTGroupedTableCellInset():CGFloat"/>
    <method name="TTIsKeyboardVisible():BOOL"/>
    <method name="TTIsPad():BOOL"/>
    <method name="TTIsPhoneSupported():BOOL"/>
    <method name="TTIsSupportedOrientation(UIInterfaceOrientation):BOOL"/>
    <method name="TTKeyboardHeightForOrientation(UIInterfaceOrientation):CGFloat"/>
    <method name="TTNetworkRequestStarted():void"/>
    <method name="TTNetworkRequestStopped():void"/>
    <method name="TTOSVersion():float"/>
    <method name="TTOSVersionIsAtLeast(float):BOOL"/>
    <method name="TTRotateTransformForOrientation(UIInterfaceOrientation):CGAffineTransform"/>
    <method name="TTToolbarHeightForOrientation(UIInterfaceOrientation):CGFloat"/>
    <method name="TXTRecordContainsKey(uint16_t;const void*;const char*):int"/>
    <method name="TXTRecordCreate(TXTRecordRef*;uint16_t;void*):void"/>
    <method name="TXTRecordDeallocate(TXTRecordRef*):void"/>
    <method name="TXTRecordGetBytesPtr(const TXTRecordRef*):const void*"/>
    <method name="TXTRecordGetCount(uint16_t;const void*):uint16_t"/>
    <method name="TXTRecordGetItemAtIndex(uint16_t;const void*;uint16_t;uint16_t;char*;uint8_t*;const void**):DNSServiceErrorType"/>
    <method name="TXTRecordGetLength(const TXTRecordRef*):uint16_t"/>
    <method name="TXTRecordGetValuePtr(uint16_t;const void*;const char*;uint8_t*):const void*"/>
    <method name="TXTRecordRemoveValue(TXTRecordRef*;const char*):DNSServiceErrorType"/>
    <method name="TXTRecordSetValue(TXTRecordRef*;const char*;uint8_t;const void*):DNSServiceErrorType"/>
    <method name="TXT_DB_create_index(TXT_DB*;int;(*)(char**):int*;LHASH_HASH_FN_TYPE;LHASH_COMP_FN_TYPE):int"/>
    <method name="TXT_DB_free(TXT_DB*):void"/>
    <method name="TXT_DB_get_by_index(TXT_DB*;int;char**):char**"/>
    <method name="TXT_DB_insert(TXT_DB*;char**):int"/>
    <method name="TXT_DB_read(BIO*;int):TXT_DB*"/>
    <method name="TXT_DB_write(BIO*;TXT_DB*):long"/>
    <method name="TransmitFile(SOCKET;HANDLE;DWORD;DWORD;LPOVERLAPPED;LPTRANSMIT_FILE_BUFFERS;DWORD):BOOL"/>
    <method name="UAActiveViewController():int*"/>
    <method name="UAFrameForCurrentOrientation(Rect):Rect"/>
    <method name="UARotateTransformForCurrentOrientation():int"/>
    <method name="UA_VERSION_INTERFACE(int):int"/>
    <method name="UA_fill_fopen_filefunc(zlib_filefunc_def*):void"/>
    <method name="UA_unzClose(unzFile):int"/>
    <method name="UA_unzCloseCurrentFile(unzFile):int"/>
    <method name="UA_unzGetCurrentFileInfo(unzFile;unz_file_info*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="UA_unzGetFilePos(unzFile;unz_file_pos*):int"/>
    <method name="UA_unzGetGlobalComment(unzFile;char*;uLong):int"/>
    <method name="UA_unzGetGlobalInfo(unzFile;unz_global_info*):int"/>
    <method name="UA_unzGetLocalExtrafield(unzFile;voidp;unsigned int):int"/>
    <method name="UA_unzGetOffset(unzFile):uLong"/>
    <method name="UA_unzGoToFilePos(unzFile;unz_file_pos*):int"/>
    <method name="UA_unzGoToFirstFile(unzFile):int"/>
    <method name="UA_unzGoToNextFile(unzFile):int"/>
    <method name="UA_unzLocateFile(unzFile;const char*;int):int"/>
    <method name="UA_unzOpen(const char*):unzFile"/>
    <method name="UA_unzOpen2(const char*;zlib_filefunc_def*):unzFile"/>
    <method name="UA_unzOpenCurrentFile(unzFile):int"/>
    <method name="UA_unzOpenCurrentFile2(unzFile;int*;int*;int):int"/>
    <method name="UA_unzOpenCurrentFile3(unzFile;int*;int*;int;const char*):int"/>
    <method name="UA_unzOpenCurrentFilePassword(unzFile;const char*):int"/>
    <method name="UA_unzReadCurrentFile(unzFile;voidp;unsigned int):int"/>
    <method name="UA_unzRepair(const char*;const char*;const char*;uLong*;uLong*):int"/>
    <method name="UA_unzSetOffset(unzFile;uLong):int"/>
    <method name="UA_unzStringFileNameCompare(const char*;const char*;int):int"/>
    <method name="UA_unzeof(unzFile):int"/>
    <method name="UA_unztell(unzFile):long"/>
    <method name="UA_zipClose(zipFile;const char*):int"/>
    <method name="UA_zipCloseFileInZip(zipFile):int"/>
    <method name="UA_zipCloseFileInZipRaw(zipFile;uLong;uLong):int"/>
    <method name="UA_zipOpen(const char*;int):zipFile"/>
    <method name="UA_zipOpen2(const char*;int;zipcharpc*;zlib_filefunc_def*):zipFile"/>
    <method name="UA_zipOpenNewFileInZip(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int):int"/>
    <method name="UA_zipOpenNewFileInZip2(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int):int"/>
    <method name="UA_zipOpenNewFileInZip3(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong):int"/>
    <method name="UA_zipWriteInFileInZip(zipFile;const void*;unsigned int):int"/>
    <method name="UIAccessibilityIsClosedCaptioningEnabled():BOOL"/>
    <method name="UIAccessibilityIsGuidedAccessEnabled():BOOL"/>
    <method name="UIAccessibilityIsInvertColorsEnabled():BOOL"/>
    <method name="UIAccessibilityIsMonoAudioEnabled():BOOL"/>
    <method name="UIAccessibilityIsVoiceOverRunning():BOOL"/>
    <method name="UIAccessibilityPostNotification(UIAccessibilityNotifications;id):void"/>
    <method name="UIAccessibilityRegisterGestureConflictWithZoom():void"/>
    <method name="UIAccessibilityZoomFocusChanged(UIAccessibilityZoomType;CGRect;UIView*):void"/>
    <method name="UIApplicationMain(int;char**;NSString*;NSString*):int"/>
    <method name="UIEdgeInsetsEqualToEdgeInsets(UIEdgeInsets;UIEdgeInsets):BOOL"/>
    <method name="UIEdgeInsetsFromString(NSString*):UIEdgeInsets"/>
    <method name="UIEdgeInsetsInsetRect(CGRect;UIEdgeInsets):CGRect"/>
    <method name="UIEdgeInsetsMake(CGFloat;CGFloat;CGFloat;CGFloat):UIEdgeInsets"/>
    <method name="UIGraphicsAddPDFContextDestinationAtPoint(NSString*;CGPoint):void"/>
    <method name="UIGraphicsBeginImageContext(CGSize):void"/>
    <method name="UIGraphicsBeginImageContextWithOptions(CGSize;BOOL;CGFloat):void"/>
    <method name="UIGraphicsBeginPDFContextToData(NSMutableData*;CGRect;NSDictionary*):void"/>
    <method name="UIGraphicsBeginPDFContextToFile(NSString*;CGRect;NSDictionary*):BOOL"/>
    <method name="UIGraphicsBeginPDFPage():void"/>
    <method name="UIGraphicsBeginPDFPageWithInfo(CGRect;NSDictionary*):void"/>
    <method name="UIGraphicsEndImageContext():void"/>
    <method name="UIGraphicsEndPDFContext():void"/>
    <method name="UIGraphicsGetCurrentContext():CGContextRef"/>
    <method name="UIGraphicsGetImageFromCurrentImageContext():UIImage*"/>
    <method name="UIGraphicsGetPDFContextBounds():CGRect"/>
    <method name="UIGraphicsPopContext():void"/>
    <method name="UIGraphicsPushContext(CGContextRef):void"/>
    <method name="UIGraphicsSetPDFContextDestinationForRect(NSString*;CGRect):void"/>
    <method name="UIGraphicsSetPDFContextURLForRect(NSURL*;CGRect):void"/>
    <method name="UIImageJPEGRepresentation(UIImage*;CGFloat):NSData*"/>
    <method name="UIImagePNGRepresentation(UIImage*):NSData*"/>
    <method name="UIImageWriteToSavedPhotosAlbum(UIImage*;id;SEL;void*):void"/>
    <method name="UIOffsetEqualToOffset(UIOffset;UIOffset):BOOL"/>
    <method name="UIOffsetFromString(NSString*):UIOffset"/>
    <method name="UIOffsetMake(CGFloat;CGFloat):UIOffset"/>
    <method name="UIRectClip(CGRect):void"/>
    <method name="UIRectFill(CGRect):void"/>
    <method name="UIRectFillUsingBlendMode(CGRect;CGBlendMode):void"/>
    <method name="UIRectFrame(CGRect):void"/>
    <method name="UIRectFrameUsingBlendMode(CGRect;CGBlendMode):void"/>
    <method name="UISaveVideoAtPathToSavedPhotosAlbum(NSString*;id;SEL;void*):void"/>
    <method name="UIVideoAtPathIsCompatibleWithSavedPhotosAlbum(NSString*):BOOL"/>
    <method name="UI_OpenSSL():UI_METHOD*"/>
    <method name="UI_UTIL_read_pw(char*;char*;int;const char*;int):int"/>
    <method name="UI_UTIL_read_pw_string(char*;int;const char*;int):int"/>
    <method name="UI_add_error_string(UI*;const char*):int"/>
    <method name="UI_add_info_string(UI*;const char*):int"/>
    <method name="UI_add_input_boolean(UI*;const char*;const char*;const char*;const char*;int;char*):int"/>
    <method name="UI_add_input_string(UI*;const char*;int;char*;int;int):int"/>
    <method name="UI_add_user_data(UI*;void*):void*"/>
    <method name="UI_add_verify_string(UI*;const char*;int;char*;int;int;const char*):int"/>
    <method name="UI_construct_prompt(UI*;const char*;const char*):char*"/>
    <method name="UI_create_method(char*):UI_METHOD*"/>
    <method name="UI_ctrl(UI*;int;long;void*;(*)():void*):int"/>
    <method name="UI_destroy_method(UI_METHOD*):void"/>
    <method name="UI_dup_error_string(UI*;const char*):int"/>
    <method name="UI_dup_info_string(UI*;const char*):int"/>
    <method name="UI_dup_input_boolean(UI*;const char*;const char*;const char*;const char*;int;char*):int"/>
    <method name="UI_dup_input_string(UI*;const char*;int;char*;int;int):int"/>
    <method name="UI_dup_verify_string(UI*;const char*;int;char*;int;int;const char*):int"/>
    <method name="UI_free(UI*):void"/>
    <method name="UI_get0_action_string(UI_STRING*):const char*"/>
    <method name="UI_get0_output_string(UI_STRING*):const char*"/>
    <method name="UI_get0_result(UI*;int):const char*"/>
    <method name="UI_get0_result_string(UI_STRING*):const char*"/>
    <method name="UI_get0_test_string(UI_STRING*):const char*"/>
    <method name="UI_get0_user_data(UI*):void*"/>
    <method name="UI_get_default_method():const UI_METHOD*"/>
    <method name="UI_get_ex_data(UI*;int):void*"/>
    <method name="UI_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="UI_get_input_flags(UI_STRING*):int"/>
    <method name="UI_get_method(UI*):const UI_METHOD*"/>
    <method name="UI_get_result_maxsize(UI_STRING*):int"/>
    <method name="UI_get_result_minsize(UI_STRING*):int"/>
    <method name="UI_get_string_type(UI_STRING*):UI_string_types"/>
    <method name="UI_method_get_closer(UI_METHOD*):(*)(UI*):int*"/>
    <method name="UI_method_get_flusher(UI_METHOD*):(*)(UI*):int*"/>
    <method name="UI_method_get_opener(UI_METHOD*):(*)(UI*):int*"/>
    <method name="UI_method_get_reader(UI_METHOD*):(*)(UI*;UI_STRING*):int*"/>
    <method name="UI_method_get_writer(UI_METHOD*):(*)(UI*;UI_STRING*):int*"/>
    <method name="UI_method_set_closer(UI_METHOD*;(*)(UI*):int*):int"/>
    <method name="UI_method_set_flusher(UI_METHOD*;(*)(UI*):int*):int"/>
    <method name="UI_method_set_opener(UI_METHOD*;(*)(UI*):int*):int"/>
    <method name="UI_method_set_reader(UI_METHOD*;(*)(UI*;UI_STRING*):int*):int"/>
    <method name="UI_method_set_writer(UI_METHOD*;(*)(UI*;UI_STRING*):int*):int"/>
    <method name="UI_new():UI*"/>
    <method name="UI_new_method(const UI_METHOD*):UI*"/>
    <method name="UI_process(UI*):int"/>
    <method name="UI_set_default_method(const UI_METHOD*):void"/>
    <method name="UI_set_ex_data(UI*;int;void*):int"/>
    <method name="UI_set_method(UI*;const UI_METHOD*):const UI_METHOD*"/>
    <method name="UI_set_result(UI*;UI_STRING*;const char*):int"/>
    <method name="UTCreateStringForOSType(OSType):CFStringRef"/>
    <method name="UTF8_getc(const unsigned char*;int;unsigned long*):int"/>
    <method name="UTF8_putc(unsigned char*;int;unsigned long):int"/>
    <method name="UTGetOSTypeFromString(CFStringRef):OSType"/>
    <method name="UTTypeConformsTo(CFStringRef;CFStringRef):Boolean"/>
    <method name="UTTypeCopyDeclaration(CFStringRef):CFDictionaryRef"/>
    <method name="UTTypeCopyDeclaringBundleURL(CFStringRef):CFURLRef"/>
    <method name="UTTypeCopyDescription(CFStringRef):CFStringRef"/>
    <method name="UTTypeCopyPreferredTagWithClass(CFStringRef;CFStringRef):CFStringRef"/>
    <method name="UTTypeCreateAllIdentifiersForTag(CFStringRef;CFStringRef;CFStringRef):CFArrayRef"/>
    <method name="UTTypeCreatePreferredIdentifierForTag(CFStringRef;CFStringRef;CFStringRef):CFStringRef"/>
    <method name="UTTypeEqual(CFStringRef;CFStringRef):Boolean"/>
    <method name="WPUCloseEvent(HANDLE;LPINT):BOOL"/>
    <method name="WPUCloseSocketHandle(SOCKET;LPINT):int"/>
    <method name="WPUCloseThread(LPWSATHREADID;LPINT):int"/>
    <method name="WPUCompleteOverlappedRequest(SOCKET;LPWSAOVERLAPPED;DWORD;DWORD;LPINT):int"/>
    <method name="WPUCreateEvent(LPINT):HANDLE"/>
    <method name="WPUCreateSocketHandle(DWORD;DWORD_PTR;LPINT):SOCKET"/>
    <method name="WPUFDIsSet(SOCKET;fd_set*):int"/>
    <method name="WPUGetProviderPath(LPGUID;WCHAR*;LPINT;LPINT):int"/>
    <method name="WPUModifyIFSHandle(DWORD;SOCKET;LPINT):SOCKET"/>
    <method name="WPUOpenCurrentThread(LPWSATHREADID;LPINT):int"/>
    <method name="WPUPostMessage(HWND;UINT;WPARAM;LPARAM):BOOL"/>
    <method name="WPUQueryBlockingCallback(DWORD;LPBLOCKINGCALLBACK*;PDWORD_PTR;LPINT):int"/>
    <method name="WPUQuerySocketHandleContext(SOCKET;PDWORD_PTR;LPINT):int"/>
    <method name="WPUQueueApc(LPWSATHREADID;LPWSAUSERAPC;DWORD_PTR;LPINT):int"/>
    <method name="WPUResetEvent(HANDLE;LPINT):BOOL"/>
    <method name="WPUSetEvent(HANDLE;LPINT):BOOL"/>
    <method name="WSAAccept(SOCKET;sockaddr*;LPINT;LPCONDITIONPROC;DWORD_PTR):SOCKET"/>
    <method name="WSAAddressToStringA(LPSOCKADDR;DWORD;LPWSAPROTOCOL_INFOA;LPSTR;LPDWORD):INT"/>
    <method name="WSAAddressToStringW(LPSOCKADDR;DWORD;LPWSAPROTOCOL_INFOW;LPWSTR;LPDWORD):INT"/>
    <method name="WSAAsyncGetHostByAddr(HWND;u_int;const char*;int;int;char*;int):HANDLE"/>
    <method name="WSAAsyncGetHostByName(HWND;u_int;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncGetProtoByName(HWND;u_int;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncGetProtoByNumber(HWND;u_int;int;char*;int):HANDLE"/>
    <method name="WSAAsyncGetServByName(HWND;u_int;const char*;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncGetServByPort(HWND;u_int;int;const char*;char*;int):HANDLE"/>
    <method name="WSAAsyncSelect(SOCKET;HWND;u_int;long):int"/>
    <method name="WSACancelAsyncRequest(HANDLE):int"/>
    <method name="WSACancelBlockingCall():int"/>
    <method name="WSACleanup():int"/>
    <method name="WSACloseEvent(HANDLE):BOOL"/>
    <method name="WSAConnect(SOCKET;const sockaddr*;int;LPWSABUF;LPWSABUF;LPQOS;LPQOS):int"/>
    <method name="WSACreateEvent():HANDLE"/>
    <method name="WSADuplicateSocketA(SOCKET;DWORD;LPWSAPROTOCOL_INFOA):int"/>
    <method name="WSADuplicateSocketW(SOCKET;DWORD;LPWSAPROTOCOL_INFOW):int"/>
    <method name="WSAEnumNameSpaceProvidersA(LPDWORD;LPWSANAMESPACE_INFOA):INT"/>
    <method name="WSAEnumNameSpaceProvidersW(LPDWORD;LPWSANAMESPACE_INFOW):INT"/>
    <method name="WSAEnumNetworkEvents(SOCKET;HANDLE;LPWSANETWORKEVENTS):int"/>
    <method name="WSAEnumProtocolsA(LPINT;LPWSAPROTOCOL_INFOA;LPDWORD):int"/>
    <method name="WSAEnumProtocolsW(LPINT;LPWSAPROTOCOL_INFOW;LPDWORD):int"/>
    <method name="WSAEventSelect(SOCKET;HANDLE;long):int"/>
    <method name="WSAGetLastError():int"/>
    <method name="WSAGetOverlappedResult(SOCKET;LPWSAOVERLAPPED;LPDWORD;BOOL;LPDWORD):BOOL"/>
    <method name="WSAGetQOSByName(SOCKET;LPWSABUF;LPQOS):BOOL"/>
    <method name="WSAGetServiceClassInfoA(LPGUID;LPGUID;LPDWORD;LPWSASERVICECLASSINFOA):INT"/>
    <method name="WSAGetServiceClassInfoW(LPGUID;LPGUID;LPDWORD;LPWSASERVICECLASSINFOW):INT"/>
    <method name="WSAGetServiceClassNameByClassIdA(LPGUID;LPSTR;LPDWORD):INT"/>
    <method name="WSAGetServiceClassNameByClassIdW(LPGUID;LPWSTR;LPDWORD):INT"/>
    <method name="WSAHtonl(SOCKET;u_long;u_long*):int"/>
    <method name="WSAHtons(SOCKET;u_short;u_short*):int"/>
    <method name="WSAInstallServiceClassA(LPWSASERVICECLASSINFOA):INT"/>
    <method name="WSAInstallServiceClassW(LPWSASERVICECLASSINFOW):INT"/>
    <method name="WSAIoctl(SOCKET;DWORD;LPVOID;DWORD;LPVOID;DWORD;LPDWORD;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSAIsBlocking():BOOL"/>
    <method name="WSAJoinLeaf(SOCKET;const sockaddr*;int;LPWSABUF;LPWSABUF;LPQOS;LPQOS;DWORD):SOCKET"/>
    <method name="WSALookupServiceBeginA(LPWSAQUERYSETA;DWORD;LPHANDLE):INT"/>
    <method name="WSALookupServiceBeginW(LPWSAQUERYSETW;DWORD;LPHANDLE):INT"/>
    <method name="WSALookupServiceEnd(HANDLE):INT"/>
    <method name="WSALookupServiceNextA(HANDLE;DWORD;LPDWORD;LPWSAQUERYSETA):INT"/>
    <method name="WSALookupServiceNextW(HANDLE;DWORD;LPDWORD;LPWSAQUERYSETW):INT"/>
    <method name="WSANSPIoctl(HANDLE;DWORD;LPVOID;DWORD;LPVOID;DWORD;LPDWORD;LPWSACOMPLETION):INT"/>
    <method name="WSANtohl(SOCKET;u_long;u_long*):int"/>
    <method name="WSANtohs(SOCKET;u_short;u_short*):int"/>
    <method name="WSAProviderConfigChange(LPHANDLE;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):INT"/>
    <method name="WSARecv(SOCKET;LPWSABUF;DWORD;LPDWORD;LPDWORD;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSARecvDisconnect(SOCKET;LPWSABUF):int"/>
    <method name="WSARecvEx(SOCKET;char*;int;int*):int"/>
    <method name="WSARecvFrom(SOCKET;LPWSABUF;DWORD;LPDWORD;LPDWORD;sockaddr*;LPINT;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSARemoveServiceClass(LPGUID):INT"/>
    <method name="WSAResetEvent(HANDLE):BOOL"/>
    <method name="WSASend(SOCKET;LPWSABUF;DWORD;LPDWORD;DWORD;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSASendDisconnect(SOCKET;LPWSABUF):int"/>
    <method name="WSASendTo(SOCKET;LPWSABUF;DWORD;LPDWORD;DWORD;const sockaddr*;int;LPWSAOVERLAPPED;LPWSAOVERLAPPED_COMPLETION_ROUTINE):int"/>
    <method name="WSASetBlockingHook(FARPROC):FARPROC"/>
    <method name="WSASetEvent(HANDLE):BOOL"/>
    <method name="WSASetLastError(int):void"/>
    <method name="WSASetServiceA(LPWSAQUERYSETA;WSAESETSERVICEOP;DWORD):INT"/>
    <method name="WSASetServiceW(LPWSAQUERYSETW;WSAESETSERVICEOP;DWORD):INT"/>
    <method name="WSASocketA(int;int;int;LPWSAPROTOCOL_INFOA;GROUP;DWORD):SOCKET"/>
    <method name="WSASocketW(int;int;int;LPWSAPROTOCOL_INFOW;GROUP;DWORD):SOCKET"/>
    <method name="WSAStartup(WORD;LPWSADATA):int"/>
    <method name="WSAStringToAddressA(LPSTR;INT;LPWSAPROTOCOL_INFOA;LPSOCKADDR;LPINT):INT"/>
    <method name="WSAStringToAddressW(LPWSTR;INT;LPWSAPROTOCOL_INFOW;LPSOCKADDR;LPINT):INT"/>
    <method name="WSAUnhookBlockingHook():int"/>
    <method name="WSAWaitForMultipleEvents(DWORD;const HANDLE*;BOOL;DWORD;BOOL):DWORD"/>
    <method name="WSCDeinstallProvider(LPGUID;LPINT):int"/>
    <method name="WSCEnableNSProvider(LPGUID;BOOL):INT"/>
    <method name="WSCEnumProtocols(LPINT;LPWSAPROTOCOL_INFOW;LPDWORD;LPINT):int"/>
    <method name="WSCGetProviderPath(LPGUID;WCHAR*;LPINT;LPINT):int"/>
    <method name="WSCInstallNameSpace(LPWSTR;LPWSTR;DWORD;DWORD;LPGUID):INT"/>
    <method name="WSCInstallProvider(LPGUID;const WCHAR*;LPWSAPROTOCOL_INFOW;DWORD;LPINT):int"/>
    <method name="WSCInstallQOSTemplate(LPGUID;LPWSABUF;LPQOS):int"/>
    <method name="WSCRemoveQOSTemplate(LPGUID;LPWSABUF):int"/>
    <method name="WSCUnInstallNameSpace(LPGUID):INT"/>
    <method name="WSCUpdateProvider(LPGUID;const WCHAR*;LPWSAPROTOCOL_INFOW;DWORD;LPINT):int"/>
    <method name="WSCWriteNameSpaceOrder(LPGUID;DWORD):int"/>
    <method name="WSCWriteProviderOrder(LPDWORD;DWORD):int"/>
    <method name="WSPStartup(WORD;LPWSPDATA;LPWSAPROTOCOL_INFOW;WSPUPCALLTABLE;LPWSPPROC_TABLE):int"/>
    <method name="WTHelperCertCheckValidSignature(CRYPT_PROVIDER_DATA*):HRESULT"/>
    <method name="WTHelperCertIsSelfSigned(DWORD;CERT_INFO*):BOOL"/>
    <method name="WTHelperGetProvCertFromChain(CRYPT_PROVIDER_SGNR*;DWORD):CRYPT_PROVIDER_CERT*"/>
    <method name="WTHelperGetProvPrivateDataFromChain(CRYPT_PROVIDER_DATA*;GUID*):CRYPT_PROVIDER_PRIVDATA*"/>
    <method name="WTHelperGetProvSignerFromChain(CRYPT_PROVIDER_DATA*;DWORD;BOOL;DWORD):CRYPT_PROVIDER_SGNR*"/>
    <method name="WTHelperProvDataFromStateData(HANDLE):CRYPT_PROVIDER_DATA*"/>
    <method name="WinExec(LPCSTR;UINT):UINT"/>
    <method name="WinVerifyTrust(HWND;GUID*;LPVOID):LONG"/>
    <method name="WinVerifyTrustEx(HWND;GUID*;WINTRUST_DATA*):HRESULT"/>
    <method name="WintrustAddActionID(GUID*;DWORD;CRYPT_REGISTER_ACTIONID*):BOOL"/>
    <method name="WintrustGetRegPolicyFlags(DWORD*):void"/>
    <method name="WintrustLoadFunctionPointers(GUID*;CRYPT_PROVIDER_FUNCTIONS*):BOOL"/>
    <method name="WintrustRemoveActionID(GUID*):BOOL"/>
    <method name="WintrustSetRegPolicyFlags(DWORD):BOOL"/>
    <method name="Write_EndOfCentralDirectoryRecord(zip64_internal*;uLong;ZPOS64_T):int"/>
    <method name="Write_GlobalComment(zip64_internal*;const char*):int"/>
    <method name="Write_LocalFileHeader(zip64_internal*;const char*;uInt;const void*):int"/>
    <method name="Write_Zip64EndOfCentralDirectoryLocator(zip64_internal*;ZPOS64_T):int"/>
    <method name="Write_Zip64EndOfCentralDirectoryRecord(zip64_internal*;uLong;ZPOS64_T):int"/>
    <method name="X509V3_EXT_CRL_add_conf(LHASH*;X509V3_CTX*;char*;X509_CRL*):int"/>
    <method name="X509V3_EXT_CRL_add_nconf(CONF*;X509V3_CTX*;char*;X509_CRL*):int"/>
    <method name="X509V3_EXT_REQ_add_conf(LHASH*;X509V3_CTX*;char*;X509_REQ*):int"/>
    <method name="X509V3_EXT_REQ_add_nconf(CONF*;X509V3_CTX*;char*;X509_REQ*):int"/>
    <method name="X509V3_EXT_add(X509V3_EXT_METHOD*):int"/>
    <method name="X509V3_EXT_add_alias(int;int):int"/>
    <method name="X509V3_EXT_add_conf(LHASH*;X509V3_CTX*;char*;X509*):int"/>
    <method name="X509V3_EXT_add_list(X509V3_EXT_METHOD*):int"/>
    <method name="X509V3_EXT_add_nconf(CONF*;X509V3_CTX*;char*;X509*):int"/>
    <method name="X509V3_EXT_add_nconf_sk(CONF*;X509V3_CTX*;char*;STACK**):int"/>
    <method name="X509V3_EXT_cleanup():void"/>
    <method name="X509V3_EXT_conf(LHASH*;X509V3_CTX*;char*;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_conf_nid(LHASH*;X509V3_CTX*;int;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_d2i(X509_EXTENSION*):void*"/>
    <method name="X509V3_EXT_get(X509_EXTENSION*):X509V3_EXT_METHOD*"/>
    <method name="X509V3_EXT_get_nid(int):X509V3_EXT_METHOD*"/>
    <method name="X509V3_EXT_i2d(int;int;void*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_nconf(CONF*;X509V3_CTX*;char*;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_nconf_nid(CONF*;X509V3_CTX*;int;char*):X509_EXTENSION*"/>
    <method name="X509V3_EXT_print(BIO*;X509_EXTENSION*;unsigned long;int):int"/>
    <method name="X509V3_EXT_print_fp(FILE*;X509_EXTENSION*;int;int):int"/>
    <method name="X509V3_EXT_val_prn(BIO*;STACK*;int;int):void"/>
    <method name="X509V3_NAME_from_section(X509_NAME*;STACK*;unsigned long):int"/>
    <method name="X509V3_add1_i2d(STACK**;int;void*;int;unsigned long):int"/>
    <method name="X509V3_add_standard_extensions():int"/>
    <method name="X509V3_add_value(const char*;const char*;STACK**):int"/>
    <method name="X509V3_add_value_bool(const char*;int;STACK**):int"/>
    <method name="X509V3_add_value_bool_nf(char*;int;STACK**):int"/>
    <method name="X509V3_add_value_int(const char*;ASN1_INTEGER*;STACK**):int"/>
    <method name="X509V3_add_value_uchar(const char*;const unsigned char*;STACK**):int"/>
    <method name="X509V3_conf_free(CONF_VALUE*):void"/>
    <method name="X509V3_extensions_print(BIO*;char*;STACK*;unsigned long;int):int"/>
    <method name="X509V3_get_d2i(STACK*;int;int*;int*):void*"/>
    <method name="X509V3_get_section(X509V3_CTX*;char*):STACK*"/>
    <method name="X509V3_get_string(X509V3_CTX*;char*;char*):char*"/>
    <method name="X509V3_get_value_bool(CONF_VALUE*;int*):int"/>
    <method name="X509V3_get_value_int(CONF_VALUE*;ASN1_INTEGER**):int"/>
    <method name="X509V3_parse_list(const char*):STACK*"/>
    <method name="X509V3_section_free(X509V3_CTX*;STACK*):void"/>
    <method name="X509V3_set_conf_lhash(X509V3_CTX*;LHASH*):void"/>
    <method name="X509V3_set_ctx(X509V3_CTX*;X509*;X509*;X509_REQ*;X509_CRL*;int):void"/>
    <method name="X509V3_set_nconf(X509V3_CTX*;CONF*):void"/>
    <method name="X509V3_string_free(X509V3_CTX*;char*):void"/>
    <method name="X509_ALGOR_dup(X509_ALGOR*):X509_ALGOR*"/>
    <method name="X509_ALGOR_free(X509_ALGOR*):void"/>
    <method name="X509_ALGOR_new():X509_ALGOR*"/>
    <method name="X509_ATTRIBUTE_count(X509_ATTRIBUTE*):int"/>
    <method name="X509_ATTRIBUTE_create(int;int;void*):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE**;int;int;const void*;int):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE**;const ASN1_OBJECT*;int;const void*;int):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE**;const char*;int;const unsigned char*;int):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_dup(X509_ATTRIBUTE*):X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_free(X509_ATTRIBUTE*):void"/>
    <method name="X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE*;int;int;void*):void*"/>
    <method name="X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE*):ASN1_OBJECT*"/>
    <method name="X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE*;int):ASN1_TYPE*"/>
    <method name="X509_ATTRIBUTE_new():X509_ATTRIBUTE*"/>
    <method name="X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE*;int;const void*;int):int"/>
    <method name="X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE*;const ASN1_OBJECT*):int"/>
    <method name="X509_CERT_AUX_free(X509_CERT_AUX*):void"/>
    <method name="X509_CERT_AUX_new():X509_CERT_AUX*"/>
    <method name="X509_CERT_AUX_print(BIO*;X509_CERT_AUX*;int):int"/>
    <method name="X509_CERT_PAIR_free(X509_CERT_PAIR*):void"/>
    <method name="X509_CERT_PAIR_new():X509_CERT_PAIR*"/>
    <method name="X509_CINF_free(X509_CINF*):void"/>
    <method name="X509_CINF_new():X509_CINF*"/>
    <method name="X509_CRL_INFO_free(X509_CRL_INFO*):void"/>
    <method name="X509_CRL_INFO_new():X509_CRL_INFO*"/>
    <method name="X509_CRL_add0_revoked(X509_CRL*;X509_REVOKED*):int"/>
    <method name="X509_CRL_add1_ext_i2d(X509_CRL*;int;void*;int;unsigned long):int"/>
    <method name="X509_CRL_add_ext(X509_CRL*;X509_EXTENSION*;int):int"/>
    <method name="X509_CRL_cmp(const X509_CRL*;const X509_CRL*):int"/>
    <method name="X509_CRL_delete_ext(X509_CRL*;int):X509_EXTENSION*"/>
    <method name="X509_CRL_digest(const X509_CRL*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_CRL_dup(X509_CRL*):X509_CRL*"/>
    <method name="X509_CRL_free(X509_CRL*):void"/>
    <method name="X509_CRL_get_ext(X509_CRL*;int):X509_EXTENSION*"/>
    <method name="X509_CRL_get_ext_by_NID(X509_CRL*;int;int):int"/>
    <method name="X509_CRL_get_ext_by_OBJ(X509_CRL*;ASN1_OBJECT*;int):int"/>
    <method name="X509_CRL_get_ext_by_critical(X509_CRL*;int;int):int"/>
    <method name="X509_CRL_get_ext_count(X509_CRL*):int"/>
    <method name="X509_CRL_get_ext_d2i(X509_CRL*;int;int*;int*):void*"/>
    <method name="X509_CRL_new():X509_CRL*"/>
    <method name="X509_CRL_print(BIO*;X509_CRL*):int"/>
    <method name="X509_CRL_print_fp(FILE*;X509_CRL*):int"/>
    <method name="X509_CRL_set_issuer_name(X509_CRL*;X509_NAME*):int"/>
    <method name="X509_CRL_set_lastUpdate(X509_CRL*;ASN1_TIME*):int"/>
    <method name="X509_CRL_set_nextUpdate(X509_CRL*;ASN1_TIME*):int"/>
    <method name="X509_CRL_set_version(X509_CRL*;long):int"/>
    <method name="X509_CRL_sign(X509_CRL*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="X509_CRL_sort(X509_CRL*):int"/>
    <method name="X509_CRL_verify(X509_CRL*;EVP_PKEY*):int"/>
    <method name="X509_EXTENSION_create_by_NID(X509_EXTENSION**;int;int;ASN1_OCTET_STRING*):X509_EXTENSION*"/>
    <method name="X509_EXTENSION_create_by_OBJ(X509_EXTENSION**;ASN1_OBJECT*;int;ASN1_OCTET_STRING*):X509_EXTENSION*"/>
    <method name="X509_EXTENSION_dup(X509_EXTENSION*):X509_EXTENSION*"/>
    <method name="X509_EXTENSION_free(X509_EXTENSION*):void"/>
    <method name="X509_EXTENSION_get_critical(X509_EXTENSION*):int"/>
    <method name="X509_EXTENSION_get_data(X509_EXTENSION*):ASN1_OCTET_STRING*"/>
    <method name="X509_EXTENSION_get_object(X509_EXTENSION*):ASN1_OBJECT*"/>
    <method name="X509_EXTENSION_new():X509_EXTENSION*"/>
    <method name="X509_EXTENSION_set_critical(X509_EXTENSION*;int):int"/>
    <method name="X509_EXTENSION_set_data(X509_EXTENSION*;ASN1_OCTET_STRING*):int"/>
    <method name="X509_EXTENSION_set_object(X509_EXTENSION*;ASN1_OBJECT*):int"/>
    <method name="X509_INFO_free(X509_INFO*):void"/>
    <method name="X509_INFO_new():X509_INFO*"/>
    <method name="X509_LOOKUP_by_alias(X509_LOOKUP*;int;char*;int;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_by_fingerprint(X509_LOOKUP*;int;unsigned char*;int;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_by_issuer_serial(X509_LOOKUP*;int;X509_NAME*;ASN1_INTEGER*;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_by_subject(X509_LOOKUP*;int;X509_NAME*;X509_OBJECT*):int"/>
    <method name="X509_LOOKUP_ctrl(X509_LOOKUP*;int;const char*;long;char**):int"/>
    <method name="X509_LOOKUP_file():X509_LOOKUP_METHOD*"/>
    <method name="X509_LOOKUP_free(X509_LOOKUP*):void"/>
    <method name="X509_LOOKUP_hash_dir():X509_LOOKUP_METHOD*"/>
    <method name="X509_LOOKUP_init(X509_LOOKUP*):int"/>
    <method name="X509_LOOKUP_new(X509_LOOKUP_METHOD*):X509_LOOKUP*"/>
    <method name="X509_LOOKUP_shutdown(X509_LOOKUP*):int"/>
    <method name="X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY**;int;int;unsigned char*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY**;ASN1_OBJECT*;int;const unsigned char*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY**;const char*;int;const unsigned char*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_dup(X509_NAME_ENTRY*):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_free(X509_NAME_ENTRY*):void"/>
    <method name="X509_NAME_ENTRY_get_data(X509_NAME_ENTRY*):ASN1_STRING*"/>
    <method name="X509_NAME_ENTRY_get_object(X509_NAME_ENTRY*):ASN1_OBJECT*"/>
    <method name="X509_NAME_ENTRY_new():X509_NAME_ENTRY*"/>
    <method name="X509_NAME_ENTRY_set_data(X509_NAME_ENTRY*;int;const unsigned char*;int):int"/>
    <method name="X509_NAME_ENTRY_set_object(X509_NAME_ENTRY*;ASN1_OBJECT*):int"/>
    <method name="X509_NAME_add_entry(X509_NAME*;X509_NAME_ENTRY*;int;int):int"/>
    <method name="X509_NAME_add_entry_by_NID(X509_NAME*;int;int;unsigned char*;int;int;int):int"/>
    <method name="X509_NAME_add_entry_by_OBJ(X509_NAME*;ASN1_OBJECT*;int;unsigned char*;int;int;int):int"/>
    <method name="X509_NAME_add_entry_by_txt(X509_NAME*;const char*;int;const unsigned char*;int;int;int):int"/>
    <method name="X509_NAME_cmp(const X509_NAME*;const X509_NAME*):int"/>
    <method name="X509_NAME_delete_entry(X509_NAME*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_digest(const X509_NAME*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_NAME_dup(X509_NAME*):X509_NAME*"/>
    <method name="X509_NAME_entry_count(X509_NAME*):int"/>
    <method name="X509_NAME_free(X509_NAME*):void"/>
    <method name="X509_NAME_get_entry(X509_NAME*;int):X509_NAME_ENTRY*"/>
    <method name="X509_NAME_get_index_by_NID(X509_NAME*;int;int):int"/>
    <method name="X509_NAME_get_index_by_OBJ(X509_NAME*;ASN1_OBJECT*;int):int"/>
    <method name="X509_NAME_get_text_by_NID(X509_NAME*;int;char*;int):int"/>
    <method name="X509_NAME_get_text_by_OBJ(X509_NAME*;ASN1_OBJECT*;char*;int):int"/>
    <method name="X509_NAME_hash(X509_NAME*):unsigned long"/>
    <method name="X509_NAME_new():X509_NAME*"/>
    <method name="X509_NAME_oneline(X509_NAME*;char*;int):char*"/>
    <method name="X509_NAME_print(BIO*;X509_NAME*;int):int"/>
    <method name="X509_NAME_print_ex(BIO*;X509_NAME*;int;unsigned long):int"/>
    <method name="X509_NAME_print_ex_fp(FILE*;X509_NAME*;int;unsigned long):int"/>
    <method name="X509_NAME_set(X509_NAME**;X509_NAME*):int"/>
    <method name="X509_OBJECT_free_contents(X509_OBJECT*):void"/>
    <method name="X509_OBJECT_idx_by_subject(STACK*;int;X509_NAME*):int"/>
    <method name="X509_OBJECT_retrieve_by_subject(STACK*;int;X509_NAME*):X509_OBJECT*"/>
    <method name="X509_OBJECT_retrieve_match(STACK*;X509_OBJECT*):X509_OBJECT*"/>
    <method name="X509_OBJECT_up_ref_count(X509_OBJECT*):void"/>
    <method name="X509_PKEY_free(X509_PKEY*):void"/>
    <method name="X509_PKEY_new():X509_PKEY*"/>
    <method name="X509_POLICY_NODE_print(BIO*;X509_POLICY_NODE*;int):void"/>
    <method name="X509_PUBKEY_free(X509_PUBKEY*):void"/>
    <method name="X509_PUBKEY_get(X509_PUBKEY*):EVP_PKEY*"/>
    <method name="X509_PUBKEY_new():X509_PUBKEY*"/>
    <method name="X509_PUBKEY_set(X509_PUBKEY**;EVP_PKEY*):int"/>
    <method name="X509_PURPOSE_add(int;int;int;(*)(const X509_PURPOSE*;const X509*;int):int*;char*;char*;void*):int"/>
    <method name="X509_PURPOSE_cleanup():void"/>
    <method name="X509_PURPOSE_get0(int):X509_PURPOSE*"/>
    <method name="X509_PURPOSE_get0_name(X509_PURPOSE*):char*"/>
    <method name="X509_PURPOSE_get0_sname(X509_PURPOSE*):char*"/>
    <method name="X509_PURPOSE_get_by_id(int):int"/>
    <method name="X509_PURPOSE_get_by_sname(char*):int"/>
    <method name="X509_PURPOSE_get_count():int"/>
    <method name="X509_PURPOSE_get_id(X509_PURPOSE*):int"/>
    <method name="X509_PURPOSE_get_trust(X509_PURPOSE*):int"/>
    <method name="X509_PURPOSE_set(int*;int):int"/>
    <method name="X509_REQ_INFO_free(X509_REQ_INFO*):void"/>
    <method name="X509_REQ_INFO_new():X509_REQ_INFO*"/>
    <method name="X509_REQ_add1_attr(X509_REQ*;X509_ATTRIBUTE*):int"/>
    <method name="X509_REQ_add1_attr_by_NID(X509_REQ*;int;int;const unsigned char*;int):int"/>
    <method name="X509_REQ_add1_attr_by_OBJ(X509_REQ*;const ASN1_OBJECT*;int;const unsigned char*;int):int"/>
    <method name="X509_REQ_add1_attr_by_txt(X509_REQ*;const char*;int;const unsigned char*;int):int"/>
    <method name="X509_REQ_add_extensions(X509_REQ*;STACK*):int"/>
    <method name="X509_REQ_add_extensions_nid(X509_REQ*;STACK*;int):int"/>
    <method name="X509_REQ_check_private_key(X509_REQ*;EVP_PKEY*):int"/>
    <method name="X509_REQ_delete_attr(X509_REQ*;int):X509_ATTRIBUTE*"/>
    <method name="X509_REQ_digest(const X509_REQ*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_REQ_dup(X509_REQ*):X509_REQ*"/>
    <method name="X509_REQ_extension_nid(int):int"/>
    <method name="X509_REQ_free(X509_REQ*):void"/>
    <method name="X509_REQ_get1_email(X509_REQ*):STACK*"/>
    <method name="X509_REQ_get_attr(const X509_REQ*;int):X509_ATTRIBUTE*"/>
    <method name="X509_REQ_get_attr_by_NID(const X509_REQ*;int;int):int"/>
    <method name="X509_REQ_get_attr_by_OBJ(const X509_REQ*;ASN1_OBJECT*;int):int"/>
    <method name="X509_REQ_get_attr_count(const X509_REQ*):int"/>
    <method name="X509_REQ_get_extension_nids():int*"/>
    <method name="X509_REQ_get_extensions(X509_REQ*):STACK*"/>
    <method name="X509_REQ_get_pubkey(X509_REQ*):EVP_PKEY*"/>
    <method name="X509_REQ_new():X509_REQ*"/>
    <method name="X509_REQ_print(BIO*;X509_REQ*):int"/>
    <method name="X509_REQ_print_ex(BIO*;X509_REQ*;unsigned long;unsigned long):int"/>
    <method name="X509_REQ_print_fp(FILE*;X509_REQ*):int"/>
    <method name="X509_REQ_set_extension_nids(int*):void"/>
    <method name="X509_REQ_set_pubkey(X509_REQ*;EVP_PKEY*):int"/>
    <method name="X509_REQ_set_subject_name(X509_REQ*;X509_NAME*):int"/>
    <method name="X509_REQ_set_version(X509_REQ*;long):int"/>
    <method name="X509_REQ_sign(X509_REQ*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="X509_REQ_to_X509(X509_REQ*;int;EVP_PKEY*):X509*"/>
    <method name="X509_REQ_verify(X509_REQ*;EVP_PKEY*):int"/>
    <method name="X509_REVOKED_add1_ext_i2d(X509_REVOKED*;int;void*;int;unsigned long):int"/>
    <method name="X509_REVOKED_add_ext(X509_REVOKED*;X509_EXTENSION*;int):int"/>
    <method name="X509_REVOKED_delete_ext(X509_REVOKED*;int):X509_EXTENSION*"/>
    <method name="X509_REVOKED_free(X509_REVOKED*):void"/>
    <method name="X509_REVOKED_get_ext(X509_REVOKED*;int):X509_EXTENSION*"/>
    <method name="X509_REVOKED_get_ext_by_NID(X509_REVOKED*;int;int):int"/>
    <method name="X509_REVOKED_get_ext_by_OBJ(X509_REVOKED*;ASN1_OBJECT*;int):int"/>
    <method name="X509_REVOKED_get_ext_by_critical(X509_REVOKED*;int;int):int"/>
    <method name="X509_REVOKED_get_ext_count(X509_REVOKED*):int"/>
    <method name="X509_REVOKED_get_ext_d2i(X509_REVOKED*;int;int*;int*):void*"/>
    <method name="X509_REVOKED_new():X509_REVOKED*"/>
    <method name="X509_REVOKED_set_revocationDate(X509_REVOKED*;ASN1_TIME*):int"/>
    <method name="X509_REVOKED_set_serialNumber(X509_REVOKED*;ASN1_INTEGER*):int"/>
    <method name="X509_SIG_free(X509_SIG*):void"/>
    <method name="X509_SIG_new():X509_SIG*"/>
    <method name="X509_STORE_CTX_cleanup(X509_STORE_CTX*):void"/>
    <method name="X509_STORE_CTX_free(X509_STORE_CTX*):void"/>
    <method name="X509_STORE_CTX_get0_param(X509_STORE_CTX*):X509_VERIFY_PARAM*"/>
    <method name="X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX*):X509_POLICY_TREE*"/>
    <method name="X509_STORE_CTX_get1_chain(X509_STORE_CTX*):STACK*"/>
    <method name="X509_STORE_CTX_get1_issuer(X509**;X509_STORE_CTX*;X509*):int"/>
    <method name="X509_STORE_CTX_get_chain(X509_STORE_CTX*):STACK*"/>
    <method name="X509_STORE_CTX_get_current_cert(X509_STORE_CTX*):X509*"/>
    <method name="X509_STORE_CTX_get_error(X509_STORE_CTX*):int"/>
    <method name="X509_STORE_CTX_get_error_depth(X509_STORE_CTX*):int"/>
    <method name="X509_STORE_CTX_get_ex_data(X509_STORE_CTX*;int):void*"/>
    <method name="X509_STORE_CTX_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX*):int"/>
    <method name="X509_STORE_CTX_init(X509_STORE_CTX*;X509_STORE*;X509*;STACK*):int"/>
    <method name="X509_STORE_CTX_new():X509_STORE_CTX*"/>
    <method name="X509_STORE_CTX_purpose_inherit(X509_STORE_CTX*;int;int;int):int"/>
    <method name="X509_STORE_CTX_set0_crls(X509_STORE_CTX*;STACK*):void"/>
    <method name="X509_STORE_CTX_set0_param(X509_STORE_CTX*;X509_VERIFY_PARAM*):void"/>
    <method name="X509_STORE_CTX_set_cert(X509_STORE_CTX*;X509*):void"/>
    <method name="X509_STORE_CTX_set_chain(X509_STORE_CTX*;STACK*):void"/>
    <method name="X509_STORE_CTX_set_default(X509_STORE_CTX*;const char*):int"/>
    <method name="X509_STORE_CTX_set_depth(X509_STORE_CTX*;int):void"/>
    <method name="X509_STORE_CTX_set_error(X509_STORE_CTX*;int):void"/>
    <method name="X509_STORE_CTX_set_ex_data(X509_STORE_CTX*;int;void*):int"/>
    <method name="X509_STORE_CTX_set_flags(X509_STORE_CTX*;unsigned long):void"/>
    <method name="X509_STORE_CTX_set_purpose(X509_STORE_CTX*;int):int"/>
    <method name="X509_STORE_CTX_set_time(X509_STORE_CTX*;unsigned long;time_t):void"/>
    <method name="X509_STORE_CTX_set_trust(X509_STORE_CTX*;int):int"/>
    <method name="X509_STORE_CTX_set_verify_cb(X509_STORE_CTX*;(*)(int;X509_STORE_CTX*):int*):void"/>
    <method name="X509_STORE_CTX_trusted_stack(X509_STORE_CTX*;STACK*):void"/>
    <method name="X509_STORE_add_cert(X509_STORE*;X509*):int"/>
    <method name="X509_STORE_add_crl(X509_STORE*;X509_CRL*):int"/>
    <method name="X509_STORE_add_lookup(X509_STORE*;X509_LOOKUP_METHOD*):X509_LOOKUP*"/>
    <method name="X509_STORE_free(X509_STORE*):void"/>
    <method name="X509_STORE_get_by_subject(X509_STORE_CTX*;int;X509_NAME*;X509_OBJECT*):int"/>
    <method name="X509_STORE_load_locations(X509_STORE*;const char*;const char*):int"/>
    <method name="X509_STORE_new():X509_STORE*"/>
    <method name="X509_STORE_set1_param(X509_STORE*;X509_VERIFY_PARAM*):int"/>
    <method name="X509_STORE_set_default_paths(X509_STORE*):int"/>
    <method name="X509_STORE_set_depth(X509_STORE*;int):int"/>
    <method name="X509_STORE_set_flags(X509_STORE*;unsigned long):int"/>
    <method name="X509_STORE_set_purpose(X509_STORE*;int):int"/>
    <method name="X509_STORE_set_trust(X509_STORE*;int):int"/>
    <method name="X509_TRUST_add(int;int;(*)(X509_TRUST*;X509*;int):int*;char*;int;void*):int"/>
    <method name="X509_TRUST_cleanup():void"/>
    <method name="X509_TRUST_get0(int):X509_TRUST*"/>
    <method name="X509_TRUST_get0_name(X509_TRUST*):char*"/>
    <method name="X509_TRUST_get_by_id(int):int"/>
    <method name="X509_TRUST_get_count():int"/>
    <method name="X509_TRUST_get_flags(X509_TRUST*):int"/>
    <method name="X509_TRUST_get_trust(X509_TRUST*):int"/>
    <method name="X509_TRUST_set(int*;int):int"/>
    <method name="X509_TRUST_set_default((*)(int;X509*;int):int*):(*)(int;X509*;int):int*"/>
    <method name="X509_VAL_free(X509_VAL*):void"/>
    <method name="X509_VAL_new():X509_VAL*"/>
    <method name="X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM*;ASN1_OBJECT*):int"/>
    <method name="X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM*;unsigned long):int"/>
    <method name="X509_VERIFY_PARAM_free(X509_VERIFY_PARAM*):void"/>
    <method name="X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM*):unsigned long"/>
    <method name="X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM*;const X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_lookup(const char*):const X509_VERIFY_PARAM*"/>
    <method name="X509_VERIFY_PARAM_new():X509_VERIFY_PARAM*"/>
    <method name="X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM*;const X509_VERIFY_PARAM*):int"/>
    <method name="X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM*;const char*):int"/>
    <method name="X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM*;STACK*):int"/>
    <method name="X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM*;int):void"/>
    <method name="X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM*;unsigned long):int"/>
    <method name="X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM*;int):int"/>
    <method name="X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM*;time_t):void"/>
    <method name="X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM*;int):int"/>
    <method name="X509_VERIFY_PARAM_table_cleanup():void"/>
    <method name="X509_add1_ext_i2d(X509*;int;void*;int;unsigned long):int"/>
    <method name="X509_add1_reject_object(X509*;ASN1_OBJECT*):int"/>
    <method name="X509_add1_trust_object(X509*;ASN1_OBJECT*):int"/>
    <method name="X509_add_ext(X509*;X509_EXTENSION*;int):int"/>
    <method name="X509_alias_get0(X509*;int*):unsigned char*"/>
    <method name="X509_alias_set1(X509*;unsigned char*;int):int"/>
    <method name="X509_asn1_meth():ASN1_METHOD*"/>
    <method name="X509_certificate_type(X509*;EVP_PKEY*):int"/>
    <method name="X509_check_ca(X509*):int"/>
    <method name="X509_check_issued(X509*;X509*):int"/>
    <method name="X509_check_private_key(X509*;EVP_PKEY*):int"/>
    <method name="X509_check_purpose(X509*;int;int):int"/>
    <method name="X509_check_trust(X509*;int;int):int"/>
    <method name="X509_cmp(const X509*;const X509*):int"/>
    <method name="X509_cmp_current_time(ASN1_TIME*):int"/>
    <method name="X509_cmp_time(ASN1_TIME*;time_t*):int"/>
    <method name="X509_delete_ext(X509*;int):X509_EXTENSION*"/>
    <method name="X509_digest(const X509*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_dup(X509*):X509*"/>
    <method name="X509_email_free(STACK*):void"/>
    <method name="X509_find_by_issuer_and_serial(STACK*;X509_NAME*;ASN1_INTEGER*):X509*"/>
    <method name="X509_find_by_subject(STACK*;X509_NAME*):X509*"/>
    <method name="X509_free(X509*):void"/>
    <method name="X509_get0_pubkey_bitstr(const X509*):ASN1_BIT_STRING*"/>
    <method name="X509_get1_email(X509*):STACK*"/>
    <method name="X509_get_default_cert_area():const char*"/>
    <method name="X509_get_default_cert_dir():const char*"/>
    <method name="X509_get_default_cert_dir_env():const char*"/>
    <method name="X509_get_default_cert_file():const char*"/>
    <method name="X509_get_default_cert_file_env():const char*"/>
    <method name="X509_get_default_private_dir():const char*"/>
    <method name="X509_get_ex_data(X509*;int):void*"/>
    <method name="X509_get_ex_new_index(long;void*;CRYPTO_EX_new*;CRYPTO_EX_dup*;CRYPTO_EX_free*):int"/>
    <method name="X509_get_ext(X509*;int):X509_EXTENSION*"/>
    <method name="X509_get_ext_by_NID(X509*;int;int):int"/>
    <method name="X509_get_ext_by_OBJ(X509*;ASN1_OBJECT*;int):int"/>
    <method name="X509_get_ext_by_critical(X509*;int;int):int"/>
    <method name="X509_get_ext_count(X509*):int"/>
    <method name="X509_get_ext_d2i(X509*;int;int*;int*):void*"/>
    <method name="X509_get_issuer_name(X509*):X509_NAME*"/>
    <method name="X509_get_pubkey(X509*):EVP_PKEY*"/>
    <method name="X509_get_pubkey_parameters(EVP_PKEY*;STACK*):int"/>
    <method name="X509_get_serialNumber(X509*):ASN1_INTEGER*"/>
    <method name="X509_get_subject_name(X509*):X509_NAME*"/>
    <method name="X509_gmtime_adj(ASN1_TIME*;long):ASN1_TIME*"/>
    <method name="X509_issuer_and_serial_cmp(const X509*;const X509*):int"/>
    <method name="X509_issuer_and_serial_hash(X509*):unsigned long"/>
    <method name="X509_issuer_name_cmp(const X509*;const X509*):int"/>
    <method name="X509_issuer_name_hash(X509*):unsigned long"/>
    <method name="X509_keyid_get0(X509*;int*):unsigned char*"/>
    <method name="X509_keyid_set1(X509*;unsigned char*;int):int"/>
    <method name="X509_load_cert_crl_file(X509_LOOKUP*;const char*;int):int"/>
    <method name="X509_load_cert_file(X509_LOOKUP*;const char*;int):int"/>
    <method name="X509_load_crl_file(X509_LOOKUP*;const char*;int):int"/>
    <method name="X509_new():X509*"/>
    <method name="X509_ocspid_print(BIO*;X509*):int"/>
    <method name="X509_policy_check(X509_POLICY_TREE**;int*;STACK*;STACK*;unsigned int):int"/>
    <method name="X509_policy_level_get0_node(X509_POLICY_LEVEL*;int):X509_POLICY_NODE*"/>
    <method name="X509_policy_level_node_count(X509_POLICY_LEVEL*):int"/>
    <method name="X509_policy_node_get0_parent(const X509_POLICY_NODE*):const X509_POLICY_NODE*"/>
    <method name="X509_policy_node_get0_policy(const X509_POLICY_NODE*):const ASN1_OBJECT*"/>
    <method name="X509_policy_node_get0_qualifiers(const X509_POLICY_NODE*):STACK*"/>
    <method name="X509_policy_tree_free(X509_POLICY_TREE*):void"/>
    <method name="X509_policy_tree_get0_level(const X509_POLICY_TREE*;int):X509_POLICY_LEVEL*"/>
    <method name="X509_policy_tree_get0_policies(const X509_POLICY_TREE*):STACK*"/>
    <method name="X509_policy_tree_get0_user_policies(const X509_POLICY_TREE*):STACK*"/>
    <method name="X509_policy_tree_level_count(const X509_POLICY_TREE*):int"/>
    <method name="X509_print(BIO*;X509*):int"/>
    <method name="X509_print_ex(BIO*;X509*;unsigned long;unsigned long):int"/>
    <method name="X509_print_ex_fp(FILE*;X509*;unsigned long;unsigned long):int"/>
    <method name="X509_print_fp(FILE*;X509*):int"/>
    <method name="X509_pubkey_digest(const X509*;const EVP_MD*;unsigned char*;unsigned int*):int"/>
    <method name="X509_reject_clear(X509*):void"/>
    <method name="X509_set_ex_data(X509*;int;void*):int"/>
    <method name="X509_set_issuer_name(X509*;X509_NAME*):int"/>
    <method name="X509_set_notAfter(X509*;ASN1_TIME*):int"/>
    <method name="X509_set_notBefore(X509*;ASN1_TIME*):int"/>
    <method name="X509_set_pubkey(X509*;EVP_PKEY*):int"/>
    <method name="X509_set_serialNumber(X509*;ASN1_INTEGER*):int"/>
    <method name="X509_set_subject_name(X509*;X509_NAME*):int"/>
    <method name="X509_set_version(X509*;long):int"/>
    <method name="X509_sign(X509*;EVP_PKEY*;const EVP_MD*):int"/>
    <method name="X509_signature_print(BIO*;X509_ALGOR*;ASN1_STRING*):int"/>
    <method name="X509_subject_name_cmp(const X509*;const X509*):int"/>
    <method name="X509_subject_name_hash(X509*):unsigned long"/>
    <method name="X509_supported_extension(X509_EXTENSION*):int"/>
    <method name="X509_time_adj(ASN1_TIME*;long;time_t*):ASN1_TIME*"/>
    <method name="X509_to_X509_REQ(X509*;EVP_PKEY*;const EVP_MD*):X509_REQ*"/>
    <method name="X509_trust_clear(X509*):void"/>
    <method name="X509_verify(X509*;EVP_PKEY*):int"/>
    <method name="X509_verify_cert(X509_STORE_CTX*):int"/>
    <method name="X509_verify_cert_error_string(long):const char*"/>
    <method name="X509at_add1_attr(STACK**;X509_ATTRIBUTE*):STACK*"/>
    <method name="X509at_add1_attr_by_NID(STACK**;int;int;const unsigned char*;int):STACK*"/>
    <method name="X509at_add1_attr_by_OBJ(STACK**;const ASN1_OBJECT*;int;const unsigned char*;int):STACK*"/>
    <method name="X509at_add1_attr_by_txt(STACK**;const char*;int;const unsigned char*;int):STACK*"/>
    <method name="X509at_delete_attr(STACK*;int):X509_ATTRIBUTE*"/>
    <method name="X509at_get_attr(const STACK*;int):X509_ATTRIBUTE*"/>
    <method name="X509at_get_attr_by_NID(const STACK*;int;int):int"/>
    <method name="X509at_get_attr_by_OBJ(const STACK*;ASN1_OBJECT*;int):int"/>
    <method name="X509at_get_attr_count(const STACK*):int"/>
    <method name="X509v3_add_ext(STACK**;X509_EXTENSION*;int):STACK*"/>
    <method name="X509v3_delete_ext(STACK*;int):X509_EXTENSION*"/>
    <method name="X509v3_get_ext(const STACK*;int):X509_EXTENSION*"/>
    <method name="X509v3_get_ext_by_NID(const STACK*;int;int):int"/>
    <method name="X509v3_get_ext_by_OBJ(const STACK*;ASN1_OBJECT*;int):int"/>
    <method name="X509v3_get_ext_by_critical(const STACK*;int;int):int"/>
    <method name="X509v3_get_ext_count(const STACK*):int"/>
    <method name="_Block_copy(const void*):void*"/>
    <method name="_Block_object_assign(void*;const void*;const int):void"/>
    <method name="_Block_object_dispose(const void*;const int):void"/>
    <method name="_Block_release(const void*):void"/>
    <method name="_CONF_add_string(CONF*;CONF_VALUE*;CONF_VALUE*):int"/>
    <method name="_CONF_free_data(CONF*):void"/>
    <method name="_CONF_get_number(const CONF*;const char*;const char*):long"/>
    <method name="_CONF_get_section(const CONF*;const char*):CONF_VALUE*"/>
    <method name="_CONF_get_section_values(const CONF*;const char*):STACK*"/>
    <method name="_CONF_get_string(const CONF*;const char*;const char*):char*"/>
    <method name="_CONF_new_data(CONF*):int"/>
    <method name="_CONF_new_section(CONF*;const char*):CONF_VALUE*"/>
    <method name="_Exit(int):void"/>
    <method name="_GLIBCXX_BEGIN_NAMESPACE(int):int"/>
    <method name="_GLIBCXX_BEGIN_NESTED_NAMESPACE(int;int):int"/>
    <method name="_M_call_callbacks(enum event):void"/>
    <method name="_M_dispose_callbacks():void"/>
    <method name="_M_init():void"/>
    <method name="_NSGetExecutablePath(char*;uint32_t*):int"/>
    <method name="_OSReadInt16(const volatile void*;uintptr_t):uint16_t"/>
    <method name="_OSReadInt32(const volatile void*;uintptr_t):uint32_t"/>
    <method name="_OSReadInt64(const volatile void*;uintptr_t):uint64_t"/>
    <method name="_OSWriteInt16(volatile void*;uintptr_t;uint16_t):void"/>
    <method name="_OSWriteInt32(volatile void*;uintptr_t;uint32_t):void"/>
    <method name="_OSWriteInt64(volatile void*;uintptr_t;uint64_t):void"/>
    <method name="_Rb_tree_black_count(const int*;const int*):unsigned int"/>
    <method name="_Rb_tree_decrement(const int*):const int*"/>
    <method name="_Rb_tree_decrement(int*):int*"/>
    <method name="_Rb_tree_increment(const int*):const int*"/>
    <method name="_Rb_tree_increment(int*):int*"/>
    <method name="_Rb_tree_insert_and_rebalance(const int;int*;int*;int):void"/>
    <method name="_Rb_tree_rebalance_for_erase(const int*;int):int*"/>
    <method name="_Rb_tree_rotate_left(const int*;int*):void"/>
    <method name="_Rb_tree_rotate_right(const int*;int*):void"/>
    <method name="_Rope_is_simple(char*):int"/>
    <method name="_Rope_is_simple(int*):int"/>
    <method name="_S_cond_store_eos(char):void"/>
    <method name="_S_cond_store_eos(int):void"/>
    <method name="_S_do_it(int*;int*):void"/>
    <method name="_S_is_basic_char_type(char*):int"/>
    <method name="_S_is_basic_char_type(int*):int"/>
    <method name="_S_is_one_byte_char_type(char*):int"/>
    <method name="_Unwind_Backtrace(_Unwind_Trace_Fn;void*):_Unwind_Reason_Code"/>
    <method name="_Unwind_DeleteException(struct _Unwind_Exception*):void"/>
    <method name="_Unwind_FindEnclosingFunction(void*):void*"/>
    <method name="_Unwind_Find_FDE(const void*;struct dwarf_eh_bases*):const void*"/>
    <method name="_Unwind_GetCFA(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetDataRelBase(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetGR(struct _Unwind_Context*;int):uintptr_t"/>
    <method name="_Unwind_GetIP(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetIPInfo(struct _Unwind_Context*;int*):uintptr_t"/>
    <method name="_Unwind_GetLanguageSpecificData(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetRegionStart(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_GetTextRelBase(struct _Unwind_Context*):uintptr_t"/>
    <method name="_Unwind_SetGR(struct _Unwind_Context*;int;uintptr_t):void"/>
    <method name="_Unwind_SetIP(struct _Unwind_Context*;uintptr_t):void"/>
    <method name="_Unwind_SjLj_ForcedUnwind(struct _Unwind_Exception*;_Unwind_Stop_Fn;void*):_Unwind_Reason_Code"/>
    <method name="_Unwind_SjLj_RaiseException(struct _Unwind_Exception*):_Unwind_Reason_Code"/>
    <method name="_Unwind_SjLj_Register(_Unwind_FunctionContext_t):void"/>
    <method name="_Unwind_SjLj_Resume(struct _Unwind_Exception*):void"/>
    <method name="_Unwind_SjLj_Resume_or_Rethrow(struct _Unwind_Exception*):_Unwind_Reason_Code"/>
    <method name="_Unwind_SjLj_Unregister(_Unwind_FunctionContext_t):void"/>
    <method name="__CFRangeMake(CFIndex;CFIndex):CFRange"/>
    <method name="__CFStringMakeConstantString(const char*):CFStringRef"/>
    <method name="__CGAffineTransformMake(CGFloat;CGFloat;CGFloat;CGFloat;CGFloat;CGFloat):CGAffineTransform"/>
    <method name="__CGPointApplyAffineTransform(CGPoint;CGAffineTransform):CGPoint"/>
    <method name="__CGPointEqualToPoint(CGPoint;CGPoint):_Bool"/>
    <method name="__CGSizeApplyAffineTransform(CGSize;CGAffineTransform):CGSize"/>
    <method name="__CGSizeEqualToSize(CGSize;CGSize):_Bool"/>
    <method name="__NDR_convert__mig_reply_error_t(mig_reply_error_t*):void"/>
    <method name="__WSAFDIsSet(SOCKET;fd_set*):int"/>
    <method name="___mb_cur_max():int"/>
    <method name="___runetype(__darwin_ct_rune_t):unsigned long"/>
    <method name="___tolower(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="___toupper(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="__assert_rtn(const char*;const char*;int;const char*):void"/>
    <method name="__atomic_add(volatile int*;int):void"/>
    <method name="__atomic_add_dispatch(int*;int):void"/>
    <method name="__atomic_add_single(int*;int):void"/>
    <method name="__builtin___memset_chk():int"/>
    <method name="__builtin___strcat_chk():int"/>
    <method name="__builtin___strcpy_chk():int"/>
    <method name="__builtin__memset_chk():int"/>
    <method name="__builtin_object_size():int"/>
    <method name="__checkint_int32_add(int64_t;int64_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_signed_signed(int32_t;int32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_signed_unsigned(int32_t;uint32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_unsigned_signed(uint32_t;int32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_div_unsigned_unsigned(uint32_t;uint32_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_mul(int64_t;int64_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_sub(int64_t;int64_t;int32_t*):int32_t"/>
    <method name="__checkint_int32_type_error(int32_t*):int32_t"/>
    <method name="__checkint_int64_add_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_add_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_add_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_add_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_div_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_mul_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_signed_signed(int64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_signed_unsigned(int64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_unsigned_signed(uint64_t;int64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_sub_unsigned_unsigned(uint64_t;uint64_t;int32_t*):int64_t"/>
    <method name="__checkint_int64_type_error(int32_t*):int32_t"/>
    <method name="__checkint_is_mixed_sign32(int32_t;int32_t):int32_t"/>
    <method name="__checkint_is_mixed_sign64(int64_t;int64_t):int32_t"/>
    <method name="__checkint_uint32_add(int64_t;int64_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_signed_signed(int32_t;int32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_signed_unsigned(int32_t;uint32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_unsigned_signed(uint32_t;int32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_div_unsigned_unsigned(uint32_t;uint32_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_mul(int64_t;int64_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_sub(int64_t;int64_t;int32_t*):uint32_t"/>
    <method name="__checkint_uint32_type_error(int32_t*):int32_t"/>
    <method name="__checkint_uint64_add_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_add_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_add_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_add_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_div_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_mul_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_signed_signed(int64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_signed_unsigned(int64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_unsigned_signed(uint64_t;int64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_sub_unsigned_unsigned(uint64_t;uint64_t;int32_t*):uint64_t"/>
    <method name="__checkint_uint64_type_error(int32_t*):int32_t"/>
    <method name="__deregister_frame(const void*):void"/>
    <method name="__deregister_frame_info(const void*):void*"/>
    <method name="__deregister_frame_info_bases(const void*):void*"/>
    <method name="__dtrace_isenabled$cxa_runtime$cxa_exception_rethrow$v1():int"/>
    <method name="__dtrace_isenabled$cxa_runtime$cxa_exception_throw$v1():int"/>
    <method name="__dtrace_probe$cxa_runtime$cxa_exception_rethrow$v1():void"/>
    <method name="__dtrace_probe$cxa_runtime$cxa_exception_throw$v1$766f6964202a(void*):void"/>
    <method name="__error():int*"/>
    <method name="__error_type_must_be_a_signed_integer_type():void"/>
    <method name="__error_type_must_be_an_unsigned_integer_type():void"/>
    <method name="__exchange_and_add_single(int*;int):int"/>
    <method name="__fpclassify(double):int"/>
    <method name="__fpclassifyf(float):int"/>
    <method name="__fpclassifyl(long double):int"/>
    <method name="__gthread_active_p():int"/>
    <method name="__gthread_getspecific(__gthread_key_t):void*"/>
    <method name="__gthread_key_create(__gthread_key_t*;(*)(void*):void):int"/>
    <method name="__gthread_key_delete(__gthread_key_t):int"/>
    <method name="__gthread_mutex_lock(__gthread_mutex_t*):int"/>
    <method name="__gthread_mutex_trylock(__gthread_mutex_t*):int"/>
    <method name="__gthread_mutex_unlock(__gthread_mutex_t*):int"/>
    <method name="__gthread_once(__gthread_once_t*;(*)():void):int"/>
    <method name="__gthread_recursive_mutex_init_function(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_recursive_mutex_lock(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_recursive_mutex_trylock(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_recursive_mutex_unlock(__gthread_recursive_mutex_t*):int"/>
    <method name="__gthread_setspecific(__gthread_key_t;const void*):int"/>
    <method name="__inf():double"/>
    <method name="__inff():float"/>
    <method name="__infl():long double"/>
    <method name="__inline_isfinited(double):int"/>
    <method name="__inline_isfinitef(float):int"/>
    <method name="__inline_isfinitel(long double):int"/>
    <method name="__inline_isinfd(double):int"/>
    <method name="__inline_isinff(float):int"/>
    <method name="__inline_isinfl(long double):int"/>
    <method name="__inline_isnand(double):int"/>
    <method name="__inline_isnanf(float):int"/>
    <method name="__inline_isnanl(long double):int"/>
    <method name="__inline_isnormald(double):int"/>
    <method name="__inline_isnormalf(float):int"/>
    <method name="__inline_isnormall(long double):int"/>
    <method name="__inline_memcpy_chk(void*;const void*;size_t):void*"/>
    <method name="__inline_memset_chk(void*;int;size_t):void*"/>
    <method name="__inline_signbitd(double):int"/>
    <method name="__inline_signbitf(float):int"/>
    <method name="__inline_signbitl(long double):int"/>
    <method name="__inline_strcat_chk(char*;const char*):char*"/>
    <method name="__inline_strcpy_chk(char*;const char*):char*"/>
    <method name="__isctype(__darwin_ct_rune_t;unsigned long):__darwin_ct_rune_t"/>
    <method name="__istype(__darwin_ct_rune_t;unsigned long):int"/>
    <method name="__istype_l(int;unsigned long;int):int"/>
    <method name="__lexicographical_compare_3way(const char*;const char*;const char*;const char*):int"/>
    <method name="__lexicographical_compare_3way(const unsigned char*;const unsigned char*;const unsigned char*;const unsigned char*):int"/>
    <method name="__maskrune(__darwin_ct_rune_t;unsigned long):int"/>
    <method name="__maskrune_l():int"/>
    <method name="__math_errhandling():int"/>
    <method name="__nan():float"/>
    <method name="__opendir2(const char*;int):DIR*"/>
    <method name="__register_frame(const void*):void"/>
    <method name="__register_frame_info(const void*;void*):void"/>
    <method name="__register_frame_info_bases(const void*;void*;void*;void*):void"/>
    <method name="__register_frame_info_table(const void*;void*):void"/>
    <method name="__register_frame_info_table_bases(const void*;void*;void*;void*):void"/>
    <method name="__register_frame_table(const void*):void"/>
    <method name="__slist_make_link(struct _Slist_node_base*;struct _Slist_node_base*):struct _Slist_node_base*"/>
    <method name="__slist_previous(const struct _Slist_node_base*;const struct _Slist_node_base*):const struct _Slist_node_base*"/>
    <method name="__slist_previous(struct _Slist_node_base*;const struct _Slist_node_base*):struct _Slist_node_base*"/>
    <method name="__slist_reverse(struct _Slist_node_base*):struct _Slist_node_base*"/>
    <method name="__slist_size(struct _Slist_node_base*):int"/>
    <method name="__slist_splice_after(struct _Slist_node_base*;struct _Slist_node_base*):void"/>
    <method name="__slist_splice_after(struct _Slist_node_base*;struct _Slist_node_base*;struct _Slist_node_base*):void"/>
    <method name="__sputc(int;FILE*):int"/>
    <method name="__srget(FILE*):int"/>
    <method name="__stl_hash_string(const char*):int"/>
    <method name="__stl_next_prime(unsigned long):unsigned long"/>
    <method name="__svfscanf(FILE*;const char*;va_list):int"/>
    <method name="__swbuf(int;FILE*):int"/>
    <method name="__throw_concurrence_lock_error():void"/>
    <method name="__throw_concurrence_unlock_error():void"/>
    <method name="__throw_forced_exception_error():void"/>
    <method name="__tolower(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="__toupper(__darwin_ct_rune_t):__darwin_ct_rune_t"/>
    <method name="__verify_grouping(const char*;int;const int):int"/>
    <method name="__wcwidth(__darwin_ct_rune_t):int"/>
    <method name="__xmlParserInputBufferCreateFilename(const char*;int):int"/>
    <method name="_access(const char*;int):int"/>
    <method name="_asl_evaluate_send(aslclient;aslmsg;int):uint32_t"/>
    <method name="_asl_lib_log(aslclient;uint32_t;aslmsg;const char*, ...):int"/>
    <method name="_dateString(NSDate*):NSString*"/>
    <method name="_dupenv_s(char **;size_t*;const char*):errno_t"/>
    <method name="_dyld_all_twolevel_modules_prebound():_Bool"/>
    <method name="_dyld_bind_fully_image_containing_address(const void*):_Bool"/>
    <method name="_dyld_bind_objc_module(const void*):void"/>
    <method name="_dyld_get_image_header(uint32_t):const struct mach_header*"/>
    <method name="_dyld_get_image_header_containing_address(const void*):const struct mach_header*"/>
    <method name="_dyld_get_image_name(uint32_t):const char*"/>
    <method name="_dyld_get_image_vmaddr_slide(uint32_t):intptr_t"/>
    <method name="_dyld_image_containing_address(const void*):_Bool"/>
    <method name="_dyld_image_count():uint32_t"/>
    <method name="_dyld_launched_prebound():_Bool"/>
    <method name="_dyld_lookup_and_bind(const char*;void**;NSModule*):void"/>
    <method name="_dyld_lookup_and_bind_fully(const char*;void**;NSModule*):void"/>
    <method name="_dyld_lookup_and_bind_with_hint(const char*;const char*;void**;NSModule*):void"/>
    <method name="_dyld_moninit((*)(char*;char*):void):void"/>
    <method name="_dyld_present():_Bool"/>
    <method name="_dyld_register_func_for_add_image((*)(const struct mach_header*;intptr_t):void):void"/>
    <method name="_dyld_register_func_for_remove_image((*)(const struct mach_header*;intptr_t):void):void"/>
    <method name="_execl(const char*;const char*, ...):intptr_t"/>
    <method name="_execle(const char*;const char*, ...):intptr_t"/>
    <method name="_execv(const char*;const const char**):intptr_t"/>
    <method name="_execve(const char*;const const char**;const const char**):intptr_t"/>
    <method name="_execvp(const char*;const const char**):intptr_t"/>
    <method name="_execvpe(const char*;const const char**;const const char**):intptr_t"/>
    <method name="_exit(int):void"/>
    <method name="_flsbuf(int;FILE*):int"/>
    <method name="_gcvt(double;int;char*):char*"/>
    <method name="_host_page_size(host_t;vm_size_t*):kern_return_t"/>
    <method name="_i64toa(long long;char*;int):char*"/>
    <method name="_i64tow(long long;wchar_t*;int):wchar_t*"/>
    <method name="_itoa(int;char*;int):char*"/>
    <method name="_itow(int;wchar_t*;int):wchar_t*"/>
    <method name="_kernelrpc_mach_port_allocate_trap(mach_port_name_t;mach_port_right_t;mach_port_name_t*):kern_return_t"/>
    <method name="_kernelrpc_mach_port_deallocate_trap(mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_destroy_trap(mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_extract_member_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_insert_member_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_insert_right_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t;mach_msg_type_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_mod_refs_trap(mach_port_name_t;mach_port_name_t;mach_port_right_t;mach_port_delta_t):kern_return_t"/>
    <method name="_kernelrpc_mach_port_move_member_trap(mach_port_name_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="_kernelrpc_mach_vm_allocate_trap(mach_port_name_t;mach_vm_offset_t*;mach_vm_size_t;int):kern_return_t"/>
    <method name="_kernelrpc_mach_vm_deallocate_trap(mach_port_name_t;mach_vm_address_t;mach_vm_size_t):kern_return_t"/>
    <method name="_kernelrpc_mach_vm_protect_trap(mach_port_name_t;mach_vm_address_t;mach_vm_size_t;boolean_t;vm_prot_t):kern_return_t"/>
    <method name="_lcl_configure_by_text(uint32_t;const const char**;_lcl_level_narrow_t*;const char*;_lcl_level_t):uint32_t"/>
    <method name="_longjmp(int*;int):void"/>
    <method name="_ltoa(long;char*;int):char*"/>
    <method name="_ltow(long;wchar_t*;int):wchar_t*"/>
    <method name="_makeDateFormatter(NSDateFormatterStyle;NSDateFormatterStyle):NSDateFormatter*"/>
    <method name="_mbccpy(unsigned char*;const unsigned char*):void"/>
    <method name="_mbscat(unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbscpy(unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbsdec(const unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbsinc(const unsigned char*):unsigned char*"/>
    <method name="_mbslen(const unsigned char*):size_t"/>
    <method name="_mbsnbcat(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsnbcpy(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsncat(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsncpy(unsigned char*;const unsigned char*;size_t):unsigned char*"/>
    <method name="_mbsnextc(const unsigned char*):unsigned int"/>
    <method name="_mbsnset(unsigned char*;unsigned int;size_t):unsigned char*"/>
    <method name="_mbsrev(unsigned char*):unsigned char*"/>
    <method name="_mbsset(unsigned char*;unsigned int):unsigned char*"/>
    <method name="_mbsstr(const unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mbstok(unsigned char*;const unsigned char*):unsigned char*"/>
    <method name="_mkdir(const char*):int"/>
    <method name="_objc_flush_caches(Class*):void"/>
    <method name="_objc_msgForward(id;SEL, ...):id"/>
    <method name="_objc_msgForward_stret(id;SEL, ...):void"/>
    <method name="_objc_resolve_categories_for_class(Class*):void"/>
    <method name="_open(const char*;int, ...):int"/>
    <method name="_ossl_096_des_random_seed(DES_cblock*):void"/>
    <method name="_ossl_old_crypt(const char*;const char*):char*"/>
    <method name="_ossl_old_des_cbc_cksum(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):unsigned long"/>
    <method name="_ossl_old_des_cbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_cfb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*;int):void"/>
    <method name="_ossl_old_des_cfb_encrypt(unsigned char*;unsigned char*;int;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_crypt(const char*;const char*):char*"/>
    <method name="_ossl_old_des_decrypt3(unsigned long*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*):void"/>
    <method name="_ossl_old_des_ecb3_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_ecb_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_ede3_cbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_ede3_cfb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*;int):void"/>
    <method name="_ossl_old_des_ede3_ofb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*):void"/>
    <method name="_ossl_old_des_enc_read(int;char*;int;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):int"/>
    <method name="_ossl_old_des_enc_write(int;char*;int;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):int"/>
    <method name="_ossl_old_des_encrypt(unsigned long*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_encrypt2(unsigned long*;_ossl_old_des_ks_struct*;int):void"/>
    <method name="_ossl_old_des_encrypt3(unsigned long*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*;_ossl_old_des_ks_struct*):void"/>
    <method name="_ossl_old_des_fcrypt(const char*;const char*;char*):char*"/>
    <method name="_ossl_old_des_is_weak_key(_ossl_old_des_cblock*):int"/>
    <method name="_ossl_old_des_key_sched(_ossl_old_des_cblock*;_ossl_old_des_ks_struct*):int"/>
    <method name="_ossl_old_des_ncbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_ofb64_encrypt(unsigned char*;unsigned char*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int*):void"/>
    <method name="_ossl_old_des_ofb_encrypt(unsigned char*;unsigned char*;int;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_options():const char*"/>
    <method name="_ossl_old_des_pcbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_quad_cksum(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;int;_ossl_old_des_cblock*):unsigned long"/>
    <method name="_ossl_old_des_random_key(unsigned char*):void"/>
    <method name="_ossl_old_des_random_seed(unsigned char*):void"/>
    <method name="_ossl_old_des_read_2passwords(_ossl_old_des_cblock*;_ossl_old_des_cblock*;const char*;int):int"/>
    <method name="_ossl_old_des_read_password(_ossl_old_des_cblock*;const char*;int):int"/>
    <method name="_ossl_old_des_read_pw(char*;char*;int;const char*;int):int"/>
    <method name="_ossl_old_des_read_pw_string(char*;int;const char*;int):int"/>
    <method name="_ossl_old_des_set_key(_ossl_old_des_cblock*;_ossl_old_des_ks_struct*):int"/>
    <method name="_ossl_old_des_set_odd_parity(_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_string_to_2keys(char*;_ossl_old_des_cblock*;_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_string_to_key(char*;_ossl_old_des_cblock*):void"/>
    <method name="_ossl_old_des_xcbc_encrypt(_ossl_old_des_cblock*;_ossl_old_des_cblock*;long;_ossl_old_des_ks_struct*;_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_cblock*;int):void"/>
    <method name="_ossl_old_des_xwhite_in2out(_ossl_old_des_cblock*;_ossl_old_des_cblock*;_ossl_old_des_cblock*):void"/>
    <method name="_printf():int"/>
    <method name="_putenv(const char*):int"/>
    <method name="_putenv_s(const char*;const char*):errno_t"/>
    <method name="_res_9_h_errno_set(struct __res_9_state*;int):void"/>
    <method name="_rmdir(const char*):int"/>
    <method name="_searchenv(const char*;const char*; char*):void"/>
    <method name="_searchenv_s(const char*;const char*; char*;size_t):errno_t"/>
    <method name="_setjmp(int*):int"/>
    <method name="_snprintf(char*;size_t;const char*, ...):int"/>
    <method name="_snwprintf(wchar_t*;size_t;const wchar_t*, ...):int"/>
    <method name="_stat(const char*;_stat*):int"/>
    <method name="_stat64(const char*;__stat64*):int"/>
    <method name="_stati64(const char*;_stati64*):int"/>
    <method name="_tcscat(tchar_t *; const tchar_t *): tchar_t *"/>
    <method name="_tcscpy(tchar_t *; const tchar_t *): tchar_t *"/>
    <method name="_tcsncat(char*;const char*;size_t):char*"/>
    <method name="_tcsncpy(char*;const char*;size_t):char*"/>
    <method name="_timeString(NSDate*):NSString*"/>
    <method name="_tscanf(const char *format ...): int"/>
    <method name="_ui64toa(unsigned long long;char*;int):char*"/>
    <method name="_ui64tow(unsigned long long;wchar_t*;int):wchar_t*"/>
    <method name="_ultoa(unsigned long;char*;int):char*"/>
    <method name="_ultow(unsigned long;wchar_t*;int):wchar_t*"/>
    <method name="_unlink(const char*):int"/>
    <method name="_utime(const char*;_utimbuf*):int"/>
    <method name="_utime64(const char*;__utimbuf64*):int"/>
    <method name="_waccess(const wchar_t*;int):int"/>
    <method name="_wdupenv_s(wchar_t **;size_t*;const wchar_t*):errno_t"/>
    <method name="_wexecl(const wchar_t*;const wchar_t*, ...):intptr_t"/>
    <method name="_wexecle(const wchar_t*;const wchar_t*, ...):intptr_t"/>
    <method name="_wexecv(const wchar_t*;const const wchar_t**):intptr_t"/>
    <method name="_wexecve(const wchar_t*;const const wchar_t**;const const wchar_t**):intptr_t"/>
    <method name="_wexecvp(const wchar_t*;const const wchar_t**):intptr_t"/>
    <method name="_wexecvpe(const wchar_t*;const const wchar_t**;const const wchar_t**):intptr_t"/>
    <method name="_wfopen(const wchar_t*;const wchar_t*):FILE*"/>
    <method name="_wfreopen(const wchar_t*;const wchar_t*;FILE*):FILE*"/>
    <method name="_wgetenv(const wchar_t*):wchar_t*"/>
    <method name="_wgetenv_s(size_t*;wchar_t*;size_t;const wchar_t*):errno_t"/>
    <method name="_wmkdir(const wchar_t*):int"/>
    <method name="_wopen(const wchar_t*;int, ...):int"/>
    <method name="_wputenv(const wchar_t*):int"/>
    <method name="_wputenv_s(const wchar_t*;const wchar_t*):errno_t"/>
    <method name="_wrmdir(const wchar_t*):int"/>
    <method name="_wsearchenv(const wchar_t*;const wchar_t*;wchar_t*):void"/>
    <method name="_wsearchenv_s(const wchar_t*;const wchar_t*; wchar_t*;size_t):errno_t"/>
    <method name="_wstat(const wchar_t*;_stat*):int"/>
    <method name="_wstat64(const wchar_t*;__stat64*):int"/>
    <method name="_wstati64(const wchar_t*;_stati64*):int"/>
    <method name="_wunlink(const wchar_t*):int"/>
    <method name="_wutime(const wchar_t*;_utimbuf*):int"/>
    <method name="_wutime64(const wchar_t*;__utimbuf64*):int"/>
    <method name="_yppasswd(char*;struct x_passwd*):int"/>
    <method name="a2d_ASN1_OBJECT(unsigned char*;int;const char*;int):int"/>
    <method name="a2i_ASN1_ENUMERATED(BIO*;ASN1_ENUMERATED*;char*;int):int"/>
    <method name="a2i_ASN1_INTEGER(BIO*;ASN1_INTEGER*;char*;int):int"/>
    <method name="a2i_ASN1_STRING(BIO*;ASN1_STRING*;char*;int):int"/>
    <method name="a2i_IPADDRESS(const char*):ASN1_OCTET_STRING*"/>
    <method name="a2i_IPADDRESS_NC(const char*):ASN1_OCTET_STRING*"/>
    <method name="a64l(const char*):long"/>
    <method name="abort():void"/>
    <method name="abs(double):double"/>
    <method name="abs(float):float"/>
    <method name="abs(int):int"/>
    <method name="abs(long double):long double"/>
    <method name="accept(SOCKET;sockaddr*;int*):SOCKET"/>
    <method name="accept(int;sockaddr*;socklen_t*):int"/>
    <method name="accept(int;struct sockaddr*;socklen_t*):int"/>
    <method name="access(const char*;int):int"/>
    <method name="accessx_np(const struct accessx_descriptor*;size_t;int*;uid_t):int"/>
    <method name="acct(const char*):int"/>
    <method name="acl_add_flag_np(acl_flagset_t;acl_flag_t):int"/>
    <method name="acl_add_perm(acl_permset_t;acl_perm_t):int"/>
    <method name="acl_calc_mask(acl_t*):int"/>
    <method name="acl_clear_flags_np(acl_flagset_t):int"/>
    <method name="acl_clear_perms(acl_permset_t):int"/>
    <method name="acl_copy_entry(acl_entry_t;acl_entry_t):int"/>
    <method name="acl_copy_ext(void*;acl_t;int):int"/>
    <method name="acl_copy_ext_native(void*;acl_t;int):int"/>
    <method name="acl_copy_int(const void*):acl_t"/>
    <method name="acl_copy_int_native(const void*):acl_t"/>
    <method name="acl_create_entry(acl_t*;acl_entry_t*):int"/>
    <method name="acl_create_entry_np(acl_t*;acl_entry_t*;int):int"/>
    <method name="acl_delete_def_file(const char*):int"/>
    <method name="acl_delete_entry(acl_t;acl_entry_t):int"/>
    <method name="acl_delete_flag_np(acl_flagset_t;acl_flag_t):int"/>
    <method name="acl_delete_perm(acl_permset_t;acl_perm_t):int"/>
    <method name="acl_dup(acl_t):acl_t"/>
    <method name="acl_free(void*):int"/>
    <method name="acl_from_text(const char*):acl_t"/>
    <method name="acl_get_entry(acl_t;int;acl_entry_t*):int"/>
    <method name="acl_get_fd(int):acl_t"/>
    <method name="acl_get_fd_np(int;acl_type_t):acl_t"/>
    <method name="acl_get_file(const char*;acl_type_t):acl_t"/>
    <method name="acl_get_flag_np(acl_flagset_t;acl_flag_t):int"/>
    <method name="acl_get_flagset_np(void*;acl_flagset_t*):int"/>
    <method name="acl_get_link_np(const char*;acl_type_t):acl_t"/>
    <method name="acl_get_perm_np(acl_permset_t;acl_perm_t):int"/>
    <method name="acl_get_permset(acl_entry_t;acl_permset_t*):int"/>
    <method name="acl_get_permset_mask_np(acl_entry_t;acl_permset_mask_t*):int"/>
    <method name="acl_get_qualifier(acl_entry_t):void*"/>
    <method name="acl_get_tag_type(acl_entry_t;acl_tag_t*):int"/>
    <method name="acl_init(int):acl_t"/>
    <method name="acl_maximal_permset_mask_np(acl_permset_mask_t*):int"/>
    <method name="acl_set_fd(int;acl_t):int"/>
    <method name="acl_set_fd_np(int;acl_t;acl_type_t):int"/>
    <method name="acl_set_file(const char*;acl_type_t;acl_t):int"/>
    <method name="acl_set_flagset_np(void*;acl_flagset_t):int"/>
    <method name="acl_set_link_np(const char*;acl_type_t;acl_t):int"/>
    <method name="acl_set_permset(acl_entry_t;acl_permset_t):int"/>
    <method name="acl_set_permset_mask_np(acl_entry_t;acl_permset_mask_t):int"/>
    <method name="acl_set_qualifier(acl_entry_t;const void*):int"/>
    <method name="acl_set_tag_type(acl_entry_t;acl_tag_t):int"/>
    <method name="acl_size(acl_t):int"/>
    <method name="acl_to_text(acl_t;int*):char*"/>
    <method name="acl_valid(acl_t):int"/>
    <method name="acl_valid_fd_np(int;acl_type_t;acl_t):int"/>
    <method name="acl_valid_file_np(const char*;acl_type_t;acl_t):int"/>
    <method name="acl_valid_link_np(const char*;acl_type_t;acl_t):int"/>
    <method name="acos(double):double"/>
    <method name="acos(float):float"/>
    <method name="acos(long double):long double"/>
    <method name="acosf(float):float"/>
    <method name="acosh(double):double"/>
    <method name="acoshf(float):float"/>
    <method name="acoshl(long double):long double"/>
    <method name="acosl(long double):long double"/>
    <method name="act_get_state(thread_act_t;int;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="act_set_state(thread_act_t;int;thread_state_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="addRoundedRectToPath(CGContextRef;CGRect;float;float):void"/>
    <method name="add_data_in_datablock(linkedlist_data*;const void*;uLong):int"/>
    <method name="add_profil(char*;size_t;unsigned long;unsigned int):int"/>
    <method name="addr2ascii(int;const void*;int;char*):char*"/>
    <method name="addrsel_policy_init():void"/>
    <method name="adjtime(const struct timeval*;struct timeval*):int"/>
    <method name="adler32(uLong;const Bytef*;uInt):uLong"/>
    <method name="adler32_combine(uLong;uLong;long):uLong"/>
    <method name="aio_cancel(int;struct aiocb*):int"/>
    <method name="aio_error(const struct aiocb*):int"/>
    <method name="aio_fsync(int;struct aiocb*):int"/>
    <method name="aio_read(struct aiocb*):int"/>
    <method name="aio_return(struct aiocb*):ssize_t"/>
    <method name="aio_suspend(const const struct aiocb**;int;const struct timespec*):int"/>
    <method name="aio_write(struct aiocb*):int"/>
    <method name="alBuffer3f(ALuint;ALenum;ALfloat;ALfloat;ALfloat):void"/>
    <method name="alBuffer3i(ALuint;ALenum;ALint;ALint;ALint):void"/>
    <method name="alBufferData(ALuint;ALenum;const ALvoid*;ALsizei;ALsizei):void"/>
    <method name="alBufferf(ALuint;ALenum;ALfloat):void"/>
    <method name="alBufferfv(ALuint;ALenum;const ALfloat*):void"/>
    <method name="alBufferi(ALuint;ALenum;ALint):void"/>
    <method name="alBufferiv(ALuint;ALenum;const ALint*):void"/>
    <method name="alDeleteBuffers(ALsizei;const ALuint*):void"/>
    <method name="alDeleteSources(ALsizei;const ALuint*):void"/>
    <method name="alDisable(ALenum):void"/>
    <method name="alDistanceModel(ALenum):void"/>
    <method name="alDopplerFactor(ALfloat):void"/>
    <method name="alDopplerVelocity(ALfloat):void"/>
    <method name="alEnable(ALenum):void"/>
    <method name="alGenBuffers(ALsizei;ALuint*):void"/>
    <method name="alGenSources(ALsizei;ALuint*):void"/>
    <method name="alGetBoolean(ALenum):ALboolean"/>
    <method name="alGetBooleanv(ALenum;ALboolean*):void"/>
    <method name="alGetBuffer3f(ALuint;ALenum;ALfloat*;ALfloat*;ALfloat*):void"/>
    <method name="alGetBuffer3i(ALuint;ALenum;ALint*;ALint*;ALint*):void"/>
    <method name="alGetBufferf(ALuint;ALenum;ALfloat*):void"/>
    <method name="alGetBufferfv(ALuint;ALenum;ALfloat*):void"/>
    <method name="alGetBufferi(ALuint;ALenum;ALint*):void"/>
    <method name="alGetBufferiv(ALuint;ALenum;ALint*):void"/>
    <method name="alGetDouble(ALenum):ALdouble"/>
    <method name="alGetDoublev(ALenum;ALdouble*):void"/>
    <method name="alGetEnumValue(const ALchar*):ALenum"/>
    <method name="alGetError():ALenum"/>
    <method name="alGetFloat(ALenum):ALfloat"/>
    <method name="alGetFloatv(ALenum;ALfloat*):void"/>
    <method name="alGetInteger(ALenum):ALint"/>
    <method name="alGetIntegerv(ALenum;ALint*):void"/>
    <method name="alGetListener3f(ALenum;ALfloat*;ALfloat*;ALfloat*):void"/>
    <method name="alGetListener3i(ALenum;ALint*;ALint*;ALint*):void"/>
    <method name="alGetListenerf(ALenum;ALfloat*):void"/>
    <method name="alGetListenerfv(ALenum;ALfloat*):void"/>
    <method name="alGetListeneri(ALenum;ALint*):void"/>
    <method name="alGetListeneriv(ALenum;ALint*):void"/>
    <method name="alGetProcAddress(const ALchar*):void*"/>
    <method name="alGetSource3f(ALuint;ALenum;ALfloat*;ALfloat*;ALfloat*):void"/>
    <method name="alGetSource3i(ALuint;ALenum;ALint*;ALint*;ALint*):void"/>
    <method name="alGetSourcef(ALuint;ALenum;ALfloat*):void"/>
    <method name="alGetSourcefv(ALuint;ALenum;ALfloat*):void"/>
    <method name="alGetSourcei(ALuint;ALenum;ALint*):void"/>
    <method name="alGetSourceiv(ALuint;ALenum;ALint*):void"/>
    <method name="alGetString(ALenum):const ALchar*"/>
    <method name="alIsBuffer(ALuint):ALboolean"/>
    <method name="alIsEnabled(ALenum):ALboolean"/>
    <method name="alIsExtensionPresent(const ALchar*):ALboolean"/>
    <method name="alIsSource(ALuint):ALboolean"/>
    <method name="alListener3f(ALenum;ALfloat;ALfloat;ALfloat):void"/>
    <method name="alListener3i(ALenum;ALint;ALint;ALint):void"/>
    <method name="alListenerf(ALenum;ALfloat):void"/>
    <method name="alListenerfv(ALenum;const ALfloat*):void"/>
    <method name="alListeneri(ALenum;ALint):void"/>
    <method name="alListeneriv(ALenum;const ALint*):void"/>
    <method name="alSource3f(ALuint;ALenum;ALfloat;ALfloat;ALfloat):void"/>
    <method name="alSource3i(ALuint;ALenum;ALint;ALint;ALint):void"/>
    <method name="alSourcePause(ALuint):void"/>
    <method name="alSourcePausev(ALsizei;const ALuint*):void"/>
    <method name="alSourcePlay(ALuint):void"/>
    <method name="alSourcePlayv(ALsizei;const ALuint*):void"/>
    <method name="alSourceQueueBuffers(ALuint;ALsizei;const ALuint*):void"/>
    <method name="alSourceRewind(ALuint):void"/>
    <method name="alSourceRewindv(ALsizei;const ALuint*):void"/>
    <method name="alSourceStop(ALuint):void"/>
    <method name="alSourceStopv(ALsizei;const ALuint*):void"/>
    <method name="alSourceUnqueueBuffers(ALuint;ALsizei;ALuint*):void"/>
    <method name="alSourcef(ALuint;ALenum;ALfloat):void"/>
    <method name="alSourcefv(ALuint;ALenum;const ALfloat*):void"/>
    <method name="alSourcei(ALuint;ALenum;ALint):void"/>
    <method name="alSourceiv(ALuint;ALenum;const ALint*):void"/>
    <method name="alSpeedOfSound(ALfloat):void"/>
    <method name="alarm(unsigned int):unsigned int"/>
    <method name="alcCaptureCloseDevice(ALCdevice*):ALCboolean"/>
    <method name="alcCaptureOpenDevice(const ALCchar*;ALCuint;ALCenum;ALCsizei):ALCdevice*"/>
    <method name="alcCaptureSamples(ALCdevice*;ALCvoid*;ALCsizei):void"/>
    <method name="alcCaptureStart(ALCdevice*):void"/>
    <method name="alcCaptureStop(ALCdevice*):void"/>
    <method name="alcCloseDevice(ALCdevice*):ALCboolean"/>
    <method name="alcCreateContext(ALCdevice*;const ALCint*):ALCcontext*"/>
    <method name="alcDestroyContext(ALCcontext*):void"/>
    <method name="alcGetContextsDevice(ALCcontext*):ALCdevice*"/>
    <method name="alcGetCurrentContext():ALCcontext*"/>
    <method name="alcGetEnumValue(ALCdevice*;const ALCchar*):ALCenum"/>
    <method name="alcGetError(ALCdevice*):ALCenum"/>
    <method name="alcGetIntegerv(ALCdevice*;ALCenum;ALCsizei;ALCint*):void"/>
    <method name="alcGetProcAddress(ALCdevice*;const ALCchar*):void*"/>
    <method name="alcGetString(ALCdevice*;ALCenum):const ALCchar*"/>
    <method name="alcIsExtensionPresent(ALCdevice*;const ALCchar*):ALCboolean"/>
    <method name="alcMakeContextCurrent(ALCcontext*):ALCboolean"/>
    <method name="alcOpenDevice(const ALCchar*):ALCdevice*"/>
    <method name="alcProcessContext(ALCcontext*):void"/>
    <method name="alcSuspendContext(ALCcontext*):void"/>
    <method name="alloca(size_t):void*"/>
    <method name="allocate_new_datablock():linkedlist_datablock_internal*"/>
    <method name="alphasort(const struct dirent**;const struct dirent**):int"/>
    <method name="arc4random():u_int32_t"/>
    <method name="arc4random_addrandom(unsigned char*;int):void"/>
    <method name="arc4random_buf(void*;size_t):void"/>
    <method name="arc4random_stir():void"/>
    <method name="arc4random_uniform(u_int32_t):u_int32_t"/>
    <method name="asc2uni(const char*;int;unsigned char**;int*):unsigned char*"/>
    <method name="ascii2addr(int;const char*;void*):int"/>
    <method name="asctime(const struct tm*):char*"/>
    <method name="asctime_r(const struct tm*;char*):char*"/>
    <method name="asin(double):double"/>
    <method name="asin(float):float"/>
    <method name="asin(long double):long double"/>
    <method name="asinf(float):float"/>
    <method name="asinh(double):double"/>
    <method name="asinhf(float):float"/>
    <method name="asinhl(long double):long double"/>
    <method name="asinl(long double):long double"/>
    <method name="asl_add_log_file(aslclient;int):int"/>
    <method name="asl_close(aslclient):void"/>
    <method name="asl_close_auxiliary_file(int):int"/>
    <method name="asl_create_auxiliary_file(aslmsg;const char*;const char*;int*):int"/>
    <method name="asl_free(aslmsg):void"/>
    <method name="asl_get(aslmsg;const char*):const char*"/>
    <method name="asl_key(aslmsg;uint32_t):const char*"/>
    <method name="asl_log(aslclient;aslmsg;int;const char*, ...):int"/>
    <method name="asl_log_auxiliary_location(aslmsg;const char*;const char*;const char*):int"/>
    <method name="asl_log_descriptor(aslclient;aslmsg;int;int;uint32_t):int"/>
    <method name="asl_new(uint32_t):aslmsg"/>
    <method name="asl_open(const char*;const char*;uint32_t):aslclient"/>
    <method name="asl_open_from_file(int;const char*;const char*):aslclient"/>
    <method name="asl_remove_log_file(aslclient;int):int"/>
    <method name="asl_search(aslclient;aslmsg):aslresponse"/>
    <method name="asl_send(aslclient;aslmsg):int"/>
    <method name="asl_set(aslmsg;const char*;const char*):int"/>
    <method name="asl_set_filter(aslclient;int):int"/>
    <method name="asl_set_query(aslmsg;const char*;const char*;uint32_t):int"/>
    <method name="asl_unset(aslmsg;const char*):int"/>
    <method name="asl_vlog(aslclient;aslmsg;int;const char*;va_list):int"/>
    <method name="aslresponse_free(aslresponse):void"/>
    <method name="aslresponse_next(aslresponse):aslmsg"/>
    <method name="asn1_Finish(ASN1_CTX*):int"/>
    <method name="asn1_GetSequence(ASN1_const_CTX*;long*):int"/>
    <method name="asn1_add_error(const unsigned char*;int):void"/>
    <method name="asn1_const_Finish(ASN1_const_CTX*):int"/>
    <method name="asn1_do_adb(ASN1_VALUE**;const ASN1_TEMPLATE*;int):const ASN1_TEMPLATE*"/>
    <method name="asn1_do_lock(ASN1_VALUE**;int;const ASN1_ITEM*):int"/>
    <method name="asn1_enc_free(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="asn1_enc_init(ASN1_VALUE**;const ASN1_ITEM*):void"/>
    <method name="asn1_enc_restore(int*;unsigned char**;ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="asn1_enc_save(ASN1_VALUE**;const unsigned char*;int;const ASN1_ITEM*):int"/>
    <method name="asn1_ex_c2i(ASN1_VALUE**;const unsigned char*;int;int;char*;const ASN1_ITEM*):int"/>
    <method name="asn1_ex_i2c(ASN1_VALUE**;unsigned char*;int*;const ASN1_ITEM*):int"/>
    <method name="asn1_get_choice_selector(ASN1_VALUE**;const ASN1_ITEM*):int"/>
    <method name="asn1_get_field_ptr(ASN1_VALUE**;const ASN1_TEMPLATE*):ASN1_VALUE**"/>
    <method name="asn1_set_choice_selector(ASN1_VALUE**;int;const ASN1_ITEM*):int"/>
    <method name="asprintf(char**;const char*, ...):int"/>
    <method name="atan(double):double"/>
    <method name="atan(float):float"/>
    <method name="atan(long double):long double"/>
    <method name="atan2(double;double):double"/>
    <method name="atan2(float;float):float"/>
    <method name="atan2(long double;long double):long double"/>
    <method name="atan2f(float;float):float"/>
    <method name="atan2l(long double;long double):long double"/>
    <method name="atanf(float):float"/>
    <method name="atanh(double):double"/>
    <method name="atanhf(float):float"/>
    <method name="atanhl(long double):long double"/>
    <method name="atanl(long double):long double"/>
    <method name="atexit((*)():void):int"/>
    <method name="atexit_b((^)():void):int"/>
    <method name="atof(const char*):double"/>
    <method name="atoi(const char*):int"/>
    <method name="atoi_l(const char*;int):int"/>
    <method name="atol(const char*):long"/>
    <method name="atol_l(const char*;int):long"/>
    <method name="atoll(const char*):long long"/>
    <method name="atoll_l(const char*;int):long long"/>
    <method name="au_bsm_to_domain(u_short;int*):int"/>
    <method name="au_bsm_to_errno(u_char;int*):int"/>
    <method name="au_bsm_to_fcntl_cmd(u_short;int*):int"/>
    <method name="au_bsm_to_socket_type(u_short;int*):int"/>
    <method name="au_domain_to_bsm(int):u_short"/>
    <method name="au_errno_to_bsm(int):u_char"/>
    <method name="au_fcntl_cmd_to_bsm(int):u_short"/>
    <method name="au_fetch_tok(tokenstr_t*;u_char*;int):int"/>
    <method name="au_free_token(token_t*):void"/>
    <method name="au_get_state():int"/>
    <method name="au_notify_initialize():uint32_t"/>
    <method name="au_notify_terminate():int"/>
    <method name="au_poltostr(int;size_t;char*):ssize_t"/>
    <method name="au_preselect(au_event_t;au_mask_t*;int;int):int"/>
    <method name="au_print_flags_tok(FILE*;tokenstr_t*;char*;int):void"/>
    <method name="au_print_tok(FILE*;tokenstr_t*;char*;char;char):void"/>
    <method name="au_print_tok_xml(FILE*;tokenstr_t*;char*;char;char):void"/>
    <method name="au_print_xml_footer(FILE*):void"/>
    <method name="au_print_xml_header(FILE*):void"/>
    <method name="au_read_rec(FILE*;u_char**):int"/>
    <method name="au_sdev_close(au_sdev_handle_t*):int"/>
    <method name="au_sdev_fd(au_sdev_handle_t*):int"/>
    <method name="au_sdev_open(int):au_sdev_handle_t*"/>
    <method name="au_sdev_read_aia(au_sdev_handle_t*;int*;auditinfo_addr_t*):int"/>
    <method name="au_sflagstostr(uint64_t;size_t;char*):ssize_t"/>
    <method name="au_socket_type_to_bsm(int):u_short"/>
    <method name="au_strerror(u_char):const char*"/>
    <method name="au_strtopol(const char*;int*):int"/>
    <method name="au_strtosflags(const char*;uint64_t*):int"/>
    <method name="au_user_mask(char*;au_mask_t*):int"/>
    <method name="audit(const void*;int):int"/>
    <method name="audit_filter_getcookie(void*;void**):void"/>
    <method name="audit_filter_setcookie(void*;void*):void"/>
    <method name="audit_get_car(char*;size_t):int"/>
    <method name="audit_get_class(au_evclass_map_t*;size_t):int"/>
    <method name="audit_get_cond(int*):int"/>
    <method name="audit_get_cwd(char*;size_t):int"/>
    <method name="audit_get_fsize(au_fstat_t*;size_t):int"/>
    <method name="audit_get_kaudit(auditinfo_addr_t*;size_t):int"/>
    <method name="audit_get_kmask(au_mask_t*;size_t):int"/>
    <method name="audit_get_pinfo(auditpinfo_t*;size_t):int"/>
    <method name="audit_get_pinfo_addr(auditpinfo_addr_t*;size_t):int"/>
    <method name="audit_get_policy(int*):int"/>
    <method name="audit_get_qctrl(au_qctrl_t*;size_t):int"/>
    <method name="audit_get_sflags(uint64_t*):int"/>
    <method name="audit_get_sflags_mask(const char*;uint64_t*):int"/>
    <method name="audit_get_sinfo_addr(auditinfo_addr_t*;size_t):int"/>
    <method name="audit_get_stat(au_stat_t*;size_t):int"/>
    <method name="audit_send_trigger(int*):int"/>
    <method name="audit_session_join(mach_port_name_t):au_asid_t"/>
    <method name="audit_session_port(au_asid_t;mach_port_name_t*):int"/>
    <method name="audit_session_self():mach_port_name_t"/>
    <method name="audit_set_class(au_evclass_map_t*;size_t):int"/>
    <method name="audit_set_cond(int*):int"/>
    <method name="audit_set_fsize(au_fstat_t*;size_t):int"/>
    <method name="audit_set_kaudit(auditinfo_addr_t*;size_t):int"/>
    <method name="audit_set_kmask(au_mask_t*;size_t):int"/>
    <method name="audit_set_pmask(auditpinfo_t*;size_t):int"/>
    <method name="audit_set_policy(int*):int"/>
    <method name="audit_set_qctrl(au_qctrl_t*;size_t):int"/>
    <method name="audit_set_sflags(uint64_t):int"/>
    <method name="audit_set_sflags_mask(const char*;uint64_t):int"/>
    <method name="audit_set_stat(au_stat_t*;size_t):int"/>
    <method name="audit_set_terminal_id(au_tid_t*):int"/>
    <method name="audit_submit(short;au_id_t;char;int;const char*, ...):int"/>
    <method name="audit_token_to_au32(audit_token_t;uid_t*;uid_t*;gid_t*;uid_t*;gid_t*;pid_t*;au_asid_t*;au_tid_t*):void"/>
    <method name="audit_write(short;token_t*;token_t*;char;int):int"/>
    <method name="audit_write_failure(short;char*;int;au_id_t;uid_t;gid_t;uid_t;gid_t;pid_t;au_asid_t;au_tid_t*):int"/>
    <method name="audit_write_failure_na(short;char*;int;uid_t;gid_t;pid_t;au_tid_t*):int"/>
    <method name="audit_write_failure_self(short;char*;int):int"/>
    <method name="audit_write_success(short;token_t*;au_id_t;uid_t;gid_t;uid_t;gid_t;pid_t;au_asid_t;au_tid_t*):int"/>
    <method name="audit_write_success_self(short;token_t*):int"/>
    <method name="auditctl(const char*):int"/>
    <method name="auditon(int;void*;int):int"/>
    <method name="authdes_create(char*;unsigned int;struct sockaddr_in*;des_block*):AUTH*"/>
    <method name="authnone_create():AUTH*"/>
    <method name="authunix_create(char*;int;int;int;int*):AUTH*"/>
    <method name="authunix_create_default():AUTH*"/>
    <method name="backtrace(void**;int):int"/>
    <method name="backtrace_symbols(const void**;int):char**"/>
    <method name="backtrace_symbols_fd(const void**;int;int):void"/>
    <method name="basename(char*):char*"/>
    <method name="bcmp(const void*;const void*;size_t):int"/>
    <method name="bcopy(const void*;void*;size_t):void"/>
    <method name="bind(SOCKET;const sockaddr*;int):int"/>
    <method name="bind(int;const sockaddr*;socklen_t):int"/>
    <method name="bind(int;const struct sockaddr*;socklen_t):int"/>
    <method name="bindresvport(int;struct sockaddr_in*):int"/>
    <method name="bindresvport_sa(int;struct sockaddr*):int"/>
    <method name="bn_add_words(unsigned long*;const unsigned long*;const unsigned long*;int):unsigned long"/>
    <method name="bn_div_words(unsigned long;unsigned long;unsigned long):unsigned long"/>
    <method name="bn_dup_expand(const BIGNUM*;int):BIGNUM*"/>
    <method name="bn_expand2(BIGNUM*;int):BIGNUM*"/>
    <method name="bn_mul_add_words(unsigned long*;const unsigned long*;int;unsigned long):unsigned long"/>
    <method name="bn_mul_words(unsigned long*;const unsigned long*;int;unsigned long):unsigned long"/>
    <method name="bn_sqr_words(unsigned long*;const unsigned long*;int):void"/>
    <method name="bn_sub_words(unsigned long*;const unsigned long*;const unsigned long*;int):unsigned long"/>
    <method name="bootparamproc_getfile_1(bp_getfile_arg*;CLIENT*):bp_getfile_res*"/>
    <method name="bootparamproc_getfile_1_svc(bp_getfile_arg*;struct svc_req*):bp_getfile_res*"/>
    <method name="bootparamproc_whoami_1(bp_whoami_arg*;CLIENT*):bp_whoami_res*"/>
    <method name="bootparamproc_whoami_1_svc(bp_whoami_arg*;struct svc_req*):bp_whoami_res*"/>
    <method name="brk(const void*):void*"/>
    <method name="bsd_signal(int;(*)(int):void):(*)(int):void"/>
    <method name="bsearch(const void*;const void*;size_t;size_t;(*)(const void*;const void*):int):void*"/>
    <method name="bsearch_b(const void*;const void*;size_t;size_t;(^)(const void*;const void*):int):void*"/>
    <method name="btowc(int):wint_t"/>
    <method name="buildPreviewTables(int;int;int):int"/>
    <method name="bzero(void*;size_t):void"/>
    <method name="c2i_ASN1_BIT_STRING(ASN1_BIT_STRING**;const unsigned char**;long):ASN1_BIT_STRING*"/>
    <method name="c2i_ASN1_INTEGER(ASN1_INTEGER**;const unsigned char**;long):ASN1_INTEGER*"/>
    <method name="c2i_ASN1_OBJECT(ASN1_OBJECT**;const unsigned char**;long):ASN1_OBJECT*"/>
    <method name="cabs(_Complex double):double"/>
    <method name="cabsf(_Complex float):float"/>
    <method name="cabsl(_Complex long double):long double"/>
    <method name="cache_create(const char*;cache_attributes_t*;cache_t**):int"/>
    <method name="cache_destroy(cache_t*):int"/>
    <method name="cache_get_and_retain(cache_t*;void*;void**):int"/>
    <method name="cache_hash_byte_string(const char*;size_t):uintptr_t"/>
    <method name="cache_key_hash_cb_cstring(void*;void*):uintptr_t"/>
    <method name="cache_key_hash_cb_integer(void*;void*):uintptr_t"/>
    <method name="cache_key_is_equal_cb_cstring(void*;void*;void*):_Bool"/>
    <method name="cache_key_is_equal_cb_integer(void*;void*;void*):_Bool"/>
    <method name="cache_release_cb_free(void*;void*):void"/>
    <method name="cache_release_value(cache_t*;void*):int"/>
    <method name="cache_remove(cache_t*;void*):int"/>
    <method name="cache_remove_all(cache_t*):int"/>
    <method name="cache_set_and_retain(cache_t*;void*;void*;cache_cost_t):int"/>
    <method name="cache_value_make_nonpurgeable_cb(void*;void*):_Bool"/>
    <method name="cache_value_make_purgeable_cb(void*;void*):void"/>
    <method name="cacos(_Complex double):_Complex double"/>
    <method name="cacosf(_Complex float):_Complex float"/>
    <method name="cacosh(_Complex double):_Complex double"/>
    <method name="cacoshf(_Complex float):_Complex float"/>
    <method name="cacoshl(_Complex long double):_Complex long double"/>
    <method name="cacosl(_Complex long double):_Complex long double"/>
    <method name="calculateStringDiff(int;int):int"/>
    <method name="call_zopen64(const zlib_filefunc64_32_def*;const void*;int):voidpf"/>
    <method name="call_zseek64(const zlib_filefunc64_32_def*;voidpf;ZPOS64_T;int):long"/>
    <method name="call_ztell64(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="calloc(size_t;size_t):void*"/>
    <method name="cannot_audit(int):int"/>
    <method name="carg(_Complex double):double"/>
    <method name="cargf(_Complex float):float"/>
    <method name="cargl(_Complex long double):long double"/>
    <method name="casin(_Complex double):_Complex double"/>
    <method name="casinf(_Complex float):_Complex float"/>
    <method name="casinh(_Complex double):_Complex double"/>
    <method name="casinhf(_Complex float):_Complex float"/>
    <method name="casinhl(_Complex long double):_Complex long double"/>
    <method name="casinl(_Complex long double):_Complex long double"/>
    <method name="catan(_Complex double):_Complex double"/>
    <method name="catanf(_Complex float):_Complex float"/>
    <method name="catanh(_Complex double):_Complex double"/>
    <method name="catanhf(_Complex float):_Complex float"/>
    <method name="catanhl(_Complex long double):_Complex long double"/>
    <method name="catanl(_Complex long double):_Complex long double"/>
    <method name="catclose(nl_catd):int"/>
    <method name="catgets(nl_catd;int;int;const char*):char*"/>
    <method name="catlas_caxpby(const int;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="catlas_cset(const int;const void*;void*;const int):void"/>
    <method name="catlas_daxpby(const int;const double;const double*;const int;const double;double*;const int):void"/>
    <method name="catlas_dset(const int;const double;double*;const int):void"/>
    <method name="catlas_saxpby(const int;const float;const float*;const int;const float;float*;const int):void"/>
    <method name="catlas_sset(const int;const float;float*;const int):void"/>
    <method name="catlas_zaxpby(const int;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="catlas_zset(const int;const void*;void*;const int):void"/>
    <method name="catopen(const char*;int):nl_catd"/>
    <method name="cbdsqr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cblas_caxpy(const int;const void*;const void*;const int;void*;const int):void"/>
    <method name="cblas_ccopy(const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_cdotc_sub(const int;const void*;const int;const void*;const int;void*):void"/>
    <method name="cblas_cdotu_sub(const int;const void*;const int;const void*;const int;void*):void"/>
    <method name="cblas_cgbmv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_cgemm(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const enum CBLAS_TRANSPOSE;const int;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_cgemv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_cgerc(const enum CBLAS_ORDER;const int;const int;const void*;const void*;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_cgeru(const enum CBLAS_ORDER;const int;const int;const void*;const void*;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_chbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_chemm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_chemv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_cher(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const void*;const int;void*;const int):void"/>
    <method name="cblas_cher2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_cher2k(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;const int;const float;void*;const int):void"/>
    <method name="cblas_cherk(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const float;const void*;const int;const float;void*;const int):void"/>
    <method name="cblas_chpmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_chpr(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const void*;const int;void*):void"/>
    <method name="cblas_chpr2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const int;const void*;const int;void*):void"/>
    <method name="cblas_crotg(void*;void*;void*;void*):void"/>
    <method name="cblas_cscal(const int;const void*;void*;const int):void"/>
    <method name="cblas_csrot(const int;void*;const int;void*;const int;const float;const float):void"/>
    <method name="cblas_csscal(const int;const float;void*;const int):void"/>
    <method name="cblas_cswap(const int;void*;const int;void*;const int):void"/>
    <method name="cblas_csymm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_csyr2k(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_csyrk(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_ctbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_ctbsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_ctpmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;void*;const int):void"/>
    <method name="cblas_ctpsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;void*;const int):void"/>
    <method name="cblas_ctrmm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const void*;const int;void*;const int):void"/>
    <method name="cblas_ctrmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_ctrsm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const void*;const int;void*;const int):void"/>
    <method name="cblas_ctrsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_dasum(const int;const double*;const int):double"/>
    <method name="cblas_daxpy(const int;const double;const double*;const int;double*;const int):void"/>
    <method name="cblas_dcopy(const int;const double*;const int;double*;const int):void"/>
    <method name="cblas_ddot(const int;const double*;const int;const double*;const int):double"/>
    <method name="cblas_dgbmv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const int;const int;const double;const double*;const int;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dgemm(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const enum CBLAS_TRANSPOSE;const int;const int;const int;const double;const double*;const int;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dgemv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const double;const double*;const int;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dger(const enum CBLAS_ORDER;const int;const int;const double;const double*;const int;const double*;const int;double*;const int):void"/>
    <method name="cblas_dnrm2(const int;const double*;const int):double"/>
    <method name="cblas_drot(const int;double*;const int;double*;const int;const double;const double):void"/>
    <method name="cblas_drotg(double*;double*;double*;double*):void"/>
    <method name="cblas_drotm(const int;double*;const int;double*;const int;const double*):void"/>
    <method name="cblas_drotmg(double*;double*;double*;const double;double*):void"/>
    <method name="cblas_dsbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const int;const double;const double*;const int;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dscal(const int;const double;double*;const int):void"/>
    <method name="cblas_dsdot(const int;const float*;const int;const float*;const int):double"/>
    <method name="cblas_dspmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const double*;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dspr(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const double*;const int;double*):void"/>
    <method name="cblas_dspr2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const double*;const int;const double*;const int;double*):void"/>
    <method name="cblas_dswap(const int;double*;const int;double*;const int):void"/>
    <method name="cblas_dsymm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const int;const int;const double;const double*;const int;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dsymv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const double*;const int;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dsyr(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const double*;const int;double*;const int):void"/>
    <method name="cblas_dsyr2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const double*;const int;const double*;const int;double*;const int):void"/>
    <method name="cblas_dsyr2k(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const double;const double*;const int;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dsyrk(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const double;const double*;const int;const double;double*;const int):void"/>
    <method name="cblas_dtbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const double*;const int;double*;const int):void"/>
    <method name="cblas_dtbsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const double*;const int;double*;const int):void"/>
    <method name="cblas_dtpmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const double*;double*;const int):void"/>
    <method name="cblas_dtpsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const double*;double*;const int):void"/>
    <method name="cblas_dtrmm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const double;const double*;const int;double*;const int):void"/>
    <method name="cblas_dtrmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const double*;const int;double*;const int):void"/>
    <method name="cblas_dtrsm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const double;const double*;const int;double*;const int):void"/>
    <method name="cblas_dtrsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const double*;const int;double*;const int):void"/>
    <method name="cblas_dzasum(const int;const void*;const int):double"/>
    <method name="cblas_dznrm2(const int;const void*;const int):double"/>
    <method name="cblas_errprn(int;int;char*, ...):int"/>
    <method name="cblas_icamax(const int;const void*;const int):int"/>
    <method name="cblas_idamax(const int;const double*;const int):int"/>
    <method name="cblas_isamax(const int;const float*;const int):int"/>
    <method name="cblas_izamax(const int;const void*;const int):int"/>
    <method name="cblas_sasum(const int;const float*;const int):float"/>
    <method name="cblas_saxpy(const int;const float;const float*;const int;float*;const int):void"/>
    <method name="cblas_scasum(const int;const void*;const int):float"/>
    <method name="cblas_scnrm2(const int;const void*;const int):float"/>
    <method name="cblas_scopy(const int;const float*;const int;float*;const int):void"/>
    <method name="cblas_sdot(const int;const float*;const int;const float*;const int):float"/>
    <method name="cblas_sdsdot(const int;const float;const float*;const int;const float*;const int):float"/>
    <method name="cblas_sgbmv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const int;const int;const float;const float*;const int;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_sgemm(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const enum CBLAS_TRANSPOSE;const int;const int;const int;const float;const float*;const int;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_sgemv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const float;const float*;const int;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_sger(const enum CBLAS_ORDER;const int;const int;const float;const float*;const int;const float*;const int;float*;const int):void"/>
    <method name="cblas_snrm2(const int;const float*;const int):float"/>
    <method name="cblas_srot(const int;float*;const int;float*;const int;const float;const float):void"/>
    <method name="cblas_srotg(float*;float*;float*;float*):void"/>
    <method name="cblas_srotm(const int;float*;const int;float*;const int;const float*):void"/>
    <method name="cblas_srotmg(float*;float*;float*;const float;float*):void"/>
    <method name="cblas_ssbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const int;const float;const float*;const int;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_sscal(const int;const float;float*;const int):void"/>
    <method name="cblas_sspmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const float*;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_sspr(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const float*;const int;float*):void"/>
    <method name="cblas_sspr2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const float*;const int;const float*;const int;float*):void"/>
    <method name="cblas_sswap(const int;float*;const int;float*;const int):void"/>
    <method name="cblas_ssymm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const int;const int;const float;const float*;const int;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_ssymv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const float*;const int;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_ssyr(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const float*;const int;float*;const int):void"/>
    <method name="cblas_ssyr2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const float;const float*;const int;const float*;const int;float*;const int):void"/>
    <method name="cblas_ssyr2k(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const float;const float*;const int;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_ssyrk(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const float;const float*;const int;const float;float*;const int):void"/>
    <method name="cblas_stbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const float*;const int;float*;const int):void"/>
    <method name="cblas_stbsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const float*;const int;float*;const int):void"/>
    <method name="cblas_stpmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const float*;float*;const int):void"/>
    <method name="cblas_stpsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const float*;float*;const int):void"/>
    <method name="cblas_strmm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const float;const float*;const int;float*;const int):void"/>
    <method name="cblas_strmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const float*;const int;float*;const int):void"/>
    <method name="cblas_strsm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const float;const float*;const int;float*;const int):void"/>
    <method name="cblas_strsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const float*;const int;float*;const int):void"/>
    <method name="cblas_xerbla(int;char*;char*, ...):void"/>
    <method name="cblas_zaxpy(const int;const void*;const void*;const int;void*;const int):void"/>
    <method name="cblas_zcopy(const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_zdotc_sub(const int;const void*;const int;const void*;const int;void*):void"/>
    <method name="cblas_zdotu_sub(const int;const void*;const int;const void*;const int;void*):void"/>
    <method name="cblas_zdrot(const int;void*;const int;void*;const int;const double;const double):void"/>
    <method name="cblas_zdscal(const int;const double;void*;const int):void"/>
    <method name="cblas_zgbmv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zgemm(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const enum CBLAS_TRANSPOSE;const int;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zgemv(const enum CBLAS_ORDER;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zgerc(const enum CBLAS_ORDER;const int;const int;const void*;const void*;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_zgeru(const enum CBLAS_ORDER;const int;const int;const void*;const void*;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_zhbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zhemm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zhemv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zher(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const void*;const int;void*;const int):void"/>
    <method name="cblas_zher2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_zher2k(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;const int;const double;void*;const int):void"/>
    <method name="cblas_zherk(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const double;const void*;const int;const double;void*;const int):void"/>
    <method name="cblas_zhpmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zhpr(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const double;const void*;const int;void*):void"/>
    <method name="cblas_zhpr2(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const int;const void*;const void*;const int;const void*;const int;void*):void"/>
    <method name="cblas_zrotg(void*;void*;void*;void*):void"/>
    <method name="cblas_zscal(const int;const void*;void*;const int):void"/>
    <method name="cblas_zswap(const int;void*;const int;void*;const int):void"/>
    <method name="cblas_zsymm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zsyr2k(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_zsyrk(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const int;const int;const void*;const void*;const int;const void*;void*;const int):void"/>
    <method name="cblas_ztbmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_ztbsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_ztpmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;void*;const int):void"/>
    <method name="cblas_ztpsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;void*;const int):void"/>
    <method name="cblas_ztrmm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const void*;const int;void*;const int):void"/>
    <method name="cblas_ztrmv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;const int;void*;const int):void"/>
    <method name="cblas_ztrsm(const enum CBLAS_ORDER;const enum CBLAS_SIDE;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const int;const void*;const void*;const int;void*;const int):void"/>
    <method name="cblas_ztrsv(const enum CBLAS_ORDER;const enum CBLAS_UPLO;const enum CBLAS_TRANSPOSE;const enum CBLAS_DIAG;const int;const void*;const int;void*;const int):void"/>
    <method name="cbrt(double):double"/>
    <method name="cbrtf(float):float"/>
    <method name="cbrtl(long double):long double"/>
    <method name="ccos(_Complex double):_Complex double"/>
    <method name="ccosf(_Complex float):_Complex float"/>
    <method name="ccosh(_Complex double):_Complex double"/>
    <method name="ccoshf(_Complex float):_Complex float"/>
    <method name="ccoshl(_Complex long double):_Complex long double"/>
    <method name="ccosl(_Complex long double):_Complex long double"/>
    <method name="ceil(double):double"/>
    <method name="ceil(float):float"/>
    <method name="ceil(long double):long double"/>
    <method name="ceilf(float):float"/>
    <method name="ceill(long double):long double"/>
    <method name="cexp(_Complex double):_Complex double"/>
    <method name="cexpf(_Complex float):_Complex float"/>
    <method name="cexpl(_Complex long double):_Complex long double"/>
    <method name="cfgetispeed(const struct termios*):speed_t"/>
    <method name="cfgetospeed(const struct termios*):speed_t"/>
    <method name="cfmakeraw(struct termios*):void"/>
    <method name="cfsetispeed(struct termios*;speed_t):int"/>
    <method name="cfsetospeed(struct termios*;speed_t):int"/>
    <method name="cfsetspeed(struct termios*;speed_t):int"/>
    <method name="cgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgebal_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgecon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cgeev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgegs_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgegv_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgesc2_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="cgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgetc2_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetcap(char*;const char*;int):char*"/>
    <method name="cgetclose():int"/>
    <method name="cgetent(char**;char**;const char*):int"/>
    <method name="cgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetfirst(char**;char**):int"/>
    <method name="cgetmatch(const char*;const char*):int"/>
    <method name="cgetnext(char**;char**):int"/>
    <method name="cgetnum(char*;const char*;long*):int"/>
    <method name="cgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetri_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgetset(const char*):int"/>
    <method name="cgetstr(char*;const char*;char**):int"/>
    <method name="cgetustr(char*;const char*;char**):int"/>
    <method name="cggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggbal_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cggev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="cggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgtcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cgttrf_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chdir(const char*):int"/>
    <method name="checon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cheequb_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cheev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cheevd_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cheevr_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cheevx_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chegvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chegvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cherfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chesv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chetd2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chetf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chetrd_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chetrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chetri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chflags(const char*;__uint32_t):int"/>
    <method name="chfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="chgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chgrp(const char *; group_t): bool"/>
    <method name="chla_transtype__(char*;__CLPK_ftnlen;__CLPK_integer*):void"/>
    <method name="chmod(const char*;mode_t):int"/>
    <method name="chmodx_np(const char*;filesec_t):int"/>
    <method name="chown(const char*;uid_t;gid_t):int"/>
    <method name="chpcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chpev_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chpevd_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpevx_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chpgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chpgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chpsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chpsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="chptrd_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chptrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chptri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="chptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chroot(const char*):int"/>
    <method name="chsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="chseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cimag(_Complex double):double"/>
    <method name="cimagf(_Complex float):float"/>
    <method name="cimagl(_Complex long double):long double"/>
    <method name="clabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacgv_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacn2_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clacon_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clacp2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clacrm_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="clacrt_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="cladiv_(__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):void"/>
    <method name="claed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="claein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="claesy_(__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="claev2_(__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="clag2z_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clags2_(__CLPK_logical*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="clagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clahef_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="clals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clangt_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):__CLPK_doublereal"/>
    <method name="clanhb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhe_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhf_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhp_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanhs_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clanht_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*):__CLPK_doublereal"/>
    <method name="clansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clansp_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clansy_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clantp_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="clapll_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="clapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqhb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqhe_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqhp_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="claqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claqr1_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="claqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="claqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqsp_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="claqsy_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="clar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="clar2v_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarcm_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="clarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarfg_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarfp_(__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clargv_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarrv_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clartg_(__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="clartv_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="claset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="class_addIvar(Class*;const char*;size_t;uint8_t;const char*):BOOL"/>
    <method name="class_addMethod(Class*;SEL;IMP;const char*):BOOL"/>
    <method name="class_addMethods(Class*;struct objc_method_list*):void"/>
    <method name="class_addProperty(Class*;const char*;const objc_property_attribute_t*;unsigned int):BOOL"/>
    <method name="class_addProtocol(Class*;Protocol*):BOOL"/>
    <method name="class_conformsToProtocol(Class*;Protocol*):BOOL"/>
    <method name="class_copyIvarList(Class*;unsigned int*):Ivar*"/>
    <method name="class_copyMethodList(Class*;unsigned int*):Method*"/>
    <method name="class_copyPropertyList(Class*;unsigned int*):objc_property_t*"/>
    <method name="class_copyProtocolList(Class*;unsigned int*):Protocol**"/>
    <method name="class_createInstance(Class*;size_t):id"/>
    <method name="class_createInstanceFromZone(Class*;size_t;void*):id"/>
    <method name="class_getClassMethod(Class*;SEL):Method"/>
    <method name="class_getClassVariable(Class*;const char*):Ivar"/>
    <method name="class_getImageName(Class*):const char*"/>
    <method name="class_getInstanceMethod(Class*;SEL):Method"/>
    <method name="class_getInstanceSize(Class*):size_t"/>
    <method name="class_getInstanceVariable(Class*;const char*):Ivar"/>
    <method name="class_getIvarLayout(Class*):const uint8_t*"/>
    <method name="class_getMethodImplementation(Class*;SEL):IMP"/>
    <method name="class_getMethodImplementation_stret(Class*;SEL):IMP"/>
    <method name="class_getName(Class*):const char*"/>
    <method name="class_getProperty(Class*;const char*):objc_property_t"/>
    <method name="class_getSuperclass(Class*):Class*"/>
    <method name="class_getVersion(Class*):int"/>
    <method name="class_getWeakIvarLayout(Class*):const uint8_t*"/>
    <method name="class_isMetaClass(Class*):BOOL"/>
    <method name="class_lookupMethod(Class*;SEL):IMP"/>
    <method name="class_nextMethodList(Class*;void**):struct objc_method_list*"/>
    <method name="class_poseAs(Class*;Class*):Class*"/>
    <method name="class_removeMethods(Class*;struct objc_method_list*):void"/>
    <method name="class_replaceMethod(Class*;SEL;IMP;const char*):IMP"/>
    <method name="class_replaceProperty(Class*;const char*;const objc_property_attribute_t*;unsigned int):void"/>
    <method name="class_respondsToMethod(Class*;SEL):BOOL"/>
    <method name="class_respondsToSelector(Class*;SEL):BOOL"/>
    <method name="class_setIvarLayout(Class*;const uint8_t*):void"/>
    <method name="class_setSuperclass(Class*;Class*):Class*"/>
    <method name="class_setVersion(Class*;int):void"/>
    <method name="class_setWeakIvarLayout(Class*;const uint8_t*):void"/>
    <method name="classq_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="claswp_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="clatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="clatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*):int"/>
    <method name="clatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="clauu2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="clauum_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cleanupColorTransition(int):int"/>
    <method name="clearerr(FILE*):void"/>
    <method name="clnt_create(char*;unsigned long;unsigned long;char*):CLIENT*"/>
    <method name="clnt_pcreateerror(char*):void"/>
    <method name="clnt_perrno(enum clnt_stat):void"/>
    <method name="clnt_perror(CLIENT*;char*):void"/>
    <method name="clnt_spcreateerror(char*):char*"/>
    <method name="clnt_sperrno(enum clnt_stat):char*"/>
    <method name="clnt_sperror(CLIENT*;char*):char*"/>
    <method name="clntraw_create(unsigned long;unsigned long):CLIENT*"/>
    <method name="clnttcp_create(struct sockaddr_in*;unsigned long;unsigned long;int*;unsigned int;unsigned int):CLIENT*"/>
    <method name="clntudp_bufcreate(struct sockaddr_in*;unsigned long;unsigned long;struct timeval;int*;unsigned int;unsigned int):CLIENT*"/>
    <method name="clntudp_create(struct sockaddr_in*;unsigned long;unsigned long;struct timeval;int*):CLIENT*"/>
    <method name="clock():clock_t"/>
    <method name="clock_alarm(clock_serv_t;alarm_type_t;mach_timespec_t;clock_reply_t):kern_return_t"/>
    <method name="clock_alarm_reply(clock_reply_t;mach_msg_type_name_t;kern_return_t;alarm_type_t;mach_timespec_t):kern_return_t"/>
    <method name="clock_get_attributes(clock_serv_t;clock_flavor_t;clock_attr_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="clock_get_res(mach_port_t;clock_res_t*):kern_return_t"/>
    <method name="clock_get_time(clock_serv_t;mach_timespec_t*):kern_return_t"/>
    <method name="clock_set_attributes(clock_ctrl_t;clock_flavor_t;clock_attr_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="clock_set_res(mach_port_t;clock_res_t):kern_return_t"/>
    <method name="clock_set_time(clock_ctrl_t;mach_timespec_t):kern_return_t"/>
    <method name="clock_sleep(mach_port_t;int;mach_timespec_t;mach_timespec_t*):kern_return_t"/>
    <method name="clock_sleep_trap(mach_port_name_t;sleep_type_t;int;int;mach_timespec_t*):kern_return_t"/>
    <method name="clog(_Complex double):_Complex double"/>
    <method name="clogf(_Complex float):_Complex float"/>
    <method name="clogl(_Complex long double):_Complex long double"/>
    <method name="close():void"/>
    <method name="close(int):int"/>
    <method name="closedir(DIR*):int"/>
    <method name="closelog():void"/>
    <method name="closesocket(SOCKET):int"/>
    <method name="compress(Bytef*;uLongf*;const Bytef*;uLong):int"/>
    <method name="compress2(Bytef*;uLongf*;const Bytef*;uLong;int):int"/>
    <method name="compressBound(uLong):uLong"/>
    <method name="confstr(int;char*;size_t):size_t"/>
    <method name="conj(_Complex double):_Complex double"/>
    <method name="conjf(_Complex float):_Complex float"/>
    <method name="conjl(_Complex long double):_Complex long double"/>
    <method name="connect(SOCKET;const sockaddr*;int):int"/>
    <method name="connect(int;const sockaddr*;socklen_t):int"/>
    <method name="connect(int;const struct sockaddr*;socklen_t):int"/>
    <method name="copyRegexPrefsStyleChanged():int"/>
    <method name="copySelectionToClipboard(int;int):int"/>
    <method name="copyfile(const char*;const char*;copyfile_state_t;copyfile_flags_t):int"/>
    <method name="copyfile_state_alloc():copyfile_state_t"/>
    <method name="copyfile_state_free(copyfile_state_t):int"/>
    <method name="copyfile_state_get(copyfile_state_t;uint32_t;void*):int"/>
    <method name="copyfile_state_set(copyfile_state_t;uint32_t;const void*):int"/>
    <method name="copysign(double;double):double"/>
    <method name="copysignf(float;float):float"/>
    <method name="copysignl(long double;long double):long double"/>
    <method name="cos(double):double"/>
    <method name="cos(float):float"/>
    <method name="cos(long double):long double"/>
    <method name="cosf(float):float"/>
    <method name="cosh(double):double"/>
    <method name="cosh(float):float"/>
    <method name="cosh(long double):long double"/>
    <method name="coshf(float):float"/>
    <method name="coshl(long double):long double"/>
    <method name="cosl(long double):long double"/>
    <method name="cpbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpftrf_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpftri_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpocon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpoequ_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpoequb_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpotf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpotrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpotri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cpow(_Complex double;_Complex double):_Complex double"/>
    <method name="cpowf(_Complex float;_Complex float):_Complex float"/>
    <method name="cpowl(_Complex long double;_Complex long double):_Complex long double"/>
    <method name="cppcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cppequ_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;char*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpptrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpptri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cproj(_Complex double):_Complex double"/>
    <method name="cprojf(_Complex float):_Complex float"/>
    <method name="cprojl(_Complex long double):_Complex long double"/>
    <method name="cpstf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpstrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cptcon_(__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cptrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cpttrf_(__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cpttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="crc32(uLong;const Bytef*;uInt):uLong"/>
    <method name="crc32_combine(uLong;uLong;long):uLong"/>
    <method name="creal(_Complex double):double"/>
    <method name="crealf(_Complex float):float"/>
    <method name="creall(_Complex long double):long double"/>
    <method name="creat(const char*;mode_t):int"/>
    <method name="crot_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*):int"/>
    <method name="crypt(const char*;const char*):char*"/>
    <method name="crypthead(const char*;unsigned char*;int;unsigned long*;const unsigned long*;unsigned long):int"/>
    <method name="csin(_Complex double):_Complex double"/>
    <method name="csinf(_Complex float):_Complex float"/>
    <method name="csinh(_Complex double):_Complex double"/>
    <method name="csinhf(_Complex float):_Complex float"/>
    <method name="csinhl(_Complex long double):_Complex long double"/>
    <method name="csinl(_Complex long double):_Complex long double"/>
    <method name="cspcon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cspmv_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cspr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*):int"/>
    <method name="csprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="cspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csptrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csptri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csqrt(_Complex double):_Complex double"/>
    <method name="csqrtf(_Complex float):_Complex float"/>
    <method name="csqrtl(_Complex long double):_Complex long double"/>
    <method name="csrscl_(__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cssConsume(char*;int):int"/>
    <method name="csslex():int"/>
    <method name="cstedc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cstegr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cstein_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cstemr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csycon_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csyequb_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csymv_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csyr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="csytf2_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csytrf_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="csytri_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="csytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctan(_Complex double):_Complex double"/>
    <method name="ctanf(_Complex float):_Complex float"/>
    <method name="ctanh(_Complex double):_Complex double"/>
    <method name="ctanhf(_Complex float):_Complex float"/>
    <method name="ctanhl(_Complex long double):_Complex long double"/>
    <method name="ctanl(_Complex long double):_Complex long double"/>
    <method name="ctbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctermid(char*):char*"/>
    <method name="ctermid_r(char*):char*"/>
    <method name="ctfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctftri_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctfttp_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctfttr_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctime(const time_t*):char*"/>
    <method name="ctime_r(const time_t*;char*):char*"/>
    <method name="ctpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctptri_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctpttf_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctpttr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrcon_(char*;char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrexc_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ctrti2_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrtri_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ctrttf_(char*;char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctrttp_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="ctzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cung2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cung2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cungbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cungrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cungtr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cunmrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cunmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="cupgtr_(char*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cupmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_complex*;__CLPK_complex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):int"/>
    <method name="cuserid(char*):char*"/>
    <method name="d2i_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION**;const unsigned char**;long):ACCESS_DESCRIPTION*"/>
    <method name="d2i_ASN1_BIT_STRING(ASN1_BIT_STRING**;const unsigned char**;long):ASN1_BIT_STRING*"/>
    <method name="d2i_ASN1_BMPSTRING(ASN1_BMPSTRING**;const unsigned char**;long):ASN1_BMPSTRING*"/>
    <method name="d2i_ASN1_BOOLEAN(int*;const unsigned char**;long):int"/>
    <method name="d2i_ASN1_ENUMERATED(ASN1_ENUMERATED**;const unsigned char**;long):ASN1_ENUMERATED*"/>
    <method name="d2i_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME**;const unsigned char**;long):ASN1_GENERALIZEDTIME*"/>
    <method name="d2i_ASN1_GENERALSTRING(ASN1_GENERALSTRING**;const unsigned char**;long):ASN1_GENERALSTRING*"/>
    <method name="d2i_ASN1_HEADER(ASN1_HEADER**;const unsigned char**;long):ASN1_HEADER*"/>
    <method name="d2i_ASN1_IA5STRING(ASN1_IA5STRING**;const unsigned char**;long):ASN1_IA5STRING*"/>
    <method name="d2i_ASN1_INTEGER(ASN1_INTEGER**;const unsigned char**;long):ASN1_INTEGER*"/>
    <method name="d2i_ASN1_NULL(ASN1_NULL**;const unsigned char**;long):ASN1_NULL*"/>
    <method name="d2i_ASN1_OBJECT(ASN1_OBJECT**;const unsigned char**;long):ASN1_OBJECT*"/>
    <method name="d2i_ASN1_OCTET_STRING(ASN1_OCTET_STRING**;const unsigned char**;long):ASN1_OCTET_STRING*"/>
    <method name="d2i_ASN1_PRINTABLE(ASN1_STRING**;const unsigned char**;long):ASN1_STRING*"/>
    <method name="d2i_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING**;const unsigned char**;long):ASN1_PRINTABLESTRING*"/>
    <method name="d2i_ASN1_SET(STACK**;const unsigned char**;long;d2i_of_void*;(*)(void*):void*;int;int):STACK*"/>
    <method name="d2i_ASN1_T61STRING(ASN1_T61STRING**;const unsigned char**;long):ASN1_T61STRING*"/>
    <method name="d2i_ASN1_TIME(ASN1_TIME**;const unsigned char**;long):ASN1_TIME*"/>
    <method name="d2i_ASN1_TYPE(ASN1_TYPE**;const unsigned char**;long):ASN1_TYPE*"/>
    <method name="d2i_ASN1_UINTEGER(ASN1_INTEGER**;const unsigned char**;long):ASN1_INTEGER*"/>
    <method name="d2i_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING**;const unsigned char**;long):ASN1_UNIVERSALSTRING*"/>
    <method name="d2i_ASN1_UTCTIME(ASN1_UTCTIME**;const unsigned char**;long):ASN1_UTCTIME*"/>
    <method name="d2i_ASN1_UTF8STRING(ASN1_UTF8STRING**;const unsigned char**;long):ASN1_UTF8STRING*"/>
    <method name="d2i_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING**;const unsigned char**;long):ASN1_VISIBLESTRING*"/>
    <method name="d2i_ASN1_bytes(ASN1_STRING**;const unsigned char**;long;int;int):ASN1_STRING*"/>
    <method name="d2i_ASN1_type_bytes(ASN1_STRING**;const unsigned char**;long;int):ASN1_STRING*"/>
    <method name="d2i_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS**;const unsigned char**;long):AUTHORITY_INFO_ACCESS*"/>
    <method name="d2i_AUTHORITY_KEYID(AUTHORITY_KEYID**;const unsigned char**;long):AUTHORITY_KEYID*"/>
    <method name="d2i_AutoPrivateKey(EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS**;const unsigned char**;long):BASIC_CONSTRAINTS*"/>
    <method name="d2i_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES**;const unsigned char**;long):CERTIFICATEPOLICIES*"/>
    <method name="d2i_CRL_DIST_POINTS(CRL_DIST_POINTS**;const unsigned char**;long):CRL_DIST_POINTS*"/>
    <method name="d2i_DHparams(DH**;const unsigned char**;long):DH*"/>
    <method name="d2i_DIRECTORYSTRING(ASN1_STRING**;const unsigned char**;long):ASN1_STRING*"/>
    <method name="d2i_DISPLAYTEXT(ASN1_STRING**;const unsigned char**;long):ASN1_STRING*"/>
    <method name="d2i_DIST_POINT(DIST_POINT**;const unsigned char**;long):DIST_POINT*"/>
    <method name="d2i_DIST_POINT_NAME(DIST_POINT_NAME**;const unsigned char**;long):DIST_POINT_NAME*"/>
    <method name="d2i_DSAPrivateKey(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_DSAPrivateKey_bio(BIO*;DSA**):DSA*"/>
    <method name="d2i_DSAPrivateKey_fp(FILE*;DSA**):DSA*"/>
    <method name="d2i_DSAPublicKey(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_DSA_PUBKEY(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_DSA_PUBKEY_bio(BIO*;DSA**):DSA*"/>
    <method name="d2i_DSA_PUBKEY_fp(FILE*;DSA**):DSA*"/>
    <method name="d2i_DSA_SIG(DSA_SIG**;const unsigned char**;long):DSA_SIG*"/>
    <method name="d2i_DSAparams(DSA**;const unsigned char**;long):DSA*"/>
    <method name="d2i_ECDSA_SIG(ECDSA_SIG**;const unsigned char**;long):ECDSA_SIG*"/>
    <method name="d2i_ECPKParameters(EC_GROUP**;const unsigned char**;long):EC_GROUP*"/>
    <method name="d2i_ECParameters(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="d2i_ECPrivateKey(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="d2i_ECPrivateKey_bio(BIO*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_ECPrivateKey_fp(FILE*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_EC_PUBKEY(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="d2i_EC_PUBKEY_bio(BIO*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_EC_PUBKEY_fp(FILE*;EC_KEY**):EC_KEY*"/>
    <method name="d2i_EDIPARTYNAME(EDIPARTYNAME**;const unsigned char**;long):EDIPARTYNAME*"/>
    <method name="d2i_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE**;const unsigned char**;long):EXTENDED_KEY_USAGE*"/>
    <method name="d2i_GENERAL_NAME(GENERAL_NAME**;const unsigned char**;long):GENERAL_NAME*"/>
    <method name="d2i_GENERAL_NAMES(GENERAL_NAMES**;const unsigned char**;long):GENERAL_NAMES*"/>
    <method name="d2i_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE**;const unsigned char**;long):NETSCAPE_CERT_SEQUENCE*"/>
    <method name="d2i_NETSCAPE_SPKAC(NETSCAPE_SPKAC**;const unsigned char**;long):NETSCAPE_SPKAC*"/>
    <method name="d2i_NETSCAPE_SPKI(NETSCAPE_SPKI**;const unsigned char**;long):NETSCAPE_SPKI*"/>
    <method name="d2i_NOTICEREF(NOTICEREF**;const unsigned char**;long):NOTICEREF*"/>
    <method name="d2i_Netscape_RSA(RSA**;const unsigned char**;long;(*)(char*;int;const char*;int):int*):RSA*"/>
    <method name="d2i_OCSP_BASICRESP(OCSP_BASICRESP**;const unsigned char**;long):OCSP_BASICRESP*"/>
    <method name="d2i_OCSP_CERTID(OCSP_CERTID**;const unsigned char**;long):OCSP_CERTID*"/>
    <method name="d2i_OCSP_CERTSTATUS(OCSP_CERTSTATUS**;const unsigned char**;long):OCSP_CERTSTATUS*"/>
    <method name="d2i_OCSP_CRLID(OCSP_CRLID**;const unsigned char**;long):OCSP_CRLID*"/>
    <method name="d2i_OCSP_ONEREQ(OCSP_ONEREQ**;const unsigned char**;long):OCSP_ONEREQ*"/>
    <method name="d2i_OCSP_REQINFO(OCSP_REQINFO**;const unsigned char**;long):OCSP_REQINFO*"/>
    <method name="d2i_OCSP_REQUEST(OCSP_REQUEST**;const unsigned char**;long):OCSP_REQUEST*"/>
    <method name="d2i_OCSP_RESPBYTES(OCSP_RESPBYTES**;const unsigned char**;long):OCSP_RESPBYTES*"/>
    <method name="d2i_OCSP_RESPDATA(OCSP_RESPDATA**;const unsigned char**;long):OCSP_RESPDATA*"/>
    <method name="d2i_OCSP_RESPID(OCSP_RESPID**;const unsigned char**;long):OCSP_RESPID*"/>
    <method name="d2i_OCSP_RESPONSE(OCSP_RESPONSE**;const unsigned char**;long):OCSP_RESPONSE*"/>
    <method name="d2i_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO**;const unsigned char**;long):OCSP_REVOKEDINFO*"/>
    <method name="d2i_OCSP_SERVICELOC(OCSP_SERVICELOC**;const unsigned char**;long):OCSP_SERVICELOC*"/>
    <method name="d2i_OCSP_SIGNATURE(OCSP_SIGNATURE**;const unsigned char**;long):OCSP_SIGNATURE*"/>
    <method name="d2i_OCSP_SINGLERESP(OCSP_SINGLERESP**;const unsigned char**;long):OCSP_SINGLERESP*"/>
    <method name="d2i_OTHERNAME(OTHERNAME**;const unsigned char**;long):OTHERNAME*"/>
    <method name="d2i_PBE2PARAM(PBE2PARAM**;const unsigned char**;long):PBE2PARAM*"/>
    <method name="d2i_PBEPARAM(PBEPARAM**;const unsigned char**;long):PBEPARAM*"/>
    <method name="d2i_PBKDF2PARAM(PBKDF2PARAM**;const unsigned char**;long):PBKDF2PARAM*"/>
    <method name="d2i_PKCS12(PKCS12**;const unsigned char**;long):PKCS12*"/>
    <method name="d2i_PKCS12_BAGS(PKCS12_BAGS**;const unsigned char**;long):PKCS12_BAGS*"/>
    <method name="d2i_PKCS12_MAC_DATA(PKCS12_MAC_DATA**;const unsigned char**;long):PKCS12_MAC_DATA*"/>
    <method name="d2i_PKCS12_SAFEBAG(PKCS12_SAFEBAG**;const unsigned char**;long):PKCS12_SAFEBAG*"/>
    <method name="d2i_PKCS12_bio(BIO*;PKCS12**):PKCS12*"/>
    <method name="d2i_PKCS12_fp(FILE*;PKCS12**):PKCS12*"/>
    <method name="d2i_PKCS7(PKCS7**;const unsigned char**;long):PKCS7*"/>
    <method name="d2i_PKCS7_DIGEST(PKCS7_DIGEST**;const unsigned char**;long):PKCS7_DIGEST*"/>
    <method name="d2i_PKCS7_ENCRYPT(PKCS7_ENCRYPT**;const unsigned char**;long):PKCS7_ENCRYPT*"/>
    <method name="d2i_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT**;const unsigned char**;long):PKCS7_ENC_CONTENT*"/>
    <method name="d2i_PKCS7_ENVELOPE(PKCS7_ENVELOPE**;const unsigned char**;long):PKCS7_ENVELOPE*"/>
    <method name="d2i_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL**;const unsigned char**;long):PKCS7_ISSUER_AND_SERIAL*"/>
    <method name="d2i_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO**;const unsigned char**;long):PKCS7_RECIP_INFO*"/>
    <method name="d2i_PKCS7_SIGNED(PKCS7_SIGNED**;const unsigned char**;long):PKCS7_SIGNED*"/>
    <method name="d2i_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO**;const unsigned char**;long):PKCS7_SIGNER_INFO*"/>
    <method name="d2i_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE**;const unsigned char**;long):PKCS7_SIGN_ENVELOPE*"/>
    <method name="d2i_PKCS7_bio(BIO*;PKCS7**):PKCS7*"/>
    <method name="d2i_PKCS7_fp(FILE*;PKCS7**):PKCS7*"/>
    <method name="d2i_PKCS8PrivateKey_bio(BIO*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="d2i_PKCS8PrivateKey_fp(FILE*;EVP_PKEY**;pem_password_cb*;void*):EVP_PKEY*"/>
    <method name="d2i_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO**;const unsigned char**;long):PKCS8_PRIV_KEY_INFO*"/>
    <method name="d2i_PKCS8_PRIV_KEY_INFO_bio(BIO*;PKCS8_PRIV_KEY_INFO**):PKCS8_PRIV_KEY_INFO*"/>
    <method name="d2i_PKCS8_PRIV_KEY_INFO_fp(FILE*;PKCS8_PRIV_KEY_INFO**):PKCS8_PRIV_KEY_INFO*"/>
    <method name="d2i_PKCS8_bio(BIO*;X509_SIG**):X509_SIG*"/>
    <method name="d2i_PKCS8_fp(FILE*;X509_SIG**):X509_SIG*"/>
    <method name="d2i_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD**;const unsigned char**;long):PKEY_USAGE_PERIOD*"/>
    <method name="d2i_POLICYINFO(POLICYINFO**;const unsigned char**;long):POLICYINFO*"/>
    <method name="d2i_POLICYQUALINFO(POLICYQUALINFO**;const unsigned char**;long):POLICYQUALINFO*"/>
    <method name="d2i_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION**;const unsigned char**;long):PROXY_CERT_INFO_EXTENSION*"/>
    <method name="d2i_PROXY_POLICY(PROXY_POLICY**;const unsigned char**;long):PROXY_POLICY*"/>
    <method name="d2i_PUBKEY(EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_PUBKEY_bio(BIO*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PUBKEY_fp(FILE*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PrivateKey(int;EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_PrivateKey_bio(BIO*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PrivateKey_fp(FILE*;EVP_PKEY**):EVP_PKEY*"/>
    <method name="d2i_PublicKey(int;EVP_PKEY**;const unsigned char**;long):EVP_PKEY*"/>
    <method name="d2i_RSAPrivateKey(RSA**;const unsigned char**;long):RSA*"/>
    <method name="d2i_RSAPrivateKey_bio(BIO*;RSA**):RSA*"/>
    <method name="d2i_RSAPrivateKey_fp(FILE*;RSA**):RSA*"/>
    <method name="d2i_RSAPublicKey(RSA**;const unsigned char**;long):RSA*"/>
    <method name="d2i_RSAPublicKey_bio(BIO*;RSA**):RSA*"/>
    <method name="d2i_RSAPublicKey_fp(FILE*;RSA**):RSA*"/>
    <method name="d2i_RSA_NET(RSA**;const unsigned char**;long;(*)(char*;int;const char*;int):int*;int):RSA*"/>
    <method name="d2i_RSA_PUBKEY(RSA**;const unsigned char**;long):RSA*"/>
    <method name="d2i_RSA_PUBKEY_bio(BIO*;RSA**):RSA*"/>
    <method name="d2i_RSA_PUBKEY_fp(FILE*;RSA**):RSA*"/>
    <method name="d2i_SSL_SESSION(SSL_SESSION**;const unsigned char**;long):SSL_SESSION*"/>
    <method name="d2i_SXNET(SXNET**;const unsigned char**;long):SXNET*"/>
    <method name="d2i_SXNETID(SXNETID**;const unsigned char**;long):SXNETID*"/>
    <method name="d2i_USERNOTICE(USERNOTICE**;const unsigned char**;long):USERNOTICE*"/>
    <method name="d2i_X509(X509**;const unsigned char**;long):X509*"/>
    <method name="d2i_X509_ALGOR(X509_ALGOR**;const unsigned char**;long):X509_ALGOR*"/>
    <method name="d2i_X509_ATTRIBUTE(X509_ATTRIBUTE**;const unsigned char**;long):X509_ATTRIBUTE*"/>
    <method name="d2i_X509_AUX(X509**;const unsigned char**;long):X509*"/>
    <method name="d2i_X509_CERT_AUX(X509_CERT_AUX**;const unsigned char**;long):X509_CERT_AUX*"/>
    <method name="d2i_X509_CERT_PAIR(X509_CERT_PAIR**;const unsigned char**;long):X509_CERT_PAIR*"/>
    <method name="d2i_X509_CINF(X509_CINF**;const unsigned char**;long):X509_CINF*"/>
    <method name="d2i_X509_CRL(X509_CRL**;const unsigned char**;long):X509_CRL*"/>
    <method name="d2i_X509_CRL_INFO(X509_CRL_INFO**;const unsigned char**;long):X509_CRL_INFO*"/>
    <method name="d2i_X509_CRL_bio(BIO*;X509_CRL**):X509_CRL*"/>
    <method name="d2i_X509_CRL_fp(FILE*;X509_CRL**):X509_CRL*"/>
    <method name="d2i_X509_EXTENSION(X509_EXTENSION**;const unsigned char**;long):X509_EXTENSION*"/>
    <method name="d2i_X509_NAME(X509_NAME**;const unsigned char**;long):X509_NAME*"/>
    <method name="d2i_X509_NAME_ENTRY(X509_NAME_ENTRY**;const unsigned char**;long):X509_NAME_ENTRY*"/>
    <method name="d2i_X509_PKEY(X509_PKEY**;const unsigned char**;long):X509_PKEY*"/>
    <method name="d2i_X509_PUBKEY(X509_PUBKEY**;const unsigned char**;long):X509_PUBKEY*"/>
    <method name="d2i_X509_REQ(X509_REQ**;const unsigned char**;long):X509_REQ*"/>
    <method name="d2i_X509_REQ_INFO(X509_REQ_INFO**;const unsigned char**;long):X509_REQ_INFO*"/>
    <method name="d2i_X509_REQ_bio(BIO*;X509_REQ**):X509_REQ*"/>
    <method name="d2i_X509_REQ_fp(FILE*;X509_REQ**):X509_REQ*"/>
    <method name="d2i_X509_REVOKED(X509_REVOKED**;const unsigned char**;long):X509_REVOKED*"/>
    <method name="d2i_X509_SIG(X509_SIG**;const unsigned char**;long):X509_SIG*"/>
    <method name="d2i_X509_VAL(X509_VAL**;const unsigned char**;long):X509_VAL*"/>
    <method name="d2i_X509_bio(BIO*;X509**):X509*"/>
    <method name="d2i_X509_fp(FILE*;X509**):X509*"/>
    <method name="daemon(int;int):int"/>
    <method name="dbdsdc_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dbdsqr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dbm_clearerr(DBM*):int"/>
    <method name="dbm_close(DBM*):void"/>
    <method name="dbm_delete(DBM*;datum):int"/>
    <method name="dbm_dirfno(DBM*):int"/>
    <method name="dbm_error(DBM*):int"/>
    <method name="dbm_fetch(DBM*;datum):datum"/>
    <method name="dbm_firstkey(DBM*):datum"/>
    <method name="dbm_forder(DBM*;datum):long"/>
    <method name="dbm_nextkey(DBM*):datum"/>
    <method name="dbm_open(const char*;int;mode_t):DBM*"/>
    <method name="dbm_store(DBM*;datum;datum;int):int"/>
    <method name="dbopen(const char*;int;int;DBTYPE;const void*):DB*"/>
    <method name="ddisna_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="decrypt_byte(unsigned long*;const unsigned long*):int"/>
    <method name="deflate(z_streamp;int):int"/>
    <method name="deflateBound(z_streamp;uLong):uLong"/>
    <method name="deflateCopy(z_streamp;z_streamp):int"/>
    <method name="deflateEnd(z_streamp):int"/>
    <method name="deflateInit2_(z_streamp;int;int;int;int;int;const char*;int):int"/>
    <method name="deflateInit_(z_streamp;int;const char*;int):int"/>
    <method name="deflateParams(z_streamp;int;int):int"/>
    <method name="deflatePrime(z_streamp;int;int):int"/>
    <method name="deflateReset(z_streamp):int"/>
    <method name="deflateSetDictionary(z_streamp;const Bytef*;uInt):int"/>
    <method name="deflateSetHeader(z_streamp;gz_headerp):int"/>
    <method name="deflateTune(z_streamp;int;int;int;int):int"/>
    <method name="deleteCSSRule(int):int"/>
    <method name="devname(dev_t;mode_t):char*"/>
    <method name="devname_r(dev_t;mode_t;char*;int):char*"/>
    <method name="dgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgebal_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgecon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dgeev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgegs_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgegv_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgejsv_(char*;char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesc2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesvj_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetc2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetri_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggbal_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dggev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="dggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dgsvj0_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgsvj1_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtcon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgttrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dhgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dhsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dhseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="diffString(int;int):int"/>
    <method name="difftime(time_t;time_t):double"/>
    <method name="digittoint(int):int"/>
    <method name="dirname(char*):char*"/>
    <method name="disnan_(__CLPK_doublereal*):__CLPK_logical"/>
    <method name="div(int;int):div_t"/>
    <method name="dlabad_(__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlacn2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlacon_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dladdr(const void*;Dl_info*):int"/>
    <method name="dladiv_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlae2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaebz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed1_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaed4_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaed5_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaed6_(__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaed9_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaeda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaev2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaexc_(__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlag2_(__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlag2s_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlags2_(__CLPK_logical*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlagtf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlagts_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlagv2_(__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaisnan_(__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_logical"/>
    <method name="dlaln2_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlamc1_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_logical*):int"/>
    <method name="dlamc2_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlamc3_(__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlamc4_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlamc5_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlamch_(char*):__CLPK_doublereal"/>
    <method name="dlamrg_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaneg_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):__CLPK_integer"/>
    <method name="dlangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlangt_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlanhs_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansf_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansp_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlanst_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlansy_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlantp_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlanv2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlapll_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlapy2_(__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlapy3_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="dlaqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaqr1_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqsp_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqsy_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="dlaqtr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlar2v_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarfg_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarfp_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlargv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarra_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrb_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrd_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarre_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrj_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrk_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrr_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarrv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlartg_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlartv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlaruv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlas2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasd0_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd1_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasd3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd4_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd5_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasd6_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasd7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasd8_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasdq_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasdt_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlaset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasq1_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasq2_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasq3_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasq4_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlasq5_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_logical*):int"/>
    <method name="dlasq6_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasrt_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlassq_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlasv2_(__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlaswp_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlasy2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlat2s_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dlatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dlatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="dlauu2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlauum_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dlclose(void*):int"/>
    <method name="dlerror():char*"/>
    <method name="dlopen(const char*;int):void*"/>
    <method name="dlopen_preflight(const char*):_Bool"/>
    <method name="dlsym(void*;const char*):void*"/>
    <method name="dns_class_number(const char*;uint16_t*):int32_t"/>
    <method name="dns_class_string(uint16_t):const char*"/>
    <method name="dns_free(dns_handle_t):void"/>
    <method name="dns_free_question(dns_question_t*):void"/>
    <method name="dns_free_reply(dns_reply_t*):void"/>
    <method name="dns_free_resource_record(dns_resource_record_t*):void"/>
    <method name="dns_get_buffer_size(dns_handle_t):uint32_t"/>
    <method name="dns_lookup(dns_handle_t;const char*;uint32_t;uint32_t):dns_reply_t*"/>
    <method name="dns_open(const char*):dns_handle_t"/>
    <method name="dns_parse_packet(const char*;uint32_t):dns_reply_t*"/>
    <method name="dns_parse_question(const char*;uint32_t):dns_question_t*"/>
    <method name="dns_parse_resource_record(const char*;uint32_t):dns_resource_record_t*"/>
    <method name="dns_print_handle(dns_handle_t;int*):void"/>
    <method name="dns_print_question(const dns_question_t*;int*):void"/>
    <method name="dns_print_reply(const dns_reply_t*;int*;uint16_t):void"/>
    <method name="dns_print_resource_record(const dns_resource_record_t*;int*):void"/>
    <method name="dns_query(dns_handle_t;const char*;uint32_t;uint32_t;char*;uint32_t;struct sockaddr*;uint32_t*):int32_t"/>
    <method name="dns_search(dns_handle_t;const char*;uint32_t;uint32_t;char*;uint32_t;struct sockaddr*;uint32_t*):int32_t"/>
    <method name="dns_search_list_domain(dns_handle_t;uint32_t):char*"/>
    <method name="dns_search_list_domain_count(dns_handle_t):uint32_t"/>
    <method name="dns_set_buffer_size(dns_handle_t;uint32_t):void"/>
    <method name="dns_set_debug(dns_handle_t;uint32_t):void"/>
    <method name="dns_type_number(const char*;uint16_t*):int32_t"/>
    <method name="dns_type_string(uint16_t):const char*"/>
    <method name="dopgtr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dopmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorg2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorg2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorgbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorgrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorgtr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dorm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dorml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dormrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dormtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpftrf_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpftri_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpocon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpoequ_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpoequb_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotf2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppcon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppequ_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dpptrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpptri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dprintf(int;const char*, ...):int"/>
    <method name="dpstf2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpstrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dptcon_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dptrfs_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpttrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dpttrs_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dqhashshift(int):int"/>
    <method name="drand48():double"/>
    <method name="drem(double;double):double"/>
    <method name="drscl_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="dsgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspcon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dspevd_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dspgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dspgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsptrd_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsptrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsptri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstebz_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstedc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstegr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstein_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstemr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsterf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dstev_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dstevd_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstevr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dstevx_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsycon_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyequb_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsyev_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyevd_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyevr_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsygvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytd2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsytf2_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytrd_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytrf_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dsytri_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dsytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtftri_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtfttp_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtfttr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtptri_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtpttf_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtpttr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrexc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrti2_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrtri_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dtrttf_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtrttp_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="dtzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="dup(int):int"/>
    <method name="dup2(int;int):int"/>
    <method name="duplocale(locale_t):locale_t"/>
    <method name="dzsum1_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_doublereal"/>
    <method name="ecvt(double;int;int*;int*):char*"/>
    <method name="encrypt(char*;int):void"/>
    <method name="endTransitionColor(int):int"/>
    <method name="endac():void"/>
    <method name="endauclass():void"/>
    <method name="endauevent():void"/>
    <method name="endauuser():void"/>
    <method name="endfsent():void"/>
    <method name="endgrent():void"/>
    <method name="endhostent():void"/>
    <method name="endnetent():void"/>
    <method name="endnetgrent():void"/>
    <method name="endprotoent():void"/>
    <method name="endpwent():void"/>
    <method name="endrpcent():void"/>
    <method name="endservent():void"/>
    <method name="endttyent():int"/>
    <method name="endusershell():void"/>
    <method name="endutxent():void"/>
    <method name="endutxent_wtmp():void"/>
    <method name="erand48(unsigned short*):double"/>
    <method name="erf(double):double"/>
    <method name="erfc(double):double"/>
    <method name="erfcf(float):float"/>
    <method name="erfcl(long double):long double"/>
    <method name="erff(float):float"/>
    <method name="erfl(long double):long double"/>
    <method name="err(int;const char*, ...):void"/>
    <method name="err_set_exit((*)(int):void):void"/>
    <method name="err_set_exit_b((^)(int):void):void"/>
    <method name="err_set_file(void*):void"/>
    <method name="errc(int;int;const char*, ...):void"/>
    <method name="errx(int;const char*, ...):void"/>
    <method name="escapeToCharacterEntities(int):int"/>
    <method name="etap_trace_thread(thread_act_t;boolean_t):kern_return_t"/>
    <method name="ether_aton(const char*):struct ether_addr*"/>
    <method name="ether_hostton(const char*;struct ether_addr*):int"/>
    <method name="ether_line(const char*;struct ether_addr*;char*):int"/>
    <method name="ether_ntoa(const struct ether_addr*):char*"/>
    <method name="ether_ntohost(char*;const struct ether_addr*):int"/>
    <method name="exception_raise(mach_port_t;mach_port_t;mach_port_t;exception_type_t;exception_data_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="exception_raise_state(mach_port_t;exception_type_t;const exception_data_t;mach_msg_type_number_t;int*;const thread_state_t;mach_msg_type_number_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="exception_raise_state_identity(mach_port_t;mach_port_t;mach_port_t;exception_type_t;exception_data_t;mach_msg_type_number_t;int*;thread_state_t;mach_msg_type_number_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="exchangeImp():void"/>
    <method name="exchangedata(const char*;const char*;unsigned long):int"/>
    <method name="execl(const char*;const char*, ...):int"/>
    <method name="execl(const char*;const char*, ...):intptr_t"/>
    <method name="execle(const char*;const char*, ...):int"/>
    <method name="execle(const char*;const char*, ...):intptr_t"/>
    <method name="execlp(const char*;const char*, ...):int"/>
    <method name="execlp(const char*;const char*, ...):intptr_t"/>
    <method name="execlpe(const char*;const char*, ...):intptr_t"/>
    <method name="execv(const char*;const char**):int"/>
    <method name="execv(const char*;const const char**):intptr_t"/>
    <method name="execvP(const char*;const char*;const char**):int"/>
    <method name="execve(const char*;const char**;const char**):int"/>
    <method name="execve(const char*;const const char**;const const char**):intptr_t"/>
    <method name="execvp(const char*;const char**):int"/>
    <method name="execvp(const char*;const const char**):intptr_t"/>
    <method name="execvpe(const char*;const const char**;const const char**):intptr_t"/>
    <method name="exit(int):void"/>
    <method name="exp(double):double"/>
    <method name="exp(float):float"/>
    <method name="exp(long double):long double"/>
    <method name="exp2(double):double"/>
    <method name="exp2f(float):float"/>
    <method name="exp2l(long double):long double"/>
    <method name="expf(float):float"/>
    <method name="expl(long double):long double"/>
    <method name="expm1(double):double"/>
    <method name="expm1f(float):float"/>
    <method name="expm1l(long double):long double"/>
    <method name="fabs(double):double"/>
    <method name="fabs(float):float"/>
    <method name="fabs(long double):long double"/>
    <method name="fabsf(float):float"/>
    <method name="fabsl(long double):long double"/>
    <method name="fchdir(int):int"/>
    <method name="fchflags(int;__uint32_t):int"/>
    <method name="fchmod(int;mode_t):int"/>
    <method name="fchmodx_np(int;filesec_t):int"/>
    <method name="fchown(int;uid_t;gid_t):int"/>
    <method name="fclose(FILE*):int"/>
    <method name="fclose_file_func(voidpf;voidpf):int"/>
    <method name="fcntl(int;int, ...):int"/>
    <method name="fcopyfile(int;int;copyfile_state_t;copyfile_flags_t):int"/>
    <method name="fcvt(double;int;int*;int*):char*"/>
    <method name="fdim(double;double):double"/>
    <method name="fdimf(float;float):float"/>
    <method name="fdiml(long double;long double):long double"/>
    <method name="fdopen(int;const char*):FILE*"/>
    <method name="feclearexcept(int):int"/>
    <method name="fegetenv(fenv_t*):int"/>
    <method name="fegetexceptflag(fexcept_t*;int):int"/>
    <method name="fegetround():int"/>
    <method name="feholdexcept(fenv_t*):int"/>
    <method name="feof(FILE*):int"/>
    <method name="feraiseexcept(int):int"/>
    <method name="ferror(FILE*):int"/>
    <method name="ferror_file_func(voidpf;voidpf):int"/>
    <method name="fesetenv(const fenv_t*):int"/>
    <method name="fesetexceptflag(const fexcept_t*;int):int"/>
    <method name="fesetround(int):int"/>
    <method name="fetestexcept(int):int"/>
    <method name="feupdateenv(const fenv_t*):int"/>
    <method name="fflagstostr(unsigned long):char*"/>
    <method name="fflush(FILE*):int"/>
    <method name="ffs(int):int"/>
    <method name="ffsctl(int;unsigned long;void*;unsigned int):int"/>
    <method name="ffsl(long):int"/>
    <method name="fgetattrlist(int;void*;void*;size_t;unsigned long):int"/>
    <method name="fgetc(FILE *):int"/>
    <method name="fgetc(FILE*):int"/>
    <method name="fgetln(FILE*;size_t*):char*"/>
    <method name="fgetpos(FILE*;fpos_t*):int"/>
    <method name="fgets(char*;int;FILE*):char*"/>
    <method name="fgetwc(FILE*):wint_t"/>
    <method name="fgetwc_l(int*;int):int"/>
    <method name="fgetwln(FILE*;size_t*):wchar_t*"/>
    <method name="fgetws(wchar_t*;int;FILE*):wchar_t*"/>
    <method name="fgetws_l(int*;int;int*;int):int*"/>
    <method name="fgetxattr(int;const char*;void*;size_t;u_int32_t;int):ssize_t"/>
    <method name="fhopen(const struct fhandle*;int):int"/>
    <method name="fileno(FILE*):int"/>
    <method name="filesec_dup(filesec_t):filesec_t"/>
    <method name="filesec_free(filesec_t):void"/>
    <method name="filesec_get_property(filesec_t;filesec_property_t;void*):int"/>
    <method name="filesec_init():filesec_t"/>
    <method name="filesec_query_property(filesec_t;filesec_property_t;int*):int"/>
    <method name="filesec_set_property(filesec_t;filesec_property_t;const void*):int"/>
    <method name="filesec_unset_property(filesec_t;filesec_property_t):int"/>
    <method name="fill(char*;char*;const char):void"/>
    <method name="fill(signed char*;signed char*;const signed char):void"/>
    <method name="fill(unsigned char*;unsigned char*;const unsigned char):void"/>
    <method name="fill_fopen64_filefunc(zlib_filefunc64_def*):void"/>
    <method name="fill_fopen_filefunc(zlib_filefunc_def*):void"/>
    <method name="fill_zlib_filefunc64_32_def_from_filefunc32(zlib_filefunc64_32_def*;const zlib_filefunc_def*):void"/>
    <method name="finite(double):int"/>
    <method name="flags():fmtflags"/>
    <method name="flags(fmtflags):fmtflags"/>
    <method name="flattenChildren(int):int"/>
    <method name="flistxattr(int;char*;size_t;int):ssize_t"/>
    <method name="flock(int;int):int"/>
    <method name="flockfile(FILE*):void"/>
    <method name="floor(double):double"/>
    <method name="floor(float):float"/>
    <method name="floor(long double):long double"/>
    <method name="floorf(float):float"/>
    <method name="floorl(long double):long double"/>
    <method name="fls(int):int"/>
    <method name="flsl(long):int"/>
    <method name="fma(double;double;double):double"/>
    <method name="fmaf(float;float;float):float"/>
    <method name="fmal(long double;long double;long double):long double"/>
    <method name="fmax(double;double):double"/>
    <method name="fmaxf(float;float):float"/>
    <method name="fmaxl(long double;long double):long double"/>
    <method name="fmin(double;double):double"/>
    <method name="fminf(float;float):float"/>
    <method name="fminl(long double;long double):long double"/>
    <method name="fmod(double;double):double"/>
    <method name="fmod(float;float):float"/>
    <method name="fmod(long double;long double):long double"/>
    <method name="fmodf(float;float):float"/>
    <method name="fmodl(long double;long double):long double"/>
    <method name="fmtcheck(const char*;const char*):const char*"/>
    <method name="fmtmsg(long;const char*;int;const char*;const char*;const char*):int"/>
    <method name="fnmatch(const char*;const char*;int):int"/>
    <method name="fopen(const char*;const char*):FILE*"/>
    <method name="fopen64_file_func(voidpf;const void*;int):voidpf"/>
    <method name="fopen_file_func(voidpf;const char*;int):voidpf"/>
    <method name="fork():pid_t"/>
    <method name="forkpty(int*;char*;struct termios*;struct winsize*):pid_t"/>
    <method name="fparseln(FILE*;size_t*;size_t*;const char*;int):char*"/>
    <method name="fpathconf(int;int):long"/>
    <method name="fprintf(FILE*;const char*, ...):int"/>
    <method name="fpurge(FILE*):int"/>
    <method name="fputc(int;FILE*):int"/>
    <method name="fputs(const char*;FILE*):int"/>
    <method name="fputwc(wchar_t;FILE*):wint_t"/>
    <method name="fputws(const wchar_t*;FILE*):int"/>
    <method name="fputws_l(const int*;int*;int):int"/>
    <method name="fread(void*;size_t;size_t;FILE*):size_t"/>
    <method name="fread_file_func(voidpf;voidpf;void*;uLong):uLong"/>
    <method name="free(void*):void"/>
    <method name="free_datablock(linkedlist_datablock_internal*):void"/>
    <method name="free_linkedlist(linkedlist_data*):void"/>
    <method name="freeaddrinfo(LPADDRINFO):void"/>
    <method name="freeaddrinfo(struct addrinfo*):void"/>
    <method name="freehostent(struct hostent*):void"/>
    <method name="freeifaddrs(struct ifaddrs*):void"/>
    <method name="freeifmaddrs(struct ifmaddrs*):void"/>
    <method name="freelocale(locale_t):int"/>
    <method name="fremovexattr(int;const char*;int):int"/>
    <method name="freopen(const char*;const char*;FILE*):FILE*"/>
    <method name="frexp(double;int*):double"/>
    <method name="frexp(float;int*):float"/>
    <method name="frexp(long double;int*):long double"/>
    <method name="frexpf(float;int*):float"/>
    <method name="frexpl(long double;int*):long double"/>
    <method name="fscanf(FILE*;const char*, ...):int"/>
    <method name="fsctl(const char*;unsigned long;void*;unsigned int):int"/>
    <method name="fseek(FILE*;long;int):int"/>
    <method name="fseek64_file_func(voidpf;voidpf;ZPOS64_T;int):long"/>
    <method name="fseek_file_func(voidpf;voidpf;uLong;int):long"/>
    <method name="fseeko(FILE*;off_t;int):int"/>
    <method name="fsetattrlist(int;void*;void*;size_t;unsigned long):int"/>
    <method name="fsetpos(FILE*;const fpos_t*):int"/>
    <method name="fsetxattr(int;const char*;const void*;size_t;u_int32_t;int):int"/>
    <method name="fstat(int;struct stat*):int"/>
    <method name="fstatfs(int;struct statfs*):int"/>
    <method name="fstatvfs(int;struct statvfs*):int"/>
    <method name="fstatx_np(int;struct stat*;filesec_t):int"/>
    <method name="fsync(int):int"/>
    <method name="fsync_volume_np(int;int):int"/>
    <method name="ftell(FILE*):long"/>
    <method name="ftell64_file_func(voidpf;voidpf):ZPOS64_T"/>
    <method name="ftell_file_func(voidpf;voidpf):long"/>
    <method name="ftello(FILE*):off_t"/>
    <method name="ftime(struct timeb*):int"/>
    <method name="ftok(const char*;int):key_t"/>
    <method name="ftruncate(int;off_t):int"/>
    <method name="ftrylockfile(FILE*):int"/>
    <method name="fts_children(FTS*;int):FTSENT*"/>
    <method name="fts_close(FTS*):int"/>
    <method name="fts_open(const char**;int;(*)(const FTSENT**;const FTSENT**):int):FTS*"/>
    <method name="fts_open_b(const char**;int;(^)(const FTSENT**;const FTSENT**):int):FTS*"/>
    <method name="fts_read(FTS*):FTSENT*"/>
    <method name="fts_set(FTS*;FTSENT*;int):int"/>
    <method name="ftw(const char*;(*)(const char*;const struct stat*;int):int;int):int"/>
    <method name="function():int"/>
    <method name="funlockfile(FILE*):void"/>
    <method name="funopen(const void*;(*)(void*;char*;int):int;(*)(void*;const char*;int):int;(*)(void*;fpos_t;int):fpos_t;(*)(void*):int):FILE*"/>
    <method name="futimes(int;const struct timeval*):int"/>
    <method name="fwide(FILE*;int):int"/>
    <method name="fwprintf(FILE*;const wchar_t*, ...):int"/>
    <method name="fwprintf_l(int*;int;const int*, ...):int"/>
    <method name="fwrite(const void*;size_t;size_t;FILE*):size_t"/>
    <method name="fwrite_file_func(voidpf;voidpf;const void*;uLong):uLong"/>
    <method name="fwscanf(FILE*;const wchar_t*, ...):int"/>
    <method name="fwscanf_l(int*;int;const int*, ...):int"/>
    <method name="gai_strerror(int):const char*"/>
    <method name="gai_strerrorA(int):char*"/>
    <method name="gai_strerrorW(int):WCHAR*"/>
    <method name="gamma(double):double"/>
    <method name="gcvt(double;int;char*):char*"/>
    <method name="getWidthInfo(int):int"/>
    <method name="get_allocator():allocator_type"/>
    <method name="get_crc_table():const uLongf*"/>
    <method name="get_dp_control_port(host_priv_t;mach_port_t*):kern_return_t"/>
    <method name="get_edata():unsigned long"/>
    <method name="get_end():unsigned long"/>
    <method name="get_etext():unsigned long"/>
    <method name="get_rfc2409_prime_1024(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc2409_prime_768(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_1536(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_2048(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_3072(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_4096(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_6144(BIGNUM*):BIGNUM*"/>
    <method name="get_rfc3526_prime_8192(BIGNUM*):BIGNUM*"/>
    <method name="getacdir(char*;int):int"/>
    <method name="getacexpire(int*;time_t*;size_t*):int"/>
    <method name="getacfilesz(size_t*):int"/>
    <method name="getacflg(char*;int):int"/>
    <method name="getachost(char*;size_t):int"/>
    <method name="getacmin(int*):int"/>
    <method name="getacna(char*;int):int"/>
    <method name="getacpol(char*;size_t):int"/>
    <method name="getacsflagsmask(const char*;char*;size_t):int"/>
    <method name="getaddrinfo(const char*;const char*;const addrinfo*;addrinfo**):int"/>
    <method name="getaddrinfo(const char*;const char*;const struct addrinfo*;struct addrinfo**):int"/>
    <method name="getattrlist(const char*;void*;void*;size_t;unsigned long):int"/>
    <method name="getauclassent():struct au_class_ent*"/>
    <method name="getauclassent_r(au_class_ent_t*):struct au_class_ent*"/>
    <method name="getauclassnam(const char*):struct au_class_ent*"/>
    <method name="getauclassnam_r(au_class_ent_t*;const char*):struct au_class_ent*"/>
    <method name="getauclassnum(au_class_t):struct au_class_ent*"/>
    <method name="getauclassnum_r(au_class_ent_t*;au_class_t):struct au_class_ent*"/>
    <method name="getaudit(struct auditinfo*):int"/>
    <method name="getaudit_addr(struct auditinfo_addr*;int):int"/>
    <method name="getauditflagsbin(char*;au_mask_t*):int"/>
    <method name="getauditflagschar(char*;au_mask_t*;int):int"/>
    <method name="getauevent():struct au_event_ent*"/>
    <method name="getauevent_r(struct au_event_ent*):struct au_event_ent*"/>
    <method name="getauevnam(const char*):struct au_event_ent*"/>
    <method name="getauevnam_r(struct au_event_ent*;const char*):struct au_event_ent*"/>
    <method name="getauevnonam(const char*):au_event_t*"/>
    <method name="getauevnonam_r(au_event_t*;const char*):au_event_t*"/>
    <method name="getauevnum(au_event_t):struct au_event_ent*"/>
    <method name="getauevnum_r(struct au_event_ent*;au_event_t):struct au_event_ent*"/>
    <method name="getauid(au_id_t*):int"/>
    <method name="getauuserent():struct au_user_ent*"/>
    <method name="getauuserent_r(struct au_user_ent*):struct au_user_ent*"/>
    <method name="getauusernam(const char*):struct au_user_ent*"/>
    <method name="getauusernam_r(struct au_user_ent*;const char*):struct au_user_ent*"/>
    <method name="getbsize(int*;long*):char*"/>
    <method name="getc(FILE *):int"/>
    <method name="getc(FILE*):int"/>
    <method name="getc_unlocked(FILE*):int"/>
    <method name="getchar():int"/>
    <method name="getchar_unlocked():int"/>
    <method name="getcwd(char*;size_t):char*"/>
    <method name="getdate(const char*):struct tm*"/>
    <method name="getdelim(char**;size_t*;int;FILE*):ssize_t"/>
    <method name="getdirentries(int;char*;int;long*):int"/>
    <method name="getdirentriesattr(int;void*;void*;size_t;unsigned long*;unsigned long*;unsigned long*;unsigned long):int"/>
    <method name="getdomainname(char*;int):int"/>
    <method name="getdtablesize():int"/>
    <method name="getegid():gid_t"/>
    <method name="getenv(const char*):char*"/>
    <method name="getenv_s(size_t*;char*;size_t;const char*):errno_t"/>
    <method name="geteuid():uid_t"/>
    <method name="getfauditflags(au_mask_t*;au_mask_t*;au_mask_t*):int"/>
    <method name="getfh(const char*;fhandle_t*):int"/>
    <method name="getfsent():struct fstab*"/>
    <method name="getfsfile(const char*):struct fstab*"/>
    <method name="getfsspec(const char*):struct fstab*"/>
    <method name="getfsstat(struct statfs*;int;int):int"/>
    <method name="getgid():gid_t"/>
    <method name="getgrent():struct group*"/>
    <method name="getgrgid(gid_t):struct group*"/>
    <method name="getgrgid_r(gid_t;struct group*;char*;size_t;struct group**):int"/>
    <method name="getgrnam(const char*):struct group*"/>
    <method name="getgrnam_r(const char*;struct group*;char*;size_t;struct group**):int"/>
    <method name="getgrouplist(const char*;int;int*;int*):int"/>
    <method name="getgroups(int;gid_t*):int"/>
    <method name="getgruuid(unsigned char*):struct group*"/>
    <method name="getgruuid_r(unsigned char*;struct group*;char*;size_t;struct group**):int"/>
    <method name="gethostbyaddr(const char*;int;int):hostent*"/>
    <method name="gethostbyaddr(const void*;socklen_t;int):struct hostent*"/>
    <method name="gethostbyname(const char*):hostent*"/>
    <method name="gethostbyname(const char*):struct hostent*"/>
    <method name="gethostbyname2(const char*;int):struct hostent*"/>
    <method name="gethostent():struct hostent*"/>
    <method name="gethostid():long"/>
    <method name="gethostname(char*;int):int"/>
    <method name="gethostname(char*;size_t):int"/>
    <method name="gethostuuid(unsigned char*;const struct timespec*):int"/>
    <method name="getifaddrs(struct ifaddrs**):int"/>
    <method name="getifmaddrs(struct ifmaddrs**):int"/>
    <method name="getiopolicy_np(int;int):int"/>
    <method name="getipnodebyaddr(const void*;size_t;int;int*):struct hostent*"/>
    <method name="getipnodebyname(const char*;int;int;int*):struct hostent*"/>
    <method name="getipv4sourcefilter(int;struct in_addr;struct in_addr;uint32_t*;uint32_t*;struct in_addr*):int"/>
    <method name="getitimer(int;struct itimerval*):int"/>
    <method name="getlastlogx(uid_t;struct lastlogx*):struct lastlogx*"/>
    <method name="getlastlogxbyname(const char*;struct lastlogx*):struct lastlogx*"/>
    <method name="getlcid(int):int"/>
    <method name="getline(char**;size_t*;FILE*):ssize_t"/>
    <method name="getloadavg(double*;int):int"/>
    <method name="getloc():int"/>
    <method name="getlogin():char*"/>
    <method name="getlogin_r(char*;size_t):int"/>
    <method name="getmntinfo(struct statfs**;int):int"/>
    <method name="getmode(const void*;mode_t):mode_t"/>
    <method name="getnameinfo(const sockaddr*;socklen_t;char*;DWORD;char*;DWORD;int):int"/>
    <method name="getnameinfo(const struct sockaddr*;socklen_t;char*;socklen_t;char*;socklen_t;int):int"/>
    <method name="getnetbyaddr(uint32_t;int):struct netent*"/>
    <method name="getnetbyname(const char*):struct netent*"/>
    <method name="getnetent():struct netent*"/>
    <method name="getnetgrent(char**;char**;char**):int"/>
    <method name="getopt(int;const char**;char):int"/>
    <method name="getopt(int;const char**;const char*):int"/>
    <method name="getopt_long(int;const char**;const char*;const struct option*;int*):int"/>
    <method name="getopt_long_only(int;const char**;const char*;const struct option*;int*):int"/>
    <method name="getpagesize():int"/>
    <method name="getpass(const char*):char*"/>
    <method name="getpeereid(int;uid_t*;gid_t*):int"/>
    <method name="getpeername(SOCKET;sockaddr*;int*):int"/>
    <method name="getpeername(int;sockaddr*;socklen_t*):int"/>
    <method name="getpeername(int;struct sockaddr*;socklen_t*):int"/>
    <method name="getpgid(pid_t):pid_t"/>
    <method name="getpgrp():pid_t"/>
    <method name="getpid():pid_t"/>
    <method name="getppid():pid_t"/>
    <method name="getpriority(int;id_t):int"/>
    <method name="getprogname():const char*"/>
    <method name="getprotobyname(const char*):protoent*"/>
    <method name="getprotobyname(const char*):struct protoent*"/>
    <method name="getprotobynumber(int):protoent*"/>
    <method name="getprotobynumber(int):struct protoent*"/>
    <method name="getprotoent():struct protoent*"/>
    <method name="getpwent():struct passwd*"/>
    <method name="getpwnam(const char*):struct passwd*"/>
    <method name="getpwnam_r(const char*;struct passwd*;char*;size_t;struct passwd**):int"/>
    <method name="getpwuid(uid_t):struct passwd*"/>
    <method name="getpwuid_r(uid_t;struct passwd*;char*;size_t;struct passwd**):int"/>
    <method name="getpwuuid(unsigned char*):struct passwd*"/>
    <method name="getpwuuid_r(unsigned char*;struct passwd*;char*;size_t;struct passwd**):int"/>
    <method name="getrlimit(int;struct rlimit*):int"/>
    <method name="getrpcbyname(const char*):struct rpcent*"/>
    <method name="getrpcbynumber(long):struct rpcent*"/>
    <method name="getrpcent():struct rpcent*"/>
    <method name="getrusage(int;struct rusage*):int"/>
    <method name="gets(char*):char*"/>
    <method name="getsectbyname(const char*;const char*):const struct section*"/>
    <method name="getsectbynamefromheader(const struct mach_header*;const char*;const char*):const struct section*"/>
    <method name="getsectbynamefromheader_64(const struct mach_header_64*;const char*;const char*):const struct section_64*"/>
    <method name="getsectdata(const char*;const char*;unsigned long*):char*"/>
    <method name="getsectdatafromFramework(const char*;const char*;const char*;unsigned long*):char*"/>
    <method name="getsectdatafromheader(const struct mach_header*;const char*;const char*;uint32_t*):char*"/>
    <method name="getsectdatafromheader_64(const struct mach_header_64*;const char*;const char*;uint64_t*):char*"/>
    <method name="getsectiondata(const struct mach_header*;const char*;const char*;unsigned long*):uint8_t*"/>
    <method name="getsegbyname(const char*):const struct segment_command*"/>
    <method name="getsegmentdata(const struct mach_header*;const char*;unsigned long*):uint8_t*"/>
    <method name="getservbyname(const char*;const char*):servent*"/>
    <method name="getservbyname(const char*;const char*):struct servent*"/>
    <method name="getservbyport(int;const char*):servent*"/>
    <method name="getservbyport(int;const char*):struct servent*"/>
    <method name="getservent():struct servent*"/>
    <method name="getsgroups_np(int*;unsigned char*):int"/>
    <method name="getsid(pid_t):pid_t"/>
    <method name="getsockname(SOCKET;sockaddr*;int*):int"/>
    <method name="getsockname(int;sockaddr*;socklen_t*):int"/>
    <method name="getsockname(int;struct sockaddr*;socklen_t*):int"/>
    <method name="getsockopt(SOCKET;int;int;char*;int*):int"/>
    <method name="getsockopt(int;int;int;void*;socklen_t*):int"/>
    <method name="getsourcefilter(int;uint32_t;struct sockaddr*;socklen_t;uint32_t*;uint32_t*;struct sockaddr_storage*):int"/>
    <method name="getsubopt(char**;const char**;char**):int"/>
    <method name="gettimeofday(struct timeval*;void*):int"/>
    <method name="getttyent():struct ttyent*"/>
    <method name="getttynam(const char*):struct ttyent*"/>
    <method name="getuid():uid_t"/>
    <method name="getusershell():char*"/>
    <method name="getutxent():struct utmpx*"/>
    <method name="getutxent_wtmp():struct utmpx*"/>
    <method name="getutxid(const struct utmpx*):struct utmpx*"/>
    <method name="getutxline(const struct utmpx*):struct utmpx*"/>
    <method name="getvfsbyname(const char*;struct vfsconf*):int"/>
    <method name="getw(FILE*):int"/>
    <method name="getwc(FILE*):wint_t"/>
    <method name="getwc_l(int*;int):int"/>
    <method name="getwchar():wint_t"/>
    <method name="getwd(char*):char*"/>
    <method name="getwgroups_np(int*;unsigned char*):int"/>
    <method name="getxattr(const char*;const char*;void*;size_t;u_int32_t;int):ssize_t"/>
    <method name="glCompressedTexImage2D(GLenum;GLint;GLenum;GLsizei;GLsizei;GLint;GLsizei;const GLvoid*):void"/>
    <method name="glob(const char*;int;(*)(const char*;int):int;glob_t*):int"/>
    <method name="glob_b(const char*;int;(^)(const char*;int):int;glob_t*):int"/>
    <method name="globfree(glob_t*):void"/>
    <method name="gmtime(const time_t*):struct tm*"/>
    <method name="gmtime_r(const time_t*;struct tm*):struct tm*"/>
    <method name="grantpt(int):int"/>
    <method name="group_from_gid(gid_t;int):char*"/>
    <method name="gss_aapl_change_password(const gss_name_t;gss_const_OID;CFDictionaryRef;CFErrorRef*):OM_uint32"/>
    <method name="gzbuffer(gzFile;unsigned int):int"/>
    <method name="gzclearerr(gzFile):void"/>
    <method name="gzclose(gzFile):int"/>
    <method name="gzclose_r(gzFile):int"/>
    <method name="gzclose_w(gzFile):int"/>
    <method name="gzdirect(gzFile):int"/>
    <method name="gzdopen(int;const char*):gzFile"/>
    <method name="gzeof(gzFile):int"/>
    <method name="gzerror(gzFile;int*):const char*"/>
    <method name="gzflush(gzFile;int):int"/>
    <method name="gzgetc(gzFile):int"/>
    <method name="gzgets(gzFile;char*;int):char*"/>
    <method name="gzoffset(gzFile):long"/>
    <method name="gzopen(const char*;const char*):gzFile"/>
    <method name="gzprintf(gzFile;const char*, ...):int"/>
    <method name="gzputc(gzFile;int):int"/>
    <method name="gzputs(gzFile;const char*):int"/>
    <method name="gzread(gzFile;voidp;unsigned int):int"/>
    <method name="gzrewind(gzFile):int"/>
    <method name="gzseek(gzFile;long;int):long"/>
    <method name="gzsetparams(gzFile;int;int):int"/>
    <method name="gztell(gzFile):long"/>
    <method name="gzungetc(int;gzFile):int"/>
    <method name="gzwrite(gzFile;voidpc;unsigned int):int"/>
    <method name="handleResize():int"/>
    <method name="havedisk(char*):int"/>
    <method name="hcreate(size_t):int"/>
    <method name="hdestroy():void"/>
    <method name="heapsort(void*;size_t;size_t;(*)(const void*;const void*):int):int"/>
    <method name="heapsort_b(void*;size_t;size_t;(^)(const void*;const void*):int):int"/>
    <method name="herror(const char*):void"/>
    <method name="hex_to_string(unsigned char*;long):char*"/>
    <method name="host_default_memory_manager(host_priv_t;memory_object_default_t*;memory_object_cluster_size_t):kern_return_t"/>
    <method name="host_get_UNDServer(host_priv_t;UNDServerRef*):kern_return_t"/>
    <method name="host_get_boot_info(host_priv_t;char*):kern_return_t"/>
    <method name="host_get_clock_control(host_priv_t;clock_id_t;clock_ctrl_t*):kern_return_t"/>
    <method name="host_get_clock_service(host_t;clock_id_t;clock_serv_t*):kern_return_t"/>
    <method name="host_get_exception_ports(host_priv_t;exception_mask_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="host_get_io_master(host_t;io_master_t*):kern_return_t"/>
    <method name="host_get_special_port(host_priv_t;int;int;mach_port_t*):kern_return_t"/>
    <method name="host_info(host_t;host_flavor_t;host_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_kernel_version(host_t;char*):kern_return_t"/>
    <method name="host_lockgroup_info(host_t;lockgroup_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_page_size(host_t;vm_size_t*):kern_return_t"/>
    <method name="host_priv_statistics(host_priv_t;host_flavor_t;host_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_processor_info(host_t;processor_flavor_t;natural_t*;processor_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_processor_set_priv(host_priv_t;processor_set_name_t;processor_set_t*):kern_return_t"/>
    <method name="host_processor_sets(host_priv_t;processor_set_name_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_processors(host_priv_t;processor_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_reboot(host_priv_t;int):kern_return_t"/>
    <method name="host_request_notification(host_t;host_flavor_t;mach_port_t):kern_return_t"/>
    <method name="host_security_create_task_token(host_security_t;task_t;security_token_t;audit_token_t;host_t;ledger_array_t;mach_msg_type_number_t;boolean_t;task_t*):kern_return_t"/>
    <method name="host_security_set_task_token(host_security_t;task_t;security_token_t;audit_token_t;host_t):kern_return_t"/>
    <method name="host_set_UNDServer(host_priv_t;UNDServerRef):kern_return_t"/>
    <method name="host_set_exception_ports(host_priv_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):kern_return_t"/>
    <method name="host_set_special_port(host_priv_t;int;mach_port_t):kern_return_t"/>
    <method name="host_statistics(host_t;host_flavor_t;host_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_statistics64(host_t;host_flavor_t;host_info64_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_swap_exception_ports(host_priv_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="host_virtual_physical_table_info(host_t;hash_info_bucket_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="host_zone_info(host_priv_t;zone_name_array_t*;mach_msg_type_number_t*;zone_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="hsearch(ENTRY;ACTION):ENTRY*"/>
    <method name="hstrerror(int):const char*"/>
    <method name="htonl(u_long):u_long"/>
    <method name="htons(u_short):u_short"/>
    <method name="hypot(double;double):double"/>
    <method name="hypotf(float;float):float"/>
    <method name="hypotl(long double;long double):long double"/>
    <method name="i2a_ACCESS_DESCRIPTION(BIO*;ACCESS_DESCRIPTION*):int"/>
    <method name="i2a_ASN1_ENUMERATED(BIO*;ASN1_ENUMERATED*):int"/>
    <method name="i2a_ASN1_INTEGER(BIO*;ASN1_INTEGER*):int"/>
    <method name="i2a_ASN1_OBJECT(BIO*;ASN1_OBJECT*):int"/>
    <method name="i2a_ASN1_STRING(BIO*;ASN1_STRING*;int):int"/>
    <method name="i2c_ASN1_BIT_STRING(ASN1_BIT_STRING*;unsigned char**):int"/>
    <method name="i2c_ASN1_INTEGER(ASN1_INTEGER*;unsigned char**):int"/>
    <method name="i2d_ACCESS_DESCRIPTION(ACCESS_DESCRIPTION*;unsigned char**):int"/>
    <method name="i2d_ASN1_BIT_STRING(ASN1_BIT_STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_BMPSTRING(ASN1_BMPSTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_BOOLEAN(int;unsigned char**):int"/>
    <method name="i2d_ASN1_ENUMERATED(ASN1_ENUMERATED*;unsigned char**):int"/>
    <method name="i2d_ASN1_GENERALIZEDTIME(ASN1_GENERALIZEDTIME*;unsigned char**):int"/>
    <method name="i2d_ASN1_GENERALSTRING(ASN1_GENERALSTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_HEADER(ASN1_HEADER*;unsigned char**):int"/>
    <method name="i2d_ASN1_IA5STRING(ASN1_IA5STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_INTEGER(ASN1_INTEGER*;unsigned char**):int"/>
    <method name="i2d_ASN1_NULL(ASN1_NULL*;unsigned char**):int"/>
    <method name="i2d_ASN1_OBJECT(ASN1_OBJECT*;unsigned char**):int"/>
    <method name="i2d_ASN1_OCTET_STRING(ASN1_OCTET_STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_PRINTABLE(ASN1_STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_PRINTABLESTRING(ASN1_PRINTABLESTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_SET(STACK*;unsigned char**;i2d_of_void*;int;int;int):int"/>
    <method name="i2d_ASN1_T61STRING(ASN1_T61STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_TIME(ASN1_TIME*;unsigned char**):int"/>
    <method name="i2d_ASN1_TYPE(ASN1_TYPE*;unsigned char**):int"/>
    <method name="i2d_ASN1_UNIVERSALSTRING(ASN1_UNIVERSALSTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_UTCTIME(ASN1_UTCTIME*;unsigned char**):int"/>
    <method name="i2d_ASN1_UTF8STRING(ASN1_UTF8STRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_VISIBLESTRING(ASN1_VISIBLESTRING*;unsigned char**):int"/>
    <method name="i2d_ASN1_bytes(ASN1_STRING*;unsigned char**;int;int):int"/>
    <method name="i2d_AUTHORITY_INFO_ACCESS(AUTHORITY_INFO_ACCESS*;unsigned char**):int"/>
    <method name="i2d_AUTHORITY_KEYID(AUTHORITY_KEYID*;unsigned char**):int"/>
    <method name="i2d_BASIC_CONSTRAINTS(BASIC_CONSTRAINTS*;unsigned char**):int"/>
    <method name="i2d_CERTIFICATEPOLICIES(CERTIFICATEPOLICIES*;unsigned char**):int"/>
    <method name="i2d_CRL_DIST_POINTS(CRL_DIST_POINTS*;unsigned char**):int"/>
    <method name="i2d_DHparams(const DH*;unsigned char**):int"/>
    <method name="i2d_DIRECTORYSTRING(ASN1_STRING*;unsigned char**):int"/>
    <method name="i2d_DISPLAYTEXT(ASN1_STRING*;unsigned char**):int"/>
    <method name="i2d_DIST_POINT(DIST_POINT*;unsigned char**):int"/>
    <method name="i2d_DIST_POINT_NAME(DIST_POINT_NAME*;unsigned char**):int"/>
    <method name="i2d_DSAPrivateKey(const DSA*;unsigned char**):int"/>
    <method name="i2d_DSAPrivateKey_bio(BIO*;DSA*):int"/>
    <method name="i2d_DSAPrivateKey_fp(FILE*;DSA*):int"/>
    <method name="i2d_DSAPublicKey(const DSA*;unsigned char**):int"/>
    <method name="i2d_DSA_PUBKEY(DSA*;unsigned char**):int"/>
    <method name="i2d_DSA_PUBKEY_bio(BIO*;DSA*):int"/>
    <method name="i2d_DSA_PUBKEY_fp(FILE*;DSA*):int"/>
    <method name="i2d_DSA_SIG(const DSA_SIG*;unsigned char**):int"/>
    <method name="i2d_DSAparams(const DSA*;unsigned char**):int"/>
    <method name="i2d_ECDSA_SIG(const ECDSA_SIG*;unsigned char**):int"/>
    <method name="i2d_ECPKParameters(const EC_GROUP*;unsigned char**):int"/>
    <method name="i2d_ECParameters(EC_KEY*;unsigned char**):int"/>
    <method name="i2d_ECPrivateKey(EC_KEY*;unsigned char**):int"/>
    <method name="i2d_ECPrivateKey_bio(BIO*;EC_KEY*):int"/>
    <method name="i2d_ECPrivateKey_fp(FILE*;EC_KEY*):int"/>
    <method name="i2d_EC_PUBKEY(EC_KEY*;unsigned char**):int"/>
    <method name="i2d_EC_PUBKEY_bio(BIO*;EC_KEY*):int"/>
    <method name="i2d_EC_PUBKEY_fp(FILE*;EC_KEY*):int"/>
    <method name="i2d_EDIPARTYNAME(EDIPARTYNAME*;unsigned char**):int"/>
    <method name="i2d_EXTENDED_KEY_USAGE(EXTENDED_KEY_USAGE*;unsigned char**):int"/>
    <method name="i2d_GENERAL_NAME(GENERAL_NAME*;unsigned char**):int"/>
    <method name="i2d_GENERAL_NAMES(GENERAL_NAMES*;unsigned char**):int"/>
    <method name="i2d_NETSCAPE_CERT_SEQUENCE(NETSCAPE_CERT_SEQUENCE*;unsigned char**):int"/>
    <method name="i2d_NETSCAPE_SPKAC(NETSCAPE_SPKAC*;unsigned char**):int"/>
    <method name="i2d_NETSCAPE_SPKI(NETSCAPE_SPKI*;unsigned char**):int"/>
    <method name="i2d_NOTICEREF(NOTICEREF*;unsigned char**):int"/>
    <method name="i2d_Netscape_RSA(const RSA*;unsigned char**;(*)(char*;int;const char*;int):int*):int"/>
    <method name="i2d_OCSP_BASICRESP(OCSP_BASICRESP*;unsigned char**):int"/>
    <method name="i2d_OCSP_CERTID(OCSP_CERTID*;unsigned char**):int"/>
    <method name="i2d_OCSP_CERTSTATUS(OCSP_CERTSTATUS*;unsigned char**):int"/>
    <method name="i2d_OCSP_CRLID(OCSP_CRLID*;unsigned char**):int"/>
    <method name="i2d_OCSP_ONEREQ(OCSP_ONEREQ*;unsigned char**):int"/>
    <method name="i2d_OCSP_REQINFO(OCSP_REQINFO*;unsigned char**):int"/>
    <method name="i2d_OCSP_REQUEST(OCSP_REQUEST*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPBYTES(OCSP_RESPBYTES*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPDATA(OCSP_RESPDATA*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPID(OCSP_RESPID*;unsigned char**):int"/>
    <method name="i2d_OCSP_RESPONSE(OCSP_RESPONSE*;unsigned char**):int"/>
    <method name="i2d_OCSP_REVOKEDINFO(OCSP_REVOKEDINFO*;unsigned char**):int"/>
    <method name="i2d_OCSP_SERVICELOC(OCSP_SERVICELOC*;unsigned char**):int"/>
    <method name="i2d_OCSP_SIGNATURE(OCSP_SIGNATURE*;unsigned char**):int"/>
    <method name="i2d_OCSP_SINGLERESP(OCSP_SINGLERESP*;unsigned char**):int"/>
    <method name="i2d_OTHERNAME(OTHERNAME*;unsigned char**):int"/>
    <method name="i2d_PBE2PARAM(PBE2PARAM*;unsigned char**):int"/>
    <method name="i2d_PBEPARAM(PBEPARAM*;unsigned char**):int"/>
    <method name="i2d_PBKDF2PARAM(PBKDF2PARAM*;unsigned char**):int"/>
    <method name="i2d_PKCS12(PKCS12*;unsigned char**):int"/>
    <method name="i2d_PKCS12_BAGS(PKCS12_BAGS*;unsigned char**):int"/>
    <method name="i2d_PKCS12_MAC_DATA(PKCS12_MAC_DATA*;unsigned char**):int"/>
    <method name="i2d_PKCS12_SAFEBAG(PKCS12_SAFEBAG*;unsigned char**):int"/>
    <method name="i2d_PKCS12_bio(BIO*;PKCS12*):int"/>
    <method name="i2d_PKCS12_fp(FILE*;PKCS12*):int"/>
    <method name="i2d_PKCS7(PKCS7*;unsigned char**):int"/>
    <method name="i2d_PKCS7_DIGEST(PKCS7_DIGEST*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ENCRYPT(PKCS7_ENCRYPT*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ENC_CONTENT(PKCS7_ENC_CONTENT*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ENVELOPE(PKCS7_ENVELOPE*;unsigned char**):int"/>
    <method name="i2d_PKCS7_ISSUER_AND_SERIAL(PKCS7_ISSUER_AND_SERIAL*;unsigned char**):int"/>
    <method name="i2d_PKCS7_NDEF(PKCS7*;unsigned char**):int"/>
    <method name="i2d_PKCS7_RECIP_INFO(PKCS7_RECIP_INFO*;unsigned char**):int"/>
    <method name="i2d_PKCS7_SIGNED(PKCS7_SIGNED*;unsigned char**):int"/>
    <method name="i2d_PKCS7_SIGNER_INFO(PKCS7_SIGNER_INFO*;unsigned char**):int"/>
    <method name="i2d_PKCS7_SIGN_ENVELOPE(PKCS7_SIGN_ENVELOPE*;unsigned char**):int"/>
    <method name="i2d_PKCS7_bio(BIO*;PKCS7*):int"/>
    <method name="i2d_PKCS7_fp(FILE*;PKCS7*):int"/>
    <method name="i2d_PKCS8PrivateKeyInfo_bio(BIO*;EVP_PKEY*):int"/>
    <method name="i2d_PKCS8PrivateKeyInfo_fp(FILE*;EVP_PKEY*):int"/>
    <method name="i2d_PKCS8PrivateKey_bio(BIO*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8PrivateKey_fp(FILE*;EVP_PKEY*;const EVP_CIPHER*;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8PrivateKey_nid_bio(BIO*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8PrivateKey_nid_fp(FILE*;EVP_PKEY*;int;char*;int;pem_password_cb*;void*):int"/>
    <method name="i2d_PKCS8_PRIV_KEY_INFO(PKCS8_PRIV_KEY_INFO*;unsigned char**):int"/>
    <method name="i2d_PKCS8_PRIV_KEY_INFO_bio(BIO*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="i2d_PKCS8_PRIV_KEY_INFO_fp(FILE*;PKCS8_PRIV_KEY_INFO*):int"/>
    <method name="i2d_PKCS8_bio(BIO*;X509_SIG*):int"/>
    <method name="i2d_PKCS8_fp(FILE*;X509_SIG*):int"/>
    <method name="i2d_PKEY_USAGE_PERIOD(PKEY_USAGE_PERIOD*;unsigned char**):int"/>
    <method name="i2d_POLICYINFO(POLICYINFO*;unsigned char**):int"/>
    <method name="i2d_POLICYQUALINFO(POLICYQUALINFO*;unsigned char**):int"/>
    <method name="i2d_PROXY_CERT_INFO_EXTENSION(PROXY_CERT_INFO_EXTENSION*;unsigned char**):int"/>
    <method name="i2d_PROXY_POLICY(PROXY_POLICY*;unsigned char**):int"/>
    <method name="i2d_PUBKEY(EVP_PKEY*;unsigned char**):int"/>
    <method name="i2d_PUBKEY_bio(BIO*;EVP_PKEY*):int"/>
    <method name="i2d_PUBKEY_fp(FILE*;EVP_PKEY*):int"/>
    <method name="i2d_PrivateKey(EVP_PKEY*;unsigned char**):int"/>
    <method name="i2d_PrivateKey_bio(BIO*;EVP_PKEY*):int"/>
    <method name="i2d_PrivateKey_fp(FILE*;EVP_PKEY*):int"/>
    <method name="i2d_PublicKey(EVP_PKEY*;unsigned char**):int"/>
    <method name="i2d_RSAPrivateKey(const RSA*;unsigned char**):int"/>
    <method name="i2d_RSAPrivateKey_bio(BIO*;RSA*):int"/>
    <method name="i2d_RSAPrivateKey_fp(FILE*;RSA*):int"/>
    <method name="i2d_RSAPublicKey(const RSA*;unsigned char**):int"/>
    <method name="i2d_RSAPublicKey_bio(BIO*;RSA*):int"/>
    <method name="i2d_RSAPublicKey_fp(FILE*;RSA*):int"/>
    <method name="i2d_RSA_NET(const RSA*;unsigned char**;(*)(char*;int;const char*;int):int*;int):int"/>
    <method name="i2d_RSA_PUBKEY(RSA*;unsigned char**):int"/>
    <method name="i2d_RSA_PUBKEY_bio(BIO*;RSA*):int"/>
    <method name="i2d_RSA_PUBKEY_fp(FILE*;RSA*):int"/>
    <method name="i2d_SSL_SESSION(SSL_SESSION*;unsigned char**):int"/>
    <method name="i2d_SXNET(SXNET*;unsigned char**):int"/>
    <method name="i2d_SXNETID(SXNETID*;unsigned char**):int"/>
    <method name="i2d_USERNOTICE(USERNOTICE*;unsigned char**):int"/>
    <method name="i2d_X509(X509*;unsigned char**):int"/>
    <method name="i2d_X509_ALGOR(X509_ALGOR*;unsigned char**):int"/>
    <method name="i2d_X509_ATTRIBUTE(X509_ATTRIBUTE*;unsigned char**):int"/>
    <method name="i2d_X509_AUX(X509*;unsigned char**):int"/>
    <method name="i2d_X509_CERT_AUX(X509_CERT_AUX*;unsigned char**):int"/>
    <method name="i2d_X509_CERT_PAIR(X509_CERT_PAIR*;unsigned char**):int"/>
    <method name="i2d_X509_CINF(X509_CINF*;unsigned char**):int"/>
    <method name="i2d_X509_CRL(X509_CRL*;unsigned char**):int"/>
    <method name="i2d_X509_CRL_INFO(X509_CRL_INFO*;unsigned char**):int"/>
    <method name="i2d_X509_CRL_bio(BIO*;X509_CRL*):int"/>
    <method name="i2d_X509_CRL_fp(FILE*;X509_CRL*):int"/>
    <method name="i2d_X509_EXTENSION(X509_EXTENSION*;unsigned char**):int"/>
    <method name="i2d_X509_NAME(X509_NAME*;unsigned char**):int"/>
    <method name="i2d_X509_NAME_ENTRY(X509_NAME_ENTRY*;unsigned char**):int"/>
    <method name="i2d_X509_PKEY(X509_PKEY*;unsigned char**):int"/>
    <method name="i2d_X509_PUBKEY(X509_PUBKEY*;unsigned char**):int"/>
    <method name="i2d_X509_REQ(X509_REQ*;unsigned char**):int"/>
    <method name="i2d_X509_REQ_INFO(X509_REQ_INFO*;unsigned char**):int"/>
    <method name="i2d_X509_REQ_bio(BIO*;X509_REQ*):int"/>
    <method name="i2d_X509_REQ_fp(FILE*;X509_REQ*):int"/>
    <method name="i2d_X509_REVOKED(X509_REVOKED*;unsigned char**):int"/>
    <method name="i2d_X509_SIG(X509_SIG*;unsigned char**):int"/>
    <method name="i2d_X509_VAL(X509_VAL*;unsigned char**):int"/>
    <method name="i2d_X509_bio(BIO*;X509*):int"/>
    <method name="i2d_X509_fp(FILE*;X509*):int"/>
    <method name="i2o_ECPublicKey(EC_KEY*;unsigned char**):int"/>
    <method name="i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD*;ASN1_ENUMERATED*):char*"/>
    <method name="i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD*;ASN1_ENUMERATED*):char*"/>
    <method name="i2s_ASN1_INTEGER(X509V3_EXT_METHOD*;ASN1_INTEGER*):char*"/>
    <method name="i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD*;ASN1_OCTET_STRING*):char*"/>
    <method name="i2t_ASN1_OBJECT(char*;int;ASN1_OBJECT*):int"/>
    <method name="i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD*;ASN1_BIT_STRING*;STACK*):STACK*"/>
    <method name="i2v_GENERAL_NAME(X509V3_EXT_METHOD*;GENERAL_NAME*;STACK*):STACK*"/>
    <method name="i2v_GENERAL_NAMES(X509V3_EXT_METHOD*;GENERAL_NAMES*;STACK*):STACK*"/>
    <method name="icmax1_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="iconv(iconv_t;char**;size_t*;char**;size_t*):size_t"/>
    <method name="iconv_canonicalize(const char*):const char*"/>
    <method name="iconv_close(iconv_t):int"/>
    <method name="iconv_open(const char*;const char*):iconv_t"/>
    <method name="iconvctl(iconv_t;int;void*):int"/>
    <method name="iconvlist((*)(unsigned int;const const char**;void*):int;void*):void"/>
    <method name="idea_cbc_encrypt(const unsigned char*;unsigned char*;long;IDEA_KEY_SCHEDULE*;unsigned char*;int):void"/>
    <method name="idea_cfb64_encrypt(const unsigned char*;unsigned char*;long;IDEA_KEY_SCHEDULE*;unsigned char*;int*;int):void"/>
    <method name="idea_ecb_encrypt(const unsigned char*;unsigned char*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="idea_encrypt(unsigned long*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="idea_ofb64_encrypt(const unsigned char*;unsigned char*;long;IDEA_KEY_SCHEDULE*;unsigned char*;int*):void"/>
    <method name="idea_options():const char*"/>
    <method name="idea_set_decrypt_key(const IDEA_KEY_SCHEDULE*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="idea_set_encrypt_key(const unsigned char*;IDEA_KEY_SCHEDULE*):void"/>
    <method name="ieeeck_(__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_integer"/>
    <method name="if_freenameindex(struct if_nameindex*):void"/>
    <method name="if_indextoname(unsigned int;char*):char*"/>
    <method name="if_nameindex():struct if_nameindex*"/>
    <method name="if_nametoindex(const char*):unsigned int"/>
    <method name="ilaclc_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaclr_(__CLPK_integer*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="iladiag_(char*):__CLPK_integer"/>
    <method name="iladlc_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):__CLPK_integer"/>
    <method name="iladlr_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaenv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaprec_(char*):__CLPK_integer"/>
    <method name="ilaslc_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilaslr_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilatrans_(char*):__CLPK_integer"/>
    <method name="ilauplo_(char*):__CLPK_integer"/>
    <method name="ilaver_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ilazlc_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilazlr_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ilogb(double):int"/>
    <method name="ilogbf(float):int"/>
    <method name="ilogbl(long double):int"/>
    <method name="image_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="imaxabs(intmax_t):intmax_t"/>
    <method name="imaxdiv(intmax_t;intmax_t):imaxdiv_t"/>
    <method name="imp_getBlock(IMP):id"/>
    <method name="imp_implementationWithBlock(id):IMP"/>
    <method name="imp_removeBlock(IMP):BOOL"/>
    <method name="index(const char*;int):char*"/>
    <method name="inet6_opt_append(void*;int;int;__uint8_t;int;__uint8_t;void**):int"/>
    <method name="inet6_opt_find(void*;int;int;__uint8_t;int*;void**):int"/>
    <method name="inet6_opt_finish(void*;int;int):int"/>
    <method name="inet6_opt_get_val(void*;int;void*;int):int"/>
    <method name="inet6_opt_init(void*;int):int"/>
    <method name="inet6_opt_next(void*;int;int;__uint8_t*;int*;void**):int"/>
    <method name="inet6_opt_set_val(void*;int;void*;int):int"/>
    <method name="inet6_option_alloc(struct cmsghdr*;int;int;int):__uint8_t*"/>
    <method name="inet6_option_append(struct cmsghdr*;const __uint8_t*;int;int):int"/>
    <method name="inet6_option_find(const struct cmsghdr*;__uint8_t**;int):int"/>
    <method name="inet6_option_init(void*;struct cmsghdr**;int):int"/>
    <method name="inet6_option_next(const struct cmsghdr*;__uint8_t**):int"/>
    <method name="inet6_option_space(int):int"/>
    <method name="inet6_rth_add(void*;const struct in6_addr*):int"/>
    <method name="inet6_rth_getaddr(const void*;int):struct in6_addr*"/>
    <method name="inet6_rth_init(void*;int;int;int):void*"/>
    <method name="inet6_rth_reverse(const void*;void*):int"/>
    <method name="inet6_rth_segments(const void*):int"/>
    <method name="inet6_rth_space(int;int):int"/>
    <method name="inet6_rthdr_add(struct cmsghdr*;const struct in6_addr*;unsigned int):int"/>
    <method name="inet6_rthdr_getaddr(struct cmsghdr*;int):struct in6_addr*"/>
    <method name="inet6_rthdr_getflags(const struct cmsghdr*;int):int"/>
    <method name="inet6_rthdr_init(void*;int):struct cmsghdr*"/>
    <method name="inet6_rthdr_lasthop(struct cmsghdr*;unsigned int):int"/>
    <method name="inet6_rthdr_segments(const struct cmsghdr*):int"/>
    <method name="inet6_rthdr_space(int;int):int"/>
    <method name="inet_addr(const char*):in_addr_t"/>
    <method name="inet_addr(const char*):unsigned long"/>
    <method name="inet_aton(const char*;struct in_addr*):int"/>
    <method name="inet_lnaof(struct in_addr):in_addr_t"/>
    <method name="inet_makeaddr(in_addr_t;in_addr_t):struct in_addr"/>
    <method name="inet_net_ntop(int;const void*;int;char*;__darwin_size_t):char*"/>
    <method name="inet_net_pton(int;const char*;void*;__darwin_size_t):int"/>
    <method name="inet_neta(in_addr_t;char*;__darwin_size_t):char*"/>
    <method name="inet_netof(struct in_addr):in_addr_t"/>
    <method name="inet_network(const char*):in_addr_t"/>
    <method name="inet_nsap_addr(const char*;unsigned char*;int):unsigned int"/>
    <method name="inet_nsap_ntoa(int;const unsigned char*;char*):char*"/>
    <method name="inet_ntoa(in_addr):char*"/>
    <method name="inet_ntoa(struct in_addr):char*"/>
    <method name="inet_ntop(int;const void*;char*;socklen_t):const char*"/>
    <method name="inet_pton(int;const char*;void*):int"/>
    <method name="inflate(z_streamp;int):int"/>
    <method name="inflateBack(z_streamp;in_func;void*;out_func;void*):int"/>
    <method name="inflateBackEnd(z_streamp):int"/>
    <method name="inflateBackInit_(z_streamp;int;unsigned char*;const char*;int):int"/>
    <method name="inflateCopy(z_streamp;z_streamp):int"/>
    <method name="inflateEnd(z_streamp):int"/>
    <method name="inflateGetHeader(z_streamp;gz_headerp):int"/>
    <method name="inflateInit2_(z_streamp;int;const char*;int):int"/>
    <method name="inflateInit_(z_streamp;const char*;int):int"/>
    <method name="inflateMark(z_streamp):long"/>
    <method name="inflatePrime(z_streamp;int;int):int"/>
    <method name="inflateReset(z_streamp):int"/>
    <method name="inflateReset2(z_streamp;int):int"/>
    <method name="inflateSetDictionary(z_streamp;const Bytef*;uInt):int"/>
    <method name="inflateSync(z_streamp):int"/>
    <method name="inflateSyncPoint(z_streamp):int"/>
    <method name="inflateUndermine(z_streamp;int):int"/>
    <method name="initEnhancedCopyToClipboard():int"/>
    <method name="initUIForCBE(id):int"/>
    <method name="init_keys(const char*;unsigned long*;const unsigned long*):void"/>
    <method name="init_linkedlist(linkedlist_data*):void"/>
    <method name="initgroups(const char*;int):int"/>
    <method name="initstate(unsigned int;char*;size_t):char*"/>
    <method name="innetgr(const char*;const char*;const char*;const char*):int"/>
    <method name="insque(void*;void*):void"/>
    <method name="interactiveEscapedInputChanged():int"/>
    <method name="ioctl(int;unsigned long, ...):int"/>
    <method name="ioctlsocket(SOCKET;long;u_long*):int"/>
    <method name="iparmq_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):__CLPK_integer"/>
    <method name="ipsec_dump_policy():char*"/>
    <method name="ipsec_set_policy(char*;int):int"/>
    <method name="ipsec_strerror():const char*"/>
    <method name="iruserok(unsigned long;int;const char*;const char*):int"/>
    <method name="iruserok_sa(const void*;int;int;const char*;const char*):int"/>
    <method name="isSimpleCString(int):int"/>
    <method name="is_leap_year(NSUInteger):BOOL"/>
    <method name="isalnum(int):int"/>
    <method name="isalpha(int):int"/>
    <method name="isascii(int):int"/>
    <method name="isatty(int):int"/>
    <method name="isblank(int):int"/>
    <method name="iscntrl(int):int"/>
    <method name="isdigit(int):int"/>
    <method name="isgraph(int):int"/>
    <method name="ishexnumber(int):int"/>
    <method name="isideogram(int):int"/>
    <method name="islower(int):int"/>
    <method name="isnumber(int):int"/>
    <method name="isphonogram(int):int"/>
    <method name="isprint(int):int"/>
    <method name="ispunct(int):int"/>
    <method name="isrune(int):int"/>
    <method name="issetugid():int"/>
    <method name="isspace(int):int"/>
    <method name="isspecial(int):int"/>
    <method name="isupper(int):int"/>
    <method name="iswalnum(wint_t):int"/>
    <method name="iswalpha(wint_t):int"/>
    <method name="iswascii(wint_t):int"/>
    <method name="iswblank(wint_t):int"/>
    <method name="iswcntrl(wint_t):int"/>
    <method name="iswctype(wint_t;wctype_t):int"/>
    <method name="iswdigit(wint_t):int"/>
    <method name="iswgraph(wint_t):int"/>
    <method name="iswhexnumber(wint_t):int"/>
    <method name="iswideogram(wint_t):int"/>
    <method name="iswlower(wint_t):int"/>
    <method name="iswnumber(wint_t):int"/>
    <method name="iswphonogram(wint_t):int"/>
    <method name="iswprint(wint_t):int"/>
    <method name="iswpunct(wint_t):int"/>
    <method name="iswrune(wint_t):int"/>
    <method name="iswspace(wint_t):int"/>
    <method name="iswspecial(wint_t):int"/>
    <method name="iswupper(wint_t):int"/>
    <method name="iswxdigit(wint_t):int"/>
    <method name="isxdigit(int):int"/>
    <method name="itoa(int;char*;int):char*"/>
    <method name="ivar_getName(Ivar):const char*"/>
    <method name="ivar_getOffset(Ivar):ptrdiff_t"/>
    <method name="ivar_getTypeEncoding(Ivar):const char*"/>
    <method name="izmax1_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):__CLPK_integer"/>
    <method name="j0(double):double"/>
    <method name="j1(double):double"/>
    <method name="jn(int;double):double"/>
    <method name="jrand48(unsigned short*):long"/>
    <method name="json_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="kevent(int;const struct kevent*;int;struct kevent*;int;const struct timespec*):int"/>
    <method name="kevent64(int;const struct kevent64_s*;int;struct kevent64_s*;int;unsigned int;const struct timespec*):int"/>
    <method name="kext_request(host_priv_t;uint32_t;vm_offset_t;mach_msg_type_number_t;vm_offset_t*;mach_msg_type_number_t*;vm_offset_t*;mach_msg_type_number_t*;kern_return_t*):kern_return_t"/>
    <method name="kill(pid_t;int):int"/>
    <method name="killpg(pid_t;int):int"/>
    <method name="klm_cancel_1(struct klm_lockargs*;CLIENT*):klm_stat*"/>
    <method name="klm_cancel_1_svc(struct klm_lockargs*;struct svc_req*):klm_stat*"/>
    <method name="klm_lock_1(struct klm_lockargs*;CLIENT*):klm_stat*"/>
    <method name="klm_lock_1_svc(struct klm_lockargs*;struct svc_req*):klm_stat*"/>
    <method name="klm_test_1(struct klm_testargs*;CLIENT*):klm_testrply*"/>
    <method name="klm_test_1_svc(struct klm_testargs*;struct svc_req*):klm_testrply*"/>
    <method name="klm_unlock_1(struct klm_unlockargs*;CLIENT*):klm_stat*"/>
    <method name="klm_unlock_1_svc(struct klm_unlockargs*;struct svc_req*):klm_stat*"/>
    <method name="kmod_control(host_priv_t;kmod_t;kmod_control_flavor_t;kmod_args_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="kmod_create(host_priv_t;vm_address_t;kmod_t*):kern_return_t"/>
    <method name="kmod_destroy(host_priv_t;kmod_t):kern_return_t"/>
    <method name="kmod_get_info(host_t;kmod_args_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="kqueue():int"/>
    <method name="l64a(long):char*"/>
    <method name="labs(long):long"/>
    <method name="launch_data_alloc(launch_data_type_t):launch_data_t"/>
    <method name="launch_data_array_get_count(const launch_data_t):size_t"/>
    <method name="launch_data_array_get_index(const launch_data_t;size_t):launch_data_t"/>
    <method name="launch_data_array_set_index(launch_data_t;const launch_data_t;size_t):_Bool"/>
    <method name="launch_data_copy(launch_data_t):launch_data_t"/>
    <method name="launch_data_dict_get_count(const launch_data_t):size_t"/>
    <method name="launch_data_dict_insert(launch_data_t;const launch_data_t;const char*):_Bool"/>
    <method name="launch_data_dict_iterate(const launch_data_t;(*)(const launch_data_t;const char*;void*):void;void*):void"/>
    <method name="launch_data_dict_lookup(const launch_data_t;const char*):launch_data_t"/>
    <method name="launch_data_dict_remove(launch_data_t;const char*):_Bool"/>
    <method name="launch_data_free(launch_data_t):void"/>
    <method name="launch_data_get_bool(const launch_data_t):_Bool"/>
    <method name="launch_data_get_errno(const launch_data_t):int"/>
    <method name="launch_data_get_fd(const launch_data_t):int"/>
    <method name="launch_data_get_integer(const launch_data_t):long long"/>
    <method name="launch_data_get_machport(const launch_data_t):mach_port_t"/>
    <method name="launch_data_get_opaque(const launch_data_t):void*"/>
    <method name="launch_data_get_opaque_size(const launch_data_t):size_t"/>
    <method name="launch_data_get_real(const launch_data_t):double"/>
    <method name="launch_data_get_string(const launch_data_t):const char*"/>
    <method name="launch_data_get_type(const launch_data_t):launch_data_type_t"/>
    <method name="launch_data_new_bool(_Bool):launch_data_t"/>
    <method name="launch_data_new_fd(int):launch_data_t"/>
    <method name="launch_data_new_integer(long long):launch_data_t"/>
    <method name="launch_data_new_machport(mach_port_t):launch_data_t"/>
    <method name="launch_data_new_opaque(const void*;size_t):launch_data_t"/>
    <method name="launch_data_new_real(double):launch_data_t"/>
    <method name="launch_data_new_string(const char*):launch_data_t"/>
    <method name="launch_data_set_bool(launch_data_t;_Bool):_Bool"/>
    <method name="launch_data_set_fd(launch_data_t;int):_Bool"/>
    <method name="launch_data_set_integer(launch_data_t;long long):_Bool"/>
    <method name="launch_data_set_machport(launch_data_t;mach_port_t):_Bool"/>
    <method name="launch_data_set_opaque(launch_data_t;const void*;size_t):_Bool"/>
    <method name="launch_data_set_real(launch_data_t;double):_Bool"/>
    <method name="launch_data_set_string(launch_data_t;const char*):_Bool"/>
    <method name="launch_get_fd():int"/>
    <method name="launch_msg(const launch_data_t):launch_data_t"/>
    <method name="lchflags(const char*;__uint32_t):int"/>
    <method name="lchmod(const char*;mode_t):int"/>
    <method name="lchown(const char*;uid_t;gid_t):int"/>
    <method name="lcl_configure_by_component(_lcl_component_t;_lcl_level_t):uint32_t"/>
    <method name="lcl_configure_by_header(const char*;_lcl_level_t):uint32_t"/>
    <method name="lcl_configure_by_identifier(const char*;_lcl_level_t):uint32_t"/>
    <method name="lcl_configure_by_name(const char*;_lcl_level_t):uint32_t"/>
    <method name="lcong48(unsigned short*):void"/>
    <method name="ldexp(double;int):double"/>
    <method name="ldexp(float;int):float"/>
    <method name="ldexp(long double;int):long double"/>
    <method name="ldexpf(float;int):float"/>
    <method name="ldexpl(long double;int):long double"/>
    <method name="ldiv(long;long):ldiv_t"/>
    <method name="lexicographical_compare(const char*;const char*;const char*;const char*):int"/>
    <method name="lexicographical_compare(const unsigned char*;const unsigned char*;const unsigned char*;const unsigned char*):int"/>
    <method name="lfind(const void*;const void*;size_t*;size_t;(*)(const void*;const void*):int):void*"/>
    <method name="lgamma(double):double"/>
    <method name="lgammaf(float):float"/>
    <method name="lgammal(long double):long double"/>
    <method name="lh_delete(LHASH*;const void*):void*"/>
    <method name="lh_doall(LHASH*;LHASH_DOALL_FN_TYPE):void"/>
    <method name="lh_doall_arg(LHASH*;LHASH_DOALL_ARG_FN_TYPE;void*):void"/>
    <method name="lh_free(LHASH*):void"/>
    <method name="lh_insert(LHASH*;void*):void*"/>
    <method name="lh_new(LHASH_HASH_FN_TYPE;LHASH_COMP_FN_TYPE):LHASH*"/>
    <method name="lh_node_stats(const LHASH*;FILE*):void"/>
    <method name="lh_node_stats_bio(const LHASH*;BIO*):void"/>
    <method name="lh_node_usage_stats(const LHASH*;FILE*):void"/>
    <method name="lh_node_usage_stats_bio(const LHASH*;BIO*):void"/>
    <method name="lh_num_items(const LHASH*):unsigned long"/>
    <method name="lh_retrieve(LHASH*;const void*):void*"/>
    <method name="lh_stats(const LHASH*;FILE*):void"/>
    <method name="lh_stats_bio(const LHASH*;BIO*):void"/>
    <method name="lh_strhash(const char*):unsigned long"/>
    <method name="libiconv_set_relocation_prefix(const char*;const char*):void"/>
    <method name="link(const char*;const char*):int"/>
    <method name="link_addr(const char*;struct sockaddr_dl*):void"/>
    <method name="link_ntoa(const struct sockaddr_dl*):char*"/>
    <method name="lio_listio(int;const struct aiocb**;int;struct sigevent*):int"/>
    <method name="listen(SOCKET;int):int"/>
    <method name="listen(int;int):int"/>
    <method name="listxattr(const char*;char*;size_t;int):ssize_t"/>
    <method name="llabs(long long):long long"/>
    <method name="lldiv(long long;long long):lldiv_t"/>
    <method name="llrint(double):long long"/>
    <method name="llrintf(float):long long"/>
    <method name="llrintl(long double):long long"/>
    <method name="llround(double):long long"/>
    <method name="llroundf(float):long long"/>
    <method name="llroundl(long double):long long"/>
    <method name="localeconv():struct lconv*"/>
    <method name="localeconv_l(locale_t):struct lconv*"/>
    <method name="localtime(const time_t*):struct tm*"/>
    <method name="localtime_r(const time_t*;struct tm*):struct tm*"/>
    <method name="lock_acquire(lock_set_t;int):kern_return_t"/>
    <method name="lock_handoff(lock_set_t;int):kern_return_t"/>
    <method name="lock_handoff_accept(lock_set_t;int):kern_return_t"/>
    <method name="lock_make_stable(lock_set_t;int):kern_return_t"/>
    <method name="lock_release(lock_set_t;int):kern_return_t"/>
    <method name="lock_set_create(task_t;lock_set_t*;int;int):kern_return_t"/>
    <method name="lock_set_destroy(task_t;lock_set_t):kern_return_t"/>
    <method name="lock_try(lock_set_t;int):kern_return_t"/>
    <method name="lockf(int;int;off_t):int"/>
    <method name="log(double):double"/>
    <method name="log(float):float"/>
    <method name="log(long double):long double"/>
    <method name="log10(double):double"/>
    <method name="log10(float):float"/>
    <method name="log10(long double):long double"/>
    <method name="log10f(float):float"/>
    <method name="log10l(long double):long double"/>
    <method name="log1p(double):double"/>
    <method name="log1pf(float):float"/>
    <method name="log1pl(long double):long double"/>
    <method name="log2(double):double"/>
    <method name="log2f(float):float"/>
    <method name="log2l(long double):long double"/>
    <method name="logb(double):double"/>
    <method name="logbf(float):float"/>
    <method name="logbl(long double):long double"/>
    <method name="logf(float):float"/>
    <method name="login_tty(int):int"/>
    <method name="logl(long double):long double"/>
    <method name="logwtmp(const char*;const char*;const char*):void"/>
    <method name="longjmp(int*;int):void"/>
    <method name="longjmperror():void"/>
    <method name="lrand48():long"/>
    <method name="lrint(double):long"/>
    <method name="lrintf(float):long"/>
    <method name="lrintl(long double):long"/>
    <method name="lround(double):long"/>
    <method name="lroundf(float):long"/>
    <method name="lroundl(long double):long"/>
    <method name="lsamen_(__CLPK_integer*;char*;char*):__CLPK_logical"/>
    <method name="lsearch(const void*;void*;size_t*;size_t;(*)(const void*;const void*):int):void*"/>
    <method name="lseek(int;off_t;int):off_t"/>
    <method name="lstat(const char*;stat*):int"/>
    <method name="lstat(const char*;struct stat*):int"/>
    <method name="lstatx_np(const char*;struct stat*;filesec_t):int"/>
    <method name="lstrcat(lchar_t *; const lchar_t *): lchar_t *"/>
    <method name="lstrcatA(LPSTR;LPCSTR):LPSTR"/>
    <method name="lstrcatW(LPWSTR;LPCWSTR):LPWSTR"/>
    <method name="lstrcpy(lchar_t *; const lchar_t *): lchar_t *"/>
    <method name="lstrcpyA(LPSTR;LPCSTR):LPSTR"/>
    <method name="lstrcpyW(LPWSTR;LPCWSTR):LPWSTR"/>
    <method name="lstrcpyn(lchar_t *; const lchar_t *; size_t): lchar_t *"/>
    <method name="lstrcpynA(LPSTR;LPCSTR;int):LPSTR"/>
    <method name="lstrcpynW(LPWSTR;LPCWSTR;int):LPWSTR"/>
    <method name="ltoa(long;char*;int):char*"/>
    <method name="lutimes(const char*;const struct timeval*):int"/>
    <method name="mach_absolute_time():uint64_t"/>
    <method name="mach_error(const char*;mach_error_t):void"/>
    <method name="mach_error_string(mach_error_t):char*"/>
    <method name="mach_error_type(mach_error_t):char*"/>
    <method name="mach_host_self():mach_port_t"/>
    <method name="mach_make_memory_entry(vm_map_t;vm_size_t*;vm_offset_t;vm_prot_t;mem_entry_name_port_t*;mem_entry_name_port_t):kern_return_t"/>
    <method name="mach_make_memory_entry_64(vm_map_t;memory_object_size_t*;memory_object_offset_t;vm_prot_t;mach_port_t*;mem_entry_name_port_t):kern_return_t"/>
    <method name="mach_memory_object_memory_entry(host_t;boolean_t;vm_size_t;vm_prot_t;memory_object_t;mach_port_t*):kern_return_t"/>
    <method name="mach_memory_object_memory_entry_64(host_t;boolean_t;memory_object_size_t;vm_prot_t;memory_object_t;mach_port_t*):kern_return_t"/>
    <method name="mach_msg(mach_msg_header_t*;mach_msg_option_t;mach_msg_size_t;mach_msg_size_t;mach_port_name_t;mach_msg_timeout_t;mach_port_name_t):mach_msg_return_t"/>
    <method name="mach_msg_destroy(mach_msg_header_t*):void"/>
    <method name="mach_msg_overwrite(mach_msg_header_t*;mach_msg_option_t;mach_msg_size_t;mach_msg_size_t;mach_port_name_t;mach_msg_timeout_t;mach_port_name_t;mach_msg_header_t*;mach_msg_size_t):mach_msg_return_t"/>
    <method name="mach_msg_receive(mach_msg_header_t*):mach_msg_return_t"/>
    <method name="mach_msg_send(mach_msg_header_t*):mach_msg_return_t"/>
    <method name="mach_msg_server((*)(mach_msg_header_t*;mach_msg_header_t*):boolean_t;mach_msg_size_t;mach_port_t;mach_msg_options_t):mach_msg_return_t"/>
    <method name="mach_msg_server_importance((*)(mach_msg_header_t*;mach_msg_header_t*):boolean_t;mach_msg_size_t;mach_port_t;mach_msg_options_t):mach_msg_return_t"/>
    <method name="mach_msg_server_once((*)(mach_msg_header_t*;mach_msg_header_t*):boolean_t;mach_msg_size_t;mach_port_t;mach_msg_options_t):mach_msg_return_t"/>
    <method name="mach_port_allocate(ipc_space_t;mach_port_right_t;mach_port_name_t*):kern_return_t"/>
    <method name="mach_port_allocate_full(ipc_space_t;mach_port_right_t;mach_port_t;mach_port_qos_t*;mach_port_name_t*):kern_return_t"/>
    <method name="mach_port_allocate_name(ipc_space_t;mach_port_right_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_allocate_qos(ipc_space_t;mach_port_right_t;mach_port_qos_t*;mach_port_name_t*):kern_return_t"/>
    <method name="mach_port_deallocate(ipc_space_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_destroy(ipc_space_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_dnrequest_info(ipc_space_t;mach_port_name_t;unsigned int*;unsigned int*):kern_return_t"/>
    <method name="mach_port_extract_member(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_extract_right(ipc_space_t;mach_port_name_t;mach_msg_type_name_t;mach_port_t*;mach_msg_type_name_t*):kern_return_t"/>
    <method name="mach_port_get_attributes(ipc_space_t;mach_port_name_t;mach_port_flavor_t;mach_port_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_get_context(ipc_space_t;mach_port_name_t;mach_port_context_t*):kern_return_t"/>
    <method name="mach_port_get_refs(ipc_space_t;mach_port_name_t;mach_port_right_t;mach_port_urefs_t*):kern_return_t"/>
    <method name="mach_port_get_set_status(ipc_space_t;mach_port_name_t;mach_port_name_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_get_srights(ipc_space_t;mach_port_name_t;mach_port_rights_t*):kern_return_t"/>
    <method name="mach_port_insert_member(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_insert_right(ipc_space_t;mach_port_name_t;mach_port_t;mach_msg_type_name_t):kern_return_t"/>
    <method name="mach_port_kernel_object(ipc_space_t;mach_port_name_t;unsigned int*;unsigned int*):kern_return_t"/>
    <method name="mach_port_kobject(ipc_space_t;mach_port_name_t;natural_t*;mach_vm_address_t*):kern_return_t"/>
    <method name="mach_port_mod_refs(ipc_space_t;mach_port_name_t;mach_port_right_t;mach_port_delta_t):kern_return_t"/>
    <method name="mach_port_move_member(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_names(ipc_space_t;mach_port_name_array_t*;mach_msg_type_number_t*;mach_port_type_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_rename(ipc_space_t;mach_port_name_t;mach_port_name_t):kern_return_t"/>
    <method name="mach_port_request_notification(ipc_space_t;mach_port_name_t;mach_msg_id_t;mach_port_mscount_t;mach_port_t;mach_msg_type_name_t;mach_port_t*):kern_return_t"/>
    <method name="mach_port_set_attributes(ipc_space_t;mach_port_name_t;mach_port_flavor_t;mach_port_info_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="mach_port_set_context(ipc_space_t;mach_port_name_t;mach_port_context_t):kern_return_t"/>
    <method name="mach_port_set_mscount(ipc_space_t;mach_port_name_t;mach_port_mscount_t):kern_return_t"/>
    <method name="mach_port_set_seqno(ipc_space_t;mach_port_name_t;mach_port_seqno_t):kern_return_t"/>
    <method name="mach_port_space_info(ipc_space_t;ipc_info_space_t*;ipc_info_name_array_t*;mach_msg_type_number_t*;ipc_info_tree_name_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_port_type(ipc_space_t;mach_port_name_t;mach_port_type_t*):kern_return_t"/>
    <method name="mach_ports_lookup(task_t;mach_port_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_ports_register(task_t;mach_port_array_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="mach_thread_self():mach_port_t"/>
    <method name="mach_timebase_info(mach_timebase_info_t):kern_return_t"/>
    <method name="mach_vm_region_info(vm_map_t;vm_address_t;vm_info_region_t*;vm_info_object_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_vm_region_info_64(vm_map_t;vm_address_t;vm_info_region_64_t*;vm_info_object_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="mach_vm_wire(host_priv_t;vm_map_t;mach_vm_address_t;mach_vm_size_t;vm_prot_t):kern_return_t"/>
    <method name="mach_wait_until(uint64_t):kern_return_t"/>
    <method name="mach_zone_info(host_priv_t;mach_zone_name_array_t*;mach_msg_type_number_t*;mach_zone_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="macx_backing_store_recovery(int):kern_return_t"/>
    <method name="macx_backing_store_suspend(boolean_t):kern_return_t"/>
    <method name="macx_swapoff(uint64_t;int):kern_return_t"/>
    <method name="macx_swapon(uint64_t;int;int;int):kern_return_t"/>
    <method name="macx_triggers(int;int;int;mach_port_t):kern_return_t"/>
    <method name="madvise(void*;size_t;int):int"/>
    <method name="main(int;char*):int"/>
    <method name="main(int;char**):int"/>
    <method name="malloc(size_t):void*"/>
    <method name="malloc_create_zone(vm_size_t;unsigned int):malloc_zone_t*"/>
    <method name="malloc_default_purgeable_zone():malloc_zone_t*"/>
    <method name="malloc_default_zone():malloc_zone_t*"/>
    <method name="malloc_destroy_zone(malloc_zone_t*):void"/>
    <method name="malloc_get_all_zones(task_t;(*)(task_t;vm_address_t;vm_size_t;void**):kern_return_t;vm_address_t**;unsigned int*):kern_return_t"/>
    <method name="malloc_get_zone_name(malloc_zone_t*):const char*"/>
    <method name="malloc_good_size(size_t):size_t"/>
    <method name="malloc_make_nonpurgeable(void*):int"/>
    <method name="malloc_make_purgeable(void*):void"/>
    <method name="malloc_printf(const char*, ...):void"/>
    <method name="malloc_set_zone_name(malloc_zone_t*;const char*):void"/>
    <method name="malloc_size(const void*):size_t"/>
    <method name="malloc_zone_batch_free(malloc_zone_t*;void**;unsigned int):void"/>
    <method name="malloc_zone_batch_malloc(malloc_zone_t*;size_t;void**;unsigned int):unsigned int"/>
    <method name="malloc_zone_calloc(malloc_zone_t*;size_t;size_t):void*"/>
    <method name="malloc_zone_check(malloc_zone_t*):boolean_t"/>
    <method name="malloc_zone_disable_discharge_checking(malloc_zone_t*):void"/>
    <method name="malloc_zone_discharge(malloc_zone_t*;void*):void"/>
    <method name="malloc_zone_enable_discharge_checking(malloc_zone_t*):boolean_t"/>
    <method name="malloc_zone_enumerate_discharged_pointers(malloc_zone_t*;(^)(void*;void*):void):void"/>
    <method name="malloc_zone_free(malloc_zone_t*;void*):void"/>
    <method name="malloc_zone_from_ptr(const void*):malloc_zone_t*"/>
    <method name="malloc_zone_log(malloc_zone_t*;void*):void"/>
    <method name="malloc_zone_malloc(malloc_zone_t*;size_t):void*"/>
    <method name="malloc_zone_memalign(malloc_zone_t*;size_t;size_t):void*"/>
    <method name="malloc_zone_pressure_relief(malloc_zone_t*;size_t):size_t"/>
    <method name="malloc_zone_print(malloc_zone_t*;boolean_t):void"/>
    <method name="malloc_zone_print_ptr_info(void*):void"/>
    <method name="malloc_zone_realloc(malloc_zone_t*;void*;size_t):void*"/>
    <method name="malloc_zone_register(malloc_zone_t*):void"/>
    <method name="malloc_zone_statistics(malloc_zone_t*;malloc_statistics_t*):void"/>
    <method name="malloc_zone_unregister(malloc_zone_t*):void"/>
    <method name="malloc_zone_valloc(malloc_zone_t*;size_t):void*"/>
    <method name="matherr(struct exception*):int"/>
    <method name="mblen(const char*;size_t):int"/>
    <method name="mblen_l(const char*;int;int):int"/>
    <method name="mbr_check_membership(const unsigned char*;const unsigned char*;int*):int"/>
    <method name="mbr_check_service_membership(const unsigned char*;const char*;int*):int"/>
    <method name="mbr_gid_to_uuid(gid_t;unsigned char*):int"/>
    <method name="mbr_identifier_to_uuid(int;const void*;size_t;unsigned char*):int"/>
    <method name="mbr_sid_to_string(const nt_sid_t*;char*):int"/>
    <method name="mbr_sid_to_uuid(const nt_sid_t*;unsigned char*):int"/>
    <method name="mbr_string_to_sid(const char*;nt_sid_t*):int"/>
    <method name="mbr_uid_to_uuid(uid_t;unsigned char*):int"/>
    <method name="mbr_uuid_to_id(const unsigned char*;id_t*;int*):int"/>
    <method name="mbr_uuid_to_sid(const unsigned char*;nt_sid_t*):int"/>
    <method name="mbrlen(const char*;size_t;mbstate_t*):size_t"/>
    <method name="mbrlen_l(const char*;int;int*;int):int"/>
    <method name="mbrtowc(wchar_t*;const char*;size_t;mbstate_t*):size_t"/>
    <method name="mbrtowc_l(int*;const char*;int;int*;int):int"/>
    <method name="mbsinit(const mbstate_t*):int"/>
    <method name="mbsinit_l(const int*;int):int"/>
    <method name="mbsnrtowcs(wchar_t*;const char**;size_t;size_t;mbstate_t*):size_t"/>
    <method name="mbsrtowcs(wchar_t*;const char**;size_t;mbstate_t*):size_t"/>
    <method name="mbsrtowcs_l(int*;const char**;int;int*;int):int"/>
    <method name="mbstowcs(wchar_t*;const char*;size_t):size_t"/>
    <method name="mbstowcs_l(int*;const char*;int;int):int"/>
    <method name="mbtowc(wchar_t*;const char*;size_t):int"/>
    <method name="mbtowc_l(int*;const char*;int;int):int"/>
    <method name="memccpy(void*;const void*;int;size_t):void*"/>
    <method name="memchr(const void*;int;size_t):void*"/>
    <method name="memchr(void*;int;size_t):void*"/>
    <method name="memcmp(const void*;const void*;size_t):int"/>
    <method name="memcpy(void*;const void*;size_t):void*"/>
    <method name="memmem(const void*;size_t;const void*;size_t):void*"/>
    <method name="memmove(void*;const void*;size_t):void*"/>
    <method name="memset(void*;int;size_t):void*"/>
    <method name="memset_pattern16(void*;const void*;size_t):void"/>
    <method name="memset_pattern4(void*;const void*;size_t):void"/>
    <method name="memset_pattern8(void*;const void*;size_t):void"/>
    <method name="mergesort(void*;size_t;size_t;(*)(const void*;const void*):int):int"/>
    <method name="mergesort_b(void*;size_t;size_t;(^)(const void*;const void*):int):int"/>
    <method name="method_copyArgumentType(Method;unsigned int):char*"/>
    <method name="method_copyReturnType(Method):char*"/>
    <method name="method_exchangeImplementations(Method;Method):void"/>
    <method name="method_getArgumentInfo(struct objc_method*;int;const char**;int*):unsigned int"/>
    <method name="method_getArgumentType(Method;unsigned int;char*;size_t):void"/>
    <method name="method_getDescription(Method):struct objc_method_description*"/>
    <method name="method_getImplementation(Method):IMP"/>
    <method name="method_getName(Method):SEL"/>
    <method name="method_getNumberOfArguments(Method):unsigned int"/>
    <method name="method_getReturnType(Method;char*;size_t):void"/>
    <method name="method_getSizeOfArguments(Method):unsigned int"/>
    <method name="method_getTypeEncoding(Method):const char*"/>
    <method name="method_invoke(id;Method, ...):id"/>
    <method name="method_invoke_stret(id;Method, ...):void"/>
    <method name="method_setImplementation(Method;IMP):IMP"/>
    <method name="mig_allocate(vm_address_t*;vm_size_t):void"/>
    <method name="mig_dealloc_reply_port(mach_port_t):void"/>
    <method name="mig_deallocate(vm_address_t;vm_size_t):void"/>
    <method name="mig_get_reply_port():mach_port_t"/>
    <method name="mig_put_reply_port(mach_port_t):void"/>
    <method name="mig_reply_setup(mach_msg_header_t*;mach_msg_header_t*):void"/>
    <method name="mig_strncpy(char*;const char*;int):int"/>
    <method name="min():int"/>
    <method name="mincore(const void*;size_t;char*):int"/>
    <method name="minherit(void*;size_t;int):int"/>
    <method name="mkdir(const char*):int"/>
    <method name="mkdir(const char*;__mode_t):int"/>
    <method name="mkdir(const char*;mode_t):int"/>
    <method name="mkdirp(const char*;mode_t):int"/>
    <method name="mkdirx_np(const char*;filesec_t):int"/>
    <method name="mkdtemp(char*):char*"/>
    <method name="mkfifo(const char*;mode_t):int"/>
    <method name="mkfifox_np(const char*;filesec_t):int"/>
    <method name="mknod(const char*;__mode_t;__dev_t):int"/>
    <method name="mknod(const char*;mode_t;dev_t):int"/>
    <method name="mkpath_np(const char*;mode_t):int"/>
    <method name="mkstemp(char*):int"/>
    <method name="mkstemps(char*;int):int"/>
    <method name="mktemp(char*):char*"/>
    <method name="mktime(struct tm*):time_t"/>
    <method name="mlock(const void*;size_t):int"/>
    <method name="mlockall(int):int"/>
    <method name="mmap(void*;size_t;int;int;int;off_t):void*"/>
    <method name="modf(double;double*):double"/>
    <method name="modf(float;float*):float"/>
    <method name="modf(long double;long double*):long double"/>
    <method name="modff(float;float*):float"/>
    <method name="modfl(long double;long double*):long double"/>
    <method name="mount(const char*;const char*;int;void*):int"/>
    <method name="mountproc_dump_1(void*;CLIENT*):mountlist*"/>
    <method name="mountproc_dump_1_svc(void*;struct svc_req*):mountlist*"/>
    <method name="mountproc_export_1(void*;CLIENT*):exports*"/>
    <method name="mountproc_export_1_svc(void*;struct svc_req*):exports*"/>
    <method name="mountproc_exportall_1(void*;CLIENT*):exports*"/>
    <method name="mountproc_exportall_1_svc(void*;struct svc_req*):exports*"/>
    <method name="mountproc_mnt_1(dirpath*;CLIENT*):fhstatus*"/>
    <method name="mountproc_mnt_1_svc(dirpath*;struct svc_req*):fhstatus*"/>
    <method name="mountproc_null_1(void*;CLIENT*):void*"/>
    <method name="mountproc_null_1_svc(void*;struct svc_req*):void*"/>
    <method name="mountproc_umnt_1(dirpath*;CLIENT*):void*"/>
    <method name="mountproc_umnt_1_svc(dirpath*;struct svc_req*):void*"/>
    <method name="mountproc_umntall_1(void*;CLIENT*):void*"/>
    <method name="mountproc_umntall_1_svc(void*;struct svc_req*):void*"/>
    <method name="mpool_close(MPOOL*):int"/>
    <method name="mpool_filter(MPOOL*;(*)(void*;int;void*):void;(*)(void*;int;void*):void;void*):void"/>
    <method name="mpool_get(MPOOL*;int;unsigned int):void*"/>
    <method name="mpool_new(MPOOL*;int*):void*"/>
    <method name="mpool_put(MPOOL*;void*;unsigned int):int"/>
    <method name="mpool_sync(MPOOL*):int"/>
    <method name="mprotect(void*;size_t;int):int"/>
    <method name="mrand48():long"/>
    <method name="ms_time_cmp(const MS_TM*;const MS_TM*):int"/>
    <method name="ms_time_diff(MS_TM*;MS_TM*):double"/>
    <method name="ms_time_free(MS_TM*):void"/>
    <method name="ms_time_get(MS_TM*):void"/>
    <method name="ms_time_new():MS_TM*"/>
    <method name="msgctl(int;int;struct __msqid_ds_new*):int"/>
    <method name="msgget(key_t;int):int"/>
    <method name="msgrcv(int;void*;size_t;long;int):ssize_t"/>
    <method name="msgsnd(int;const void*;size_t;int):int"/>
    <method name="msgsys(int, ...):int"/>
    <method name="mstats():struct mstats"/>
    <method name="msync(void*;size_t;int):int"/>
    <method name="munlock(const void*;size_t):int"/>
    <method name="munlockall():int"/>
    <method name="munmap(void*;size_t):int"/>
    <method name="name_cmp(const char*;const char*):int"/>
    <method name="nan(const char*):double"/>
    <method name="nanf(const char*):float"/>
    <method name="nanl(const char*):long double"/>
    <method name="nanosleep(const struct timespec*;struct timespec*):int"/>
    <method name="nearbyint(double):double"/>
    <method name="nearbyintf(float):float"/>
    <method name="nearbyintl(long double):long double"/>
    <method name="newlocale(int;const char*;locale_t):locale_t"/>
    <method name="nextafter(double;double):double"/>
    <method name="nextafterf(float;float):float"/>
    <method name="nextafterl(long double;long double):long double"/>
    <method name="nexttoward(double;long double):double"/>
    <method name="nexttowardf(float;long double):float"/>
    <method name="nexttowardl(long double;long double):long double"/>
    <method name="nextwctype(wint_t;wctype_t):wint_t"/>
    <method name="nfsproc_create_2(createargs*;CLIENT*):diropres*"/>
    <method name="nfsproc_create_2_svc(createargs*;struct svc_req*):diropres*"/>
    <method name="nfsproc_getattr_2(nfs_fh*;CLIENT*):attrstat*"/>
    <method name="nfsproc_getattr_2_svc(nfs_fh*;struct svc_req*):attrstat*"/>
    <method name="nfsproc_link_2(linkargs*;CLIENT*):nfsstat*"/>
    <method name="nfsproc_link_2_svc(linkargs*;struct svc_req*):nfsstat*"/>
    <method name="nfsproc_lookup_2(diropargs*;CLIENT*):diropres*"/>
    <method name="nfsproc_lookup_2_svc(diropargs*;struct svc_req*):diropres*"/>
    <method name="nfsproc_mkdir_2(createargs*;CLIENT*):diropres*"/>
    <method name="nfsproc_mkdir_2_svc(createargs*;struct svc_req*):diropres*"/>
    <method name="nfsproc_null_2(void*;CLIENT*):void*"/>
    <method name="nfsproc_null_2_svc(void*;struct svc_req*):void*"/>
    <method name="nfsproc_read_2(readargs*;CLIENT*):readres*"/>
    <method name="nfsproc_read_2_svc(readargs*;struct svc_req*):readres*"/>
    <method name="nfsproc_readdir_2(readdirargs*;CLIENT*):readdirres*"/>
    <method name="nfsproc_readdir_2_svc(readdirargs*;struct svc_req*):readdirres*"/>
    <method name="nfsproc_readlink_2(nfs_fh*;CLIENT*):readlinkres*"/>
    <method name="nfsproc_readlink_2_svc(nfs_fh*;struct svc_req*):readlinkres*"/>
    <method name="nfsproc_remove_2(diropargs*;CLIENT*):nfsstat*"/>
    <method name="nfsproc_remove_2_svc(diropargs*;struct svc_req*):nfsstat*"/>
    <method name="nfsproc_rename_2(renameargs*;CLIENT*):nfsstat*"/>
    <method name="nfsproc_rename_2_svc(renameargs*;struct svc_req*):nfsstat*"/>
    <method name="nfsproc_rmdir_2(diropargs*;CLIENT*):nfsstat*"/>
    <method name="nfsproc_rmdir_2_svc(diropargs*;struct svc_req*):nfsstat*"/>
    <method name="nfsproc_root_2(void*;CLIENT*):void*"/>
    <method name="nfsproc_root_2_svc(void*;struct svc_req*):void*"/>
    <method name="nfsproc_setattr_2(sattrargs*;CLIENT*):attrstat*"/>
    <method name="nfsproc_setattr_2_svc(sattrargs*;struct svc_req*):attrstat*"/>
    <method name="nfsproc_statfs_2(nfs_fh*;CLIENT*):statfsres*"/>
    <method name="nfsproc_statfs_2_svc(nfs_fh*;struct svc_req*):statfsres*"/>
    <method name="nfsproc_symlink_2(symlinkargs*;CLIENT*):nfsstat*"/>
    <method name="nfsproc_symlink_2_svc(symlinkargs*;struct svc_req*):nfsstat*"/>
    <method name="nfsproc_write_2(writeargs*;CLIENT*):attrstat*"/>
    <method name="nfsproc_write_2_svc(writeargs*;struct svc_req*):attrstat*"/>
    <method name="nfsproc_writecache_2(void*;CLIENT*):void*"/>
    <method name="nfsproc_writecache_2_svc(void*;struct svc_req*):void*"/>
    <method name="nfssvc(int;void*):int"/>
    <method name="nftw(const char*;(*)(const char*;const struct stat*;int;struct FTW*):int;int;int):int"/>
    <method name="nice(int):int"/>
    <method name="nl_langinfo(nl_item):char*"/>
    <method name="nlist(const char*;struct nlist*):int"/>
    <method name="nlm4_cancel_4(nlm4_cancargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_cancel_4_svc(nlm4_cancargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_cancel_msg_4(nlm4_cancargs*;CLIENT*):void*"/>
    <method name="nlm4_cancel_msg_4_svc(nlm4_cancargs*;struct svc_req*):void*"/>
    <method name="nlm4_cancel_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_cancel_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_free_all_4(nlm4_notify*;CLIENT*):void*"/>
    <method name="nlm4_free_all_4_svc(nlm4_notify*;struct svc_req*):void*"/>
    <method name="nlm4_granted_4(nlm4_testargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_granted_4_svc(nlm4_testargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_granted_msg_4(nlm4_testargs*;CLIENT*):void*"/>
    <method name="nlm4_granted_msg_4_svc(nlm4_testargs*;struct svc_req*):void*"/>
    <method name="nlm4_granted_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_granted_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_lock_4(nlm4_lockargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_lock_4_svc(nlm4_lockargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_lock_msg_4(nlm4_lockargs*;CLIENT*):void*"/>
    <method name="nlm4_lock_msg_4_svc(nlm4_lockargs*;struct svc_req*):void*"/>
    <method name="nlm4_lock_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_lock_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_nm_lock_4(nlm4_lockargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_nm_lock_4_svc(nlm4_lockargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_share_4(nlm4_shareargs*;CLIENT*):nlm4_shareres*"/>
    <method name="nlm4_share_4_svc(nlm4_shareargs*;struct svc_req*):nlm4_shareres*"/>
    <method name="nlm4_test_4(nlm4_testargs*;CLIENT*):nlm4_testres*"/>
    <method name="nlm4_test_4_svc(nlm4_testargs*;struct svc_req*):nlm4_testres*"/>
    <method name="nlm4_test_msg_4(nlm4_testargs*;CLIENT*):void*"/>
    <method name="nlm4_test_msg_4_svc(nlm4_testargs*;struct svc_req*):void*"/>
    <method name="nlm4_test_res_4(nlm4_testres*;CLIENT*):void*"/>
    <method name="nlm4_test_res_4_svc(nlm4_testres*;struct svc_req*):void*"/>
    <method name="nlm4_unlock_4(nlm4_unlockargs*;CLIENT*):nlm4_res*"/>
    <method name="nlm4_unlock_4_svc(nlm4_unlockargs*;struct svc_req*):nlm4_res*"/>
    <method name="nlm4_unlock_msg_4(nlm4_unlockargs*;CLIENT*):void*"/>
    <method name="nlm4_unlock_msg_4_svc(nlm4_unlockargs*;struct svc_req*):void*"/>
    <method name="nlm4_unlock_res_4(nlm4_res*;CLIENT*):void*"/>
    <method name="nlm4_unlock_res_4_svc(nlm4_res*;struct svc_req*):void*"/>
    <method name="nlm4_unshare_4(nlm4_shareargs*;CLIENT*):nlm4_shareres*"/>
    <method name="nlm4_unshare_4_svc(nlm4_shareargs*;struct svc_req*):nlm4_shareres*"/>
    <method name="nlm_cancel_1(struct nlm_cancargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_cancel_1_svc(struct nlm_cancargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_cancel_3(struct nlm_cancargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_cancel_3_svc(struct nlm_cancargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_cancel_msg_1(struct nlm_cancargs*;CLIENT*):void*"/>
    <method name="nlm_cancel_msg_1_svc(struct nlm_cancargs*;struct svc_req*):void*"/>
    <method name="nlm_cancel_msg_3(struct nlm_cancargs*;CLIENT*):void*"/>
    <method name="nlm_cancel_msg_3_svc(struct nlm_cancargs*;struct svc_req*):void*"/>
    <method name="nlm_cancel_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_cancel_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_cancel_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_cancel_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_free_all_3(nlm_notify*;CLIENT*):void*"/>
    <method name="nlm_free_all_3_svc(nlm_notify*;struct svc_req*):void*"/>
    <method name="nlm_granted_1(struct nlm_testargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_granted_1_svc(struct nlm_testargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_granted_3(struct nlm_testargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_granted_3_svc(struct nlm_testargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_granted_msg_1(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_granted_msg_1_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_granted_msg_3(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_granted_msg_3_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_granted_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_granted_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_granted_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_granted_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_lock_1(struct nlm_lockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_lock_1_svc(struct nlm_lockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_lock_3(struct nlm_lockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_lock_3_svc(struct nlm_lockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_lock_msg_1(struct nlm_lockargs*;CLIENT*):void*"/>
    <method name="nlm_lock_msg_1_svc(struct nlm_lockargs*;struct svc_req*):void*"/>
    <method name="nlm_lock_msg_3(struct nlm_lockargs*;CLIENT*):void*"/>
    <method name="nlm_lock_msg_3_svc(struct nlm_lockargs*;struct svc_req*):void*"/>
    <method name="nlm_lock_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_lock_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_lock_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_lock_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_nm_lock_3(nlm_lockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_nm_lock_3_svc(nlm_lockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_share_3(nlm_shareargs*;CLIENT*):nlm_shareres*"/>
    <method name="nlm_share_3_svc(nlm_shareargs*;struct svc_req*):nlm_shareres*"/>
    <method name="nlm_sm_notify_0(struct nlm_sm_status*;CLIENT*):void*"/>
    <method name="nlm_sm_notify_0_svc(struct nlm_sm_status*;struct svc_req*):void*"/>
    <method name="nlm_test_1(struct nlm_testargs*;CLIENT*):nlm_testres*"/>
    <method name="nlm_test_1_svc(struct nlm_testargs*;struct svc_req*):nlm_testres*"/>
    <method name="nlm_test_3(struct nlm_testargs*;CLIENT*):nlm_testres*"/>
    <method name="nlm_test_3_svc(struct nlm_testargs*;struct svc_req*):nlm_testres*"/>
    <method name="nlm_test_msg_1(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_test_msg_1_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_test_msg_3(struct nlm_testargs*;CLIENT*):void*"/>
    <method name="nlm_test_msg_3_svc(struct nlm_testargs*;struct svc_req*):void*"/>
    <method name="nlm_test_res_1(nlm_testres*;CLIENT*):void*"/>
    <method name="nlm_test_res_1_svc(nlm_testres*;struct svc_req*):void*"/>
    <method name="nlm_test_res_3(nlm_testres*;CLIENT*):void*"/>
    <method name="nlm_test_res_3_svc(nlm_testres*;struct svc_req*):void*"/>
    <method name="nlm_unlock_1(struct nlm_unlockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_unlock_1_svc(struct nlm_unlockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_unlock_3(struct nlm_unlockargs*;CLIENT*):nlm_res*"/>
    <method name="nlm_unlock_3_svc(struct nlm_unlockargs*;struct svc_req*):nlm_res*"/>
    <method name="nlm_unlock_msg_1(struct nlm_unlockargs*;CLIENT*):void*"/>
    <method name="nlm_unlock_msg_1_svc(struct nlm_unlockargs*;struct svc_req*):void*"/>
    <method name="nlm_unlock_msg_3(struct nlm_unlockargs*;CLIENT*):void*"/>
    <method name="nlm_unlock_msg_3_svc(struct nlm_unlockargs*;struct svc_req*):void*"/>
    <method name="nlm_unlock_res_1(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_unlock_res_1_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_unlock_res_3(nlm_res*;CLIENT*):void*"/>
    <method name="nlm_unlock_res_3_svc(nlm_res*;struct svc_req*):void*"/>
    <method name="nlm_unshare_3(nlm_shareargs*;CLIENT*):nlm_shareres*"/>
    <method name="nlm_unshare_3_svc(nlm_shareargs*;struct svc_req*):nlm_shareres*"/>
    <method name="notify_cancel(int):uint32_t"/>
    <method name="notify_check(int;int*):uint32_t"/>
    <method name="notify_get_state(int;uint64_t*):uint32_t"/>
    <method name="notify_post(const char*):uint32_t"/>
    <method name="notify_register_check(const char*;int*):uint32_t"/>
    <method name="notify_register_dispatch(const char*;int*;dispatch_queue_t;(^)(int):void):uint32_t"/>
    <method name="notify_register_file_descriptor(const char*;int*;int;int*):uint32_t"/>
    <method name="notify_register_mach_port(const char*;mach_port_t*;int;int*):uint32_t"/>
    <method name="notify_register_signal(const char*;int;int*):uint32_t"/>
    <method name="notify_resume(int):uint32_t"/>
    <method name="notify_set_state(int;uint64_t):uint32_t"/>
    <method name="notify_suspend(int):uint32_t"/>
    <method name="nrand48(unsigned short*):long"/>
    <method name="ntohl(u_long):u_long"/>
    <method name="ntohs(u_short):u_short"/>
    <method name="o2i_ECPublicKey(EC_KEY**;const unsigned char**;long):EC_KEY*"/>
    <method name="objc_addClass(Class*):void"/>
    <method name="objc_addExceptionHandler(objc_exception_handler;void*):uintptr_t"/>
    <method name="objc_allocateClassPair(Class*;const char*;size_t):Class*"/>
    <method name="objc_allocateProtocol(const char*):Protocol*"/>
    <method name="objc_allocate_object(Class*;int):id"/>
    <method name="objc_assertRegisteredThreadWithCollector():void"/>
    <method name="objc_assign_global(id;id*):id"/>
    <method name="objc_assign_ivar(id;id;ptrdiff_t):id"/>
    <method name="objc_assign_strongCast(id;id*):id"/>
    <method name="objc_assign_weak(id;id*):id"/>
    <method name="objc_atomicCompareAndSwapGlobal(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapGlobalBarrier(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapInstanceVariable(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapInstanceVariableBarrier(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapPtr(id;id;volatile id*):BOOL"/>
    <method name="objc_atomicCompareAndSwapPtrBarrier(id;id;volatile id*):BOOL"/>
    <method name="objc_begin_catch(void*):id"/>
    <method name="objc_clear_stack(unsigned long):void"/>
    <method name="objc_collect(unsigned long):void"/>
    <method name="objc_collect_if_needed(unsigned long):void"/>
    <method name="objc_collectingEnabled():BOOL"/>
    <method name="objc_collecting_enabled():BOOL"/>
    <method name="objc_constructInstance(Class*;void*):id"/>
    <method name="objc_copyClassList(unsigned int*):Class**"/>
    <method name="objc_copyClassNamesForImage(const char*;unsigned int*):const char**"/>
    <method name="objc_copyImageNames(unsigned int*):const char**"/>
    <method name="objc_copyProtocolList(unsigned int*):Protocol**"/>
    <method name="objc_destructInstance(id):void*"/>
    <method name="objc_disposeClassPair(Class*):void"/>
    <method name="objc_duplicateClass(Class*;const char*;size_t):Class*"/>
    <method name="objc_end_catch():void"/>
    <method name="objc_enumerationMutation(id):void"/>
    <method name="objc_exception_rethrow():void"/>
    <method name="objc_exception_throw(id):void"/>
    <method name="objc_finalizeOnMainThread(Class*):void"/>
    <method name="objc_getAssociatedObject(id;const void*):id"/>
    <method name="objc_getClass(const char*):id"/>
    <method name="objc_getClassList(Class**;int):int"/>
    <method name="objc_getClasses():void*"/>
    <method name="objc_getFutureClass(const char*):Class*"/>
    <method name="objc_getMetaClass(const char*):id"/>
    <method name="objc_getOrigClass(const char*):Class*"/>
    <method name="objc_getProtocol(const char*):Protocol*"/>
    <method name="objc_getRequiredClass(const char*):id"/>
    <method name="objc_is_finalized(void*):BOOL"/>
    <method name="objc_loadWeak(id*):id"/>
    <method name="objc_lookUpClass(const char*):id"/>
    <method name="objc_memmove_collectable(void*;const void*;size_t):void*"/>
    <method name="objc_msgSend(id;SEL, ...):id"/>
    <method name="objc_msgSendSuper(struct objc_super*;SEL, ...):id"/>
    <method name="objc_msgSendSuper_stret(struct objc_super*;SEL, ...):void"/>
    <method name="objc_msgSend_stret(id;SEL, ...):void"/>
    <method name="objc_msgSendv(id;SEL;size_t;marg_list):id"/>
    <method name="objc_msgSendv_stret(void*;id;SEL;size_t;marg_list):void"/>
    <method name="objc_read_weak(id*):id"/>
    <method name="objc_registerClassPair(Class*):void"/>
    <method name="objc_registerProtocol(Protocol*):void"/>
    <method name="objc_registerThreadWithCollector():void"/>
    <method name="objc_removeAssociatedObjects(id):void"/>
    <method name="objc_removeExceptionHandler(uintptr_t):void"/>
    <method name="objc_setAssociatedObject(id;const void*;id;objc_AssociationPolicy):void"/>
    <method name="objc_setClassHandler((*)(const char*):int):void"/>
    <method name="objc_setCollectionRatio(size_t):void"/>
    <method name="objc_setCollectionThreshold(size_t):void"/>
    <method name="objc_setEnumerationMutationHandler((*)(id):void):void"/>
    <method name="objc_setExceptionMatcher(objc_exception_matcher):objc_exception_matcher"/>
    <method name="objc_setExceptionPreprocessor(objc_exception_preprocessor):objc_exception_preprocessor"/>
    <method name="objc_setForwardHandler(void*;void*):void"/>
    <method name="objc_setFutureClass(Class*;const char*):void"/>
    <method name="objc_setMultithreaded(BOOL):void"/>
    <method name="objc_setUncaughtExceptionHandler(objc_uncaught_exception_handler):objc_uncaught_exception_handler"/>
    <method name="objc_set_collection_ratio(size_t):void"/>
    <method name="objc_set_collection_threshold(size_t):void"/>
    <method name="objc_startCollectorThread():void"/>
    <method name="objc_start_collector_thread():void"/>
    <method name="objc_storeWeak(id*;id):id"/>
    <method name="objc_sync_enter(id):int"/>
    <method name="objc_sync_exit(id):int"/>
    <method name="objc_sync_notify(id):int"/>
    <method name="objc_sync_notifyAll(id):int"/>
    <method name="objc_sync_wait(id;long long):int"/>
    <method name="objc_terminate():void"/>
    <method name="objc_unregisterThreadWithCollector():void"/>
    <method name="object_copy(id;size_t):id"/>
    <method name="object_copyFromZone(id;size_t;void*):id"/>
    <method name="object_dispose(id):id"/>
    <method name="object_getClass(id):Class*"/>
    <method name="object_getClassName(id):const char*"/>
    <method name="object_getIndexedIvars(id):void*"/>
    <method name="object_getInstanceVariable(id;const char*;void**):Ivar"/>
    <method name="object_getIvar(id;Ivar):id"/>
    <method name="object_realloc(id;size_t):id"/>
    <method name="object_reallocFromZone(id;size_t;void*):id"/>
    <method name="object_setClass(id;Class*):Class*"/>
    <method name="object_setInstanceVariable(id;const char*;void*):Ivar"/>
    <method name="object_setIvar(id;Ivar;id):void"/>
    <method name="obstack_printf(obstack*;const char*, ...):int"/>
    <method name="obstack_vprintf(obstack*;const char*;va_list):int"/>
    <method name="open(const char*;int, ...):int"/>
    <method name="open_dprotected_np(const char*;int;int;int, ...):int"/>
    <method name="opendev(char*;int;int;char**):int"/>
    <method name="opendir(const char*):DIR*"/>
    <method name="openlog(const char*;int;int):void"/>
    <method name="openpty(int*;int*;char*;struct termios*;struct winsize*):int"/>
    <method name="openx_np(const char*;int;filesec_t):int"/>
    <method name="panic(const char*, ...):void"/>
    <method name="panic_init(mach_port_t):void"/>
    <method name="pathconf(const char*;int):long"/>
    <method name="pause():int"/>
    <method name="pclose(FILE*):int"/>
    <method name="perror(const char*):void"/>
    <method name="pfctlinput(int;struct sockaddr*):void"/>
    <method name="pid_for_task(mach_port_name_t;int*):kern_return_t"/>
    <method name="pidlock(const char*;int;pid_t*;const char*):int"/>
    <method name="pipe(int*):int"/>
    <method name="pitem_free(pitem*):void"/>
    <method name="pitem_new(unsigned long long;void*):pitem*"/>
    <method name="poll(struct pollfd*;nfds_t;int):int"/>
    <method name="popen(const char*;const char*):FILE*"/>
    <method name="port_obj_init(int):void"/>
    <method name="posix2time(time_t):time_t"/>
    <method name="posix_madvise(void*;size_t;int):int"/>
    <method name="posix_memalign(void**;size_t;size_t):int"/>
    <method name="posix_openpt(int):int"/>
    <method name="posix_spawn(pid_t*;const char*;const posix_spawn_file_actions_t*;const posix_spawnattr_t*;const char**;const char**):int"/>
    <method name="posix_spawn_file_actions_addclose(posix_spawn_file_actions_t*;int):int"/>
    <method name="posix_spawn_file_actions_adddup2(posix_spawn_file_actions_t*;int;int):int"/>
    <method name="posix_spawn_file_actions_addinherit_np(posix_spawn_file_actions_t*;int):int"/>
    <method name="posix_spawn_file_actions_addopen(posix_spawn_file_actions_t*;int;const char*;int;mode_t):int"/>
    <method name="posix_spawn_file_actions_destroy(posix_spawn_file_actions_t*):int"/>
    <method name="posix_spawn_file_actions_init(posix_spawn_file_actions_t*):int"/>
    <method name="posix_spawnattr_destroy(posix_spawnattr_t*):int"/>
    <method name="posix_spawnattr_getbinpref_np(const posix_spawnattr_t*;size_t;cpu_type_t*;size_t*):int"/>
    <method name="posix_spawnattr_getflags(const posix_spawnattr_t*;short*):int"/>
    <method name="posix_spawnattr_getpgroup(const posix_spawnattr_t*;pid_t*):int"/>
    <method name="posix_spawnattr_getsigdefault(const posix_spawnattr_t*;sigset_t*):int"/>
    <method name="posix_spawnattr_getsigmask(const posix_spawnattr_t*;sigset_t*):int"/>
    <method name="posix_spawnattr_init(posix_spawnattr_t*):int"/>
    <method name="posix_spawnattr_setauditsessionport_np(posix_spawnattr_t*;mach_port_t):int"/>
    <method name="posix_spawnattr_setbinpref_np(posix_spawnattr_t*;size_t;cpu_type_t*;size_t*):int"/>
    <method name="posix_spawnattr_setexceptionports_np(posix_spawnattr_t*;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):int"/>
    <method name="posix_spawnattr_setflags(posix_spawnattr_t*;short):int"/>
    <method name="posix_spawnattr_setpgroup(posix_spawnattr_t*;pid_t):int"/>
    <method name="posix_spawnattr_setsigdefault(posix_spawnattr_t*;const sigset_t*):int"/>
    <method name="posix_spawnattr_setsigmask(posix_spawnattr_t*;const sigset_t*):int"/>
    <method name="posix_spawnattr_setspecialport_np(posix_spawnattr_t*;mach_port_t;int):int"/>
    <method name="posix_spawnp(pid_t*;const char*;const posix_spawn_file_actions_t*;const posix_spawnattr_t*;const char**;const char**):int"/>
    <method name="pow(double;double):double"/>
    <method name="pow(double;int):double"/>
    <method name="pow(float;float):float"/>
    <method name="pow(float;int):float"/>
    <method name="pow(long double;int):long double"/>
    <method name="pow(long double;long double):long double"/>
    <method name="powf(float;float):float"/>
    <method name="powl(long double;long double):long double"/>
    <method name="pqueue_find(pqueue;unsigned long long):pitem*"/>
    <method name="pqueue_free(pqueue):void"/>
    <method name="pqueue_insert(pqueue;pitem*):pitem*"/>
    <method name="pqueue_iterator(pqueue):pitem*"/>
    <method name="pqueue_new():pqueue"/>
    <method name="pqueue_next(piterator*):pitem*"/>
    <method name="pqueue_peek(pqueue):pitem*"/>
    <method name="pqueue_pop(pqueue):pitem*"/>
    <method name="pqueue_print(pqueue):void"/>
    <method name="pread(int;void*;size_t;__off_t):ssize_t"/>
    <method name="pread(int;void*;size_t;off_t):ssize_t"/>
    <method name="prefsEscapedStringOptions():int"/>
    <method name="printf(const char*, ...):int"/>
    <method name="processor_assign(processor_t;processor_set_t;boolean_t):kern_return_t"/>
    <method name="processor_control(processor_t;processor_info_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="processor_exit(processor_t):kern_return_t"/>
    <method name="processor_get_assignment(processor_t;processor_set_name_t*):kern_return_t"/>
    <method name="processor_info(processor_t;processor_flavor_t;host_t*;processor_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_create(host_t;processor_set_t*;processor_set_name_t*):kern_return_t"/>
    <method name="processor_set_default(host_t;processor_set_name_t*):kern_return_t"/>
    <method name="processor_set_destroy(processor_set_t):kern_return_t"/>
    <method name="processor_set_info(processor_set_name_t;int;host_t*;processor_set_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_max_priority(processor_set_t;int;boolean_t):kern_return_t"/>
    <method name="processor_set_policy_control(processor_set_t;processor_set_flavor_t;processor_set_info_t;mach_msg_type_number_t;boolean_t):kern_return_t"/>
    <method name="processor_set_policy_disable(processor_set_t;int;boolean_t):kern_return_t"/>
    <method name="processor_set_policy_enable(processor_set_t;int):kern_return_t"/>
    <method name="processor_set_stack_usage(processor_set_t;unsigned int*;vm_size_t*;vm_size_t*;vm_size_t*;vm_offset_t*):kern_return_t"/>
    <method name="processor_set_statistics(processor_set_name_t;processor_set_flavor_t;processor_set_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_tasks(processor_set_t;task_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_set_threads(processor_set_t;thread_act_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="processor_start(processor_t):kern_return_t"/>
    <method name="profil(char*;size_t;unsigned long;unsigned int):int"/>
    <method name="property_copyAttributeList(objc_property_t;unsigned int*):objc_property_attribute_t*"/>
    <method name="property_copyAttributeValue(objc_property_t;const char*):char*"/>
    <method name="property_getAttributes(objc_property_t):const char*"/>
    <method name="property_getName(objc_property_t):const char*"/>
    <method name="property_list_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="protocol_addMethodDescription(Protocol*;SEL;const char*;BOOL;BOOL):void"/>
    <method name="protocol_addProperty(Protocol*;const char*;const objc_property_attribute_t*;unsigned int;BOOL;BOOL):void"/>
    <method name="protocol_addProtocol(Protocol*;Protocol*):void"/>
    <method name="protocol_conformsToProtocol(Protocol*;Protocol*):BOOL"/>
    <method name="protocol_copyMethodDescriptionList(Protocol*;BOOL;BOOL;unsigned int*):struct objc_method_description*"/>
    <method name="protocol_copyPropertyList(Protocol*;unsigned int*):objc_property_t*"/>
    <method name="protocol_copyProtocolList(Protocol*;unsigned int*):Protocol**"/>
    <method name="protocol_getMethodDescription(Protocol*;SEL;BOOL;BOOL):struct objc_method_description"/>
    <method name="protocol_getName(Protocol*):const char*"/>
    <method name="protocol_getProperty(Protocol*;const char*;BOOL;BOOL):objc_property_t"/>
    <method name="protocol_isEqual(Protocol*;Protocol*):BOOL"/>
    <method name="pselect(int;fd_set*;fd_set*;fd_set*;const struct timespec*;const sigset_t*):int"/>
    <method name="psignal(unsigned int;const char*):void"/>
    <method name="psort(void*;size_t;size_t;(*)(const void*;const void*):int):void"/>
    <method name="psort_b(void*;size_t;size_t;(^)(const void*;const void*):int):void"/>
    <method name="psort_r(void*;size_t;size_t;void*;(*)(void*;const void*;const void*):int):void"/>
    <method name="pspdf_dispatch_async_if(dispatch_queue_t;BOOL;(^)():void):void"/>
    <method name="pspdf_dispatch_queue_create(const char*;dispatch_queue_attr_t):dispatch_queue_t"/>
    <method name="pspdf_dispatch_sync_reentrant(dispatch_queue_t;(^)():void):void"/>
    <method name="psrangef(float;float;float):CGFloat"/>
    <method name="pthread_atfork((*)():void;(*)():void;(*)():void):int"/>
    <method name="pthread_attr_destroy(pthread_attr_t*):int"/>
    <method name="pthread_attr_getdetachstate(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getguardsize(const pthread_attr_t*;size_t*):int"/>
    <method name="pthread_attr_getinheritsched(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getschedparam(const pthread_attr_t*;struct sched_param*):int"/>
    <method name="pthread_attr_getschedpolicy(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getscope(const pthread_attr_t*;int*):int"/>
    <method name="pthread_attr_getstack(const pthread_attr_t*;void**;size_t*):int"/>
    <method name="pthread_attr_getstackaddr(const pthread_attr_t*;void**):int"/>
    <method name="pthread_attr_getstacksize(const pthread_attr_t*;size_t*):int"/>
    <method name="pthread_attr_init(pthread_attr_t*):int"/>
    <method name="pthread_attr_setdetachstate(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setguardsize(pthread_attr_t*;size_t):int"/>
    <method name="pthread_attr_setinheritsched(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setschedparam(pthread_attr_t*;const struct sched_param*):int"/>
    <method name="pthread_attr_setschedpolicy(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setscope(pthread_attr_t*;int):int"/>
    <method name="pthread_attr_setstack(pthread_attr_t*;void*;size_t):int"/>
    <method name="pthread_attr_setstackaddr(pthread_attr_t*;void*):int"/>
    <method name="pthread_attr_setstacksize(pthread_attr_t*;size_t):int"/>
    <method name="pthread_cancel(pthread_t):int"/>
    <method name="pthread_cond_broadcast(pthread_cond_t*):int"/>
    <method name="pthread_cond_destroy(pthread_cond_t*):int"/>
    <method name="pthread_cond_init(pthread_cond_t*;const pthread_condattr_t*):int"/>
    <method name="pthread_cond_signal(pthread_cond_t*):int"/>
    <method name="pthread_cond_signal_thread_np(pthread_cond_t*;pthread_t):int"/>
    <method name="pthread_cond_timedwait(pthread_cond_t*;pthread_mutex_t*;const struct timespec*):int"/>
    <method name="pthread_cond_timedwait_relative_np(pthread_cond_t*;pthread_mutex_t*;const struct timespec*):int"/>
    <method name="pthread_cond_wait(pthread_cond_t*;pthread_mutex_t*):int"/>
    <method name="pthread_condattr_destroy(pthread_condattr_t*):int"/>
    <method name="pthread_condattr_getpshared(const pthread_condattr_t*;int*):int"/>
    <method name="pthread_condattr_init(pthread_condattr_t*):int"/>
    <method name="pthread_condattr_setpshared(pthread_condattr_t*;int):int"/>
    <method name="pthread_create(pthread_t*;const pthread_attr_t*;(*)(void*):void*;void*):int"/>
    <method name="pthread_create_suspended_np(pthread_t*;const pthread_attr_t*;(*)(void*):void*;void*):int"/>
    <method name="pthread_detach(pthread_t):int"/>
    <method name="pthread_equal(pthread_t;pthread_t):int"/>
    <method name="pthread_exit(void*):void"/>
    <method name="pthread_from_mach_thread_np(mach_port_t):pthread_t"/>
    <method name="pthread_get_stackaddr_np(pthread_t):void*"/>
    <method name="pthread_get_stacksize_np(pthread_t):size_t"/>
    <method name="pthread_getconcurrency():int"/>
    <method name="pthread_getname_np(pthread_t;char*;size_t):int"/>
    <method name="pthread_getschedparam(pthread_t;int*;struct sched_param*):int"/>
    <method name="pthread_getspecific(pthread_key_t):void*"/>
    <method name="pthread_getugid_np(uid_t*;gid_t*):int"/>
    <method name="pthread_is_threaded_np():int"/>
    <method name="pthread_join(pthread_t;void**):int"/>
    <method name="pthread_key_create(pthread_key_t*;(*)(void*):void):int"/>
    <method name="pthread_key_delete(pthread_key_t):int"/>
    <method name="pthread_kill(pthread_t;int):int"/>
    <method name="pthread_mach_thread_np(pthread_t):mach_port_t"/>
    <method name="pthread_main_np():int"/>
    <method name="pthread_mutex_destroy(pthread_mutex_t*):int"/>
    <method name="pthread_mutex_getprioceiling(const pthread_mutex_t*;int*):int"/>
    <method name="pthread_mutex_init(pthread_mutex_t*;const pthread_mutexattr_t*):int"/>
    <method name="pthread_mutex_lock(pthread_mutex_t*):int"/>
    <method name="pthread_mutex_setprioceiling(pthread_mutex_t*;int;int*):int"/>
    <method name="pthread_mutex_trylock(pthread_mutex_t*):int"/>
    <method name="pthread_mutex_unlock(pthread_mutex_t*):int"/>
    <method name="pthread_mutexattr_destroy(pthread_mutexattr_t*):int"/>
    <method name="pthread_mutexattr_getprioceiling(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_getprotocol(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_getpshared(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_gettype(const pthread_mutexattr_t*;int*):int"/>
    <method name="pthread_mutexattr_init(pthread_mutexattr_t*):int"/>
    <method name="pthread_mutexattr_setpolicy_np(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_setprioceiling(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_setprotocol(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_setpshared(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_mutexattr_settype(pthread_mutexattr_t*;int):int"/>
    <method name="pthread_once(pthread_once_t*;(*)():void):int"/>
    <method name="pthread_rwlock_destroy(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_downgrade_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_held_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_init(pthread_rwlock_t*;const pthread_rwlockattr_t*):int"/>
    <method name="pthread_rwlock_longrdlock_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_rdheld_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_rdlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_tryrdlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_tryupgrade_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_trywrlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_unlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_upgrade_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_wrheld_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_wrlock(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlock_yieldwrlock_np(pthread_rwlock_t*):int"/>
    <method name="pthread_rwlockattr_destroy(pthread_rwlockattr_t*):int"/>
    <method name="pthread_rwlockattr_getpshared(const pthread_rwlockattr_t*;int*):int"/>
    <method name="pthread_rwlockattr_init(pthread_rwlockattr_t*):int"/>
    <method name="pthread_rwlockattr_setpshared(pthread_rwlockattr_t*;int):int"/>
    <method name="pthread_self():pthread_t"/>
    <method name="pthread_setcancelstate(int;int*):int"/>
    <method name="pthread_setcanceltype(int;int*):int"/>
    <method name="pthread_setconcurrency(int):int"/>
    <method name="pthread_setname_np(const char*):int"/>
    <method name="pthread_setschedparam(pthread_t;int;const struct sched_param*):int"/>
    <method name="pthread_setspecific(pthread_key_t;const void*):int"/>
    <method name="pthread_setugid_np(uid_t;gid_t):int"/>
    <method name="pthread_sigmask(int;const sigset_t*;sigset_t*):int"/>
    <method name="pthread_testcancel():void"/>
    <method name="pthread_threadid_np(pthread_t;__uint64_t*):int"/>
    <method name="pthread_yield_np():void"/>
    <method name="ptsname(int):char*"/>
    <method name="putc(int;FILE*):int"/>
    <method name="putc_unlocked(int;FILE*):int"/>
    <method name="putchar(int):int"/>
    <method name="putchar_unlocked(int):int"/>
    <method name="putenv(char*):int"/>
    <method name="puts(const char*):int"/>
    <method name="pututxline(const struct utmpx*):struct utmpx*"/>
    <method name="putw(int;FILE*):int"/>
    <method name="putwc(wchar_t;FILE*):wint_t"/>
    <method name="putwchar(wchar_t):wint_t"/>
    <method name="pwrite(int;const void*;size_t;off_t):ssize_t"/>
    <method name="qsort(void*;size_t;size_t;(*)(const void*;const void*):int):void"/>
    <method name="qsort_b(void*;size_t;size_t;(^)(const void*;const void*):int):void"/>
    <method name="qsort_r(void*;size_t;size_t;void*;(*)(void*;const void*;const void*):int):void"/>
    <method name="querylocale(int;locale_t):const char*"/>
    <method name="quotactl(const char*;int;int;int):int"/>
    <method name="radixsort(const unsigned char**;int;const unsigned char*;unsigned int):int"/>
    <method name="raise(int):int"/>
    <method name="rand():int"/>
    <method name="rand_r(unsigned int*):int"/>
    <method name="random():long"/>
    <method name="rcmd(char**;int;const char*;const char*;const char*;int*):int"/>
    <method name="rcmd_af(char**;int;const char*;const char*;const char*;int*;int):int"/>
    <method name="read(int;void*;size_t):ssize_t"/>
    <method name="read(int;void*;unsigned int):int"/>
    <method name="read_double(const unsigned char*;const unsigned char**):double"/>
    <method name="read_segment(const unsigned char*;const unsigned char**;NSUInteger*):NSUInteger"/>
    <method name="read_segment_2digits(const unsigned char*;const unsigned char**):NSUInteger"/>
    <method name="read_segment_4digits(const unsigned char*;const unsigned char**;NSUInteger*):NSUInteger"/>
    <method name="readdir(DIR*):dirent*"/>
    <method name="readdir(DIR*):struct dirent*"/>
    <method name="readdir_r(DIR*;dirent*;dirent**):int"/>
    <method name="readdir_r(DIR*;struct dirent*;struct dirent**):int"/>
    <method name="readlink(const char*;char*;size_t):ssize_t"/>
    <method name="readpassphrase(const char*;char*;size_t;int):char*"/>
    <method name="readv(int;const iovec*;int):ssize_t"/>
    <method name="readv(int;const struct iovec*;int):ssize_t"/>
    <method name="realloc(void*;size_t):void*"/>
    <method name="reallocf(void*;size_t):void*"/>
    <method name="realpath(const char*;char*):char*"/>
    <method name="reboot(int):int"/>
    <method name="recv(SOCKET;char*;int;int):int"/>
    <method name="recv(int;void*;size_t;int):ssize_t"/>
    <method name="recvfrom(SOCKET;char*;int;int;sockaddr*;int*):int"/>
    <method name="recvfrom(int;void*;size_t;int;sockaddr*;socklen_t*):ssize_t"/>
    <method name="recvfrom(int;void*;size_t;int;struct sockaddr*;socklen_t*):ssize_t"/>
    <method name="recvmsg(int;msghdr*;int):ssize_t"/>
    <method name="recvmsg(int;struct msghdr*;int):ssize_t"/>
    <method name="regcomp(regex_t*;const char*;int):int"/>
    <method name="regerror(int;const regex_t*;char*;size_t):size_t"/>
    <method name="regexec(const regex_t*;const char*;size_t;regmatch_t*;int):int"/>
    <method name="regfree(regex_t*):void"/>
    <method name="register_callback(event_callback;int):void"/>
    <method name="regncomp(regex_t*;const char*;size_t;int):int"/>
    <method name="regnexec(const regex_t*;const char*;size_t;size_t;regmatch_t*;int):int"/>
    <method name="regwcomp(regex_t*;const wchar_t*;int):int"/>
    <method name="regwexec(const regex_t*;const wchar_t*;size_t;regmatch_t*;int):int"/>
    <method name="regwncomp(regex_t*;const wchar_t*;size_t;int):int"/>
    <method name="regwnexec(const regex_t*;const wchar_t*;size_t;size_t;regmatch_t*;int):int"/>
    <method name="remainder(double;double):double"/>
    <method name="remainderf(float;float):float"/>
    <method name="remainderl(long double;long double):long double"/>
    <method name="remove(const char*):int"/>
    <method name="removeClassFromElement(int;int):int"/>
    <method name="removefile(const char*;removefile_state_t;removefile_flags_t):int"/>
    <method name="removefile_cancel(removefile_state_t):int"/>
    <method name="removefile_state_alloc():removefile_state_t"/>
    <method name="removefile_state_free(removefile_state_t):int"/>
    <method name="removefile_state_get(removefile_state_t;uint32_t;void*):int"/>
    <method name="removefile_state_set(removefile_state_t;uint32_t;const void*):int"/>
    <method name="removexattr(const char*;const char*;int):int"/>
    <method name="remque(void*):void"/>
    <method name="remquo(double;double;int*):double"/>
    <method name="remquof(float;float;int*):float"/>
    <method name="remquol(long double;long double;int*):long double"/>
    <method name="rename(const char*;const char*):int"/>
    <method name="res_9_b64_ntop(const u_char*;size_t;char*;size_t):int"/>
    <method name="res_9_b64_pton(const char*;u_char*;size_t):int"/>
    <method name="res_9_close():void"/>
    <method name="res_9_dn_comp(const char*;u_char*;int;u_char**;u_char**):int"/>
    <method name="res_9_dn_count_labels(const char*):int"/>
    <method name="res_9_dn_expand(const u_char*;const u_char*;const u_char*;char*;int):int"/>
    <method name="res_9_dn_skipname(const u_char*;const u_char*):int"/>
    <method name="res_9_dnok(const char*):int"/>
    <method name="res_9_findzonecut(res_9_state;const char*;res_9_ns_class;int;char*;size_t;struct in_addr*;int):int"/>
    <method name="res_9_findzonecut2(res_9_state;const char*;res_9_ns_class;int;char*;size_t;union res_9_sockaddr_union*;int):int"/>
    <method name="res_9_fp_nquery(const u_char*;int;FILE*):void"/>
    <method name="res_9_fp_query(const u_char*;FILE*):void"/>
    <method name="res_9_fp_resstat(const res_9_state;FILE*):void"/>
    <method name="res_9_getlong(const u_char*):u_int32_t"/>
    <method name="res_9_getservers(res_9_state;union res_9_sockaddr_union*;int):int"/>
    <method name="res_9_getshort(const u_char*):u_int16_t"/>
    <method name="res_9_hnok(const char*):int"/>
    <method name="res_9_hostalias_1(const char*):const char*"/>
    <method name="res_9_hostalias_2(const res_9_state;const char*;char*;size_t):const char*"/>
    <method name="res_9_init():int"/>
    <method name="res_9_isourserver(const struct sockaddr_in*):int"/>
    <method name="res_9_loc_aton(const char*;u_char*):int"/>
    <method name="res_9_loc_ntoa(const u_char*;char*):const char*"/>
    <method name="res_9_mailok(const char*):int"/>
    <method name="res_9_mkquery(int;const char*;int;int;const u_char*;int;const u_char*;u_char*;int):int"/>
    <method name="res_9_nameinquery(const char*;int;int;const u_char*;const u_char*):int"/>
    <method name="res_9_nametoclass(const char*;int*):u_int16_t"/>
    <method name="res_9_nametotype(const char*;int*):u_int16_t"/>
    <method name="res_9_nclose(res_9_state):void"/>
    <method name="res_9_ndestroy(res_9_state):void"/>
    <method name="res_9_ninit(res_9_state):int"/>
    <method name="res_9_nisourserver(const res_9_state;const struct sockaddr_in*):int"/>
    <method name="res_9_nmkquery(res_9_state;int;const char*;int;int;const u_char*;int;const u_char*;u_char*;int):int"/>
    <method name="res_9_nopt(res_9_state;int;u_char*;int;int):int"/>
    <method name="res_9_nquery(res_9_state;const char*;int;int;u_char*;int):int"/>
    <method name="res_9_nquerydomain(res_9_state;const char*;const char*;int;int;u_char*;int):int"/>
    <method name="res_9_ns_datetosecs(const char*;int*):u_int32_t"/>
    <method name="res_9_ns_find_tsig(u_char*;u_char*):u_char*"/>
    <method name="res_9_ns_format_ttl(u_long;char*;size_t):int"/>
    <method name="res_9_ns_get16(const u_char*):u_int"/>
    <method name="res_9_ns_get32(const u_char*):u_long"/>
    <method name="res_9_ns_initparse(const u_char*;int;res_9_ns_msg*):int"/>
    <method name="res_9_ns_makecanon(const char*;char*;size_t):int"/>
    <method name="res_9_ns_msg_getflag(res_9_ns_msg;int):int"/>
    <method name="res_9_ns_name_compress(const char*;u_char*;size_t;const u_char**;const u_char**):int"/>
    <method name="res_9_ns_name_ntol(const u_char*;u_char*;size_t):int"/>
    <method name="res_9_ns_name_ntop(const u_char*;char*;size_t):int"/>
    <method name="res_9_ns_name_pack(const u_char*;u_char*;int;const u_char**;const u_char**):int"/>
    <method name="res_9_ns_name_pton(const char*;u_char*;size_t):int"/>
    <method name="res_9_ns_name_rollback(const u_char*;const u_char**;const u_char**):void"/>
    <method name="res_9_ns_name_skip(const u_char**;const u_char*):int"/>
    <method name="res_9_ns_name_uncompress(const u_char*;const u_char*;const u_char*;char*;size_t):int"/>
    <method name="res_9_ns_name_unpack(const u_char*;const u_char*;const u_char*;u_char*;size_t):int"/>
    <method name="res_9_ns_parse_ttl(const char*;u_long*):int"/>
    <method name="res_9_ns_parserr(res_9_ns_msg*;res_9_ns_sect;int;res_9_ns_rr*):int"/>
    <method name="res_9_ns_put16(u_int;u_char*):void"/>
    <method name="res_9_ns_put32(u_long;u_char*):void"/>
    <method name="res_9_ns_samedomain(const char*;const char*):int"/>
    <method name="res_9_ns_samename(const char*;const char*):int"/>
    <method name="res_9_ns_sign(u_char*;int*;int;int;void*;const u_char*;int;u_char*;int*;time_t):int"/>
    <method name="res_9_ns_sign2(u_char*;int*;int;int;void*;const u_char*;int;u_char*;int*;time_t;u_char**;u_char**):int"/>
    <method name="res_9_ns_sign_tcp(u_char*;int*;int;int;res_9_ns_tcp_tsig_state*;int):int"/>
    <method name="res_9_ns_sign_tcp2(u_char*;int*;int;int;res_9_ns_tcp_tsig_state*;int;u_char**;u_char**):int"/>
    <method name="res_9_ns_sign_tcp_init(void*;const u_char*;int;res_9_ns_tcp_tsig_state*):int"/>
    <method name="res_9_ns_skiprr(const u_char*;const u_char*;res_9_ns_sect;int):int"/>
    <method name="res_9_ns_sprintrr(const res_9_ns_msg*;const res_9_ns_rr*;const char*;const char*;char*;size_t):int"/>
    <method name="res_9_ns_sprintrrf(const u_char*;size_t;const char*;res_9_ns_class;ns_type;u_long;const u_char*;size_t;const char*;const char*;char*;size_t):int"/>
    <method name="res_9_ns_subdomain(const char*;const char*):int"/>
    <method name="res_9_ns_verify(u_char*;int*;void*;const u_char*;int;u_char*;int*;time_t*;int):int"/>
    <method name="res_9_ns_verify_tcp(u_char*;int*;res_9_ns_tcp_tsig_state*;int):int"/>
    <method name="res_9_ns_verify_tcp_init(void*;const u_char*;int;res_9_ns_tcp_tsig_state*):int"/>
    <method name="res_9_nsearch(res_9_state;const char*;int;int;u_char*;int):int"/>
    <method name="res_9_nsend(res_9_state;const u_char*;int;u_char*;int):int"/>
    <method name="res_9_nsendsigned(res_9_state;const u_char*;int;res_9_ns_tsig_key*;u_char*;int):int"/>
    <method name="res_9_ownok(const char*):int"/>
    <method name="res_9_p_cdname(const u_char*;const u_char*;FILE*):const u_char*"/>
    <method name="res_9_p_cdnname(const u_char*;const u_char*;int;FILE*):const u_char*"/>
    <method name="res_9_p_class(int):const char*"/>
    <method name="res_9_p_fqname(const u_char*;const u_char*;FILE*):const u_char*"/>
    <method name="res_9_p_fqnname(const u_char*;const u_char*;int;char*;int):const u_char*"/>
    <method name="res_9_p_option(u_long):const char*"/>
    <method name="res_9_p_query(const u_char*):void"/>
    <method name="res_9_p_rcode(int):const char*"/>
    <method name="res_9_p_secstodate(u_long):char*"/>
    <method name="res_9_p_section(int;int):const char*"/>
    <method name="res_9_p_time(u_int32_t):const char*"/>
    <method name="res_9_p_type(int):const char*"/>
    <method name="res_9_pquery(const res_9_state;const u_char*;int;FILE*):void"/>
    <method name="res_9_putlong(u_int32_t;u_char*):void"/>
    <method name="res_9_putshort(u_int16_t;u_char*):void"/>
    <method name="res_9_queriesmatch(const u_char*;const u_char*;const u_char*;const u_char*):int"/>
    <method name="res_9_query(const char*;int;int;u_char*;int):int"/>
    <method name="res_9_querydomain(const char*;const char*;int;int;u_char*;int):int"/>
    <method name="res_9_randomid():u_int"/>
    <method name="res_9_search(const char*;int;int;u_char*;int):int"/>
    <method name="res_9_send(const u_char*;int;u_char*;int):int"/>
    <method name="res_9_sendsigned(const u_char*;int;res_9_ns_tsig_key*;u_char*;int):int"/>
    <method name="res_9_setservers(res_9_state;const union res_9_sockaddr_union*;int):void"/>
    <method name="res_9_sym_ntop(const struct res_9_sym*;int;int*):const char*"/>
    <method name="res_9_sym_ntos(const struct res_9_sym*;int;int*):const char*"/>
    <method name="res_9_sym_ston(const struct res_9_sym*;const char*;int*):int"/>
    <method name="res_9_vinit(res_9_state;int):int"/>
    <method name="res_buildprotolist():void"/>
    <method name="res_destroyprotolist():void"/>
    <method name="res_destroyservicelist():void"/>
    <method name="res_get_bitstringsuffix(res_9_state):const char*"/>
    <method name="res_get_nibblesuffix(res_9_state):const char*"/>
    <method name="res_get_nibblesuffix2(res_9_state):const char*"/>
    <method name="res_protocolname(int):const char*"/>
    <method name="res_send_setqhook(res_send_qhook):void"/>
    <method name="res_send_setrhook(res_send_rhook):void"/>
    <method name="res_servicename(u_int16_t;const char*):const char*"/>
    <method name="restoreImp():void"/>
    <method name="revoke(const char*):int"/>
    <method name="rewind(FILE*):int"/>
    <method name="rewind(FILE*):void"/>
    <method name="rewinddir(DIR*):void"/>
    <method name="rexproc_modes_1(rex_ttymode*;CLIENT*):void*"/>
    <method name="rexproc_modes_1_svc(rex_ttymode*;struct svc_req*):void*"/>
    <method name="rexproc_signal_1(int*;CLIENT*):void*"/>
    <method name="rexproc_signal_1_svc(int*;struct svc_req*):void*"/>
    <method name="rexproc_start_1(rex_start*;CLIENT*):rex_result*"/>
    <method name="rexproc_start_1_svc(rex_start*;struct svc_req*):rex_result*"/>
    <method name="rexproc_wait_1(void*;CLIENT*):rex_result*"/>
    <method name="rexproc_wait_1_svc(void*;struct svc_req*):rex_result*"/>
    <method name="rexproc_winch_1(rex_ttysize*;CLIENT*):void*"/>
    <method name="rexproc_winch_1_svc(rex_ttysize*;struct svc_req*):void*"/>
    <method name="rindex(const char*;int):char*"/>
    <method name="rint(double):double"/>
    <method name="rintf(float):float"/>
    <method name="rintl(long double):long double"/>
    <method name="rinttol(double):long"/>
    <method name="rmdir(const char*):int"/>
    <method name="rmdirp(char*;char*):int"/>
    <method name="round(double):double"/>
    <method name="roundf(float):float"/>
    <method name="roundl(long double):long double"/>
    <method name="roundtol(double):long"/>
    <method name="rpctest_service():void"/>
    <method name="rquotaproc_getactivequota_1(getquota_args*;CLIENT*):getquota_rslt*"/>
    <method name="rquotaproc_getactivequota_1_svc(getquota_args*;struct svc_req*):getquota_rslt*"/>
    <method name="rquotaproc_getquota_1(getquota_args*;CLIENT*):getquota_rslt*"/>
    <method name="rquotaproc_getquota_1_svc(getquota_args*;struct svc_req*):getquota_rslt*"/>
    <method name="rresvport(int*):int"/>
    <method name="rresvport_af(int*;int):int"/>
    <method name="rstat(char*;struct statstime*):enum clnt_stat"/>
    <method name="rstatproc_havedisk_1(void*;CLIENT*):u_int*"/>
    <method name="rstatproc_havedisk_1_svc(void*;struct svc_req*):u_int*"/>
    <method name="rstatproc_havedisk_2(void*;CLIENT*):u_int*"/>
    <method name="rstatproc_havedisk_2_svc(void*;struct svc_req*):u_int*"/>
    <method name="rstatproc_havedisk_3(void*;CLIENT*):u_int*"/>
    <method name="rstatproc_havedisk_3_svc(void*;struct svc_req*):u_int*"/>
    <method name="rstatproc_stats_1(void*;CLIENT*):stats*"/>
    <method name="rstatproc_stats_1_svc(void*;struct svc_req*):stats*"/>
    <method name="rstatproc_stats_2(void*;CLIENT*):statsswtch*"/>
    <method name="rstatproc_stats_2_svc(void*;struct svc_req*):statsswtch*"/>
    <method name="rstatproc_stats_3(void*;CLIENT*):statstime*"/>
    <method name="rstatproc_stats_3_svc(void*;struct svc_req*):statstime*"/>
    <method name="ruserok(const char*;int;const char*;const char*):int"/>
    <method name="rusersproc_allnames_3(void*;CLIENT*):utmp_array*"/>
    <method name="rusersproc_allnames_3_svc(void*;struct svc_req*):utmp_array*"/>
    <method name="rusersproc_names_3(void*;CLIENT*):utmp_array*"/>
    <method name="rusersproc_names_3_svc(void*;struct svc_req*):utmp_array*"/>
    <method name="rusersproc_num_3(void*;CLIENT*):int*"/>
    <method name="rusersproc_num_3_svc(void*;struct svc_req*):int*"/>
    <method name="s2i_ASN1_INTEGER(X509V3_EXT_METHOD*;char*):ASN1_INTEGER*"/>
    <method name="s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD*;X509V3_CTX*;char*):ASN1_OCTET_STRING*"/>
    <method name="safe_gets(char*;char*;int):void"/>
    <method name="sandbox_free_error(char*):void"/>
    <method name="sandbox_init(const char*;uint64_t;char**):int"/>
    <method name="sbdsdc_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sbdsqr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sbrk(int):void*"/>
    <method name="scalb(double;double):double"/>
    <method name="scalbln(double;long):double"/>
    <method name="scalblnf(float;long):float"/>
    <method name="scalblnl(long double;long):long double"/>
    <method name="scalbn(double;int):double"/>
    <method name="scalbnf(float;int):float"/>
    <method name="scalbnl(long double;int):long double"/>
    <method name="scandir(const char*;struct dirent***;(*)(const struct dirent*):int;(*)(const struct dirent**;const struct dirent**):int):int"/>
    <method name="scandir_b(const char*;struct dirent***;(^)(const struct dirent*):int;(^)(const struct dirent**;const struct dirent**):int):int"/>
    <method name="scanf(const char*, ...):int"/>
    <method name="sched_get_priority_max(int):int"/>
    <method name="sched_get_priority_min(int):int"/>
    <method name="sched_yield():int"/>
    <method name="scsum1_(__CLPK_integer*;__CLPK_complex*;__CLPK_integer*):__CLPK_doublereal"/>
    <method name="sdisna_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="searchfs(const char*;struct fssearchblock*;unsigned long*;unsigned int;unsigned int;struct searchstate*):int"/>
    <method name="seed48(unsigned short*):unsigned short*"/>
    <method name="seekdir(DIR*;long):void"/>
    <method name="sel_getName(SEL):const char*"/>
    <method name="sel_getUid(const char*):SEL"/>
    <method name="sel_isEqual(SEL;SEL):BOOL"/>
    <method name="sel_isMapped(SEL):BOOL"/>
    <method name="sel_registerName(const char*):SEL"/>
    <method name="select(int;fd_set*;fd_set*;fd_set*;const timeval*):int"/>
    <method name="sem_close(sem_t*):int"/>
    <method name="sem_destroy(sem_t*):int"/>
    <method name="sem_getvalue(sem_t*;int*):int"/>
    <method name="sem_init(sem_t*;int;unsigned int):int"/>
    <method name="sem_open(const char*;int, ...):sem_t*"/>
    <method name="sem_post(sem_t*):int"/>
    <method name="sem_trywait(sem_t*):int"/>
    <method name="sem_unlink(const char*):int"/>
    <method name="sem_wait(sem_t*):int"/>
    <method name="semaphore_create(task_t;semaphore_t*;int;int):kern_return_t"/>
    <method name="semaphore_destroy(task_t;semaphore_t):kern_return_t"/>
    <method name="semaphore_signal(semaphore_t):kern_return_t"/>
    <method name="semaphore_signal_all(semaphore_t):kern_return_t"/>
    <method name="semaphore_signal_thread(semaphore_t;thread_t):kern_return_t"/>
    <method name="semaphore_timedwait(semaphore_t;mach_timespec_t):kern_return_t"/>
    <method name="semaphore_timedwait_signal(semaphore_t;semaphore_t;mach_timespec_t):kern_return_t"/>
    <method name="semaphore_wait(semaphore_t):kern_return_t"/>
    <method name="semaphore_wait_signal(semaphore_t;semaphore_t):kern_return_t"/>
    <method name="semctl(int;int;int, ...):int"/>
    <method name="semget(key_t;int;int):int"/>
    <method name="semop(int;struct sembuf*;size_t):int"/>
    <method name="semsys(int, ...):int"/>
    <method name="send(SOCKET;const char*;int;int):int"/>
    <method name="send(int;const void*;size_t;int):ssize_t"/>
    <method name="sendfile(int;int;off_t;off_t*;struct sf_hdtr*;int):int"/>
    <method name="sendmsg(int;const msghdr*;int):ssize_t"/>
    <method name="sendmsg(int;const struct msghdr*;int):ssize_t"/>
    <method name="sendto(SOCKET;const char*;int;int;const sockaddr*;int):int"/>
    <method name="sendto(int;const void*;size_t;int;const sockaddr*;socklen_t):ssize_t"/>
    <method name="sendto(int;const void*;size_t;int;const struct sockaddr*;socklen_t):ssize_t"/>
    <method name="setCopyToClipboardHUD(int):int"/>
    <method name="setExampleTablesWidth(int):int"/>
    <method name="setPrefsCookie():int"/>
    <method name="setPrefsFromCookie():int"/>
    <method name="setTransitionElement(int;int;int):int"/>
    <method name="set_dp_control_port(host_priv_t;mach_port_t):kern_return_t"/>
    <method name="setac():void"/>
    <method name="setattrlist(const char*;void*;void*;size_t;unsigned long):int"/>
    <method name="setauclass():void"/>
    <method name="setaudit(const struct auditinfo*):int"/>
    <method name="setaudit_addr(const struct auditinfo_addr*;int):int"/>
    <method name="setauevent():void"/>
    <method name="setauid(const au_id_t*):int"/>
    <method name="setauuser():void"/>
    <method name="setbuf(FILE*;char*):void"/>
    <method name="setbuffer(FILE*;char*;int):void"/>
    <method name="setdomainname(const char*;int):int"/>
    <method name="setegid(gid_t):int"/>
    <method name="setenv(const char*;const char*;int):int"/>
    <method name="seteuid(uid_t):int"/>
    <method name="setfsent():int"/>
    <method name="setgid(gid_t):int"/>
    <method name="setgrent():void"/>
    <method name="setgrfile(const char*):void"/>
    <method name="setgroupent(int):int"/>
    <method name="setgroups(int;const gid_t*):int"/>
    <method name="sethostent(int):void"/>
    <method name="sethostid(long):void"/>
    <method name="sethostname(const char*;int):int"/>
    <method name="setiopolicy_np(int;int;int):int"/>
    <method name="setipv4sourcefilter(int;struct in_addr;struct in_addr;uint32_t;uint32_t;struct in_addr*):int"/>
    <method name="setitimer(int;const struct itimerval*;struct itimerval*):int"/>
    <method name="setjmp(int*):int"/>
    <method name="setkey(const char*):void"/>
    <method name="setlcid(int;int):int"/>
    <method name="setlinebuf(FILE*):int"/>
    <method name="setlocale(int;const char*):char*"/>
    <method name="setlogin(const char*):int"/>
    <method name="setlogmask(int):int"/>
    <method name="setmode(const char*):void*"/>
    <method name="setnetent(int):void"/>
    <method name="setnetgrent(const char*):void"/>
    <method name="setpassent(int):int"/>
    <method name="setpgid(pid_t;pid_t):int"/>
    <method name="setpgrp():pid_t"/>
    <method name="setprecision(int):struct _Setprecision"/>
    <method name="setpriority(int;id_t;int):int"/>
    <method name="setproctitle(const char * ...): void"/>
    <method name="setprogname(const char*):void"/>
    <method name="setprotoent(int):void"/>
    <method name="setpwent():void"/>
    <method name="setregid(gid_t;gid_t):int"/>
    <method name="setreuid(uid_t;uid_t):int"/>
    <method name="setrgid(gid_t):int"/>
    <method name="setrlimit(int;const struct rlimit*):int"/>
    <method name="setrpcent(int):void"/>
    <method name="setruid(uid_t):int"/>
    <method name="setservent(int):void"/>
    <method name="setsgroups_np(int;const unsigned char*):int"/>
    <method name="setsid():pid_t"/>
    <method name="setsockopt(SOCKET;int;int;const char*;int):int"/>
    <method name="setsockopt(int;int;int;const void*;socklen_t):int"/>
    <method name="setsourcefilter(int;uint32_t;struct sockaddr*;socklen_t;uint32_t;uint32_t;struct sockaddr_storage*):int"/>
    <method name="setstate(const char*):char*"/>
    <method name="settimeofday(const struct timeval*;const struct timezone*):int"/>
    <method name="setttyent():int"/>
    <method name="setuid(uid_t):int"/>
    <method name="setusershell():void"/>
    <method name="setutxent():void"/>
    <method name="setutxent_wtmp(int):void"/>
    <method name="setvbuf(FILE*;char*;int;size_t):int"/>
    <method name="setw(int):struct _Setw"/>
    <method name="setwgroups_np(int;const unsigned char*):int"/>
    <method name="setxattr(const char*;const char*;const void*;size_t;u_int32_t;int):int"/>
    <method name="sgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgebal_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgecon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sgeev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgegs_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgegv_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgejsv_(char*;char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesc2_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="sgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesvj_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetc2_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetri_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggbal_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sggev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="sggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sgsvj0_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgsvj1_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtcon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgttrf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sheetIndexAndRuleIndexOfCSSRule(int):int"/>
    <method name="shgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="shm_open(const char*;int, ...):int"/>
    <method name="shm_unlink(const char*):int"/>
    <method name="shmat(int;const void*;int):void*"/>
    <method name="shmctl(int;int;struct __shmid_ds_new*):int"/>
    <method name="shmdt(const void*):int"/>
    <method name="shmget(key_t;size_t;int):int"/>
    <method name="shmsys(int, ...):int"/>
    <method name="shsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="shseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="shutdown(SOCKET;int):int"/>
    <method name="shutdown(int;int):int"/>
    <method name="sigaction(int;const struct sigaction*;struct sigaction*):int"/>
    <method name="sigaddset(sigset_t*;int):int"/>
    <method name="sigaltstack(const stack_t*;stack_t*):int"/>
    <method name="sigblock(int):int"/>
    <method name="sigdelset(sigset_t*;int):int"/>
    <method name="sigemptyset(sigset_t*):int"/>
    <method name="sigfillset(sigset_t*):int"/>
    <method name="sighold(int):int"/>
    <method name="sigignore(int):int"/>
    <method name="siginterrupt(int;int):int"/>
    <method name="sigismember(const sigset_t*;int):int"/>
    <method name="siglongjmp(int*;int):void"/>
    <method name="signal(int;(*)(int):void):(*)(int):void"/>
    <method name="significand(double):double"/>
    <method name="sigpause(int):int"/>
    <method name="sigpending(sigset_t*):int"/>
    <method name="sigprocmask(int;const sigset_t*;sigset_t*):int"/>
    <method name="sigrelse(int):int"/>
    <method name="sigset(int;(*)(int):void):(*)(int):void"/>
    <method name="sigsetjmp(int*;int):int"/>
    <method name="sigsetmask(int):int"/>
    <method name="sigsuspend(const sigset_t*):int"/>
    <method name="sigvec(int;struct sigvec*;struct sigvec*):int"/>
    <method name="sigwait(const sigset_t*;int*):int"/>
    <method name="sin(double):double"/>
    <method name="sin(float):float"/>
    <method name="sin(long double):long double"/>
    <method name="sinf(float):float"/>
    <method name="sinh(double):double"/>
    <method name="sinh(float):float"/>
    <method name="sinh(long double):long double"/>
    <method name="sinhf(float):float"/>
    <method name="sinhl(long double):long double"/>
    <method name="sinl(long double):long double"/>
    <method name="sisnan_(__CLPK_real*):__CLPK_logical"/>
    <method name="sk_delete(STACK*;int):char*"/>
    <method name="sk_delete_ptr(STACK*;char*):char*"/>
    <method name="sk_dup(STACK*):STACK*"/>
    <method name="sk_find(STACK*;char*):int"/>
    <method name="sk_find_ex(STACK*;char*):int"/>
    <method name="sk_free(STACK*):void"/>
    <method name="sk_insert(STACK*;char*;int):int"/>
    <method name="sk_is_sorted(const STACK*):int"/>
    <method name="sk_new((*)(const const char**;const const char**):int*):STACK*"/>
    <method name="sk_new_null():STACK*"/>
    <method name="sk_num(const STACK*):int"/>
    <method name="sk_pop(STACK*):char*"/>
    <method name="sk_pop_free(STACK*;(*)(void*):void*):void"/>
    <method name="sk_push(STACK*;char*):int"/>
    <method name="sk_set(STACK*;int;char*):char*"/>
    <method name="sk_set_cmp_func(STACK*;(*)(const const char**;const const char**):int*):(*)(const const char**;const const char**):int*"/>
    <method name="sk_shift(STACK*):char*"/>
    <method name="sk_sort(STACK*):void"/>
    <method name="sk_unshift(STACK*;char*):int"/>
    <method name="sk_value(const STACK*;int):char*"/>
    <method name="sk_zero(STACK*):void"/>
    <method name="sl_add(StringList*;char*):int"/>
    <method name="sl_find(StringList*;char*):char*"/>
    <method name="sl_free(StringList*;int):void"/>
    <method name="sl_init():StringList*"/>
    <method name="slabad_(__CLPK_real*;__CLPK_real*):int"/>
    <method name="slabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slacn2_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slacon_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sladiv_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slae2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaebz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed1_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaed4_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaed5_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaed6_(__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaed9_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaeda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaev2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaexc_(__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slag2_(__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slag2d_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slags2_(__CLPK_logical*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slagtf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slagts_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slagv2_(__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaisnan_(__CLPK_real*;__CLPK_real*):__CLPK_logical"/>
    <method name="slaln2_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slamc1_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_logical*):int"/>
    <method name="slamc2_(__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slamc3_(__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slamc4_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slamc5_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slamch_(char*):__CLPK_doublereal"/>
    <method name="slamrg_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaneg_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="slangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slangt_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slanhs_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansf_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansp_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slanst_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slansy_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slantp_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slanv2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slapll_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slapy2_(__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slapy3_(__CLPK_real*;__CLPK_real*;__CLPK_real*):__CLPK_doublereal"/>
    <method name="slaqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaqr1_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqsp_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqsy_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;char*):int"/>
    <method name="slaqtr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slar2v_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarfg_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarfp_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slargv_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarra_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrb_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrd_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarre_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarrf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrj_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrk_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrr_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarrv_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slartg_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slartv_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slaruv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slas2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasd0_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd1_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasd3_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd4_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd5_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasd6_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasd7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasd8_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasda_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasdq_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasdt_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slaset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasq1_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasq2_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasq3_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasq4_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slasq5_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_logical*):int"/>
    <method name="slasq6_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasrt_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slassq_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slasv2_(__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slaswp_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slasy2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="slatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="slatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*):int"/>
    <method name="slauu2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="slauum_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sleep(unsigned int):unsigned int"/>
    <method name="slot_name(cpu_type_t;cpu_subtype_t;char**;char**):void"/>
    <method name="sm_mon_1(struct mon*;CLIENT*):struct sm_stat_res*"/>
    <method name="sm_mon_1_svc(struct mon*;struct svc_req*):struct sm_stat_res*"/>
    <method name="sm_notify_1(struct stat_chge*;CLIENT*):void*"/>
    <method name="sm_notify_1_svc(struct stat_chge*;struct svc_req*):void*"/>
    <method name="sm_simu_crash_1(void*;CLIENT*):void*"/>
    <method name="sm_simu_crash_1_svc(void*;struct svc_req*):void*"/>
    <method name="sm_stat_1(struct sm_name*;CLIENT*):struct sm_stat_res*"/>
    <method name="sm_stat_1_svc(struct sm_name*;struct svc_req*):struct sm_stat_res*"/>
    <method name="sm_unmon_1(struct mon_id*;CLIENT*):struct sm_stat*"/>
    <method name="sm_unmon_1_svc(struct mon_id*;struct svc_req*):struct sm_stat*"/>
    <method name="sm_unmon_all_1(struct my_id*;CLIENT*):struct sm_stat*"/>
    <method name="sm_unmon_all_1_svc(struct my_id*;struct svc_req*):struct sm_stat*"/>
    <method name="smartElementUpdate(int;int;int):int"/>
    <method name="smaxloc_(__CLPK_real*;__CLPK_integer*):__CLPK_integer"/>
    <method name="snprintf(char*;size_t;const char*, ...):int"/>
    <method name="sockatmark(int):int"/>
    <method name="socket(int;int;int):SOCKET"/>
    <method name="socket(int;int;int):int"/>
    <method name="socketpair(int;int;int;int*):int"/>
    <method name="sopgtr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sopmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorg2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorg2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorgbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorgrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorgtr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sorm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sorml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sormrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sormtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spftrf_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spftri_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spocon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spoequ_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spoequb_(__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;char*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotf2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppcon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppequ_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;char*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="spptrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spptri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sprayproc_clear_1(void*;CLIENT*):void*"/>
    <method name="sprayproc_clear_1_svc(void*;struct svc_req*):void*"/>
    <method name="sprayproc_get_1(void*;CLIENT*):spraycumul*"/>
    <method name="sprayproc_get_1_svc(void*;struct svc_req*):spraycumul*"/>
    <method name="sprayproc_spray_1(sprayarr*;CLIENT*):void*"/>
    <method name="sprayproc_spray_1_svc(sprayarr*;struct svc_req*):void*"/>
    <method name="sprintf(char*;const char*, ...):int"/>
    <method name="spstf2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spstrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sptcon_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sptrfs_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spttrf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="spttrs_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sqlite3_aggregate_context(sqlite3_context*;int):void*"/>
    <method name="sqlite3_aggregate_count(sqlite3_context*):int"/>
    <method name="sqlite3_auto_extension((*)():void):int"/>
    <method name="sqlite3_backup_finish(sqlite3_backup*):int"/>
    <method name="sqlite3_backup_init(sqlite3*;const char*;sqlite3*;const char*):sqlite3_backup*"/>
    <method name="sqlite3_backup_pagecount(sqlite3_backup*):int"/>
    <method name="sqlite3_backup_remaining(sqlite3_backup*):int"/>
    <method name="sqlite3_backup_step(sqlite3_backup*;int):int"/>
    <method name="sqlite3_bind_blob(sqlite3_stmt*;int;const void*;int;(*)(void*):void):int"/>
    <method name="sqlite3_bind_double(sqlite3_stmt*;int;double):int"/>
    <method name="sqlite3_bind_int(sqlite3_stmt*;int;int):int"/>
    <method name="sqlite3_bind_int64(sqlite3_stmt*;int;sqlite3_int64):int"/>
    <method name="sqlite3_bind_null(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_bind_parameter_count(sqlite3_stmt*):int"/>
    <method name="sqlite3_bind_parameter_index(sqlite3_stmt*;const char*):int"/>
    <method name="sqlite3_bind_parameter_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_bind_text(sqlite3_stmt*;int;const char*;int;(*)(void*):void):int"/>
    <method name="sqlite3_bind_text16(sqlite3_stmt*;int;const void*;int;(*)(void*):void):int"/>
    <method name="sqlite3_bind_value(sqlite3_stmt*;int;const sqlite3_value*):int"/>
    <method name="sqlite3_bind_zeroblob(sqlite3_stmt*;int;int):int"/>
    <method name="sqlite3_blob_bytes(sqlite3_blob*):int"/>
    <method name="sqlite3_blob_close(sqlite3_blob*):int"/>
    <method name="sqlite3_blob_open(sqlite3*;const char*;const char*;const char*;sqlite3_int64;int;sqlite3_blob**):int"/>
    <method name="sqlite3_blob_read(sqlite3_blob*;void*;int;int):int"/>
    <method name="sqlite3_blob_reopen(sqlite3_blob*;sqlite3_int64):int"/>
    <method name="sqlite3_blob_write(sqlite3_blob*;const void*;int;int):int"/>
    <method name="sqlite3_busy_handler(sqlite3*;(*)(void*;int):int;void*):int"/>
    <method name="sqlite3_busy_timeout(sqlite3*;int):int"/>
    <method name="sqlite3_changes(sqlite3*):int"/>
    <method name="sqlite3_clear_bindings(sqlite3_stmt*):int"/>
    <method name="sqlite3_close(sqlite3*):int"/>
    <method name="sqlite3_collation_needed(sqlite3*;void*;(*)(void*;sqlite3*;int;const char*):void):int"/>
    <method name="sqlite3_collation_needed16(sqlite3*;void*;(*)(void*;sqlite3*;int;const void*):void):int"/>
    <method name="sqlite3_column_blob(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_bytes(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_bytes16(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_count(sqlite3_stmt*):int"/>
    <method name="sqlite3_column_database_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_database_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_decltype(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_decltype16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_double(sqlite3_stmt*;int):double"/>
    <method name="sqlite3_column_int(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_int64(sqlite3_stmt*;int):sqlite3_int64"/>
    <method name="sqlite3_column_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_origin_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_origin_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_table_name(sqlite3_stmt*;int):const char*"/>
    <method name="sqlite3_column_table_name16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_text(sqlite3_stmt*;int):const unsigned char*"/>
    <method name="sqlite3_column_text16(sqlite3_stmt*;int):const void*"/>
    <method name="sqlite3_column_type(sqlite3_stmt*;int):int"/>
    <method name="sqlite3_column_value(sqlite3_stmt*;int):sqlite3_value*"/>
    <method name="sqlite3_commit_hook(sqlite3*;(*)(void*):int;void*):void*"/>
    <method name="sqlite3_compileoption_get(int):const char*"/>
    <method name="sqlite3_compileoption_used(const char*):int"/>
    <method name="sqlite3_complete(const char*):int"/>
    <method name="sqlite3_complete16(const void*):int"/>
    <method name="sqlite3_config(int, ...):int"/>
    <method name="sqlite3_context_db_handle(sqlite3_context*):sqlite3*"/>
    <method name="sqlite3_create_collation(sqlite3*;const char*;int;void*;(*)(void*;int;const void*;int;const void*):int):int"/>
    <method name="sqlite3_create_collation16(sqlite3*;const void*;int;void*;(*)(void*;int;const void*;int;const void*):int):int"/>
    <method name="sqlite3_create_collation_v2(sqlite3*;const char*;int;void*;(*)(void*;int;const void*;int;const void*):int;(*)(void*):void):int"/>
    <method name="sqlite3_create_function(sqlite3*;const char*;int;int;void*;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*):void):int"/>
    <method name="sqlite3_create_function16(sqlite3*;const void*;int;int;void*;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*):void):int"/>
    <method name="sqlite3_create_function_v2(sqlite3*;const char*;int;int;void*;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*;int;sqlite3_value**):void;(*)(sqlite3_context*):void;(*)(void*):void):int"/>
    <method name="sqlite3_create_module(sqlite3*;const char*;const sqlite3_module*;void*):int"/>
    <method name="sqlite3_create_module_v2(sqlite3*;const char*;const sqlite3_module*;void*;(*)(void*):void):int"/>
    <method name="sqlite3_data_count(sqlite3_stmt*):int"/>
    <method name="sqlite3_db_config(sqlite3*;int, ...):int"/>
    <method name="sqlite3_db_filename(sqlite3*;const char*):const char*"/>
    <method name="sqlite3_db_handle(sqlite3_stmt*):sqlite3*"/>
    <method name="sqlite3_db_mutex(sqlite3*):sqlite3_mutex*"/>
    <method name="sqlite3_db_readonly(sqlite3*;const char*):int"/>
    <method name="sqlite3_db_release_memory(sqlite3*):int"/>
    <method name="sqlite3_db_status(sqlite3*;int;int*;int*;int):int"/>
    <method name="sqlite3_declare_vtab(sqlite3*;const char*):int"/>
    <method name="sqlite3_enable_load_extension(sqlite3*;int):int"/>
    <method name="sqlite3_enable_shared_cache(int):int"/>
    <method name="sqlite3_errcode(sqlite3*):int"/>
    <method name="sqlite3_errmsg(sqlite3*):const char*"/>
    <method name="sqlite3_errmsg16(sqlite3*):const void*"/>
    <method name="sqlite3_exec(sqlite3*;const char*;(*)(void*;int;char**;char**):int;void*;char**):int"/>
    <method name="sqlite3_expired(sqlite3_stmt*):int"/>
    <method name="sqlite3_extended_errcode(sqlite3*):int"/>
    <method name="sqlite3_extended_result_codes(sqlite3*;int):int"/>
    <method name="sqlite3_file_control(sqlite3*;const char*;int;void*):int"/>
    <method name="sqlite3_finalize(sqlite3_stmt*):int"/>
    <method name="sqlite3_free(void*):void"/>
    <method name="sqlite3_free_table(char**):void"/>
    <method name="sqlite3_get_autocommit(sqlite3*):int"/>
    <method name="sqlite3_get_auxdata(sqlite3_context*;int):void*"/>
    <method name="sqlite3_get_table(sqlite3*;const char*;char***;int*;int*;char**):int"/>
    <method name="sqlite3_global_recover():int"/>
    <method name="sqlite3_initialize():int"/>
    <method name="sqlite3_interrupt(sqlite3*):void"/>
    <method name="sqlite3_last_insert_rowid(sqlite3*):sqlite3_int64"/>
    <method name="sqlite3_libversion():const char*"/>
    <method name="sqlite3_libversion_number():int"/>
    <method name="sqlite3_limit(sqlite3*;int;int):int"/>
    <method name="sqlite3_load_extension(sqlite3*;const char*;const char*;char**):int"/>
    <method name="sqlite3_log(int;const char*, ...):void"/>
    <method name="sqlite3_malloc(int):void*"/>
    <method name="sqlite3_memory_alarm((*)(void*;sqlite3_int64;int):void;void*;sqlite3_int64):int"/>
    <method name="sqlite3_memory_highwater(int):sqlite3_int64"/>
    <method name="sqlite3_memory_used():sqlite3_int64"/>
    <method name="sqlite3_mprintf(const char*, ...):char*"/>
    <method name="sqlite3_mutex_alloc(int):sqlite3_mutex*"/>
    <method name="sqlite3_mutex_enter(sqlite3_mutex*):void"/>
    <method name="sqlite3_mutex_free(sqlite3_mutex*):void"/>
    <method name="sqlite3_mutex_held(sqlite3_mutex*):int"/>
    <method name="sqlite3_mutex_leave(sqlite3_mutex*):void"/>
    <method name="sqlite3_mutex_notheld(sqlite3_mutex*):int"/>
    <method name="sqlite3_mutex_try(sqlite3_mutex*):int"/>
    <method name="sqlite3_next_stmt(sqlite3*;sqlite3_stmt*):sqlite3_stmt*"/>
    <method name="sqlite3_open(const char*;sqlite3**):int"/>
    <method name="sqlite3_open16(const void*;sqlite3**):int"/>
    <method name="sqlite3_open_v2(const char*;sqlite3**;int;const char*):int"/>
    <method name="sqlite3_os_end():int"/>
    <method name="sqlite3_os_init():int"/>
    <method name="sqlite3_overload_function(sqlite3*;const char*;int):int"/>
    <method name="sqlite3_prepare(sqlite3*;const char*;int;sqlite3_stmt**;const char**):int"/>
    <method name="sqlite3_prepare16(sqlite3*;const void*;int;sqlite3_stmt**;const void**):int"/>
    <method name="sqlite3_prepare16_v2(sqlite3*;const void*;int;sqlite3_stmt**;const void**):int"/>
    <method name="sqlite3_prepare_v2(sqlite3*;const char*;int;sqlite3_stmt**;const char**):int"/>
    <method name="sqlite3_profile(sqlite3*;(*)(void*;const char*;sqlite3_uint64):void;void*):void*"/>
    <method name="sqlite3_progress_handler(sqlite3*;int;(*)(void*):int;void*):void"/>
    <method name="sqlite3_randomness(int;void*):void"/>
    <method name="sqlite3_realloc(void*;int):void*"/>
    <method name="sqlite3_release_memory(int):int"/>
    <method name="sqlite3_reset(sqlite3_stmt*):int"/>
    <method name="sqlite3_reset_auto_extension():void"/>
    <method name="sqlite3_result_blob(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_double(sqlite3_context*;double):void"/>
    <method name="sqlite3_result_error(sqlite3_context*;const char*;int):void"/>
    <method name="sqlite3_result_error16(sqlite3_context*;const void*;int):void"/>
    <method name="sqlite3_result_error_code(sqlite3_context*;int):void"/>
    <method name="sqlite3_result_error_nomem(sqlite3_context*):void"/>
    <method name="sqlite3_result_error_toobig(sqlite3_context*):void"/>
    <method name="sqlite3_result_int(sqlite3_context*;int):void"/>
    <method name="sqlite3_result_int64(sqlite3_context*;sqlite3_int64):void"/>
    <method name="sqlite3_result_null(sqlite3_context*):void"/>
    <method name="sqlite3_result_text(sqlite3_context*;const char*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_text16(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_text16be(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_text16le(sqlite3_context*;const void*;int;(*)(void*):void):void"/>
    <method name="sqlite3_result_value(sqlite3_context*;sqlite3_value*):void"/>
    <method name="sqlite3_result_zeroblob(sqlite3_context*;int):void"/>
    <method name="sqlite3_rollback_hook(sqlite3*;(*)(void*):void;void*):void*"/>
    <method name="sqlite3_rtree_geometry_callback(sqlite3*;const char*;(*)(sqlite3_rtree_geometry*;int;double*;int*):int;void*):int"/>
    <method name="sqlite3_set_authorizer(sqlite3*;(*)(void*;int;const char*;const char*;const char*;const char*):int;void*):int"/>
    <method name="sqlite3_set_auxdata(sqlite3_context*;int;void*;(*)(void*):void):void"/>
    <method name="sqlite3_shutdown():int"/>
    <method name="sqlite3_sleep(int):int"/>
    <method name="sqlite3_snprintf(int;char*;const char*, ...):char*"/>
    <method name="sqlite3_soft_heap_limit(int):void"/>
    <method name="sqlite3_soft_heap_limit64(sqlite3_int64):sqlite3_int64"/>
    <method name="sqlite3_sourceid():const char*"/>
    <method name="sqlite3_sql(sqlite3_stmt*):const char*"/>
    <method name="sqlite3_status(int;int*;int*;int):int"/>
    <method name="sqlite3_step(sqlite3_stmt*):int"/>
    <method name="sqlite3_stmt_busy(sqlite3_stmt*):int"/>
    <method name="sqlite3_stmt_readonly(sqlite3_stmt*):int"/>
    <method name="sqlite3_stmt_status(sqlite3_stmt*;int;int):int"/>
    <method name="sqlite3_stricmp(const char*;const char*):int"/>
    <method name="sqlite3_strnicmp(const char*;const char*;int):int"/>
    <method name="sqlite3_table_column_metadata(sqlite3*;const char*;const char*;const char*;const char**;const char**;int*;int*;int*):int"/>
    <method name="sqlite3_test_control(int, ...):int"/>
    <method name="sqlite3_thread_cleanup():void"/>
    <method name="sqlite3_threadsafe():int"/>
    <method name="sqlite3_total_changes(sqlite3*):int"/>
    <method name="sqlite3_trace(sqlite3*;(*)(void*;const char*):void;void*):void*"/>
    <method name="sqlite3_transfer_bindings(sqlite3_stmt*;sqlite3_stmt*):int"/>
    <method name="sqlite3_unlock_notify(sqlite3*;(*)(void**;int):void;void*):int"/>
    <method name="sqlite3_update_hook(sqlite3*;(*)(void*;int;const char*;const char*;sqlite3_int64):void;void*):void*"/>
    <method name="sqlite3_uri_boolean(const char*;const char*;int):int"/>
    <method name="sqlite3_uri_int64(const char*;const char*;sqlite3_int64):sqlite3_int64"/>
    <method name="sqlite3_uri_parameter(const char*;const char*):const char*"/>
    <method name="sqlite3_user_data(sqlite3_context*):void*"/>
    <method name="sqlite3_value_blob(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_bytes(sqlite3_value*):int"/>
    <method name="sqlite3_value_bytes16(sqlite3_value*):int"/>
    <method name="sqlite3_value_double(sqlite3_value*):double"/>
    <method name="sqlite3_value_int(sqlite3_value*):int"/>
    <method name="sqlite3_value_int64(sqlite3_value*):sqlite3_int64"/>
    <method name="sqlite3_value_numeric_type(sqlite3_value*):int"/>
    <method name="sqlite3_value_text(sqlite3_value*):const unsigned char*"/>
    <method name="sqlite3_value_text16(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_text16be(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_text16le(sqlite3_value*):const void*"/>
    <method name="sqlite3_value_type(sqlite3_value*):int"/>
    <method name="sqlite3_vfs_find(const char*):sqlite3_vfs*"/>
    <method name="sqlite3_vfs_register(sqlite3_vfs*;int):int"/>
    <method name="sqlite3_vfs_unregister(sqlite3_vfs*):int"/>
    <method name="sqlite3_vmprintf(const char*;va_list):char*"/>
    <method name="sqlite3_vsnprintf(int;char*;const char*;va_list):char*"/>
    <method name="sqlite3_vtab_config(sqlite3*;int, ...):int"/>
    <method name="sqlite3_vtab_on_conflict(sqlite3*):int"/>
    <method name="sqlite3_wal_autocheckpoint(sqlite3*;int):int"/>
    <method name="sqlite3_wal_checkpoint(sqlite3*;const char*):int"/>
    <method name="sqlite3_wal_checkpoint_v2(sqlite3*;const char*;int;int*;int*):int"/>
    <method name="sqlite3_wal_hook(sqlite3*;(*)(void*;sqlite3*;const char*;int):int;void*):void*"/>
    <method name="sqrt(double):double"/>
    <method name="sqrt(float):float"/>
    <method name="sqrt(long double):long double"/>
    <method name="sqrtf(float):float"/>
    <method name="sqrtl(long double):long double"/>
    <method name="sradixsort(const unsigned char**;int;const unsigned char*;unsigned int):int"/>
    <method name="srand(unsigned int):void"/>
    <method name="srand48(long):void"/>
    <method name="sranddev():void"/>
    <method name="srandom(unsigned int):void"/>
    <method name="srandomdev():void"/>
    <method name="srscl_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sscanf(const char*;const char*, ...):int"/>
    <method name="ssfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*):int"/>
    <method name="sspcon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sspevd_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspevx_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sspgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sspgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssptrd_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssptrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssptri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstebz_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstedc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstegr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstein_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstemr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssteqr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssterf_(__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sstev_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="sstevd_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstevr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="sstevx_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssycon_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyequb_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssyev_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyevd_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyevr_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyevx_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssygvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytd2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssytf2_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytrd_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytrf_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ssytri_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="ssytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stat(const char*;stat*):int"/>
    <method name="stat(const char*;struct stat*):int"/>
    <method name="statfs(const char*;struct statfs*):int"/>
    <method name="statvfs(const char*;struct statvfs*):int"/>
    <method name="statx_np(const char*;struct stat*;filesec_t):int"/>
    <method name="stbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stftri_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stfttp_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stfttr_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stpcpy(char*;const char*):char*"/>
    <method name="stpncpy(char*;const char*;size_t):char*"/>
    <method name="stprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stptri_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="stpttf_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stpttr_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strForChar(int):const char*"/>
    <method name="strcadd(char*;const char*):char*"/>
    <method name="strcasecmp(const char*;const char*):int"/>
    <method name="strcasecmp_l(const char*;const char*;int):int"/>
    <method name="strcasestr(const char*;const char*):char*"/>
    <method name="strcasestr_l(const char*;const char*;int):char*"/>
    <method name="strcat(char*;const char*):char*"/>
    <method name="strccpy(char*;const char*):char*"/>
    <method name="strchr(char*;int):char*"/>
    <method name="strchr(const char*;int):char*"/>
    <method name="strcmp(const char*;const char*):int"/>
    <method name="strcmpcasenosensitive_internal(const char*;const char*):int"/>
    <method name="strcoll(const char*;const char*):int"/>
    <method name="strcon_(char*;char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strcpy(char*;const char*):char*"/>
    <method name="strcspn(const char*;const char*):size_t"/>
    <method name="strdup(const char*):char*"/>
    <method name="streadd(char*;const char*;const char*):char*"/>
    <method name="strecpy(char*;const char*;const char*):char*"/>
    <method name="strerror(int):char*"/>
    <method name="strerror_r(int;char*;size_t):int"/>
    <method name="strevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strexc_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strfmon(char*;size_t;const char*, ...):ssize_t"/>
    <method name="strftime(char*;size_t;const char*;const struct tm*):size_t"/>
    <method name="stringToEscapedString(int;int):int"/>
    <method name="string_to_hex(char*;long*):unsigned char*"/>
    <method name="strlcat(char*;const char*;size_t):size_t"/>
    <method name="strlcpy(char*;const char*;size_t):size_t"/>
    <method name="strlen(const char*):size_t"/>
    <method name="strmode(int;char*):void"/>
    <method name="strncasecmp(const char*;const char*;size_t):int"/>
    <method name="strncasecmp_l(const char*;const char*;int;int):int"/>
    <method name="strncat(char*;const char*;size_t):char*"/>
    <method name="strncmp(const char*;const char*;size_t):int"/>
    <method name="strncpy(char*;const char*;size_t):char*"/>
    <method name="strndup(const char*;size_t):char*"/>
    <method name="strnlen(const char*;size_t):size_t"/>
    <method name="strnstr(const char*;const char*;size_t):char*"/>
    <method name="strpbrk(char*;const char*):char*"/>
    <method name="strpbrk(const char*;const char*):char*"/>
    <method name="strptime(const char*;const char*;struct tm*):char*"/>
    <method name="strrchr(char*;int):char*"/>
    <method name="strrchr(const char*;int):char*"/>
    <method name="strrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strsep(char**;const char*):char*"/>
    <method name="strsignal(int):char*"/>
    <method name="strsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strspn(const char*;const char*):size_t"/>
    <method name="strstr(char*;const char*):char*"/>
    <method name="strstr(const char*;const char*):char*"/>
    <method name="strsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strti2_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strtod(const char*;char**):double"/>
    <method name="strtof(const char*;char**):float"/>
    <method name="strtofflags(char**;unsigned long*;unsigned long*):int"/>
    <method name="strtoimax(const char*;char**;int):intmax_t"/>
    <method name="strtok(char*;const char*):char*"/>
    <method name="strtok_r(char*;const char*;char**):char*"/>
    <method name="strtol(const char*;char**;int):long"/>
    <method name="strtol_l(const char*;char**;int;int):long"/>
    <method name="strtold(const char*;char**):long double"/>
    <method name="strtold_l(const char*;char**;int):long double"/>
    <method name="strtoll(const char*;char**;int):long long"/>
    <method name="strtoll_l(const char*;char**;int;int):long long"/>
    <method name="strtoq(const char*;char**;int):long long"/>
    <method name="strtoq_l(const char*;char**;int;int):long long"/>
    <method name="strtoul(const char*;char**;int):unsigned long"/>
    <method name="strtoul_l(const char*;char**;int;int):unsigned long"/>
    <method name="strtoull(const char*;char**;int):unsigned long long"/>
    <method name="strtoull_l(const char*;char**;int;int):unsigned long long"/>
    <method name="strtoumax(const char*;char**;int):uintmax_t"/>
    <method name="strtoumax_l(const char*;char**;int;int):int"/>
    <method name="strtouq(const char*;char**;int):unsigned long long"/>
    <method name="strtouq_l(const char*;char**;int;int):unsigned long long"/>
    <method name="strtri_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strtrns(const char*;const char*;const char*;char*):char*"/>
    <method name="strtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="strttf_(char*;char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strttp_(char*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="strunvis(char*;const char*):int"/>
    <method name="strunvisx(char*;const char*;int):int"/>
    <method name="strvis(char*;const char*;int):int"/>
    <method name="strvisx(char*;const char*;size_t;int):int"/>
    <method name="strxfrm(char*;const char*;size_t):size_t"/>
    <method name="strxfrm_l(char*;const char*;int;int):int"/>
    <method name="stzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*):int"/>
    <method name="stzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_real*;__CLPK_integer*;__CLPK_real*;__CLPK_real*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="svc_getreq(int):void"/>
    <method name="svc_getreqset(int*):void"/>
    <method name="svc_register(SVCXPRT*;unsigned long;unsigned long;void ()*;int):int"/>
    <method name="svc_run():void"/>
    <method name="svc_sendreply(SVCXPRT*;int;char*):int"/>
    <method name="svc_unregister(unsigned long;unsigned long):void"/>
    <method name="svcerr_auth(SVCXPRT*;enum auth_stat):void"/>
    <method name="svcerr_decode(SVCXPRT*):void"/>
    <method name="svcerr_noproc(SVCXPRT*):void"/>
    <method name="svcerr_noprog(SVCXPRT*):void"/>
    <method name="svcerr_progvers(SVCXPRT*;unsigned long;unsigned long):void"/>
    <method name="svcerr_systemerr(SVCXPRT*):void"/>
    <method name="svcerr_weakauth(SVCXPRT*):void"/>
    <method name="svcfd_create(int;int;int):SVCXPRT*"/>
    <method name="svcraw_create():SVCXPRT*"/>
    <method name="svctcp_create(int;unsigned int;unsigned int):SVCXPRT*"/>
    <method name="svcudp_bufcreate(int;unsigned int;unsigned int):SVCXPRT*"/>
    <method name="svcudp_create(int):SVCXPRT*"/>
    <method name="swab(const void*;void*;ssize_t):void"/>
    <method name="swap_dylib_command(struct dylib_command*;enum NXByteOrder):void"/>
    <method name="swap_dylib_module(struct dylib_module*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_dylib_module_64(struct dylib_module_64*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_dylib_reference(struct dylib_reference*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_dylib_table_of_contents(struct dylib_table_of_contents*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_dylinker_command(struct dylinker_command*;enum NXByteOrder):void"/>
    <method name="swap_dysymtab_command(struct dysymtab_command*;enum NXByteOrder):void"/>
    <method name="swap_fat_arch(struct fat_arch*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_fat_header(struct fat_header*;enum NXByteOrder):void"/>
    <method name="swap_fvmfile_command(struct fvmfile_command*;enum NXByteOrder):void"/>
    <method name="swap_fvmlib_command(struct fvmlib_command*;enum NXByteOrder):void"/>
    <method name="swap_ident_command(struct ident_command*;enum NXByteOrder):void"/>
    <method name="swap_indirect_symbols(uint32_t*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_load_command(struct load_command*;enum NXByteOrder):void"/>
    <method name="swap_mach_header(struct mach_header*;enum NXByteOrder):void"/>
    <method name="swap_mach_header_64(struct mach_header_64*;enum NXByteOrder):void"/>
    <method name="swap_nlist(struct nlist*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_nlist_64(struct nlist_64*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_prebind_cksum_command(struct prebind_cksum_command*;enum NXByteOrder):void"/>
    <method name="swap_prebound_dylib_command(struct prebound_dylib_command*;enum NXByteOrder):void"/>
    <method name="swap_ranlib(struct ranlib*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_relocation_info(struct relocation_info*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_routines_command(struct routines_command*;enum NXByteOrder):void"/>
    <method name="swap_routines_command_64(struct routines_command_64*;enum NXByteOrder):void"/>
    <method name="swap_section(struct section*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_section_64(struct section_64*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_segment_command(struct segment_command*;enum NXByteOrder):void"/>
    <method name="swap_segment_command_64(struct segment_command_64*;enum NXByteOrder):void"/>
    <method name="swap_sub_client_command(struct sub_client_command*;enum NXByteOrder):void"/>
    <method name="swap_sub_framework_command(struct sub_framework_command*;enum NXByteOrder):void"/>
    <method name="swap_sub_library_command(struct sub_library_command*;enum NXByteOrder):void"/>
    <method name="swap_sub_umbrella_command(struct sub_umbrella_command*;enum NXByteOrder):void"/>
    <method name="swap_symseg_command(struct symseg_command*;enum NXByteOrder):void"/>
    <method name="swap_symtab_command(struct symtab_command*;enum NXByteOrder):void"/>
    <method name="swap_thread_command(struct thread_command*;enum NXByteOrder):void"/>
    <method name="swap_twolevel_hint(struct twolevel_hint*;uint32_t;enum NXByteOrder):void"/>
    <method name="swap_twolevel_hints_command(struct twolevel_hints_command*;enum NXByteOrder):void"/>
    <method name="swap_uuid_command(struct uuid_command*;enum NXByteOrder):void"/>
    <method name="swapon(const char*):int"/>
    <method name="swprintf(wchar_t*;const wchar_t*, ...):int"/>
    <method name="swprintf(wchar_t*;size_t;const wchar_t*, ...):int"/>
    <method name="swprintf_l(int*;int;int;const int*, ...):int"/>
    <method name="swscanf(const wchar_t*;const wchar_t*, ...):int"/>
    <method name="swscanf_l(const int*;int;const int*, ...):int"/>
    <method name="swtch():boolean_t"/>
    <method name="swtch_pri(int):boolean_t"/>
    <method name="symlink(const char*;const char*):int"/>
    <method name="sync():void"/>
    <method name="sync_volume_np(const char*;int):int"/>
    <method name="sys_cache_control(int;void*;size_t):int"/>
    <method name="sys_dcache_flush(void*;size_t):void"/>
    <method name="sys_icache_invalidate(void*;size_t):void"/>
    <method name="syscall(int, ...):int"/>
    <method name="sysconf(int):long"/>
    <method name="sysctl(int*;u_int;void*;size_t*;void*;size_t):int"/>
    <method name="sysctlbyname(const char*;void*;size_t*;void*;size_t):int"/>
    <method name="sysctlnametomib(const char*;int*;size_t*):int"/>
    <method name="syslog(int;const char*, ...):void"/>
    <method name="syslog(int;const signed char*, ...):void"/>
    <method name="system(const char*):int"/>
    <method name="tan(double):double"/>
    <method name="tan(float):float"/>
    <method name="tan(long double):long double"/>
    <method name="tanf(float):float"/>
    <method name="tanh(double):double"/>
    <method name="tanh(float):float"/>
    <method name="tanh(long double):long double"/>
    <method name="tanhf(float):float"/>
    <method name="tanhl(long double):long double"/>
    <method name="tanl(long double):long double"/>
    <method name="task_assign(task_t;processor_set_t;boolean_t):kern_return_t"/>
    <method name="task_assign_default(task_t;boolean_t):kern_return_t"/>
    <method name="task_create(task_t;ledger_array_t;mach_msg_type_number_t;boolean_t;task_t*):kern_return_t"/>
    <method name="task_for_pid(mach_port_name_t;int;mach_port_name_t*):kern_return_t"/>
    <method name="task_get_assignment(task_t;processor_set_name_t*):kern_return_t"/>
    <method name="task_get_emulation_vector(task_t;int*;emulation_vector_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_get_exception_ports(task_t;exception_mask_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="task_get_special_port(task_t;int;mach_port_t*):kern_return_t"/>
    <method name="task_get_state(task_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_info(task_name_t;task_flavor_t;task_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_name_for_pid(mach_port_name_t;int;mach_port_name_t*):kern_return_t"/>
    <method name="task_policy(task_t;policy_t;policy_base_t;mach_msg_type_number_t;boolean_t;boolean_t):kern_return_t"/>
    <method name="task_policy_get(task_t;task_policy_flavor_t;task_policy_t;mach_msg_type_number_t*;boolean_t*):kern_return_t"/>
    <method name="task_policy_set(task_t;task_policy_flavor_t;task_policy_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_resume(task_t):kern_return_t"/>
    <method name="task_sample(task_t;mach_port_t):kern_return_t"/>
    <method name="task_self_trap():mach_port_name_t"/>
    <method name="task_set_emulation(task_t;vm_address_t;int):kern_return_t"/>
    <method name="task_set_emulation_vector(task_t;int;emulation_vector_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_set_exception_ports(task_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):kern_return_t"/>
    <method name="task_set_info(task_t;task_flavor_t;task_info_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_set_policy(task_t;processor_set_t;policy_t;policy_base_t;mach_msg_type_number_t;policy_limit_t;mach_msg_type_number_t;boolean_t):kern_return_t"/>
    <method name="task_set_port_space(ipc_space_t;int):kern_return_t"/>
    <method name="task_set_ras_pc(task_t;vm_address_t;vm_address_t):kern_return_t"/>
    <method name="task_set_special_port(task_t;int;mach_port_t):kern_return_t"/>
    <method name="task_set_state(task_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="task_suspend(task_t):kern_return_t"/>
    <method name="task_swap_exception_ports(task_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="task_terminate(task_t):kern_return_t"/>
    <method name="task_threads(task_t;thread_act_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="task_wire(vm_map_t;boolean_t):kern_return_t"/>
    <method name="task_zone_info(task_t;mach_zone_name_array_t*;mach_msg_type_number_t*;task_zone_info_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="tcdrain(int):int"/>
    <method name="tcflow(int;int):int"/>
    <method name="tcflush(int;int):int"/>
    <method name="tcgetattr(int;struct termios*):int"/>
    <method name="tcgetpgrp(int):pid_t"/>
    <method name="tcgetsid(int):pid_t"/>
    <method name="tcsendbreak(int;int):int"/>
    <method name="tcsetattr(int;int;const struct termios*):int"/>
    <method name="tcsetpgrp(int;pid_t):int"/>
    <method name="tdelete(const void*;void**;(*)(const void*;const void*):int):void*"/>
    <method name="telldir(DIR*):long"/>
    <method name="tempnam(const char*;const char*):char*"/>
    <method name="tfind(const void*;const void**;(*)(const void*;const void*):int):void*"/>
    <method name="tgamma(double):double"/>
    <method name="tgammaf(float):float"/>
    <method name="tgammal(long double):long double"/>
    <method name="thread_abort(thread_act_t):kern_return_t"/>
    <method name="thread_abort_safely(thread_act_t):kern_return_t"/>
    <method name="thread_assign(thread_act_t;processor_set_t):kern_return_t"/>
    <method name="thread_assign_default(thread_act_t):kern_return_t"/>
    <method name="thread_create(task_t;thread_act_t*):kern_return_t"/>
    <method name="thread_create_running(task_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t;thread_act_t*):kern_return_t"/>
    <method name="thread_depress_abort(thread_act_t):kern_return_t"/>
    <method name="thread_get_assignment(thread_act_t;processor_set_name_t*):kern_return_t"/>
    <method name="thread_get_exception_ports(thread_act_t;exception_mask_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="thread_get_special_port(thread_act_t;int;mach_port_t*):kern_return_t"/>
    <method name="thread_get_state(thread_act_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="thread_info(thread_act_t;thread_flavor_t;thread_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="thread_policy(thread_act_t;policy_t;policy_base_t;mach_msg_type_number_t;boolean_t):kern_return_t"/>
    <method name="thread_policy_get(thread_act_t;thread_policy_flavor_t;thread_policy_t;mach_msg_type_number_t*;boolean_t*):kern_return_t"/>
    <method name="thread_policy_set(thread_act_t;thread_policy_flavor_t;thread_policy_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="thread_resume(thread_act_t):kern_return_t"/>
    <method name="thread_sample(thread_act_t;mach_port_t):kern_return_t"/>
    <method name="thread_set_exception_ports(thread_act_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t):kern_return_t"/>
    <method name="thread_set_policy(thread_act_t;processor_set_t;policy_t;policy_base_t;mach_msg_type_number_t;policy_limit_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="thread_set_special_port(thread_act_t;int;mach_port_t):kern_return_t"/>
    <method name="thread_set_state(thread_act_t;thread_state_flavor_t;thread_state_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="thread_suspend(thread_act_t):kern_return_t"/>
    <method name="thread_swap_exception_ports(thread_act_t;exception_mask_t;mach_port_t;exception_behavior_t;thread_state_flavor_t;exception_mask_array_t;mach_msg_type_number_t*;exception_handler_array_t;exception_behavior_array_t;exception_flavor_array_t):kern_return_t"/>
    <method name="thread_switch(mach_port_name_t;int;mach_msg_timeout_t):kern_return_t"/>
    <method name="thread_terminate(thread_act_t):kern_return_t"/>
    <method name="thread_wire(host_priv_t;thread_act_t;boolean_t):kern_return_t"/>
    <method name="time(time_t*):time_t"/>
    <method name="time2posix(time_t):time_t"/>
    <method name="timegm(const struct tm*):time_t"/>
    <method name="timelocal(const struct tm*):time_t"/>
    <method name="times(struct tms*):clock_t"/>
    <method name="timestampString():int"/>
    <method name="tmpfile():FILE*"/>
    <method name="tmpnam(char*):char*"/>
    <method name="toascii(int):int"/>
    <method name="tolower(int):int"/>
    <method name="toupper(int):int"/>
    <method name="towctrans(wint_t;wctrans_t):wint_t"/>
    <method name="towlower(wint_t):wint_t"/>
    <method name="towupper(wint_t):wint_t"/>
    <method name="trunc(double):double"/>
    <method name="truncate(const char*;off_t):int"/>
    <method name="truncf(float):float"/>
    <method name="truncl(long double):long double"/>
    <method name="tsearch(const void*;void**;(*)(const void*;const void*):int):void*"/>
    <method name="ttyaction(char*;char*;char*):int"/>
    <method name="ttylock(const char*;int;pid_t*):int"/>
    <method name="ttymsg(struct iovec*;int;const char*;int):char*"/>
    <method name="ttyname(int):char*"/>
    <method name="ttyname_r(int;char*;size_t):int"/>
    <method name="ttyslot():int"/>
    <method name="ttyunlock(const char*):int"/>
    <method name="twalk(const void*;(*)(const void*;VISIT;int):void):void"/>
    <method name="tzset():void"/>
    <method name="tzsetwall():void"/>
    <method name="u_UCharsToChars(const UChar*;char*;int32_t):void"/>
    <method name="u_austrcpy(char*;const UChar*):char*"/>
    <method name="u_austrncpy(char*;const UChar*;int32_t):char*"/>
    <method name="u_charAge(UChar32;uint8_t*):void"/>
    <method name="u_charDigitValue(UChar32):int32_t"/>
    <method name="u_charDirection(UChar32):UCharDirection"/>
    <method name="u_charFromName(UCharNameChoice;const char*;UErrorCode*):UChar32"/>
    <method name="u_charMirror(UChar32):UChar32"/>
    <method name="u_charName(UChar32;UCharNameChoice;char*;int32_t;UErrorCode*):int32_t"/>
    <method name="u_charType(UChar32):int8_t"/>
    <method name="u_charsToUChars(const char*;UChar*;int32_t):void"/>
    <method name="u_countChar32(const UChar*;int32_t):int32_t"/>
    <method name="u_digit(UChar32;int8_t):int32_t"/>
    <method name="u_enumCharNames(UChar32;UChar32;(*)(void*;UChar32;UCharNameChoice;const char*;int32_t):UBool;void*;UCharNameChoice;UErrorCode*):void"/>
    <method name="u_enumCharTypes((*)(const void*;UChar32;UChar32;UCharCategory):UBool;const void*):void"/>
    <method name="u_errorName(UErrorCode):const char*"/>
    <method name="u_foldCase(UChar32;uint32_t):UChar32"/>
    <method name="u_forDigit(int32_t;int8_t):UChar32"/>
    <method name="u_getCombiningClass(UChar32):uint8_t"/>
    <method name="u_getDataDirectory():const char*"/>
    <method name="u_getFC_NFKC_Closure(UChar32;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="u_getISOComment(UChar32;char*;int32_t;UErrorCode*):int32_t"/>
    <method name="u_getIntPropertyMaxValue(UProperty):int32_t"/>
    <method name="u_getIntPropertyMinValue(UProperty):int32_t"/>
    <method name="u_getIntPropertyValue(UChar32;UProperty):int32_t"/>
    <method name="u_getNumericValue(UChar32):double"/>
    <method name="u_getPropertyEnum(const char*):UProperty"/>
    <method name="u_getPropertyName(UProperty;UPropertyNameChoice):const char*"/>
    <method name="u_getPropertyValueEnum(UProperty;const char*):int32_t"/>
    <method name="u_getPropertyValueName(UProperty;int32_t;UPropertyNameChoice):const char*"/>
    <method name="u_getUnicodeVersion(uint8_t*):void"/>
    <method name="u_getVersion(uint8_t*):void"/>
    <method name="u_hasBinaryProperty(UChar32;UProperty):UBool"/>
    <method name="u_isIDIgnorable(UChar32):UBool"/>
    <method name="u_isIDPart(UChar32):UBool"/>
    <method name="u_isIDStart(UChar32):UBool"/>
    <method name="u_isISOControl(UChar32):UBool"/>
    <method name="u_isJavaIDPart(UChar32):UBool"/>
    <method name="u_isJavaIDStart(UChar32):UBool"/>
    <method name="u_isJavaSpaceChar(UChar32):UBool"/>
    <method name="u_isMirrored(UChar32):UBool"/>
    <method name="u_isUAlphabetic(UChar32):UBool"/>
    <method name="u_isULowercase(UChar32):UBool"/>
    <method name="u_isUUppercase(UChar32):UBool"/>
    <method name="u_isUWhiteSpace(UChar32):UBool"/>
    <method name="u_isWhitespace(UChar32):UBool"/>
    <method name="u_isalnum(UChar32):UBool"/>
    <method name="u_isalpha(UChar32):UBool"/>
    <method name="u_isbase(UChar32):UBool"/>
    <method name="u_isblank(UChar32):UBool"/>
    <method name="u_iscntrl(UChar32):UBool"/>
    <method name="u_isdefined(UChar32):UBool"/>
    <method name="u_isdigit(UChar32):UBool"/>
    <method name="u_isgraph(UChar32):UBool"/>
    <method name="u_islower(UChar32):UBool"/>
    <method name="u_isprint(UChar32):UBool"/>
    <method name="u_ispunct(UChar32):UBool"/>
    <method name="u_isspace(UChar32):UBool"/>
    <method name="u_istitle(UChar32):UBool"/>
    <method name="u_isupper(UChar32):UBool"/>
    <method name="u_isxdigit(UChar32):UBool"/>
    <method name="u_memcasecmp(const UChar*;const UChar*;int32_t;uint32_t):int32_t"/>
    <method name="u_memchr(const UChar*;UChar;int32_t):UChar*"/>
    <method name="u_memchr32(const UChar*;UChar32;int32_t):UChar*"/>
    <method name="u_memcmp(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_memcmpCodePointOrder(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_memcpy(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_memmove(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_memrchr(const UChar*;UChar;int32_t):UChar*"/>
    <method name="u_memrchr32(const UChar*;UChar32;int32_t):UChar*"/>
    <method name="u_memset(UChar*;UChar;int32_t):UChar*"/>
    <method name="u_setDataDirectory(const char*):void"/>
    <method name="u_strCaseCompare(const UChar*;int32_t;const UChar*;int32_t;uint32_t;UErrorCode*):int32_t"/>
    <method name="u_strCompare(const UChar*;int32_t;const UChar*;int32_t;UBool):int32_t"/>
    <method name="u_strCompareIter(UCharIterator*;UCharIterator*;UBool):int32_t"/>
    <method name="u_strFindFirst(const UChar*;int32_t;const UChar*;int32_t):UChar*"/>
    <method name="u_strFindLast(const UChar*;int32_t;const UChar*;int32_t):UChar*"/>
    <method name="u_strFoldCase(UChar*;int32_t;const UChar*;int32_t;uint32_t;UErrorCode*):int32_t"/>
    <method name="u_strFromJavaModifiedUTF8WithSub(UChar*;int32_t;int32_t*;const char*;int32_t;UChar32;int32_t*;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF32(UChar*;int32_t;int32_t*;const UChar32*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF32WithSub(UChar*;int32_t;int32_t*;const UChar32*;int32_t;UChar32;int32_t*;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF8(UChar*;int32_t;int32_t*;const char*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF8Lenient(UChar*;int32_t;int32_t*;const char*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strFromUTF8WithSub(UChar*;int32_t;int32_t*;const char*;int32_t;UChar32;int32_t*;UErrorCode*):UChar*"/>
    <method name="u_strFromWCS(UChar*;int32_t;int32_t*;const wchar_t*;int32_t;UErrorCode*):UChar*"/>
    <method name="u_strHasMoreChar32Than(const UChar*;int32_t;int32_t):UBool"/>
    <method name="u_strToJavaModifiedUTF8(char*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):char*"/>
    <method name="u_strToLower(UChar*;int32_t;const UChar*;int32_t;const char*;UErrorCode*):int32_t"/>
    <method name="u_strToTitle(UChar*;int32_t;const UChar*;int32_t;UBreakIterator*;const char*;UErrorCode*):int32_t"/>
    <method name="u_strToUTF32(UChar32*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):UChar32*"/>
    <method name="u_strToUTF32WithSub(UChar32*;int32_t;int32_t*;const UChar*;int32_t;UChar32;int32_t*;UErrorCode*):UChar32*"/>
    <method name="u_strToUTF8(char*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):char*"/>
    <method name="u_strToUTF8WithSub(char*;int32_t;int32_t*;const UChar*;int32_t;UChar32;int32_t*;UErrorCode*):char*"/>
    <method name="u_strToUpper(UChar*;int32_t;const UChar*;int32_t;const char*;UErrorCode*):int32_t"/>
    <method name="u_strToWCS(wchar_t*;int32_t;int32_t*;const UChar*;int32_t;UErrorCode*):wchar_t*"/>
    <method name="u_strcasecmp(const UChar*;const UChar*;uint32_t):int32_t"/>
    <method name="u_strcat(UChar*;const UChar*):UChar*"/>
    <method name="u_strchr(const UChar*;UChar):UChar*"/>
    <method name="u_strchr32(const UChar*;UChar32):UChar*"/>
    <method name="u_strcmp(const UChar*;const UChar*):int32_t"/>
    <method name="u_strcmpCodePointOrder(const UChar*;const UChar*):int32_t"/>
    <method name="u_strcpy(UChar*;const UChar*):UChar*"/>
    <method name="u_strcspn(const UChar*;const UChar*):int32_t"/>
    <method name="u_strlen(const UChar*):int32_t"/>
    <method name="u_strncasecmp(const UChar*;const UChar*;int32_t;uint32_t):int32_t"/>
    <method name="u_strncat(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_strncmp(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_strncmpCodePointOrder(const UChar*;const UChar*;int32_t):int32_t"/>
    <method name="u_strncpy(UChar*;const UChar*;int32_t):UChar*"/>
    <method name="u_strpbrk(const UChar*;const UChar*):UChar*"/>
    <method name="u_strrchr(const UChar*;UChar):UChar*"/>
    <method name="u_strrchr32(const UChar*;UChar32):UChar*"/>
    <method name="u_strrstr(const UChar*;const UChar*):UChar*"/>
    <method name="u_strspn(const UChar*;const UChar*):int32_t"/>
    <method name="u_strstr(const UChar*;const UChar*):UChar*"/>
    <method name="u_strtok_r(UChar*;const UChar*;UChar**):UChar*"/>
    <method name="u_tolower(UChar32):UChar32"/>
    <method name="u_totitle(UChar32):UChar32"/>
    <method name="u_toupper(UChar32):UChar32"/>
    <method name="u_uastrcpy(UChar*;const char*):UChar*"/>
    <method name="u_uastrncpy(UChar*;const char*;int32_t):UChar*"/>
    <method name="u_unescape(const char*;UChar*;int32_t):int32_t"/>
    <method name="u_unescapeAt(UNESCAPE_CHAR_AT;int32_t*;int32_t;void*):UChar32"/>
    <method name="u_versionFromString(uint8_t*;const char*):void"/>
    <method name="u_versionFromUString(uint8_t*;const UChar*):void"/>
    <method name="u_versionToString(const uint8_t*;char*):void"/>
    <method name="ualarm(useconds_t;useconds_t):useconds_t"/>
    <method name="ublock_getCode(UChar32):UBlockCode"/>
    <method name="uiter_current32(UCharIterator*):UChar32"/>
    <method name="uiter_getState(const UCharIterator*):uint32_t"/>
    <method name="uiter_next32(UCharIterator*):UChar32"/>
    <method name="uiter_previous32(UCharIterator*):UChar32"/>
    <method name="uiter_setState(UCharIterator*;uint32_t;UErrorCode*):void"/>
    <method name="uiter_setString(UCharIterator*;const UChar*;int32_t):void"/>
    <method name="uiter_setUTF16BE(UCharIterator*;const char*;int32_t):void"/>
    <method name="uiter_setUTF8(UCharIterator*;const char*;int32_t):void"/>
    <method name="ulimit(int, ...):long"/>
    <method name="ultoa(unsigned long;char*;int):char*"/>
    <method name="umask(mode_t):mode_t"/>
    <method name="umaskx_np(filesec_t):int"/>
    <method name="umount(const char*):int"/>
    <method name="uname(struct utsname*):int"/>
    <method name="uncompress(Bytef*;uLongf*;const Bytef*;uLong):int"/>
    <method name="undelete(const char*):int"/>
    <method name="ungetc(int;FILE *):int"/>
    <method name="ungetc(int;FILE*):int"/>
    <method name="ungetwc(wint_t;FILE*):wint_t"/>
    <method name="unlink(const char*):int"/>
    <method name="unlockpt(int):int"/>
    <method name="unmount(const char*;int):int"/>
    <method name="unsetenv(const char*):int"/>
    <method name="unvis(char*;int;int*;int):int"/>
    <method name="unwhiteout(const char*):int"/>
    <method name="unz64local_CheckCurrentFileCoherencyHeader(unz64_s*;uInt*;ZPOS64_T*;uInt*):int"/>
    <method name="unz64local_DosDateToTmuDate(ZPOS64_T;tm_unz*):void"/>
    <method name="unz64local_GetCurrentFileInfoInternal(unzFile;unz_file_info64*;unz_file_info64_internal*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="unz64local_SearchCentralDir(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="unz64local_SearchCentralDir64(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="unz64local_getByte(const zlib_filefunc64_32_def*;voidpf;int*):int"/>
    <method name="unz64local_getLong(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="unz64local_getLong64(const zlib_filefunc64_32_def*;voidpf;ZPOS64_T*):int"/>
    <method name="unz64local_getShort(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="unzClose(unzFile):int"/>
    <method name="unzCloseCurrentFile(unzFile):int"/>
    <method name="unzGetCurrentFileInfo(unzFile;unz_file_info*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="unzGetCurrentFileInfo64(unzFile;unz_file_info64*;char*;uLong;void*;uLong;char*;uLong):int"/>
    <method name="unzGetCurrentFileZStreamPos64(unzFile):ZPOS64_T"/>
    <method name="unzGetFilePos(unzFile;unz_file_pos*):int"/>
    <method name="unzGetFilePos64(unzFile;unz64_file_pos*):int"/>
    <method name="unzGetGlobalComment(unzFile;char*;uLong):int"/>
    <method name="unzGetGlobalInfo(unzFile;unz_global_info*):int"/>
    <method name="unzGetGlobalInfo64(unzFile;unz_global_info64*):int"/>
    <method name="unzGetLocalExtrafield(unzFile;voidp;unsigned int):int"/>
    <method name="unzGetOffset(unzFile):uLong"/>
    <method name="unzGetOffset64(unzFile):ZPOS64_T"/>
    <method name="unzGoToFilePos(unzFile;unz_file_pos*):int"/>
    <method name="unzGoToFilePos64(unzFile;const unz64_file_pos*):int"/>
    <method name="unzGoToFirstFile(unzFile):int"/>
    <method name="unzGoToNextFile(unzFile):int"/>
    <method name="unzLocateFile(unzFile;const char*;int):int"/>
    <method name="unzOpen(const char*):unzFile"/>
    <method name="unzOpen2(const char*;zlib_filefunc_def*):unzFile"/>
    <method name="unzOpen2_64(const void*;zlib_filefunc64_def*):unzFile"/>
    <method name="unzOpen64(const void*):unzFile"/>
    <method name="unzOpenCurrentFile(unzFile):int"/>
    <method name="unzOpenCurrentFile2(unzFile;int*;int*;int):int"/>
    <method name="unzOpenCurrentFile3(unzFile;int*;int*;int;const char*):int"/>
    <method name="unzOpenCurrentFilePassword(unzFile;const char*):int"/>
    <method name="unzOpenInternal(const void*;zlib_filefunc64_32_def*;int):unzFile"/>
    <method name="unzReadCurrentFile(unzFile;voidp;unsigned int):int"/>
    <method name="unzRepair(const char*;const char*;const char*;uLong*;uLong*):int"/>
    <method name="unzSetOffset(unzFile;uLong):int"/>
    <method name="unzSetOffset64(unzFile;ZPOS64_T):int"/>
    <method name="unzStringFileNameCompare(const char*;const char*;int):int"/>
    <method name="unzeof(unzFile):int"/>
    <method name="unztell(unzFile):long"/>
    <method name="unztell64(unzFile):ZPOS64_T"/>
    <method name="updateExamplesTable():int"/>
    <method name="updatePrefWarningsMargins():int"/>
    <method name="updatePrefsUI():int"/>
    <method name="updateRegexEscapedExampleTable(int):int"/>
    <method name="updateRegexEscapedExampleTableNew(int;int):int"/>
    <method name="updateRegexEscapedExamples():int"/>
    <method name="update_keys(unsigned long*;const unsigned long*;int):int"/>
    <method name="uregex_appendReplacement(URegularExpression*;const UChar*;int32_t;UChar**;int32_t*;UErrorCode*):int32_t"/>
    <method name="uregex_appendReplacementUText(URegularExpression*;UText*;UText*;UErrorCode*):void"/>
    <method name="uregex_appendTail(URegularExpression*;UChar**;int32_t*;UErrorCode*):int32_t"/>
    <method name="uregex_appendTailUText(URegularExpression*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_clone(const URegularExpression*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_close(URegularExpression*):void"/>
    <method name="uregex_end(URegularExpression*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_end64(URegularExpression*;int32_t;UErrorCode*):int64_t"/>
    <method name="uregex_find(URegularExpression*;int32_t;UErrorCode*):UBool"/>
    <method name="uregex_find64(URegularExpression*;int64_t;UErrorCode*):UBool"/>
    <method name="uregex_findNext(URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_flags(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_getFindProgressCallback(const URegularExpression*;(*)(const void*;int64_t):UBool*;const void**;UErrorCode*):void"/>
    <method name="uregex_getMatchCallback(const URegularExpression*;(*)(const void*;int32_t):UBool*;const void**;UErrorCode*):void"/>
    <method name="uregex_getStackLimit(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_getText(URegularExpression*;int32_t*;UErrorCode*):const UChar*"/>
    <method name="uregex_getTimeLimit(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_getUText(URegularExpression*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_group(URegularExpression*;int32_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_groupCount(URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_groupUText(URegularExpression*;int32_t;UText*;int64_t*;UErrorCode*):UText*"/>
    <method name="uregex_groupUTextDeep(URegularExpression*;int32_t;UText*;UErrorCode*):UText*"/>
    <method name="uregex_hasAnchoringBounds(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_hasTransparentBounds(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_hitEnd(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_lookingAt(URegularExpression*;int32_t;UErrorCode*):UBool"/>
    <method name="uregex_lookingAt64(URegularExpression*;int64_t;UErrorCode*):UBool"/>
    <method name="uregex_matches(URegularExpression*;int32_t;UErrorCode*):UBool"/>
    <method name="uregex_matches64(URegularExpression*;int64_t;UErrorCode*):UBool"/>
    <method name="uregex_open(const UChar*;int32_t;uint32_t;UParseError*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_openC(const char*;uint32_t;UParseError*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_openUText(UText*;uint32_t;UParseError*;UErrorCode*):URegularExpression*"/>
    <method name="uregex_pattern(const URegularExpression*;int32_t*;UErrorCode*):const UChar*"/>
    <method name="uregex_patternUText(const URegularExpression*;UErrorCode*):UText*"/>
    <method name="uregex_refreshUText(URegularExpression*;UText*;UErrorCode*):void"/>
    <method name="uregex_regionEnd(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_regionEnd64(const URegularExpression*;UErrorCode*):int64_t"/>
    <method name="uregex_regionStart(const URegularExpression*;UErrorCode*):int32_t"/>
    <method name="uregex_regionStart64(const URegularExpression*;UErrorCode*):int64_t"/>
    <method name="uregex_replaceAll(URegularExpression*;const UChar*;int32_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_replaceAllUText(URegularExpression*;UText*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_replaceFirst(URegularExpression*;const UChar*;int32_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_replaceFirstUText(URegularExpression*;UText*;UText*;UErrorCode*):UText*"/>
    <method name="uregex_requireEnd(const URegularExpression*;UErrorCode*):UBool"/>
    <method name="uregex_reset(URegularExpression*;int32_t;UErrorCode*):void"/>
    <method name="uregex_reset64(URegularExpression*;int64_t;UErrorCode*):void"/>
    <method name="uregex_setFindProgressCallback(URegularExpression*;(*)(const void*;int64_t):UBool;const void*;UErrorCode*):void"/>
    <method name="uregex_setMatchCallback(URegularExpression*;(*)(const void*;int32_t):UBool;const void*;UErrorCode*):void"/>
    <method name="uregex_setRegion(URegularExpression*;int32_t;int32_t;UErrorCode*):void"/>
    <method name="uregex_setRegion64(URegularExpression*;int64_t;int64_t;UErrorCode*):void"/>
    <method name="uregex_setRegionAndStart(URegularExpression*;int64_t;int64_t;int64_t;UErrorCode*):void"/>
    <method name="uregex_setStackLimit(URegularExpression*;int32_t;UErrorCode*):void"/>
    <method name="uregex_setText(URegularExpression*;const UChar*;int32_t;UErrorCode*):void"/>
    <method name="uregex_setTimeLimit(URegularExpression*;int32_t;UErrorCode*):void"/>
    <method name="uregex_setUText(URegularExpression*;UText*;UErrorCode*):void"/>
    <method name="uregex_split(URegularExpression*;UChar*;int32_t;int32_t*;UChar**;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_splitUText(URegularExpression*;UText**;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_start(URegularExpression*;int32_t;UErrorCode*):int32_t"/>
    <method name="uregex_start64(URegularExpression*;int32_t;UErrorCode*):int64_t"/>
    <method name="uregex_useAnchoringBounds(URegularExpression*;UBool;UErrorCode*):void"/>
    <method name="uregex_useTransparentBounds(URegularExpression*;UBool;UErrorCode*):void"/>
    <method name="uselocale(locale_t):locale_t"/>
    <method name="user_from_uid(uid_t;int):char*"/>
    <method name="usleep(useconds_t):int"/>
    <method name="utext_char32At(UText*;int64_t):UChar32"/>
    <method name="utext_clone(UText*;const UText*;UBool;UBool;UErrorCode*):UText*"/>
    <method name="utext_close(UText*):UText*"/>
    <method name="utext_copy(UText*;int64_t;int64_t;int64_t;UBool;UErrorCode*):void"/>
    <method name="utext_current32(UText*):UChar32"/>
    <method name="utext_equals(const UText*;const UText*):UBool"/>
    <method name="utext_extract(UText*;int64_t;int64_t;UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="utext_freeze(UText*):void"/>
    <method name="utext_getNativeIndex(const UText*):int64_t"/>
    <method name="utext_getPreviousNativeIndex(UText*):int64_t"/>
    <method name="utext_hasMetaData(const UText*):UBool"/>
    <method name="utext_isLengthExpensive(const UText*):UBool"/>
    <method name="utext_isWritable(const UText*):UBool"/>
    <method name="utext_moveIndex32(UText*;int32_t):UBool"/>
    <method name="utext_nativeLength(UText*):int64_t"/>
    <method name="utext_next32(UText*):UChar32"/>
    <method name="utext_next32From(UText*;int64_t):UChar32"/>
    <method name="utext_openUChars(UText*;const UChar*;int64_t;UErrorCode*):UText*"/>
    <method name="utext_openUTF8(UText*;const char*;int64_t;UErrorCode*):UText*"/>
    <method name="utext_previous32(UText*):UChar32"/>
    <method name="utext_previous32From(UText*;int64_t):UChar32"/>
    <method name="utext_replace(UText*;int64_t;int64_t;const UChar*;int32_t;UErrorCode*):int32_t"/>
    <method name="utext_setNativeIndex(UText*;int64_t):void"/>
    <method name="utext_setup(UText*;int32_t;UErrorCode*):UText*"/>
    <method name="utf8_appendCharSafeBody(uint8_t*;int32_t;int32_t;UChar32;UBool*):int32_t"/>
    <method name="utf8_back1SafeBody(const uint8_t*;int32_t;int32_t):int32_t"/>
    <method name="utf8_nextCharSafeBody(const uint8_t*;int32_t*;int32_t;UChar32;UBool):UChar32"/>
    <method name="utf8_prevCharSafeBody(const uint8_t*;int32_t;int32_t*;UChar32;UBool):UChar32"/>
    <method name="utime(const char*;const struct utimbuf*):int"/>
    <method name="utime(const char*;const utimbuf*):int"/>
    <method name="utimes(const char*;const struct timeval*):int"/>
    <method name="utmpxname(const char*):int"/>
    <method name="uuid_clear(unsigned char*):void"/>
    <method name="uuid_compare(const unsigned char*;const unsigned char*):int"/>
    <method name="uuid_copy(unsigned char*;const unsigned char*):void"/>
    <method name="uuid_generate(unsigned char*):void"/>
    <method name="uuid_generate_random(unsigned char*):void"/>
    <method name="uuid_generate_time(unsigned char*):void"/>
    <method name="uuid_is_null(const unsigned char*):int"/>
    <method name="uuid_parse(const char*;unsigned char*):int"/>
    <method name="uuid_unparse(const unsigned char*;char*):void"/>
    <method name="uuid_unparse_lower(const unsigned char*;char*):void"/>
    <method name="uuid_unparse_upper(const unsigned char*;char*):void"/>
    <method name="v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD*;X509V3_CTX*;STACK*):ASN1_BIT_STRING*"/>
    <method name="v2i_GENERAL_NAME(X509V3_EXT_METHOD*;X509V3_CTX*;CONF_VALUE*):GENERAL_NAME*"/>
    <method name="v2i_GENERAL_NAMES(X509V3_EXT_METHOD*;X509V3_CTX*;STACK*):GENERAL_NAMES*"/>
    <method name="v2i_GENERAL_NAME_ex(GENERAL_NAME*;X509V3_EXT_METHOD*;X509V3_CTX*;CONF_VALUE*;int):GENERAL_NAME*"/>
    <method name="vDSP_DCT_CreateSetup(vDSP_DFT_Setup;vDSP_Length;vDSP_DCT_Type):vDSP_DFT_Setup"/>
    <method name="vDSP_DCT_Execute(const struct vDSP_DFT_SetupStruct*;const float*;float*):void"/>
    <method name="vDSP_DFT_CreateSetup(vDSP_DFT_Setup;vDSP_Length):vDSP_DFT_Setup"/>
    <method name="vDSP_DFT_DestroySetup(vDSP_DFT_Setup):void"/>
    <method name="vDSP_DFT_Execute(const struct vDSP_DFT_SetupStruct*;const float*;const float*;float*;float*):void"/>
    <method name="vDSP_DFT_zop(const struct vDSP_DFT_SetupStruct*;const float*;const float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_DFT_Direction):void"/>
    <method name="vDSP_DFT_zop_CreateSetup(vDSP_DFT_Setup;vDSP_Length;vDSP_DFT_Direction):vDSP_DFT_Setup"/>
    <method name="vDSP_DFT_zrop_CreateSetup(vDSP_DFT_Setup;vDSP_Length;vDSP_DFT_Direction):vDSP_DFT_Setup"/>
    <method name="vDSP_FFT16_copv(float*;const float*;FFTDirection):void"/>
    <method name="vDSP_FFT16_zopv(float*;float*;const float*;const float*;FFTDirection):void"/>
    <method name="vDSP_FFT32_copv(float*;const float*;FFTDirection):void"/>
    <method name="vDSP_FFT32_zopv(float*;float*;const float*;const float*;FFTDirection):void"/>
    <method name="vDSP_biquad(const struct vDSP_biquad_SetupStruct*;float*;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_biquadD(const struct vDSP_biquad_SetupStructD*;double*;const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_biquad_CreateSetup(const double*;vDSP_Length):vDSP_biquad_Setup"/>
    <method name="vDSP_biquad_CreateSetupD(const double*;vDSP_Length):vDSP_biquad_SetupD"/>
    <method name="vDSP_biquad_DestroySetup(vDSP_biquad_Setup):void"/>
    <method name="vDSP_biquad_DestroySetupD(vDSP_biquad_SetupD):void"/>
    <method name="vDSP_blkman_window(float*;vDSP_Length;int):void"/>
    <method name="vDSP_blkman_windowD(double*;vDSP_Length;int):void"/>
    <method name="vDSP_conv(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_convD(const double*;vDSP_Stride;const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_create_fftsetup(vDSP_Length;FFTRadix):FFTSetup"/>
    <method name="vDSP_create_fftsetupD(vDSP_Length;FFTRadix):FFTSetupD"/>
    <method name="vDSP_ctoz(const DSPComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_ctozD(const DSPDoubleComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_deq22(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_deq22D(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_desamp(float*;vDSP_Stride;float*;float*;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_desampD(double*;vDSP_Stride;double*;double*;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_destroy_fftsetup(FFTSetup):void"/>
    <method name="vDSP_destroy_fftsetupD(FFTSetupD):void"/>
    <method name="vDSP_distancesq(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_dotpr(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_dotpr2(const float*;vDSP_Stride;const float*;vDSP_Stride;const float*;vDSP_Stride;float*;float*;vDSP_Length):void"/>
    <method name="vDSP_dotpr2_s1_15(const short*;vDSP_Stride;const short*;vDSP_Stride;const short*;vDSP_Stride;short*;short*;vDSP_Length):void"/>
    <method name="vDSP_dotpr2_s8_24(const int*;vDSP_Stride;const int*;vDSP_Stride;const int*;vDSP_Stride;int*;int*;vDSP_Length):void"/>
    <method name="vDSP_dotprD(const double*;vDSP_Stride;const double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_dotpr_s1_15(const short*;vDSP_Stride;const short*;vDSP_Stride;short*;vDSP_Length):void"/>
    <method name="vDSP_dotpr_s8_24(const int*;vDSP_Stride;const int*;vDSP_Stride;int*;vDSP_Length):void"/>
    <method name="vDSP_f3x3(float*;vDSP_Length;vDSP_Length;float*;float*):void"/>
    <method name="vDSP_f3x3D(double*;vDSP_Length;vDSP_Length;double*;double*):void"/>
    <method name="vDSP_f5x5(float*;vDSP_Length;vDSP_Length;float*;float*):void"/>
    <method name="vDSP_f5x5D(double*;vDSP_Length;vDSP_Length;double*;double*):void"/>
    <method name="vDSP_fft2d_zip(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zipD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zipt(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_ziptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zop(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zopD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zopt(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zoptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zrip(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zripD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zript(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zriptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zrop(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zropD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zropt(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft2d_zroptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft3_zop(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft3_zopD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft5_zop(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft5_zopD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zip(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zipD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zipt(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_ziptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zop(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zopD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zopt(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zoptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zrip(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zripD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zript(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zriptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zrop(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zropD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zropt(FFTSetup;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fft_zroptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zip(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zipD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zipt(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_ziptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zop(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zopD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zopt(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zoptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zrip(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zripD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zript(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zriptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zrop(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zropD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zropt(FFTSetup;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Stride;DSPSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_fftm_zroptD(FFTSetupD;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length;FFTDirection):void"/>
    <method name="vDSP_hamm_window(float*;vDSP_Length;int):void"/>
    <method name="vDSP_hamm_windowD(double*;vDSP_Length;int):void"/>
    <method name="vDSP_hann_window(float*;vDSP_Length;int):void"/>
    <method name="vDSP_hann_windowD(double*;vDSP_Length;int):void"/>
    <method name="vDSP_imgfir(float*;vDSP_Length;vDSP_Length;float*;float*;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_imgfirD(double*;vDSP_Length;vDSP_Length;double*;double*;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_maxmgv(const float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_maxmgvD(const double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_maxmgvi(float*;vDSP_Stride;float*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_maxmgviD(double*;vDSP_Stride;double*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_maxv(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_maxvD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_maxvi(float*;vDSP_Stride;float*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_maxviD(double*;vDSP_Stride;double*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_meamgv(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_meamgvD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_meanv(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_meanvD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_measqv(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_measqvD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_minmgv(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_minmgvD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_minmgvi(float*;vDSP_Stride;float*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_minmgviD(double*;vDSP_Stride;double*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_minv(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_minvD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_minvi(float*;vDSP_Stride;float*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_minviD(double*;vDSP_Stride;double*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_mmov(float*;float*;vDSP_Length;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_mmovD(double*;double*;vDSP_Length;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_mmul(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_mmulD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_mtrans(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_mtransD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_mvessq(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_mvessqD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_normalize(const float*;vDSP_Stride;float*;vDSP_Stride;float*;float*;vDSP_Length):void"/>
    <method name="vDSP_normalizeD(const double*;vDSP_Stride;double*;vDSP_Stride;double*;double*;vDSP_Length):void"/>
    <method name="vDSP_nzcros(float*;vDSP_Stride;vDSP_Length;vDSP_Length*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_nzcrosD(double*;vDSP_Stride;vDSP_Length;vDSP_Length*;vDSP_Length*;vDSP_Length):void"/>
    <method name="vDSP_polar(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_polarD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_rect(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_rectD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_rmsqv(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_rmsqvD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_svdiv(float*;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_svdivD(double*;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_sve(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_sveD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_sve_svesq(const float*;vDSP_Stride;float*;float*;vDSP_Length):void"/>
    <method name="vDSP_sve_svesqD(const double*;vDSP_Stride;double*;double*;vDSP_Length):void"/>
    <method name="vDSP_svemg(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_svemgD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_svesq(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_svesqD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_svs(float*;vDSP_Stride;float*;vDSP_Length):void"/>
    <method name="vDSP_svsD(double*;vDSP_Stride;double*;vDSP_Length):void"/>
    <method name="vDSP_vaam(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vaamD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vabs(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vabsD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vabsi(int*;vDSP_Stride;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vadd(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vaddD(const double*;vDSP_Stride;const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vam(const float*;vDSP_Stride;const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vamD(const double*;vDSP_Stride;const double*;vDSP_Stride;const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vasbm(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vasbmD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vasm(float*;vDSP_Stride;float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vasmD(double*;vDSP_Stride;double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vavlin(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vavlinD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vclip(float*;vDSP_Stride;float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vclipD(double*;vDSP_Stride;double*;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vclipc(float*;vDSP_Stride;float*;float*;float*;vDSP_Stride;vDSP_Length;vDSP_Length*;vDSP_Length*):void"/>
    <method name="vDSP_vclipcD(double*;vDSP_Stride;double*;double*;double*;vDSP_Stride;vDSP_Length;vDSP_Length*;vDSP_Length*):void"/>
    <method name="vDSP_vclr(float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vclrD(double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vcmprs(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vcmprsD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vdbcon(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length;unsigned int):void"/>
    <method name="vDSP_vdbconD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length;unsigned int):void"/>
    <method name="vDSP_vdist(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vdistD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vdiv(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vdivD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vdivi(int*;vDSP_Stride;int*;vDSP_Stride;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vdpsp(double*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_venvlp(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_venvlpD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_veqvi(int*;vDSP_Stride;int*;vDSP_Stride;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfill(float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfillD(double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfilli(int*;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfix16(float*;vDSP_Stride;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfix16D(double*;vDSP_Stride;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfix32(float*;vDSP_Stride;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfix32D(double*;vDSP_Stride;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfix8(float*;vDSP_Stride;char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfix8D(double*;vDSP_Stride;char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixr16(float*;vDSP_Stride;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixr16D(double*;vDSP_Stride;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixr32(float*;vDSP_Stride;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixr32D(double*;vDSP_Stride;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixr8(float*;vDSP_Stride;char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixr8D(double*;vDSP_Stride;char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixru16(float*;vDSP_Stride;unsigned short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixru16D(double*;vDSP_Stride;unsigned short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixru32(float*;vDSP_Stride;unsigned int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixru32D(double*;vDSP_Stride;unsigned int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixru8(float*;vDSP_Stride;unsigned char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixru8D(double*;vDSP_Stride;unsigned char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixu16(float*;vDSP_Stride;unsigned short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixu16D(double*;vDSP_Stride;unsigned short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixu32(float*;vDSP_Stride;unsigned int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixu32D(double*;vDSP_Stride;unsigned int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixu8(float*;vDSP_Stride;unsigned char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfixu8D(double*;vDSP_Stride;unsigned char*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vflt16(short*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vflt16D(short*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vflt32(int*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vflt32D(int*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vflt8(char*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vflt8D(char*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfltu16(unsigned short*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfltu16D(unsigned short*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfltu32(unsigned int*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfltu32D(unsigned int*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfltu8(unsigned char*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfltu8D(unsigned char*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfrac(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vfracD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vgathr(float*;vDSP_Length*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vgathrD(double*;vDSP_Length*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vgathra(float**;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vgathraD(double**;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vgen(float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vgenD(double*;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vgenp(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vgenpD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_viclip(float*;vDSP_Stride;float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_viclipD(double*;vDSP_Stride;double*;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vindex(float*;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vindexD(double*;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vintb(float*;vDSP_Stride;float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vintbD(double*;vDSP_Stride;double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vlim(float*;vDSP_Stride;float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vlimD(double*;vDSP_Stride;double*;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vlint(float*;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vlintD(double*;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vma(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmaD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmax(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmaxD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmaxmg(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmaxmgD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmin(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vminD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vminmg(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vminmgD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmma(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmmaD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmmsb(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmmsbD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmsa(float*;vDSP_Stride;float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmsaD(double*;vDSP_Stride;double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmsb(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmsbD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmul(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vmulD(const double*;vDSP_Stride;const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vnabs(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vnabsD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vneg(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vnegD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vpoly(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vpolyD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vpythg(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vpythgD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vqint(float*;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vqintD(double*;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vramp(float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampD(double*;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmul(const float*;vDSP_Stride;float*;const float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmul2(const float*;const float*;vDSP_Stride;float*;const float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmul2_s1_15(const short*;const short*;vDSP_Stride;short*;const short*;short*;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmul2_s8_24(const int*;const int*;vDSP_Stride;int*;const int*;int*;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmul_s1_15(const short*;vDSP_Stride;short*;const short*;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmul_s8_24(const int*;vDSP_Stride;int*;const int*;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmuladd(const float*;vDSP_Stride;float*;const float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmuladd2(const float*;const float*;vDSP_Stride;float*;const float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmuladd2_s1_15(const short*;const short*;vDSP_Stride;short*;const short*;short*;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmuladd2_s8_24(const int*;const int*;vDSP_Stride;int*;const int*;int*;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmuladd_s1_15(const short*;vDSP_Stride;short*;const short*;short*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrampmuladd_s8_24(const int*;vDSP_Stride;int*;const int*;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrsum(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrsumD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrvrs(float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vrvrsD(double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsadd(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsaddD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsaddi(int*;vDSP_Stride;int*;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsbm(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsbmD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsbsbm(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsbsbmD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsbsm(float*;vDSP_Stride;float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsbsmD(double*;vDSP_Stride;double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsdiv(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsdivD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsdivi(int*;vDSP_Stride;int*;int*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsimps(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsimpsD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsma(const float*;vDSP_Stride;const float*;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmaD(const double*;vDSP_Stride;const double*;const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmsa(float*;vDSP_Stride;float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmsaD(double*;vDSP_Stride;double*;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmsb(float*;vDSP_Stride;float*;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmsbD(double*;vDSP_Stride;double*;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmsma(const float*;vDSP_Stride;const float*;const float*;vDSP_Stride;const float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmul(const float*;vDSP_Stride;const float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsmulD(const double*;vDSP_Stride;const double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsort(float*;vDSP_Length;int):void"/>
    <method name="vDSP_vsortD(double*;vDSP_Length;int):void"/>
    <method name="vDSP_vsorti(float*;vDSP_Length*;vDSP_Length*;vDSP_Length;int):void"/>
    <method name="vDSP_vsortiD(double*;vDSP_Length*;vDSP_Length*;vDSP_Length;int):void"/>
    <method name="vDSP_vspdp(float*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsq(const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsqD(const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vssq(const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vssqD(const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsub(const float*;vDSP_Stride;const float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vsubD(const double*;vDSP_Stride;const double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vswap(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vswapD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vswsum(float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vswsumD(double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_vtabi(float*;vDSP_Stride;float*;float*;float*;vDSP_Length;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vtabiD(double*;vDSP_Stride;double*;double*;double*;vDSP_Length;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vthr(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vthrD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vthres(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vthresD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vthrsc(float*;vDSP_Stride;float*;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vthrscD(double*;vDSP_Stride;double*;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vtmerg(float*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vtmergD(double*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vtrapz(float*;vDSP_Stride;float*;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_vtrapzD(double*;vDSP_Stride;double*;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_wiener(vDSP_Length;float*;float*;float*;float*;int;int*):void"/>
    <method name="vDSP_wienerD(vDSP_Length;double*;double*;double*;double*;int;int*):void"/>
    <method name="vDSP_zaspec(DSPSplitComplex*;float*;vDSP_Length):void"/>
    <method name="vDSP_zaspecD(DSPDoubleSplitComplex*;double*;vDSP_Length):void"/>
    <method name="vDSP_zcoher(float*;float*;DSPSplitComplex*;float*;vDSP_Length):void"/>
    <method name="vDSP_zcoherD(double*;double*;DSPDoubleSplitComplex*;double*;vDSP_Length):void"/>
    <method name="vDSP_zconv(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zconvD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zcspec(DSPSplitComplex*;DSPSplitComplex*;DSPSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zcspecD(DSPDoubleSplitComplex*;DSPDoubleSplitComplex*;DSPDoubleSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zdotpr(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zdotprD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zidotpr(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zidotprD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zmma(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zmmaD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zmms(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zmmsD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zmmul(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zmmulD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zmsm(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zmsmD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zrdesamp(DSPSplitComplex*;vDSP_Stride;float*;DSPSplitComplex*;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zrdesampD(DSPDoubleSplitComplex*;vDSP_Stride;double*;DSPDoubleSplitComplex*;vDSP_Length;vDSP_Length):void"/>
    <method name="vDSP_zrdotpr(DSPSplitComplex*;vDSP_Stride;const float*;vDSP_Stride;DSPSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zrdotprD(DSPDoubleSplitComplex*;vDSP_Stride;const double*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zrvadd(DSPSplitComplex*;vDSP_Stride;const float*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zrvaddD(DSPDoubleSplitComplex*;vDSP_Stride;const double*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zrvdiv(DSPSplitComplex*;vDSP_Stride;float*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zrvdivD(DSPDoubleSplitComplex*;vDSP_Stride;double*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zrvmul(DSPSplitComplex*;vDSP_Stride;const float*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zrvmulD(DSPDoubleSplitComplex*;vDSP_Stride;const double*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zrvsub(DSPSplitComplex*;vDSP_Stride;const float*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zrvsubD(DSPDoubleSplitComplex*;vDSP_Stride;const double*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_ztoc(const DSPSplitComplex*;vDSP_Stride;DSPComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_ztocD(const DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_ztrans(float*;DSPSplitComplex*;DSPSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_ztransD(double*;DSPDoubleSplitComplex*;DSPDoubleSplitComplex*;vDSP_Length):void"/>
    <method name="vDSP_zvabs(DSPSplitComplex*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvabsD(DSPDoubleSplitComplex*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvadd(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvaddD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvcma(const DSPSplitComplex*;vDSP_Stride;const DSPSplitComplex*;vDSP_Stride;const DSPSplitComplex*;vDSP_Stride;const DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvcmaD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvcmul(const DSPSplitComplex*;vDSP_Stride;const DSPSplitComplex*;vDSP_Stride;const DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvcmulD(const DSPDoubleSplitComplex*;vDSP_Stride;const DSPDoubleSplitComplex*;vDSP_Stride;const DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvconj(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvconjD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvdiv(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvdivD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvfill(DSPSplitComplex*;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvfillD(DSPDoubleSplitComplex*;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvmags(DSPSplitComplex*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvmagsD(DSPDoubleSplitComplex*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvmgsa(DSPSplitComplex*;vDSP_Stride;float*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvmgsaD(DSPDoubleSplitComplex*;vDSP_Stride;double*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvmov(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvmovD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvmul(const DSPSplitComplex*;vDSP_Stride;const DSPSplitComplex*;vDSP_Stride;const DSPSplitComplex*;vDSP_Stride;vDSP_Length;int):void"/>
    <method name="vDSP_zvmulD(const DSPDoubleSplitComplex*;vDSP_Stride;const DSPDoubleSplitComplex*;vDSP_Stride;const DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length;int):void"/>
    <method name="vDSP_zvneg(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvnegD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvphas(DSPSplitComplex*;vDSP_Stride;float*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvphasD(DSPDoubleSplitComplex*;vDSP_Stride;double*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvsma(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvsmaD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvsub(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvsubD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvzsml(DSPSplitComplex*;vDSP_Stride;DSPSplitComplex*;DSPSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vDSP_zvzsmlD(DSPDoubleSplitComplex*;vDSP_Stride;DSPDoubleSplitComplex*;DSPDoubleSplitComplex*;vDSP_Stride;vDSP_Length):void"/>
    <method name="vImageAffineWarpCG_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpCG_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpCG_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpCG_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_CGAffineTransform*;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarpD_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform_Double*;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageAffineWarp_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImage_AffineTransform*;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_NonpremultipliedToPremultiplied_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageAlphaBlend_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageBoxConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageBoxConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageBufferFill_ARGB8888(const vImage_Buffer*;const uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageBufferFill_ARGBFFFF(const vImage_Buffer*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_RGBA8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClipToAlpha_RGBAFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageClip_PlanarF(const vImage_Buffer*;const vImage_Buffer*;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageContrastStretch_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_16SToF(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_16UToF(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_16UToPlanar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB1555toARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB1555toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toARGB1555(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toRGB565(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGB8888toRGB888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ARGBFFFFtoPlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_BGRA8888toRGB888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ChunkyToPlanar8(const void**;const vImage_Buffer**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_ChunkyToPlanarF(const void**;const vImage_Buffer**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_FTo16S(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_FTo16U(const vImage_Buffer*;const vImage_Buffer*;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar16FtoPlanarF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8To16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToBGRX8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToBGRXFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_F;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToXRGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8ToXRGBFFFF(Pixel_F;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toARGB1555(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toRGB565(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_Planar8toRGB888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToBGRX8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToBGRXFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;Pixel_F;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToXRGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFToXRGBFFFF(Pixel_F;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarFtoRGBFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarToChunky8(const vImage_Buffer**;void**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_PlanarToChunkyF(const vImage_Buffer**;void**;unsigned int;size_t;vImagePixelCount;vImagePixelCount;size_t;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB565toARGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB565toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toARGB8888(const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toBGRA8888(const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toPlanar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGB888toRGBA8888(const vImage_Buffer*;const vImage_Buffer*;Pixel_8;const vImage_Buffer*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGBA8888toRGB888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvert_RGBFFFtoPlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveMultiKernel_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t**;uint32_t;uint32_t;const int32_t*;const int32_t*;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveMultiKernel_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float**;uint32_t;uint32_t;const float*;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;int32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;float;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;int32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolveWithBias_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;float;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;uint32_t;uint32_t;int32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageConvolve_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;uint32_t;uint32_t;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageCreateGammaFunction(float;int;vImage_Flags):GammaFunction"/>
    <method name="vImageDestroyGammaFunction(GammaFunction):void"/>
    <method name="vImageDestroyResamplingFilter(ResamplingFilter):void"/>
    <method name="vImageDilate_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageDilate_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageDilate_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageDilate_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const unsigned int*;const unsigned int*;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const unsigned int*;const unsigned int*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_Planar8(const vImage_Buffer*;const vImage_Buffer*;unsigned int;unsigned int;vImage_Flags):vImage_Error"/>
    <method name="vImageEndsInContrastStretch_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;unsigned int;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageEqualization_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const unsigned char*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageErode_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;const float*;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_ARGB8888ToRGB888(const vImage_Buffer*;const vImage_Buffer*;uint8_t*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_ARGBFFFFToRGBFFF(const vImage_Buffer*;const vImage_Buffer*;float*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_BGRA8888ToRGB888(const vImage_Buffer*;const vImage_Buffer*;uint8_t*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_BGRAFFFFToRGBFFF(const vImage_Buffer*;const vImage_Buffer*;float*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_RGBA8888ToRGB888(const vImage_Buffer*;const vImage_Buffer*;uint8_t*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageFlatten_RGBAFFFFToRGBFFF(const vImage_Buffer*;const vImage_Buffer*;float*;_Bool;vImage_Flags):vImage_Error"/>
    <method name="vImageGamma_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;const GammaFunction;vImage_Flags):vImage_Error"/>
    <method name="vImageGamma_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const GammaFunction;vImage_Flags):vImage_Error"/>
    <method name="vImageGamma_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;const GammaFunction;vImage_Flags):vImage_Error"/>
    <method name="vImageGetMinimumGeometryTempBufferSize(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetMinimumTempBufferSizeForConvolution(const vImage_Buffer*;const vImage_Buffer*;uint32_t;uint32_t;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetMinimumTempBufferSizeForHistogram(const vImage_Buffer*;const vImage_Buffer*;unsigned int;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetMinimumTempBufferSizeForMinMax(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;vImage_Flags;size_t):size_t"/>
    <method name="vImageGetResamplingFilterSize(float;(*)(const float*;float*;unsigned long;void*):void;float;vImage_Flags):size_t"/>
    <method name="vImageHistogramCalculation_ARGB8888(const vImage_Buffer*;vImagePixelCount**;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramCalculation_ARGBFFFF(const vImage_Buffer*;vImagePixelCount**;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramCalculation_Planar8(const vImage_Buffer*;vImagePixelCount*;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramCalculation_PlanarF(const vImage_Buffer*;vImagePixelCount*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImagePixelCount**;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImagePixelCount**;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImagePixelCount*;vImage_Flags):vImage_Error"/>
    <method name="vImageHistogramSpecification_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;const vImagePixelCount*;unsigned int;Pixel_F;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_Planar16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalReflect_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShearD_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageHorizontalShear_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageInterpolatedLookupTable_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const Pixel_F*;vImagePixelCount;float;float;vImage_Flags):vImage_Error"/>
    <method name="vImageLookupTable_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;const Pixel_F*;vImage_Flags):vImage_Error"/>
    <method name="vImageLookupTable_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;const Pixel_8*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const int16_t*;int32_t;const int16_t*;const int32_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const float*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_Planar8(const vImage_Buffer**;const vImage_Buffer**;uint32_t;uint32_t;const int16_t*;int32_t;const int16_t*;const int32_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageMatrixMultiply_PlanarF(const vImage_Buffer**;const vImage_Buffer**;uint32_t;uint32_t;const float*;const float*;const float*;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMax_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageMin_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImagePixelCount;vImage_Flags):vImage_Error"/>
    <method name="vImageNewResamplingFilter(float;vImage_Flags):ResamplingFilter"/>
    <method name="vImageNewResamplingFilterForFunctionUsingBuffer(ResamplingFilter;float;(*)(const float*;float*;unsigned long;void*):void;float;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithPixel_ARGB8888(const uint8_t*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithPixel_ARGBFFFF(const float*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_ARGB8888(Pixel_8;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_ARGBFFFF(Pixel_F;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_Planar8(Pixel_8;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannelsWithScalar_PlanarF(Pixel_F;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannels_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageOverwriteChannels_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePNGDecompressionFilter(const vImage_Buffer*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePermuteChannels_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImagePermuteChannels_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewisePolynomial_Planar8toPlanarF(const vImage_Buffer*;const vImage_Buffer*;const float**;const float*;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewisePolynomial_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const float**;const float*;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewisePolynomial_PlanarFtoPlanar8(const vImage_Buffer*;const vImage_Buffer*;const float**;const float*;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePiecewiseRational_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const float**;const float**;const float*;uint32_t;uint32_t;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_BGRA8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_BGRAFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedAlphaBlend_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_ARGB8888(const vImage_Buffer*;Pixel_8;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_ARGBFFFF(const vImage_Buffer*;Pixel_F;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_Planar8(const vImage_Buffer*;Pixel_8;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultipliedConstAlphaBlend_PlanarF(const vImage_Buffer*;Pixel_F;const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_ARGB16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_RGBA16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_RGBA8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImagePremultiplyData_RGBAFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;const int16_t*;uint32_t;uint32_t;uint32_t;uint32_t;int32_t;int32_t;uint8_t*;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;const float*;uint32_t;uint32_t;uint32_t;uint32_t;float*;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const int16_t*;const int16_t*;uint32_t;uint32_t;uint32_t;uint32_t;int32_t;int32_t;Pixel_8;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRichardsonLucyDeConvolve_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;const float*;const float*;uint32_t;uint32_t;uint32_t;uint32_t;Pixel_F;uint32_t;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;uint8_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;uint8_t;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_Planar16U(const vImage_Buffer*;const vImage_Buffer*;uint8_t;Pixel_16U;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_Planar8(const vImage_Buffer*;const vImage_Buffer*;uint8_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate90_PlanarF(const vImage_Buffer*;const vImage_Buffer*;uint8_t;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;float;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;float;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;float;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageRotate_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;float;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageScale_PlanarF(const vImage_Buffer*;const vImage_Buffer*;void*;vImage_Flags):vImage_Error"/>
    <method name="vImageSelectChannels_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageSelectChannels_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;uint8_t;vImage_Flags):vImage_Error"/>
    <method name="vImageTableLookUp_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;const Pixel_8*;const Pixel_8*;const Pixel_8*;const Pixel_8*;vImage_Flags):vImage_Error"/>
    <method name="vImageTableLookUp_Planar8(const vImage_Buffer*;const vImage_Buffer*;const Pixel_8*;vImage_Flags):vImage_Error"/>
    <method name="vImageTentConvolve_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageTentConvolve_Planar8(const vImage_Buffer*;const vImage_Buffer*;void*;vImagePixelCount;vImagePixelCount;uint32_t;uint32_t;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_ARGB16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_Planar8(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_PlanarF(const vImage_Buffer*;const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_RGBA16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_RGBA8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageUnpremultiplyData_RGBAFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_Planar16U(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalReflect_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShearD_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;double;double;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_ARGB8888(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;uint8_t*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_ARGBFFFF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;float*;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_Planar8(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_8;vImage_Flags):vImage_Error"/>
    <method name="vImageVerticalShear_PlanarF(const vImage_Buffer*;const vImage_Buffer*;vImagePixelCount;vImagePixelCount;float;float;ResamplingFilter;Pixel_F;vImage_Flags):vImage_Error"/>
    <method name="vacosf(vFloat):vFloat"/>
    <method name="vacoshf(vFloat):vFloat"/>
    <method name="valloc(size_t):void*"/>
    <method name="vasinf(vFloat):vFloat"/>
    <method name="vasinhf(vFloat):vFloat"/>
    <method name="vasprintf(char**;const char*;va_list):int"/>
    <method name="vatan2f(vFloat;vFloat):vFloat"/>
    <method name="vatanf(vFloat):vFloat"/>
    <method name="vatanhf(vFloat):vFloat"/>
    <method name="vceilf(vFloat):vFloat"/>
    <method name="vclassifyf(vFloat):vUInt32"/>
    <method name="vcopysignf(vFloat;vFloat):vFloat"/>
    <method name="vcosf(vFloat):vFloat"/>
    <method name="vcoshf(vFloat):vFloat"/>
    <method name="vcospif(vFloat):vFloat"/>
    <method name="vdivf(vFloat;vFloat):vFloat"/>
    <method name="vdprintf(int;const char*;va_list):int"/>
    <method name="verr(int;const char*;__darwin_va_list):void"/>
    <method name="verr(int;const char*;va_list):void"/>
    <method name="verrc(int;int;const char*;__darwin_va_list):void"/>
    <method name="verrx(int;const char*;__darwin_va_list):void"/>
    <method name="verrx(int;const char*;va_list):void"/>
    <method name="vexp2f(vFloat):vFloat"/>
    <method name="vexpf(vFloat):vFloat"/>
    <method name="vexpm1f(vFloat):vFloat"/>
    <method name="vfabf(vFloat):vFloat"/>
    <method name="vfabsf(vFloat):vFloat"/>
    <method name="vfloorf(vFloat):vFloat"/>
    <method name="vfmodf(vFloat;vFloat):vFloat"/>
    <method name="vfork():pid_t"/>
    <method name="vfprintf(FILE*;const char*;va_list):int"/>
    <method name="vfscanf(FILE*;const char*;va_list):int"/>
    <method name="vfwprintf(FILE*;const wchar_t*;__darwin_va_list):int"/>
    <method name="vfwprintf(FILE*;const wchar_t*;va_list):int"/>
    <method name="vfwprintf_l(int*;int;const int*;int):int"/>
    <method name="vfwscanf(FILE*;const wchar_t*;__darwin_va_list):int"/>
    <method name="vfwscanf(__FILE*;const wchar_t*;va_list):int"/>
    <method name="vintf(vFloat):vFloat"/>
    <method name="vipowf(vFloat;vSInt32):vFloat"/>
    <method name="vis(char*;int;int;int):char*"/>
    <method name="vlog10f(vFloat):vFloat"/>
    <method name="vlog1pf(vFloat):vFloat"/>
    <method name="vlog2f(vFloat):vFloat"/>
    <method name="vlogbf(vFloat):vFloat"/>
    <method name="vlogf(vFloat):vFloat"/>
    <method name="vm_allocate(vm_map_t;vm_address_t*;vm_size_t;int):kern_return_t"/>
    <method name="vm_allocate_cpm(host_priv_t;vm_map_t;vm_address_t*;vm_size_t;int):kern_return_t"/>
    <method name="vm_behavior_set(vm_map_t;vm_address_t;vm_size_t;vm_behavior_t):kern_return_t"/>
    <method name="vm_copy(vm_map_t;vm_address_t;vm_size_t;vm_address_t):kern_return_t"/>
    <method name="vm_deallocate(vm_map_t;vm_address_t;vm_size_t):kern_return_t"/>
    <method name="vm_inherit(vm_map_t;vm_address_t;vm_size_t;vm_inherit_t):kern_return_t"/>
    <method name="vm_machine_attribute(vm_map_t;vm_address_t;vm_size_t;vm_machine_attribute_t;vm_machine_attribute_val_t*):kern_return_t"/>
    <method name="vm_map(vm_map_t;vm_address_t*;vm_size_t;vm_address_t;int;mem_entry_name_port_t;vm_offset_t;boolean_t;vm_prot_t;vm_prot_t;vm_inherit_t):kern_return_t"/>
    <method name="vm_map_64(vm_map_t;vm_address_t*;vm_size_t;vm_address_t;int;mem_entry_name_port_t;memory_object_offset_t;boolean_t;vm_prot_t;vm_prot_t;vm_inherit_t):kern_return_t"/>
    <method name="vm_map_page_query(vm_map_t;vm_offset_t;integer_t*;integer_t*):kern_return_t"/>
    <method name="vm_mapped_pages_info(vm_map_t;page_address_array_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_msync(vm_map_t;vm_address_t;vm_size_t;vm_sync_t):kern_return_t"/>
    <method name="vm_protect(vm_map_t;vm_address_t;vm_size_t;boolean_t;vm_prot_t):kern_return_t"/>
    <method name="vm_purgable_control(vm_map_t;vm_address_t;vm_purgable_t;int*):kern_return_t"/>
    <method name="vm_read(vm_map_t;vm_address_t;vm_size_t;vm_offset_t*;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_read_list(vm_map_t;struct vm_read_entry*;natural_t):kern_return_t"/>
    <method name="vm_read_overwrite(vm_map_t;vm_address_t;vm_size_t;vm_address_t;vm_size_t*):kern_return_t"/>
    <method name="vm_region(vm_map_t;vm_address_t*;vm_size_t*;vm_region_flavor_t;vm_region_info_t;mach_msg_type_number_t*;mach_port_t*):kern_return_t"/>
    <method name="vm_region_64(vm_map_t;vm_address_t*;vm_size_t*;vm_region_flavor_t;vm_region_info_t;mach_msg_type_number_t*;mach_port_t*):kern_return_t"/>
    <method name="vm_region_recurse(vm_map_t;vm_address_t*;vm_size_t*;natural_t*;vm_region_recurse_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_region_recurse_64(vm_map_t;vm_address_t*;vm_size_t*;natural_t*;vm_region_recurse_info_t;mach_msg_type_number_t*):kern_return_t"/>
    <method name="vm_remap(vm_map_t;vm_address_t*;vm_size_t;vm_address_t;int;vm_map_t;vm_address_t;boolean_t;vm_prot_t*;vm_prot_t*;vm_inherit_t):kern_return_t"/>
    <method name="vm_wire(host_priv_t;vm_map_t;vm_address_t;vm_size_t;vm_prot_t):kern_return_t"/>
    <method name="vm_write(vm_map_t;vm_address_t;vm_offset_t;mach_msg_type_number_t):kern_return_t"/>
    <method name="vnextafterf(vFloat;vFloat):vFloat"/>
    <method name="vnintf(vFloat):vFloat"/>
    <method name="vpowf(vFloat;vFloat):vFloat"/>
    <method name="vprintf(const char*;va_list):int"/>
    <method name="vproc_standby_begin(vproc_t):vproc_standby_t"/>
    <method name="vproc_standby_end(vproc_t;vproc_standby_t):void"/>
    <method name="vproc_strerror(vproc_err_t):const char*"/>
    <method name="vproc_transaction_begin(vproc_t):vproc_transaction_t"/>
    <method name="vproc_transaction_end(vproc_t;vproc_transaction_t):void"/>
    <method name="vrecf(vFloat):vFloat"/>
    <method name="vremainderf(vFloat;vFloat):vFloat"/>
    <method name="vremquof(vFloat;vFloat;vUInt32*):vFloat"/>
    <method name="vrsqrtf(vFloat):vFloat"/>
    <method name="vscalbf(vFloat;vSInt32):vFloat"/>
    <method name="vscanf(const char*;va_list):int"/>
    <method name="vsignbitf(vFloat):vUInt32"/>
    <method name="vsincosf(vFloat;vFloat*):vFloat"/>
    <method name="vsinf(vFloat):vFloat"/>
    <method name="vsinhf(vFloat):vFloat"/>
    <method name="vsinpif(vFloat):vFloat"/>
    <method name="vsnprintf(char*;size_t;const char*;va_list):int"/>
    <method name="vsprintf(char*;const char*;va_list):int"/>
    <method name="vsqrtf(vFloat):vFloat"/>
    <method name="vsscanf(const char*;const char*;va_list):int"/>
    <method name="vswprintf(wchar_t*;size_t;const wchar_t*;__darwin_va_list):int"/>
    <method name="vswprintf_l(int*;int;int;const int*;int):int"/>
    <method name="vswscanf(const wchar_t*;const wchar_t*;__darwin_va_list):int"/>
    <method name="vswscanf(const wchar_t*;const wchar_t*;va_list):int"/>
    <method name="vsyslog(int;const char*;__darwin_va_list):void"/>
    <method name="vtablelookup(vSInt32;uint32_t*):vUInt32"/>
    <method name="vtanf(vFloat):vFloat"/>
    <method name="vtanhf(vFloat):vFloat"/>
    <method name="vtanpif(vFloat):vFloat"/>
    <method name="vtruncf(vFloat):vFloat"/>
    <method name="vvacos(double*;const double*;const int*):void"/>
    <method name="vvacosf(float*;const float*;const int*):void"/>
    <method name="vvacosh(double*;const double*;const int*):void"/>
    <method name="vvacoshf(float*;const float*;const int*):void"/>
    <method name="vvasin(double*;const double*;const int*):void"/>
    <method name="vvasinf(float*;const float*;const int*):void"/>
    <method name="vvasinh(double*;const double*;const int*):void"/>
    <method name="vvasinhf(float*;const float*;const int*):void"/>
    <method name="vvatan(double*;const double*;const int*):void"/>
    <method name="vvatan2(double*;const double*;const double*;const int*):void"/>
    <method name="vvatan2f(float*;const float*;const float*;const int*):void"/>
    <method name="vvatanf(float*;const float*;const int*):void"/>
    <method name="vvatanh(double*;const double*;const int*):void"/>
    <method name="vvatanhf(float*;const float*;const int*):void"/>
    <method name="vvceil(double*;const double*;const int*):void"/>
    <method name="vvceilf(float*;const float*;const int*):void"/>
    <method name="vvcopysign(double*;double*;const double*;const int*):void"/>
    <method name="vvcopysignf(float*;const float*;const float*;const int*):void"/>
    <method name="vvcos(double*;const double*;const int*):void"/>
    <method name="vvcosf(float*;const float*;const int*):void"/>
    <method name="vvcosh(double*;const double*;const int*):void"/>
    <method name="vvcoshf(float*;const float*;const int*):void"/>
    <method name="vvcosisin(__double_complex_t*;const double*;const int*):void"/>
    <method name="vvcosisinf(__float_complex_t*;const float*;const int*):void"/>
    <method name="vvcospi(double*;const double*;const int*):void"/>
    <method name="vvcospif(float*;const float*;const int*):void"/>
    <method name="vvdiv(double*;const double*;const double*;const int*):void"/>
    <method name="vvdivf(float*;const float*;const float*;const int*):void"/>
    <method name="vvexp(double*;const double*;const int*):void"/>
    <method name="vvexp2(double*;const double*;const int*):void"/>
    <method name="vvexp2f(float*;const float*;const int*):void"/>
    <method name="vvexpf(float*;const float*;const int*):void"/>
    <method name="vvexpm1(double*;const double*;const int*):void"/>
    <method name="vvexpm1f(float*;const float*;const int*):void"/>
    <method name="vvfabf(float*;const float*;const int*):void"/>
    <method name="vvfabs(double*;const double*;const int*):void"/>
    <method name="vvfabsf(float*;const float*;const int*):void"/>
    <method name="vvfloor(double*;const double*;const int*):void"/>
    <method name="vvfloorf(float*;const float*;const int*):void"/>
    <method name="vvfmod(double*;double*;const double*;const int*):void"/>
    <method name="vvfmodf(float*;const float*;const float*;const int*):void"/>
    <method name="vvint(double*;const double*;const int*):void"/>
    <method name="vvintf(float*;const float*;const int*):void"/>
    <method name="vvlog(double*;const double*;const int*):void"/>
    <method name="vvlog10(double*;const double*;const int*):void"/>
    <method name="vvlog10f(float*;const float*;const int*):void"/>
    <method name="vvlog1p(double*;const double*;const int*):void"/>
    <method name="vvlog1pf(float*;const float*;const int*):void"/>
    <method name="vvlog2(double*;const double*;const int*):void"/>
    <method name="vvlog2f(float*;const float*;const int*):void"/>
    <method name="vvlogb(double*;const double*;const int*):void"/>
    <method name="vvlogbf(float*;const float*;const int*):void"/>
    <method name="vvlogf(float*;const float*;const int*):void"/>
    <method name="vvnextafter(double*;double*;const double*;const int*):void"/>
    <method name="vvnextafterf(float*;const float*;const float*;const int*):void"/>
    <method name="vvnint(double*;const double*;const int*):void"/>
    <method name="vvnintf(float*;const float*;const int*):void"/>
    <method name="vvpow(double*;const double*;const double*;const int*):void"/>
    <method name="vvpowf(float*;const float*;const float*;const int*):void"/>
    <method name="vvpows(double*;const double*;const double*;const int*):void"/>
    <method name="vvpowsf(float*;const float*;const float*;const int*):void"/>
    <method name="vvrec(double*;const double*;const int*):void"/>
    <method name="vvrecf(float*;const float*;const int*):void"/>
    <method name="vvremainder(double*;double*;const double*;const int*):void"/>
    <method name="vvremainderf(float*;const float*;const float*;const int*):void"/>
    <method name="vvrsqrt(double*;const double*;const int*):void"/>
    <method name="vvrsqrtf(float*;const float*;const int*):void"/>
    <method name="vvsin(double*;const double*;const int*):void"/>
    <method name="vvsincos(double*;double*;const double*;const int*):void"/>
    <method name="vvsincosf(float*;float*;const float*;const int*):void"/>
    <method name="vvsinf(float*;const float*;const int*):void"/>
    <method name="vvsinh(double*;const double*;const int*):void"/>
    <method name="vvsinhf(float*;const float*;const int*):void"/>
    <method name="vvsinpi(double*;const double*;const int*):void"/>
    <method name="vvsinpif(float*;const float*;const int*):void"/>
    <method name="vvsqrt(double*;const double*;const int*):void"/>
    <method name="vvsqrtf(float*;const float*;const int*):void"/>
    <method name="vvtan(double*;const double*;const int*):void"/>
    <method name="vvtanf(float*;const float*;const int*):void"/>
    <method name="vvtanh(double*;const double*;const int*):void"/>
    <method name="vvtanhf(float*;const float*;const int*):void"/>
    <method name="vvtanpi(double*;const double*;const int*):void"/>
    <method name="vvtanpif(float*;const float*;const int*):void"/>
    <method name="vwarn(const char*;__darwin_va_list):void"/>
    <method name="vwarn(const char*;va_list):void"/>
    <method name="vwarnc(int;const char*;__darwin_va_list):void"/>
    <method name="vwarnx(const char*;__darwin_va_list):void"/>
    <method name="vwarnx(const char*;va_list):void"/>
    <method name="vwprintf(const wchar_t*;__darwin_va_list):int"/>
    <method name="vwprintf(const wchar_t*;va_list):int"/>
    <method name="vwprintf_l():int"/>
    <method name="vwscanf(const wchar_t*;__darwin_va_list):int"/>
    <method name="vwscanf(const wchar_t*;va_list):int"/>
    <method name="wait(int*):pid_t"/>
    <method name="wait3(int*;int;struct rusage*):pid_t"/>
    <method name="wait4(pid_t;int*;int;struct rusage*):pid_t"/>
    <method name="waitid(idtype_t;id_t;siginfo_t*;int):int"/>
    <method name="waitpid(pid_t;int*;int):pid_t"/>
    <method name="wallproc_wall_1(char**;CLIENT*):void*"/>
    <method name="wallproc_wall_1_svc(char**;struct svc_req*):void*"/>
    <method name="warn(const char*, ...):void"/>
    <method name="warnc(int;const char*, ...):void"/>
    <method name="warnx(const char*, ...):void"/>
    <method name="wcpcpy(wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcpncpy(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wcrtomb(char*;wchar_t;mbstate_t*):size_t"/>
    <method name="wcrtomb_l(char*;int;int*;int):int"/>
    <method name="wcscasecmp(const wchar_t*;const wchar_t*):int"/>
    <method name="wcscat(wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcschr(const wchar_t*;wchar_t):wchar_t*"/>
    <method name="wcscmp(const wchar_t*;const wchar_t*):int"/>
    <method name="wcscoll(const wchar_t*;const wchar_t*):int"/>
    <method name="wcscoll_l(const int*;const int*;int):int"/>
    <method name="wcscpy(wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcscspn(const wchar_t*;const wchar_t*):size_t"/>
    <method name="wcsdup(const wchar_t*):wchar_t*"/>
    <method name="wcsftime(wchar_t*;size_t;const wchar_t*;const struct tm*):size_t"/>
    <method name="wcslcat(wchar_t*;const wchar_t*;size_t):size_t"/>
    <method name="wcslcpy(wchar_t*;const wchar_t*;size_t):size_t"/>
    <method name="wcslen(const wchar_t*):size_t"/>
    <method name="wcsncasecmp(const wchar_t*;const wchar_t*;size_t):int"/>
    <method name="wcsncat(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wcsncmp(const wchar_t*;const wchar_t*;size_t):int"/>
    <method name="wcsncpy(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wcsnlen(const wchar_t*;size_t):size_t"/>
    <method name="wcsnrtombs(char*;const wchar_t**;size_t;size_t;mbstate_t*):size_t"/>
    <method name="wcspbrk(const wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcsrchr(const wchar_t*;wchar_t):wchar_t*"/>
    <method name="wcsrtombs(char*;const wchar_t**;size_t;mbstate_t*):size_t"/>
    <method name="wcsrtombs_l(char*;const int**;int;int*;int):int"/>
    <method name="wcsspn(const wchar_t*;const wchar_t*):size_t"/>
    <method name="wcsstr(const wchar_t*;const wchar_t*):wchar_t*"/>
    <method name="wcstod(const wchar_t*;wchar_t**):double"/>
    <method name="wcstod_l(const int*;int**;int):double"/>
    <method name="wcstof(const wchar_t*;wchar_t**):float"/>
    <method name="wcstoimax(const wchar_t*;wchar_t**;int):intmax_t"/>
    <method name="wcstoimax_l(const int*;int**;int;int):int"/>
    <method name="wcstok(wchar_t*;const wchar_t*;wchar_t**):wchar_t*"/>
    <method name="wcstol(const wchar_t*;wchar_t**;int):long"/>
    <method name="wcstol_l(const int*;int**;int;int):long"/>
    <method name="wcstold(const wchar_t*;wchar_t**):long double"/>
    <method name="wcstoll(const wchar_t*;wchar_t**;int):long long"/>
    <method name="wcstombs(char*;const wchar_t*;size_t):size_t"/>
    <method name="wcstombs_l(char*;const int*;int;int):int"/>
    <method name="wcstoul(const wchar_t*;wchar_t**;int):unsigned long"/>
    <method name="wcstoul_l(const int*;int**;int;int):unsigned long"/>
    <method name="wcstoull(const wchar_t*;wchar_t**;int):unsigned long long"/>
    <method name="wcstoumax(const wchar_t*;wchar_t**;int):uintmax_t"/>
    <method name="wcstoumax_l(const int*;int**;int;int):int"/>
    <method name="wcswidth(const wchar_t*;size_t):int"/>
    <method name="wcswidth_l(const int*;int;int):int"/>
    <method name="wcsxfrm(wchar_t*;const wchar_t*;size_t):size_t"/>
    <method name="wcsxfrm_l(int*;const int*;int;int):int"/>
    <method name="wctob(wint_t):int"/>
    <method name="wctomb(char*;wchar_t):int"/>
    <method name="wctomb_l(char*;int;int):int"/>
    <method name="wctrans(const char*):wctrans_t"/>
    <method name="wctrans_l(const char*;int):int"/>
    <method name="wctype(const char*):wctype_t"/>
    <method name="wcwidth(wchar_t):int"/>
    <method name="wexecl(const wchar_t *; const wchar_t *; (wchar_t *)0): int"/>
    <method name="wexecv(const wchar_t *; const wchar_t *): int"/>
    <method name="wexecvp(const wchar_t *; wchar_t *; wchar_t *): int"/>
    <method name="wexecvpe(const wchar_t *; wchar_t *; wchar_t *): int"/>
    <method name="wmemchr(const wchar_t*;wchar_t;size_t):wchar_t*"/>
    <method name="wmemcmp(const wchar_t*;const wchar_t*;size_t):int"/>
    <method name="wmemcpy(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wmemmove(wchar_t*;const wchar_t*;size_t):wchar_t*"/>
    <method name="wmemset(wchar_t*;wchar_t;size_t):wchar_t*"/>
    <method name="wordexp(const char*;wordexp_t*;int):int"/>
    <method name="wordfree(wordexp_t*):void"/>
    <method name="wprintf(const wchar_t*, ...):int"/>
    <method name="wprintf_l():int"/>
    <method name="write(int;const void*;size_t):ssize_t"/>
    <method name="writev(int;const struct iovec*;int):ssize_t"/>
    <method name="wscanf(const wchar_t*, ...):int"/>
    <method name="wscanf_l():int"/>
    <method name="wsprintf(LPTSTR lpOut; LPCTSTR lpFmt): int"/>
    <method name="wtmpxname(const char*):int"/>
    <method name="wvsprintf(LPTSTR lpOutput; LPCTSTR lpFmt; va_list arglist): int"/>
    <method name="wwritev(int;const iovec*;int):ssize_t"/>
    <method name="xalloc():int"/>
    <method name="xdr_array(XDR*;char**;unsigned int*;unsigned int;unsigned int;int):int"/>
    <method name="xdr_attrstat(XDR*;attrstat*):int"/>
    <method name="xdr_authunix_parms(int*;struct authunix_parms*):int"/>
    <method name="xdr_bool(XDR*;(*)(int*):int):int"/>
    <method name="xdr_bp_address(XDR*;bp_address*):int"/>
    <method name="xdr_bp_fileid_t(XDR*;bp_fileid_t*):int"/>
    <method name="xdr_bp_getfile_arg(XDR*;bp_getfile_arg*):int"/>
    <method name="xdr_bp_getfile_res(XDR*;bp_getfile_res*):int"/>
    <method name="xdr_bp_machine_name_t(XDR*;bp_machine_name_t*):int"/>
    <method name="xdr_bp_path_t(XDR*;bp_path_t*):int"/>
    <method name="xdr_bp_whoami_arg(XDR*;bp_whoami_arg*):int"/>
    <method name="xdr_bp_whoami_res(XDR*;bp_whoami_res*):int"/>
    <method name="xdr_bytes(XDR*;char**;unsigned int*;unsigned int):int"/>
    <method name="xdr_char(XDR*;char*):int"/>
    <method name="xdr_createargs(XDR*;createargs*):int"/>
    <method name="xdr_des_block(int*;des_block*):int"/>
    <method name="xdr_dirlist(XDR*;dirlist*):int"/>
    <method name="xdr_diropargs(XDR*;diropargs*):int"/>
    <method name="xdr_diropokres(XDR*;diropokres*):int"/>
    <method name="xdr_diropres(XDR*;diropres*):int"/>
    <method name="xdr_dirpath(XDR*;dirpath*):int"/>
    <method name="xdr_domainname(XDR*;domainname*):int"/>
    <method name="xdr_double(XDR*;double*):int"/>
    <method name="xdr_entry(XDR*;entry*):int"/>
    <method name="xdr_enum(XDR*;int*):int"/>
    <method name="xdr_exportnode(XDR*;exportnode*):int"/>
    <method name="xdr_exports(XDR*;exports*):int"/>
    <method name="xdr_fattr(XDR*;fattr*):int"/>
    <method name="xdr_fhandle(XDR*;char*):int"/>
    <method name="xdr_fhstatus(XDR*;fhstatus*):int"/>
    <method name="xdr_filename(XDR*;filename*):int"/>
    <method name="xdr_float(XDR*;float*):int"/>
    <method name="xdr_free():void"/>
    <method name="xdr_fsh_access(XDR*;fsh_access*):int"/>
    <method name="xdr_fsh_mode(XDR*;fsh_mode*):int"/>
    <method name="xdr_ftype(XDR*;ftype*):int"/>
    <method name="xdr_getint32(XDR*;int*):int"/>
    <method name="xdr_getquota_args(XDR*;getquota_args*):int"/>
    <method name="xdr_getquota_rslt(XDR*;getquota_rslt*):int"/>
    <method name="xdr_gqr_status(XDR*;gqr_status*):int"/>
    <method name="xdr_groupnode(XDR*;groupnode*):int"/>
    <method name="xdr_groups(XDR*;groups*):int"/>
    <method name="xdr_hyper(XDR*;int*):int"/>
    <method name="xdr_int(XDR*;int*):int"/>
    <method name="xdr_int16_t(XDR*;int*):int"/>
    <method name="xdr_int32_t(XDR*;int*):int"/>
    <method name="xdr_int64_t(XDR*;int*):int"/>
    <method name="xdr_ip_addr_t(XDR*;ip_addr_t*):int"/>
    <method name="xdr_keydat(XDR*;keydat*):int"/>
    <method name="xdr_klm_holder(XDR*;klm_holder*):int"/>
    <method name="xdr_klm_lock(XDR*;klm_lock*):int"/>
    <method name="xdr_klm_lockargs(XDR*;klm_lockargs*):int"/>
    <method name="xdr_klm_stat(XDR*;klm_stat*):int"/>
    <method name="xdr_klm_stats(XDR*;klm_stats*):int"/>
    <method name="xdr_klm_testargs(XDR*;klm_testargs*):int"/>
    <method name="xdr_klm_testrply(XDR*;klm_testrply*):int"/>
    <method name="xdr_klm_unlockargs(XDR*;klm_unlockargs*):int"/>
    <method name="xdr_linkargs(XDR*;linkargs*):int"/>
    <method name="xdr_long(XDR*;long*):int"/>
    <method name="xdr_longlong_t(XDR*;int*):int"/>
    <method name="xdr_ltchars(XDR*;ltchars*):int"/>
    <method name="xdr_mapname(XDR*;mapname*):int"/>
    <method name="xdr_mon(XDR*;mon*):int"/>
    <method name="xdr_mon_id(XDR*;mon_id*):int"/>
    <method name="xdr_mountbody(XDR*;mountbody*):int"/>
    <method name="xdr_mountlist(XDR*;mountlist*):int"/>
    <method name="xdr_my_id(XDR*;my_id*):int"/>
    <method name="xdr_name(XDR*;name*):int"/>
    <method name="xdr_netobj(XDR*;struct netobj*):int"/>
    <method name="xdr_nfs_fh(XDR*;nfs_fh*):int"/>
    <method name="xdr_nfscookie(XDR*;char*):int"/>
    <method name="xdr_nfspath(XDR*;nfspath*):int"/>
    <method name="xdr_nfsstat(XDR*;nfsstat*):int"/>
    <method name="xdr_nfstime(XDR*;nfstime*):int"/>
    <method name="xdr_nlm4_cancargs(XDR*;nlm4_cancargs*):int"/>
    <method name="xdr_nlm4_holder(XDR*;nlm4_holder*):int"/>
    <method name="xdr_nlm4_lock(XDR*;nlm4_lock*):int"/>
    <method name="xdr_nlm4_lockargs(XDR*;nlm4_lockargs*):int"/>
    <method name="xdr_nlm4_notify(XDR*;nlm4_notify*):int"/>
    <method name="xdr_nlm4_res(XDR*;nlm4_res*):int"/>
    <method name="xdr_nlm4_share(XDR*;nlm4_share*):int"/>
    <method name="xdr_nlm4_shareargs(XDR*;nlm4_shareargs*):int"/>
    <method name="xdr_nlm4_shareres(XDR*;nlm4_shareres*):int"/>
    <method name="xdr_nlm4_stat(XDR*;nlm4_stat*):int"/>
    <method name="xdr_nlm4_stats(XDR*;nlm4_stats*):int"/>
    <method name="xdr_nlm4_testargs(XDR*;nlm4_testargs*):int"/>
    <method name="xdr_nlm4_testres(XDR*;nlm4_testres*):int"/>
    <method name="xdr_nlm4_testrply(XDR*;nlm4_testrply*):int"/>
    <method name="xdr_nlm4_unlockargs(XDR*;nlm4_unlockargs*):int"/>
    <method name="xdr_nlm_cancargs(XDR*;nlm_cancargs*):int"/>
    <method name="xdr_nlm_holder(XDR*;nlm_holder*):int"/>
    <method name="xdr_nlm_lock(XDR*;nlm_lock*):int"/>
    <method name="xdr_nlm_lockargs(XDR*;nlm_lockargs*):int"/>
    <method name="xdr_nlm_notify(XDR*;nlm_notify*):int"/>
    <method name="xdr_nlm_res(XDR*;nlm_res*):int"/>
    <method name="xdr_nlm_share(XDR*;nlm_share*):int"/>
    <method name="xdr_nlm_shareargs(XDR*;nlm_shareargs*):int"/>
    <method name="xdr_nlm_shareres(XDR*;nlm_shareres*):int"/>
    <method name="xdr_nlm_sm_status(XDR*;nlm_sm_status*):int"/>
    <method name="xdr_nlm_stat(XDR*;nlm_stat*):int"/>
    <method name="xdr_nlm_stats(XDR*;nlm_stats*):int"/>
    <method name="xdr_nlm_testargs(XDR*;nlm_testargs*):int"/>
    <method name="xdr_nlm_testres(XDR*;nlm_testres*):int"/>
    <method name="xdr_nlm_testrply(XDR*;nlm_testrply*):int"/>
    <method name="xdr_nlm_unlockargs(XDR*;nlm_unlockargs*):int"/>
    <method name="xdr_opaque(XDR*;char*;unsigned int):int"/>
    <method name="xdr_peername(XDR*;peername*):int"/>
    <method name="xdr_pointer(XDR*;char**;unsigned int;int):int"/>
    <method name="xdr_putint32(XDR*;int*):int"/>
    <method name="xdr_quadruple(XDR*;long double*):int"/>
    <method name="xdr_readargs(XDR*;readargs*):int"/>
    <method name="xdr_readdirargs(XDR*;readdirargs*):int"/>
    <method name="xdr_readdirres(XDR*;readdirres*):int"/>
    <method name="xdr_readlinkres(XDR*;readlinkres*):int"/>
    <method name="xdr_readokres(XDR*;readokres*):int"/>
    <method name="xdr_readres(XDR*;readres*):int"/>
    <method name="xdr_reference(XDR*;char**;unsigned int;int):int"/>
    <method name="xdr_renameargs(XDR*;renameargs*):int"/>
    <method name="xdr_rex_result(XDR*;rex_result*):int"/>
    <method name="xdr_rex_start(XDR*;rex_start*):int"/>
    <method name="xdr_rex_ttymode(XDR*;rex_ttymode*):int"/>
    <method name="xdr_rex_ttysize(XDR*;rex_ttysize*):int"/>
    <method name="xdr_rexstring(XDR*;rexstring*):int"/>
    <method name="xdr_rquota(XDR*;rquota*):int"/>
    <method name="xdr_rstat_timeval(XDR*;rstat_timeval*):int"/>
    <method name="xdr_rusers_utmp(XDR*;rusers_utmp*):int"/>
    <method name="xdr_sattr(XDR*;sattr*):int"/>
    <method name="xdr_sattrargs(XDR*;sattrargs*):int"/>
    <method name="xdr_sgttyb(XDR*;sgttyb*):int"/>
    <method name="xdr_short(XDR*;short*):int"/>
    <method name="xdr_sm_name(XDR*;sm_name*):int"/>
    <method name="xdr_sm_res(XDR*;sm_res*):int"/>
    <method name="xdr_sm_stat(XDR*;sm_stat*):int"/>
    <method name="xdr_sm_stat_res(XDR*;sm_stat_res*):int"/>
    <method name="xdr_sm_status(XDR*;sm_status*):int"/>
    <method name="xdr_sprayarr(XDR*;sprayarr*):int"/>
    <method name="xdr_spraycumul(XDR*;spraycumul*):int"/>
    <method name="xdr_spraytimeval(XDR*;spraytimeval*):int"/>
    <method name="xdr_stat_chge(XDR*;stat_chge*):int"/>
    <method name="xdr_statfsokres(XDR*;statfsokres*):int"/>
    <method name="xdr_statfsres(XDR*;statfsres*):int"/>
    <method name="xdr_stats(XDR*;stats*):int"/>
    <method name="xdr_statsswtch(XDR*;statsswtch*):int"/>
    <method name="xdr_statstime(XDR*;statstime*):int"/>
    <method name="xdr_string(XDR*;char**;unsigned int):int"/>
    <method name="xdr_symlinkargs(XDR*;symlinkargs*):int"/>
    <method name="xdr_tchars(XDR*;tchars*):int"/>
    <method name="xdr_u_char(XDR*;unsigned char*):int"/>
    <method name="xdr_u_hyper(XDR*;int*):int"/>
    <method name="xdr_u_int(XDR*;unsigned int*):int"/>
    <method name="xdr_u_int16_t(XDR*;int*):int"/>
    <method name="xdr_u_int32_t(XDR*;int*):int"/>
    <method name="xdr_u_int64_t(XDR*;int*):int"/>
    <method name="xdr_u_long(XDR*;unsigned long*):int"/>
    <method name="xdr_u_longlong_t(XDR*;int*):int"/>
    <method name="xdr_u_short(XDR*;unsigned short*):int"/>
    <method name="xdr_union(XDR*;int*;char*;const struct xdr_discrim*;int):int"/>
    <method name="xdr_utmp_array(XDR*;utmp_array*):int"/>
    <method name="xdr_utmparr():int"/>
    <method name="xdr_utmpidlearr():int"/>
    <method name="xdr_valdat(XDR*;valdat*):int"/>
    <method name="xdr_vector(XDR*;char*;unsigned int;unsigned int;int):int"/>
    <method name="xdr_void():int"/>
    <method name="xdr_wrapstring(XDR*;char**):int"/>
    <method name="xdr_writeargs(XDR*;writeargs*):int"/>
    <method name="xdr_x_passwd(XDR*;x_passwd*):int"/>
    <method name="xdr_ypbind_binding(XDR*;ypbind_binding*):int"/>
    <method name="xdr_ypbind_resp(XDR*;ypbind_resp*):int"/>
    <method name="xdr_ypbind_resptype(XDR*;ypbind_resptype*):int"/>
    <method name="xdr_ypbind_setdom(XDR*;ypbind_setdom*):int"/>
    <method name="xdr_ypmap_parms(XDR*;ypmap_parms*):int"/>
    <method name="xdr_ypmaplist(XDR*;ypmaplist*):int"/>
    <method name="xdr_yppasswd(XDR*;yppasswd*):int"/>
    <method name="xdr_yppush_status(XDR*;yppush_status*):int"/>
    <method name="xdr_yppushresp_xfr(XDR*;yppushresp_xfr*):int"/>
    <method name="xdr_ypreq_key(XDR*;ypreq_key*):int"/>
    <method name="xdr_ypreq_nokey(XDR*;ypreq_nokey*):int"/>
    <method name="xdr_ypreq_xfr(XDR*;ypreq_xfr*):int"/>
    <method name="xdr_ypreqtype(XDR*;ypreqtype*):int"/>
    <method name="xdr_yprequest(XDR*;yprequest*):int"/>
    <method name="xdr_ypresp_all(XDR*;ypresp_all*):int"/>
    <method name="xdr_ypresp_key_val(XDR*;ypresp_key_val*):int"/>
    <method name="xdr_ypresp_maplist(XDR*;ypresp_maplist*):int"/>
    <method name="xdr_ypresp_master(XDR*;ypresp_master*):int"/>
    <method name="xdr_ypresp_order(XDR*;ypresp_order*):int"/>
    <method name="xdr_ypresp_val(XDR*;ypresp_val*):int"/>
    <method name="xdr_ypresp_xfr(XDR*;ypresp_xfr*):int"/>
    <method name="xdr_ypresponse(XDR*;ypresponse*):int"/>
    <method name="xdr_ypresptype(XDR*;ypresptype*):int"/>
    <method name="xdr_ypstat(XDR*;ypstat*):int"/>
    <method name="xdr_ypxfrstat(XDR*;ypxfrstat*):int"/>
    <method name="xdrmem_create(XDR*;char*;unsigned int;enum xdr_op):void"/>
    <method name="xdrrec_create(XDR*;unsigned int;unsigned int;void*;(*)(void*;void*;int):int;(*)(void*;void*;int):int):void"/>
    <method name="xdrrec_endofrecord(XDR*;int):int"/>
    <method name="xdrrec_eof(XDR*):int"/>
    <method name="xdrrec_readbytes(XDR*;int;unsigned int):unsigned int"/>
    <method name="xdrrec_skiprecord(XDR*):int"/>
    <method name="xmlAllocParserInputBuffer(int):int"/>
    <method name="xmlCheckHTTPInput(int;int):int"/>
    <method name="xmlCtxtGetLastError(void*):int"/>
    <method name="xmlGetLastError():int"/>
    <method name="xmlNoNetExternalEntityLoader(const char*;const char*;int):int"/>
    <method name="xmlParserInputBufferCreateFd(int;int):int"/>
    <method name="xmlParserInputBufferCreateFile(FILE*;int):int"/>
    <method name="xmlParserInputBufferCreateFilename(const char*;int):int"/>
    <method name="xmlParserInputBufferCreateIO(int;int;void*;int):int"/>
    <method name="xmlParserInputBufferCreateMem(const char*;int;int):int"/>
    <method name="xmlParserInputBufferCreateStatic(const char*;int;int):int"/>
    <method name="xml_request_operation_processing_queue():dispatch_queue_t"/>
    <method name="xprt_register(SVCXPRT*):void"/>
    <method name="xprt_unregister(SVCXPRT*):void"/>
    <method name="y0(double):double"/>
    <method name="y1(double):double"/>
    <method name="yn(int;double):double"/>
    <method name="ypbindproc_domain_2(domainname*;CLIENT*):ypbind_resp*"/>
    <method name="ypbindproc_domain_2_svc(domainname*;struct svc_req*):ypbind_resp*"/>
    <method name="ypbindproc_null_2(void*;CLIENT*):void*"/>
    <method name="ypbindproc_null_2_svc(void*;struct svc_req*):void*"/>
    <method name="ypbindproc_setdom_2(ypbind_setdom*;CLIENT*):void*"/>
    <method name="ypbindproc_setdom_2_svc(ypbind_setdom*;struct svc_req*):void*"/>
    <method name="ypoldproc_domain_1(domainname*;CLIENT*):int*"/>
    <method name="ypoldproc_domain_1_svc(domainname*;struct svc_req*):int*"/>
    <method name="ypoldproc_domain_nonack_1(domainname*;CLIENT*):int*"/>
    <method name="ypoldproc_domain_nonack_1_svc(domainname*;struct svc_req*):int*"/>
    <method name="ypoldproc_first_1(yprequest*;CLIENT*):ypresponse*"/>
    <method name="ypoldproc_first_1_svc(yprequest*;struct svc_req*):ypresponse*"/>
    <method name="ypoldproc_get_1(yprequest*;CLIENT*):ypresponse*"/>
    <method name="ypoldproc_get_1_svc(yprequest*;struct svc_req*):ypresponse*"/>
    <method name="ypoldproc_match_1(yprequest*;CLIENT*):ypresponse*"/>
    <method name="ypoldproc_match_1_svc(yprequest*;struct svc_req*):ypresponse*"/>
    <method name="ypoldproc_next_1(yprequest*;CLIENT*):ypresponse*"/>
    <method name="ypoldproc_next_1_svc(yprequest*;struct svc_req*):ypresponse*"/>
    <method name="ypoldproc_null_1(void*;CLIENT*):void*"/>
    <method name="ypoldproc_null_1_svc(void*;struct svc_req*):void*"/>
    <method name="ypoldproc_poll_1(yprequest*;CLIENT*):ypresponse*"/>
    <method name="ypoldproc_poll_1_svc(yprequest*;struct svc_req*):ypresponse*"/>
    <method name="ypoldproc_pull_1(yprequest*;CLIENT*):ypresponse*"/>
    <method name="ypoldproc_pull_1_svc(yprequest*;struct svc_req*):ypresponse*"/>
    <method name="ypoldproc_push_1(yprequest*;CLIENT*):ypresponse*"/>
    <method name="ypoldproc_push_1_svc(yprequest*;struct svc_req*):ypresponse*"/>
    <method name="yppasswdproc_update_1(yppasswd*;CLIENT*):int*"/>
    <method name="yppasswdproc_update_1_svc(yppasswd*;struct svc_req*):int*"/>
    <method name="ypproc_all_2(ypreq_nokey*;CLIENT*):ypresp_all*"/>
    <method name="ypproc_all_2_svc(ypreq_nokey*;struct svc_req*):ypresp_all*"/>
    <method name="ypproc_clear_2(void*;CLIENT*):void*"/>
    <method name="ypproc_clear_2_svc(void*;struct svc_req*):void*"/>
    <method name="ypproc_domain_2(domainname*;CLIENT*):int*"/>
    <method name="ypproc_domain_2_svc(domainname*;struct svc_req*):int*"/>
    <method name="ypproc_domain_nonack_2(domainname*;CLIENT*):int*"/>
    <method name="ypproc_domain_nonack_2_svc(domainname*;struct svc_req*):int*"/>
    <method name="ypproc_first_2(ypreq_key*;CLIENT*):ypresp_key_val*"/>
    <method name="ypproc_first_2_svc(ypreq_key*;struct svc_req*):ypresp_key_val*"/>
    <method name="ypproc_maplist_2(domainname*;CLIENT*):ypresp_maplist*"/>
    <method name="ypproc_maplist_2_svc(domainname*;struct svc_req*):ypresp_maplist*"/>
    <method name="ypproc_master_2(ypreq_nokey*;CLIENT*):ypresp_master*"/>
    <method name="ypproc_master_2_svc(ypreq_nokey*;struct svc_req*):ypresp_master*"/>
    <method name="ypproc_match_2(ypreq_key*;CLIENT*):ypresp_val*"/>
    <method name="ypproc_match_2_svc(ypreq_key*;struct svc_req*):ypresp_val*"/>
    <method name="ypproc_next_2(ypreq_key*;CLIENT*):ypresp_key_val*"/>
    <method name="ypproc_next_2_svc(ypreq_key*;struct svc_req*):ypresp_key_val*"/>
    <method name="ypproc_null_2(void*;CLIENT*):void*"/>
    <method name="ypproc_null_2_svc(void*;struct svc_req*):void*"/>
    <method name="ypproc_order_2(ypreq_nokey*;CLIENT*):ypresp_order*"/>
    <method name="ypproc_order_2_svc(ypreq_nokey*;struct svc_req*):ypresp_order*"/>
    <method name="ypproc_xfr_2(ypreq_xfr*;CLIENT*):ypresp_xfr*"/>
    <method name="ypproc_xfr_2_svc(ypreq_xfr*;struct svc_req*):ypresp_xfr*"/>
    <method name="yppushproc_null_1(void*;CLIENT*):void*"/>
    <method name="yppushproc_null_1_svc(void*;struct svc_req*):void*"/>
    <method name="yppushproc_xfrresp_1(void*;CLIENT*):yppushresp_xfr*"/>
    <method name="yppushproc_xfrresp_1_svc(void*;struct svc_req*):yppushresp_xfr*"/>
    <method name="zError(int):const char*"/>
    <method name="zbdsqr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zcgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_complex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zcposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_complex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zdrscl_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgbbrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgbtf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgbtrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgebak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgebal_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgebd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgebrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgecon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeequ_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeequb_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgees_(char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zgeesx_(char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zgeev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgegs_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgegv_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgehd2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgehrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgelq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgelqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgels_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgelsd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgelss_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgelsx_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgelsy_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeql2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgeqlf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgeqp3_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeqpf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgeqr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgeqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgerfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgerq2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgerqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgesc2_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zgesdd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgesv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgesvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgetc2_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetf2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetri_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggbak_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggbal_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgges_(char*;char*;char*;__CLPK_L_fp;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zggesx_(char*;char*;char*;__CLPK_L_fp;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zggev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zggevx_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_logical*;__CLPK_integer*):int"/>
    <method name="zggglm_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgghrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgglse_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggqrf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggsvd_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zggsvp_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgtcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zgtrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgtsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgtsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zgttrf_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zgtts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhbev_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhbevd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbevx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbgst_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhbgv_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhbgvd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbgvx_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhbtrd_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhecon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zheequb_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zheev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zheevd_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zheevr_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zheevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegs2_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhegvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhegvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zherfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhesv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhesvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhetd2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhetf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhetrd_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhetrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhetri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhetrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhfrk_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zhgeqz_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhpev_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpevd_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpevx_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpgst_(__CLPK_integer*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhpgv_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpgvd_(__CLPK_integer*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpgvx_(__CLPK_integer*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhpsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhpsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zhptrd_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhptrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhptri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zhptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhsein_(char*;char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zhseqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zip64FlushWriteBuffer(zip64_internal*):int"/>
    <method name="zip64local_SearchCentralDir(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="zip64local_SearchCentralDir64(const zlib_filefunc64_32_def*;voidpf):ZPOS64_T"/>
    <method name="zip64local_TmzDateToDosDate(const tm_zip*):uLong"/>
    <method name="zip64local_getByte(const zlib_filefunc64_32_def*;voidpf;int*):int"/>
    <method name="zip64local_getLong(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="zip64local_getLong64(const zlib_filefunc64_32_def*;voidpf;ZPOS64_T*):int"/>
    <method name="zip64local_getShort(const zlib_filefunc64_32_def*;voidpf;uLong*):int"/>
    <method name="zip64local_putValue(const zlib_filefunc64_32_def*;voidpf;ZPOS64_T;int):int"/>
    <method name="zip64local_putValue_inmemory(void*;ZPOS64_T;int):void"/>
    <method name="zipClose(zipFile;const char*):int"/>
    <method name="zipCloseFileInZip(zipFile):int"/>
    <method name="zipCloseFileInZipRaw(zipFile;uLong;uLong):int"/>
    <method name="zipCloseFileInZipRaw64(zipFile;ZPOS64_T;uLong):int"/>
    <method name="zipOpen(const char*;int):zipFile"/>
    <method name="zipOpen2(const char*;int;zipcharpc*;zlib_filefunc_def*):zipFile"/>
    <method name="zipOpen2_64(const void*;int;zipcharpc*;zlib_filefunc64_def*):zipFile"/>
    <method name="zipOpen3(const void*;int;zipcharpc*;zlib_filefunc64_32_def*):zipFile"/>
    <method name="zipOpen64(const void*;int):zipFile"/>
    <method name="zipOpenNewFileInZip(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int):int"/>
    <method name="zipOpenNewFileInZip2(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int):int"/>
    <method name="zipOpenNewFileInZip2_64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int):int"/>
    <method name="zipOpenNewFileInZip3(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong):int"/>
    <method name="zipOpenNewFileInZip3_64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong;int):int"/>
    <method name="zipOpenNewFileInZip4(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong;uLong;uLong):int"/>
    <method name="zipOpenNewFileInZip4_64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int;int;int;int;const char*;uLong;uLong;uLong;int):int"/>
    <method name="zipOpenNewFileInZip64(zipFile;const char*;const zip_fileinfo*;const void*;uInt;const void*;uInt;const char*;int;int;int):int"/>
    <method name="zipRemoveExtraInfoBlock(char*;int*;short):int"/>
    <method name="zipWriteInFileInZip(zipFile;const void*;unsigned int):int"/>
    <method name="zlabrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacgv_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacn2_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlacon_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlacp2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacpy_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlacrm_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zlacrt_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zladiv_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):void"/>
    <method name="zlaed0_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaed7_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaed8_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlaein_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlaesy_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlaev2_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zlag2c_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlags2_(__CLPK_logical*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zlagtm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlahef_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlahqr_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlahr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlahrd_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaic1_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlals0_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlalsa_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlalsd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlangb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlange_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlangt_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):__CLPK_doublereal"/>
    <method name="zlanhb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhe_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhf_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhp_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanhs_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlanht_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*):__CLPK_doublereal"/>
    <method name="zlansb_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlansp_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlansy_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlantb_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlantp_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlantr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):__CLPK_doublereal"/>
    <method name="zlapll_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zlapmt_(__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaqgb_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqge_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqhb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqhe_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqhp_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqp2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zlaqps_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqr0_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaqr1_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlaqr2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqr3_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqr4_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaqr5_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlaqsb_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqsp_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlaqsy_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;char*):int"/>
    <method name="zlar1v_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="zlar2v_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarcm_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*):int"/>
    <method name="zlarf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarfb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarfg_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarfp_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarft_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarfx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlargv_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlarnv_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarrv_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlarscl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlartg_(__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlartv_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarz_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlarzb_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlarzt_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlascl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlascl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlaset_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlasr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlassq_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*):int"/>
    <method name="zlaswp_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlasyf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlat2c_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_complex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlatbs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlatdf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlatps_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlatrd_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zlatrs_(char*;char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zlatrz_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*):int"/>
    <method name="zlatzm_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zlauu2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlauum_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zlibCompileFlags():uLong"/>
    <method name="zlibVersion():const char*"/>
    <method name="zopen(const char*;const char*;int):FILE*"/>
    <method name="zpbcon_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbequ_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbstf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpbtf2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbtrf_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpbtrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpftrf_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpftri_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpftrs_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpocon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpoequ_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpoequb_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zporfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zposv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zposvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;char*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpotf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpotrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpotri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpotrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zppcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zppequ_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zppsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zppsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;char*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpptrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpptri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zpstf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpstrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zptcon_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zptrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zptsv_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zptsvx_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zpttrf_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zpttrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zptts2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zrot_(__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*):int"/>
    <method name="zspcon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zspmv_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zspr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*):int"/>
    <method name="zsprfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zspsv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zspsvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsptrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsptri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsptrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstedc_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstegr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstein_(__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zstemr_(char*;char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_logical*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsteqr_(char*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsycon_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsyequb_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsymv_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsyr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsyrfs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsysv_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsysvx_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="zsytf2_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsytrf_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zsytri_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zsytrs_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztbcon_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztbrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztbtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztfsm_(char*;char*;char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztftri_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztfttp_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztfttr_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztgex2_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgexc_(__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsen_(__CLPK_integer*;__CLPK_logical*;__CLPK_logical*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsja_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztgsy2_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztgsyl_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztpcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztprfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztptri_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztptrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztpttf_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztpttr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrcon_(char*;char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrevc_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrexc_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrrfs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrsen_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrsna_(char*;char*;__CLPK_logical*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_doublereal*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrsyl_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublereal*;__CLPK_integer*):int"/>
    <method name="ztrti2_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrtri_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrtrs_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="ztrttf_(char*;char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztrttp_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztzrqf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="ztzrzf_(__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zung2l_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zung2r_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zungbr_(char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunghr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungl2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunglq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungql_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungqr_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungr2_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zungrq_(__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zungtr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunm2l_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunm2r_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmbr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmhr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunml2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmlq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmql_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmqr_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmr2_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmr3_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zunmrq_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmrz_(char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zunmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_integer*):int"/>
    <method name="zupgtr_(char*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
    <method name="zupmtr_(char*;char*;char*;__CLPK_integer*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_doublecomplex*;__CLPK_integer*;__CLPK_doublecomplex*;__CLPK_integer*):int"/>
  </methods>
</Exclusions>